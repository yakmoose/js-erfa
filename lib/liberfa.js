// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret; return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8, ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module["UTF16ToString"] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF16"] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module["lengthBytesUTF16"] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module["UTF32ToString"] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF32"] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module["lengthBytesUTF32"] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer;
buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 281904;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([168,7,0,0,1,0,0,0,206,225,90,237,97,175,246,63,169,7,0,0,1,0,0,0,226,143,162,206,220,195,246,63,169,7,0,0,8,0,0,0,22,195,213,1,16,247,245,63,170,7,0,0,1,0,0,0,161,245,240,101,162,136,253,63,171,7,0,0,11,0,0,0,59,143,138,255,59,34,255,63,172,7,0,0,1,0,0,0,207,78,6,71,201,235,9,64,172,7,0,0,4,0,0,0,155,27,211,19,150,184,10,64,172,7,0,0,9,0,0,0,104,232,159,224,98,133,11,64,173,7,0,0,1,0,0,0,53,181,108,173,47,82,12,64,173,7,0,0,3,0,0,0,2,130,57,122,252,30,13,64,173,7,0,0,7,0,0,0,207,78,6,71,201,235,13,64,173,7,0,0,9,0,0,0,155,27,211,19,150,184,14,64,174,7,0,0,1,0,0,0,113,90,240,162,175,64,17,64,176,7,0,0,2,0,0,0,10,244,137,60,73,218,16,64,180,7,0,0,1,0,0,0,0,0,0,0,0,0,36,64,180,7,0,0,7,0,0,0,0,0,0,0,0,0,38,64,181,7,0,0,1,0,0,0,0,0,0,0,0,0,40,64,182,7,0,0,1,0,0,0,0,0,0,0,0,0,42,64,183,7,0,0,1,0,0,0,0,0,0,0,0,0,44,64,184,7,0,0,1,0,0,0,0,0,0,0,0,0,46,64,185,7,0,0,1,0,0,0,0,0,0,0,0,0,48,64,186,7,0,0,1,0,0,0,0,0,0,0,0,0,49,64,187,7,0,0,1,0,0,0,0,0,0,0,0,0,50,64,188,7,0,0,1,0,0,0,0,0,0,0,0,0,51,64,189,7,0,0,7,0,0,0,0,0,0,0,0,0,52,64,190,7,0,0,7,0,0,0,0,0,0,0,0,0,53,64,191,7,0,0,7,0,0,0,0,0,0,0,0,0,54,64,193,7,0,0,7,0,0,0,0,0,0,0,0,0,55,64,196,7,0,0,1,0,0,0,0,0,0,0,0,0,56,64,198,7,0,0,1,0,0,0,0,0,0,0,0,0,57,64,199,7,0,0,1,0,0,0,0,0,0,0,0,0,58,64,200,7,0,0,7,0,0,0,0,0,0,0,0,0,59,64,201,7,0,0,7,0,0,0,0,0,0,0,0,0,60,64,202,7,0,0,7,0,0,0,0,0,0,0,0,0,61,64,204,7,0,0,1,0,0,0,0,0,0,0,0,0,62,64,205,7,0,0,7,0,0,0,0,0,0,0,0,0,63,64,207,7,0,0,1,0,0,0,0,0,0,0,0,0,64,64,214,7,0,0,1,0,0,0,0,0,0,0,0,128,64,64,217,7,0,0,1,0,0,0,0,0,0,0,0,0,65,64,220,7,0,0,7,0,0,0,0,0,0,0,0,128,65,64,223,7,0,0,7,0,0,0,0,0,0,0,0,0,66,64,0,0,0,0,128,54,226,64,167,64,102,103,209,59,85,63,0,0,0,0,128,54,226,64,167,64,102,103,209,59,85,63,0,0,0,0,128,54,226,64,167,64,102,103,209,59,85,63,0,0,0,0,32,100,226,64,42,90,20,209,10,103,82,63,0,0,0,0,32,100,226,64,42,90,20,209,10,103,82,63,0,0,0,0,32,237,226,64,167,64,102,103,209,59,85,63,0,0,0,0,32,237,226,64,167,64,102,103,209,59,85,63,0,0,0,0,32,237,226,64,167,64,102,103,209,59,85,63,0,0,0,0,32,237,226,64,167,64,102,103,209,59,85,63,0,0,0,0,32,237,226,64,167,64,102,103,209,59,85,63,0,0,0,0,32,237,226,64,167,64,102,103,209,59,85,63,0,0,0,0,32,237,226,64,167,64,102,103,209,59,85,63,0,0,0,0,192,26,227,64,167,64,102,103,209,59,101,63,0,0,0,0,192,26,227,64,167,64,102,103,209,59,101,63,81,194,163,196,152,36,91,63,191,174,231,106,19,139,184,64,161,43,83,196,208,245,24,64,92,48,122,224,164,129,247,62,87,13,209,135,98,121,182,64,177,40,196,218,26,48,17,64,156,43,92,135,46,6,237,62,229,176,231,106,19,139,200,64,126,141,69,79,161,201,24,64,58,128,112,65,215,1,212,62,159,45,181,24,135,141,128,64,204,50,203,107,19,113,220,63,26,60,165,128,156,157,211,62,39,234,98,217,198,181,183,64,45,21,157,42,180,21,16,64,110,70,34,203,61,238,194,62,248,146,152,48,146,169,106,64,106,65,9,226,37,44,22,64,23,7,235,24,142,108,188,62,223,35,71,172,88,47,12,192,219,223,42,102,188,25,20,64,90,139,169,32,68,22,186,62,229,190,238,87,28,249,242,64,119,135,243,244,58,203,20,64,59,203,201,83,251,107,181,62,178,137,77,93,107,180,190,64,189,152,0,216,141,244,23,64,110,99,59,22,134,5,180,62,163,103,186,164,177,103,180,64,45,30,164,200,214,50,13,64,226,145,249,129,69,182,178,62,253,141,77,93,107,180,174,64,123,103,94,85,144,195,246,63,10,6,194,72,255,165,170,62,87,13,209,135,98,121,198,64,23,78,230,224,24,148,2,64,170,194,64,18,115,0,158,62,208,191,184,175,94,76,58,64,236,53,223,182,38,237,12,64,91,123,219,58,200,52,157,62,164,197,101,81,98,226,120,192,48,106,158,243,184,101,17,64,4,161,150,115,157,36,164,62,203,107,151,201,95,165,152,64,153,154,151,210,25,109,5,64,81,72,2,35,160,171,160,62,226,178,15,84,75,64,184,64,254,146,244,51,108,201,22,64,203,106,12,52,86,81,160,62,101,82,209,69,237,252,182,64,222,175,111,24,230,163,224,63,175,253,132,32,112,4,157,62,100,247,254,181,5,178,82,64,43,75,172,64,184,124,3,64,77,144,165,102,111,114,159,62,161,16,72,92,241,100,184,64,201,204,124,60,49,119,23,64,178,186,4,114,54,51,153,62,166,157,12,161,141,131,181,64,100,76,196,210,245,105,16,64,191,214,218,34,43,80,144,62,203,136,216,78,46,60,136,192,11,87,81,205,246,54,13,64,135,190,175,100,46,71,135,62,34,196,45,144,78,104,210,64,56,49,160,238,110,157,24,64,129,29,5,184,70,246,142,62,144,37,222,71,122,224,182,64,236,117,174,207,108,24,19,64,205,144,163,144,177,88,139,62,11,94,92,249,58,130,199,64,35,74,14,231,0,86,17,64,19,203,46,166,145,81,131,62,164,197,101,81,98,226,136,192,191,115,123,139,127,212,23,64,185,109,92,122,242,89,133,62,125,186,69,22,138,112,197,64,158,101,42,133,191,61,254,63,201,156,216,113,114,26,128,62,205,52,209,79,7,17,67,64,5,255,73,230,210,52,18,64,201,148,68,247,159,239,127,62,11,246,186,32,199,110,181,64,145,20,165,69,252,161,254,63,115,242,186,164,180,43,127,62,113,28,181,24,135,141,144,64,224,152,38,235,190,243,235,63,76,244,230,184,34,131,130,62,88,40,250,133,80,7,199,64,28,246,219,212,201,44,242,63,201,30,38,60,28,103,122,62,101,149,164,251,160,224,163,64,69,133,163,17,87,193,183,63,80,74,215,206,80,88,123,62,216,219,165,142,36,197,181,192,209,154,198,198,33,240,23,64,164,77,135,0,212,132,117,62,165,151,70,3,240,197,105,64,22,97,103,99,85,195,0,64,142,105,82,168,41,97,117,62,59,198,163,193,0,86,178,64,210,108,25,206,7,152,7,64,137,247,221,233,1,207,112,62,24,155,167,81,128,198,52,64,129,106,38,89,51,60,5,64,223,25,114,52,68,35,116,62,176,86,209,69,237,252,166,64,15,13,2,96,121,236,19,64,201,42,52,1,84,73,113,62,124,125,102,118,69,114,182,64,82,21,151,6,37,124,244,63,57,251,158,194,67,33,113,62,49,157,59,153,127,128,182,64,223,88,110,110,238,171,16,64,240,164,152,154,215,202,105,62,176,220,119,177,84,196,160,64,139,141,17,58,252,238,247,63,171,177,140,161,85,248,105,62,46,137,131,233,115,109,99,64,215,15,119,22,57,3,2,64,173,43,242,48,117,151,111,62,248,146,152,48,146,169,122,64,91,247,150,63,205,91,19,64,27,232,129,180,235,253,104,62,45,121,212,73,202,94,239,191,187,165,91,202,135,125,237,63,247,209,115,184,206,16,109,62,238,200,220,229,9,219,208,64,41,229,128,32,234,73,11,64,17,195,151,103,236,196,102,62,48,35,125,89,246,131,184,64,88,234,218,144,223,244,6,64,58,62,218,206,216,146,101,62,95,106,63,170,69,116,28,192,187,20,112,50,30,135,12,64,183,227,140,97,81,161,99,62,176,153,164,251,160,224,179,64,8,54,73,84,241,152,10,64,124,138,108,210,223,225,101,62,153,78,37,34,109,32,200,64,230,65,28,25,27,218,15,64,68,93,49,223,123,153,99,62,202,78,86,68,145,14,137,64,212,246,38,187,214,254,24,64,248,125,117,120,14,215,99,62,203,107,151,201,95,165,168,64,74,154,35,81,134,73,20,64,54,184,141,150,10,241,102,62,101,239,29,25,69,198,131,64,225,36,91,202,234,225,22,64,131,34,72,224,102,217,102,62,161,237,99,124,69,167,3,65,210,69,221,227,89,85,244,63,104,248,212,97,135,187,101,62,178,137,77,93,107,180,206,64,142,148,207,32,117,95,4,64,145,118,128,207,166,83,94,62,164,55,253,85,153,142,184,192,45,81,159,223,85,71,20,64,100,114,115,57,11,249,97,62,152,94,248,199,169,174,183,64,22,78,30,139,119,148,16,64,253,64,106,128,21,184,98,62,202,174,96,141,158,84,128,64,10,194,112,9,27,215,20,64,178,223,108,169,62,106,97,62,2,122,205,234,227,188,183,64,161,160,91,130,104,250,231,63,75,100,123,205,183,56,96,62,152,120,114,147,229,172,187,64,141,170,79,7,236,29,11,64,33,242,52,169,90,103,95,62,180,67,64,33,107,112,241,192,115,114,160,54,147,187,16,64,11,237,207,207,48,0,98,62,82,178,217,167,225,110,194,64,31,216,165,209,218,60,3,64,80,188,111,229,46,104,97,62,223,254,92,244,177,61,193,64,224,172,58,11,120,42,22,64,225,252,181,43,143,153,93,62,219,37,210,127,141,135,184,64,35,206,240,138,211,41,20,64,171,35,37,184,51,8,96,62,77,236,98,217,198,181,199,64,211,70,97,86,169,82,252,63,54,200,12,16,58,43,88,62,163,103,186,164,177,103,196,64,113,16,152,122,34,95,247,63,113,208,151,101,30,123,86,62,177,208,209,225,158,118,192,64,109,95,198,104,171,223,228,63,60,123,130,158,17,210,85,62,79,149,239,25,193,55,122,64,56,85,135,116,41,226,13,64,71,75,105,193,94,165,90,62,105,101,12,189,201,169,146,192,5,89,81,174,233,100,241,63,229,75,216,224,210,13,91,62,248,71,150,206,16,80,155,64,4,212,148,151,14,55,7,64,94,181,17,110,96,74,87,62,94,158,26,100,191,159,203,64,188,181,195,148,133,207,23,64,207,170,219,208,234,249,82,62,115,84,254,77,196,156,186,64,40,173,232,164,49,125,9,64,210,217,41,115,43,59,88,62,4,183,55,61,131,245,183,64,175,122,235,188,192,118,10,64,200,177,235,15,167,88,81,62,223,58,199,140,164,242,195,64,135,151,226,213,50,76,245,63,17,165,211,176,114,173,79,62,143,214,60,58,120,23,149,64,228,194,225,2,89,60,17,64,254,229,211,25,7,32,81,62,75,142,234,93,52,141,107,192,99,128,225,232,108,5,16,64,238,91,202,81,230,38,81,62,24,216,129,120,187,97,162,192,68,253,208,250,203,148,24,64,123,47,0,76,45,139,78,62,91,114,162,30,118,95,209,64,85,169,133,4,31,214,0,64,58,30,220,219,121,30,83,62,220,204,45,28,4,83,82,64,122,154,26,8,204,206,11,64,118,215,11,52,182,91,77,62,23,138,9,164,111,198,128,192,1,118,107,34,254,226,23,64,167,30,0,22,47,165,73,62,189,64,141,158,23,95,191,64,187,102,176,177,100,109,0,64,202,175,183,91,103,191,78,62,148,32,23,173,157,86,208,64,152,177,87,14,227,32,8,64,194,72,115,148,14,195,74,62,22,33,71,3,240,197,89,64,83,170,190,159,140,204,251,63,135,0,236,88,108,138,71,62,224,176,55,168,50,185,12,64,26,161,83,27,146,146,1,64,33,217,185,236,155,48,80,62,153,118,80,26,195,48,211,64,215,1,74,34,127,193,15,64,106,36,207,237,66,83,70,62,76,202,198,75,191,189,141,64,20,58,18,220,6,223,22,64,120,117,179,198,253,35,73,62,24,216,129,120,187,97,178,192,76,73,70,54,166,59,5,64,51,62,61,247,152,114,70,62,106,181,72,89,151,231,182,64,103,77,135,169,136,158,254,63,127,188,249,154,247,171,74,62,86,61,142,214,122,82,178,64,229,12,192,100,181,239,18,64,88,158,72,6,245,112,73,62,248,96,89,182,45,11,182,64,40,207,21,213,189,244,21,64,211,81,85,198,101,125,66,62,101,15,254,143,57,25,170,64,205,56,226,208,40,75,13,64,130,83,244,22,67,245,72,62,106,79,173,228,153,0,180,64,85,145,197,142,170,116,19,64,244,243,186,79,27,63,71,62,30,197,19,35,142,76,129,64,39,252,130,120,133,247,234,63,44,98,247,18,47,156,66,62,82,190,185,34,21,226,96,192,216,96,30,136,229,88,10,64,35,47,179,152,55,101,69,62,212,128,255,181,5,178,98,64,245,96,237,80,150,123,19,64,123,80,3,41,126,43,69,62,127,103,151,201,95,165,184,64,230,229,52,52,51,253,240,63,193,83,121,171,129,23,65,62,193,17,30,25,69,198,115,64,215,225,128,71,104,184,3,64,70,50,24,229,251,175,69,62,44,96,35,197,191,189,113,64,63,240,122,46,40,19,255,63,91,205,150,168,53,178,62,62,26,2,72,185,80,87,110,192,137,255,176,175,185,74,13,64,88,152,160,217,234,29,64,62,126,247,36,182,206,110,180,64,239,235,212,29,10,175,19,64,7,190,150,29,158,223,65,62,101,82,209,69,237,252,198,64,131,33,26,249,150,171,243,63,210,10,172,201,171,21,64,62,75,250,55,12,199,112,184,192,19,246,24,165,126,68,13,64,74,84,17,68,54,31,68,62,228,143,121,51,243,74,2,65,21,25,62,158,109,144,229,63,68,151,196,104,57,145,62,62,155,78,229,198,138,3,67,64,239,177,226,190,79,45,21,64,103,145,45,114,110,223,64,62,184,130,92,88,0,196,199,64,96,118,165,30,207,210,224,63,10,94,141,220,120,37,62,62,56,110,168,77,207,62,184,64,228,154,101,195,88,206,234,63,146,98,126,117,164,2,58,62,165,37,84,69,204,220,141,64,110,117,92,52,52,199,16,64,27,200,110,209,222,104,65,62,210,21,45,127,252,27,202,64,179,90,109,185,139,88,14,64,149,35,120,17,208,232,60,62,211,240,195,199,74,18,182,64,162,235,217,171,67,143,22,64,61,112,124,135,158,125,63,62,188,223,46,28,4,83,66,64,195,119,96,213,96,103,189,63,41,60,165,179,125,87,59,62,135,32,141,222,79,68,176,64,99,125,41,90,190,24,2,64,7,128,233,99,115,116,61,62,200,215,79,147,148,96,180,64,17,174,24,95,200,139,228,63,19,255,37,93,133,183,61,62,101,15,254,143,57,25,186,64,55,170,31,16,242,18,24,64,51,36,231,48,68,81,61,62,99,228,118,121,241,208,189,64,53,186,217,216,82,171,11,64,20,64,39,45,53,204,54,62,210,214,101,81,98,226,152,192,225,51,91,119,200,0,4,64,182,159,55,123,28,227,53,62,56,36,70,51,218,53,198,64,33,64,177,14,122,96,4,64,244,211,188,92,188,202,52,62,2,20,50,118,230,213,180,64,250,202,225,101,22,249,219,63,92,114,235,81,121,249,55,62,239,209,85,25,175,78,183,64,175,205,79,60,42,248,1,64,62,170,208,64,82,19,59,62,1,138,160,144,32,75,199,64,9,224,244,155,122,26,4,64,68,180,110,69,19,92,60,62,88,40,250,133,80,7,215,64,187,108,4,122,146,146,21,64,49,157,65,78,204,0,54,62,7,162,74,116,102,192,247,191,162,255,151,203,67,255,7,64,28,154,22,177,135,246,51,62,64,179,15,165,74,212,152,64,196,242,99,163,222,105,244,63,183,81,225,103,102,252,53,62,84,207,51,10,127,38,185,64,226,165,92,96,221,200,247,63,170,61,165,94,228,106,51,62,176,220,119,177,84,196,176,64,10,130,95,212,2,144,24,64,150,171,34,222,57,101,56,62,68,12,209,135,98,121,214,64,116,182,214,208,51,59,18,64,157,132,20,172,30,146,55,62,221,150,86,176,126,165,11,192,172,156,78,150,128,54,183,63,108,16,205,147,64,2,50,62,9,136,96,84,203,66,188,64,251,245,211,23,243,121,19,64,54,210,227,92,95,18,48,62,116,51,146,243,172,70,188,64,19,216,90,103,149,196,18,64,74,191,17,52,198,208,49,62,219,4,234,93,52,141,91,192,2,141,60,138,31,33,8,64,127,153,167,145,19,142,51,62,106,197,27,255,211,117,198,64,77,220,95,122,81,56,22,64,78,150,8,150,207,2,53,62,59,44,63,54,254,60,181,64,26,249,145,98,77,155,247,63,216,20,74,206,108,94,49,62,140,140,49,215,7,124,178,64,177,137,19,50,108,97,246,63,52,237,146,205,93,226,49,62,208,176,123,95,175,101,200,64,11,146,108,229,141,154,22,64,22,144,120,172,198,173,50,62,30,83,134,16,241,124,198,64,133,111,128,234,54,116,1,64,36,222,8,111,252,212,48,62,176,223,151,99,2,120,200,64,234,67,66,84,20,75,23,64,61,70,125,103,190,224,42,62,174,43,74,47,165,180,186,64,82,114,104,64,166,125,111,63,39,188,172,231,1,134,49,62,217,191,194,52,153,146,187,192,245,250,53,135,219,133,13,64,123,15,2,89,206,22,44,62,205,52,209,79,7,17,83,64,71,149,46,235,104,70,248,63,221,121,147,41,234,95,41,62,209,44,39,166,36,139,184,64,104,104,237,202,239,201,17,64,62,99,39,68,152,171,40,62,67,213,44,243,253,114,60,64,88,111,65,167,1,138,242,63,229,182,216,208,98,191,40,62,136,211,134,25,3,255,134,64,50,171,119,184,29,90,214,63,34,99,179,229,152,42,44,62,1,154,115,54,93,217,182,64,65,69,13,90,211,146,19,64,238,100,198,148,117,35,47,62,140,247,118,90,199,65,184,64,15,78,202,248,133,148,247,63,148,42,37,40,204,103,42,62,70,248,172,165,103,169,141,64,69,191,225,254,86,190,20,64,136,22,233,30,74,214,39,62,239,22,47,51,217,94,195,64,25,78,62,226,252,122,240,63,42,18,166,147,157,186,38,62,11,246,186,32,199,110,197,64,107,219,96,67,152,88,15,64,172,154,75,33,124,30,38,62,229,176,231,106,19,139,216,64,57,252,117,116,74,112,24,64,132,247,67,214,148,16,46,62,123,230,8,192,87,113,112,64,143,9,122,109,11,70,254,63,168,237,83,223,82,137,39,62,200,27,104,87,226,227,209,64,67,184,52,68,54,72,17,64,157,61,107,175,100,42,37,62,106,41,50,208,27,72,105,64,23,125,33,190,245,202,18,64,243,33,19,112,114,177,36,62,147,5,210,25,166,87,4,64,13,72,235,61,207,76,21,64,149,113,206,36,134,207,44,62,144,209,189,211,184,52,246,192,234,72,114,28,31,21,255,63,105,121,210,23,245,184,35,62,87,115,108,252,95,96,185,64,182,115,151,77,75,63,20,64,90,141,154,194,119,201,41,62,172,6,112,153,222,28,184,64,97,39,34,231,240,97,6,64,53,9,56,192,69,129,43,62,5,217,163,241,221,221,218,64,40,167,158,78,119,3,225,63,221,121,147,41,234,95,41,62,249,52,168,47,2,139,184,192,12,208,154,69,70,34,18,64,141,224,138,61,77,54,36,62,58,110,114,164,45,255,131,64,7,101,122,191,90,224,13,64,9,244,145,214,218,159,36,62,78,238,162,232,98,164,207,64,128,181,238,15,41,216,4,64,14,18,50,53,158,57,42,62,53,30,230,131,170,117,12,65,71,248,126,109,116,59,8,64,157,203,189,168,216,249,41,62,163,28,217,160,110,85,244,64,102,201,200,203,45,216,2,64,151,15,118,183,205,151,40,62,150,59,64,171,139,228,208,64,45,92,157,54,191,246,20,64,186,5,134,192,139,16,34,62,191,107,20,181,95,167,187,192,223,211,182,16,205,6,23,64,150,129,35,190,89,200,35,62,209,57,157,142,205,129,244,64,169,33,20,213,7,28,0,64,150,129,35,190,89,200,35,62,220,255,182,29,109,166,209,64,190,41,48,141,244,108,241,63,64,1,207,214,223,115,36,62,144,72,100,234,49,222,79,64,108,162,128,1,69,75,232,63,13,132,223,59,42,106,37,62,68,203,244,42,43,242,184,64,4,18,28,176,14,164,228,63,41,203,252,150,227,82,36,62,184,142,27,197,12,117,15,64,134,94,43,19,17,221,24,64,133,192,239,114,174,161,34,62,204,159,12,161,141,131,197,64,31,56,199,182,149,97,19,64,20,93,209,9,15,151,36,62,171,199,224,85,117,99,184,64,182,78,221,14,109,121,14,64,223,208,145,191,119,192,34,62,130,142,233,24,230,41,146,64,10,76,139,32,236,183,24,64,141,224,138,61,77,54,36,62,75,85,175,98,109,102,184,64,14,89,15,37,123,32,19,64,179,44,148,242,166,227,34,62,178,108,141,216,156,186,110,192,82,26,151,149,25,211,23,64,119,198,93,240,56,180,29,62,172,0,195,24,93,108,174,64,80,119,216,35,88,61,244,63,178,129,151,28,89,73,32,62,75,250,55,12,199,112,168,192,215,40,215,83,44,168,19,64,108,94,35,167,246,232,33,62,235,100,138,232,0,149,65,64,20,77,129,123,135,123,246,63,83,96,170,180,210,98,33,62,17,168,69,151,40,188,204,64,133,106,161,105,43,4,6,64,76,34,96,35,104,215,29,62,154,62,82,124,48,146,184,64,236,38,218,80,143,31,21,64,225,152,56,114,159,37,35,62,164,52,112,71,237,184,126,64,116,154,185,75,216,34,249,63,176,84,152,166,171,133,27,62,228,121,186,132,21,245,203,64,249,118,196,129,141,208,16,64,23,66,34,153,16,199,34,62,172,88,234,195,140,110,124,64,148,119,125,2,2,111,246,63,111,167,199,15,140,75,32,62,234,99,11,79,246,244,213,64,88,46,215,127,246,171,16,64,105,20,122,84,111,90,31,62,25,200,42,218,133,53,173,192,21,75,153,237,109,119,225,63,55,54,55,54,243,68,32,62,6,221,10,211,18,113,144,64,65,108,68,139,199,68,23,64,16,247,130,196,159,105,24,62,225,86,78,54,246,90,52,64,188,150,154,129,237,91,3,64,216,33,159,17,115,48,24,62,106,2,251,158,24,116,197,64,84,131,208,68,79,219,5,64,240,144,192,32,49,187,31,62,59,44,63,54,254,60,197,64,190,223,5,157,82,58,7,64,181,30,58,197,174,229,23,62,102,77,148,147,248,221,192,192,146,234,59,191,40,1,227,63,69,60,25,18,125,216,23,62,223,35,71,172,88,47,28,192,79,69,247,154,136,168,242,63,59,168,213,212,118,24,31,62,96,122,195,233,192,177,245,192,136,37,123,10,212,48,223,63,106,192,123,20,175,32,22,62,59,72,191,229,250,26,159,192,65,204,144,240,222,77,15,64,184,103,222,45,68,72,22,62,177,181,150,192,206,253,214,64,227,21,22,73,172,130,8,64,232,155,41,96,100,239,22,62,195,116,97,113,182,169,112,192,142,77,240,34,83,247,15,64,135,178,149,69,182,163,23,62,144,114,144,141,251,108,197,64,84,251,144,145,149,156,20,64,32,126,98,86,151,250,29,62,243,123,208,204,252,209,13,65,150,32,15,188,219,2,13,64,46,48,70,242,96,84,28,62,197,138,77,93,107,180,222,64,148,24,62,1,152,59,255,63,172,125,161,68,162,83,24,62,12,45,232,6,197,4,194,64,53,220,16,123,82,252,19,64,124,2,173,21,200,68,21,62,78,110,27,147,53,196,178,64,88,183,96,250,117,3,22,64,121,0,178,169,236,73,25,62,182,169,150,1,233,238,177,64,59,21,158,7,223,168,16,64,118,170,184,253,80,21,20,62,174,110,29,229,88,152,183,64,183,133,114,152,235,93,23,64,63,86,210,0,146,217,17,62,191,72,76,246,21,164,181,64,244,175,112,136,116,40,6,64,127,4,168,129,163,63,17,62,107,225,246,39,136,85,101,192,50,51,211,192,6,41,232,63,127,146,250,122,23,15,22,62,222,199,47,14,180,167,196,64,133,132,250,38,229,57,21,64,160,205,184,20,180,244,21,62,84,162,92,130,2,244,81,64,99,238,227,51,156,218,18,64,53,123,229,198,209,177,22,62,176,48,10,35,85,200,209,64,107,52,2,239,185,255,4,64,184,103,222,45,68,72,22,62,85,237,233,22,25,187,212,64,97,113,251,143,147,124,216,63,145,70,217,130,188,99,16,62,27,96,149,116,24,138,184,64,0,4,215,213,23,59,236,63,250,150,177,100,195,171,19,62,219,182,95,38,187,170,183,64,247,122,77,200,52,182,242,63,136,165,64,2,176,209,16,62,154,216,182,7,51,171,181,64,6,94,238,18,35,203,21,64,92,1,67,53,223,244,16,62,36,7,150,234,76,118,184,192,115,62,25,60,124,64,5,64,21,122,123,230,232,97,18,62,43,176,12,225,236,226,2,193,251,201,14,173,242,61,253,63,70,47,196,206,118,6,17,62,202,81,14,211,29,93,178,64,4,39,59,51,74,140,17,64,195,137,116,100,190,215,19,62,95,106,63,170,69,116,44,192,12,30,166,125,115,87,8,64,208,186,90,74,26,52,20,62,142,210,152,85,143,80,113,64,148,238,106,150,36,175,10,64,224,207,140,213,133,148,14,62,183,75,47,114,2,46,203,64,217,219,104,43,239,103,22,64,34,70,9,9,191,95,14,62,203,136,216,78,46,60,152,192,174,42,61,203,218,107,241,63,121,142,4,163,96,25,14,62,230,50,160,36,130,153,179,64,60,174,143,76,92,194,15,64,121,71,91,166,166,177,11,62,62,214,208,169,59,131,205,64,25,91,251,71,78,146,20,64,227,209,135,65,97,143,10,62,103,192,43,18,233,40,176,192,235,28,226,163,238,152,150,63,110,138,29,51,178,128,18,62,197,69,164,92,80,229,101,64,19,188,119,141,195,132,253,63,145,70,217,130,188,99,16,62,175,1,58,97,14,140,184,192,33,65,66,171,203,253,238,63,110,151,114,118,184,82,9,62,39,132,199,100,201,206,180,64,17,227,101,232,0,178,19,64,205,70,178,215,178,8,13,62,162,144,65,71,99,27,123,192,220,80,79,36,58,255,18,64,234,241,34,12,0,36,12,62,198,41,236,194,30,235,192,64,78,252,240,170,9,247,23,64,128,103,246,112,69,70,13,62,82,156,244,213,77,226,104,64,203,181,127,157,79,132,1,64,7,86,234,67,147,215,8,62,181,102,23,107,40,218,208,64,47,8,198,112,94,70,24,64,222,37,149,233,41,38,16,62,90,67,35,132,62,149,183,64,32,225,187,154,42,202,24,64,23,221,201,213,138,104,14,62,181,39,222,71,122,224,198,64,212,126,107,39,74,62,10,64,194,79,32,171,10,66,8,62,248,104,50,226,132,135,200,64,81,10,156,103,74,153,6,64,164,164,175,118,189,38,9,62,152,73,225,53,84,150,162,64,14,172,181,192,182,3,4,64,70,131,194,14,55,64,10,62,118,146,155,203,167,239,183,192,96,173,76,139,9,228,1,64,26,109,23,59,218,50,15,62,195,161,8,192,87,113,96,64,168,194,2,12,137,43,4,64,37,214,86,110,14,42,15,62,185,157,123,100,124,69,225,64,62,2,155,77,41,246,10,64,43,218,76,70,197,31,7,62,219,91,95,94,251,169,144,64,94,244,102,235,24,3,15,64,33,255,95,12,5,248,11,62,223,254,92,244,177,61,209,64,227,54,254,106,44,130,18,64,3,127,243,225,137,165,5,62,125,46,161,34,145,3,66,64,158,48,170,10,226,3,196,63,209,143,86,64,72,107,11,62,245,47,12,2,182,27,128,64,188,59,225,14,156,155,20,64,209,143,86,64,72,107,11,62,32,98,22,233,132,130,98,64,24,183,143,228,11,163,23,64,121,71,91,166,166,177,11,62,24,20,117,2,116,84,115,64,30,247,158,171,92,55,24,64,255,238,165,124,58,219,4,62,221,137,115,131,10,207,67,192,238,95,251,247,80,182,6,64,65,101,34,176,115,166,4,62,165,151,70,3,240,197,121,64,64,148,144,145,177,223,15,64,84,238,252,173,70,50,6,62,21,127,202,167,214,69,198,64,137,190,4,108,220,210,14,64,216,33,159,17,115,48,8,62,25,241,60,47,224,104,202,64,63,44,1,28,110,104,2,64,43,147,163,73,11,184,4,62,145,145,35,213,115,207,239,192,198,41,203,244,113,143,16,64,233,28,39,22,210,236,4,62,176,153,164,251,160,224,195,64,48,64,180,236,207,249,219,63,248,21,180,174,85,174,5,62,193,40,166,170,156,135,182,64,234,93,117,74,43,27,16,64,83,167,83,177,140,202,3,62,135,142,1,127,164,167,197,64,126,173,80,70,138,10,19,64,33,113,13,19,145,40,7,62,37,1,96,120,168,48,205,64,131,224,23,181,0,21,25,64,230,26,44,170,246,241,8,62,96,156,212,36,225,53,181,64,70,88,135,181,142,40,24,64,150,171,34,222,57,101,8,62,154,79,197,41,187,23,220,64,79,210,125,178,194,176,22,64,73,133,189,122,18,59,6,62,76,197,198,252,27,40,199,64,213,29,233,222,83,45,11,64,245,204,15,70,192,75,7,62,49,233,92,66,65,105,181,192,176,26,240,158,168,255,24,64,135,107,236,72,252,59,5,62,156,177,96,137,250,124,213,64,22,63,162,22,62,187,3,64,99,46,51,67,132,91,9,62,174,251,158,67,255,246,183,64,246,115,18,99,252,240,1,64,186,47,133,224,107,173,6,62,145,112,201,141,92,141,131,64,141,54,69,130,212,116,23,64,69,60,25,18,125,216,7,62,248,71,150,206,16,80,171,64,236,179,129,118,178,88,5,64,65,30,121,179,185,62,2,62,200,231,1,235,66,89,185,64,218,191,153,53,4,233,250,63,211,74,168,175,105,254,4,62,110,82,34,152,154,134,1,193,239,100,124,7,91,102,3,64,94,16,147,228,192,193,3,62,248,165,17,130,201,133,199,64,136,84,7,47,176,221,16,64,79,23,6,76,61,0,3,62,226,178,15,84,75,64,200,64,219,100,211,152,176,22,19,64,124,73,86,18,130,172,7,62,96,54,57,176,227,78,178,64,230,151,241,81,167,229,24,64,204,227,99,232,16,2,1,62,39,250,20,49,117,174,188,64,181,214,173,36,205,137,14,64,182,88,142,126,98,123,3,62,166,245,236,246,61,101,172,64,21,246,31,95,99,99,250,63,240,174,111,231,252,177,1,62,252,146,204,107,251,50,210,64,51,98,204,129,17,144,15,64,46,149,158,181,230,178,0,62,179,202,198,47,22,56,116,192,176,79,56,111,39,63,16,64,164,93,6,122,3,191,6,62,2,158,147,130,166,145,216,64,136,133,95,140,118,180,252,63,50,37,236,26,54,125,1,62,35,20,68,165,169,112,138,64,33,93,204,204,85,110,8,64,200,83,22,131,193,55,0,62,87,117,114,96,214,140,200,192,88,1,238,20,211,114,20,64,129,174,159,109,255,173,255,61,134,150,218,170,251,35,184,64,44,171,250,166,250,111,224,63,138,251,57,174,75,6,6,62,118,207,107,128,178,96,244,64,21,42,53,4,146,175,9,64,185,161,50,231,247,221,1,62,135,219,179,196,37,52,196,64,156,83,21,143,149,144,3,64,225,181,226,78,121,240,0,62,214,97,107,71,168,253,209,64,218,89,74,79,190,212,250,63,134,221,153,79,136,108,0,62,101,239,29,25,69,198,147,64,153,224,34,151,2,243,21,64,200,83,22,131,193,55,0,62,7,39,195,109,196,40,50,192,145,22,133,98,205,254,255,63,14,161,137,24,4,53,3,62,201,28,8,95,48,219,197,64,156,59,24,182,8,34,23,64,214,76,163,27,69,249,0,62,57,91,115,25,216,203,194,64,213,104,144,135,96,46,8,64,85,10,162,160,46,209,255,61,162,237,251,100,40,107,182,64,77,41,3,149,94,148,246,63,253,122,253,9,211,175,253,61,159,207,209,225,158,118,208,64,148,10,154,254,59,222,242,63,105,121,210,23,245,184,3,62,39,97,4,15,202,156,241,64,58,28,159,193,141,33,252,63,68,103,29,28,79,161,0,62,229,108,55,42,209,220,208,64,180,15,142,102,32,83,10,64,112,82,196,229,217,229,2,62,210,138,40,83,77,43,179,64,221,127,219,72,22,166,235,63,209,143,86,64,72,107,251,61,140,124,173,55,169,244,45,64,255,146,150,194,106,193,0,64,247,135,97,181,225,222,0,62,134,252,254,144,8,11,108,64,221,81,97,65,161,27,236,63,253,122,253,9,211,175,253,61,223,58,199,140,164,242,211,64,58,116,3,208,235,3,24,64,101,162,219,181,235,134,0,62,229,105,56,230,115,117,182,64,9,240,1,173,5,61,17,64,112,11,27,233,31,126,0,62,201,176,105,41,81,125,182,64,195,60,145,75,15,71,242,63,57,254,221,232,26,170,0,62,96,172,134,124,143,46,186,64,203,157,214,195,80,244,202,63,128,103,246,112,69,70,253,61,190,206,141,182,140,167,183,64,99,76,14,96,16,25,17,64,112,11,27,233,31,126,0,62,20,66,235,7,146,71,183,64,4,47,2,124,26,32,20,64,10,202,146,182,250,2,0,62,115,236,92,117,80,137,200,64,116,213,227,142,156,214,19,64,185,161,50,231,247,221,1,62,153,118,80,26,195,48,227,64,83,162,181,58,234,38,19,64,195,36,28,161,56,121,255,61,96,164,173,80,56,178,199,64,66,187,168,181,231,20,254,63,222,37,149,233,41,38,0,62,30,22,167,112,172,126,199,64,69,26,160,42,98,125,246,63,92,156,234,113,89,150,252,61,25,200,42,218,133,53,189,192,82,127,255,222,84,81,241,63,136,135,145,59,228,218,254,61,115,153,215,103,238,172,198,64,79,200,148,48,79,184,16,64,41,102,164,211,93,244,255,61,11,38,130,161,66,217,208,64,12,15,146,236,174,159,214,63,252,236,170,16,95,224,248,61,193,28,66,55,15,183,177,192,102,65,43,167,114,87,249,63,48,177,67,168,206,81,250,61,125,186,69,22,138,112,213,64,61,252,121,118,160,250,13,64,172,196,74,65,92,187,250,61,156,182,30,60,149,64,49,64,17,125,17,73,1,85,246,63,164,93,6,122,3,191,246,61,245,149,162,125,59,161,209,64,165,221,171,0,38,35,226,63,41,31,251,214,163,140,253,61,100,27,164,95,239,102,202,64,145,255,204,151,76,242,229,63,121,0,178,169,236,73,249,61,59,150,230,114,232,124,182,192,94,199,148,28,107,103,231,63,186,47,133,224,107,173,246,61,210,61,118,13,204,158,196,64,228,166,130,97,43,174,13,64,142,139,135,19,155,208,246,61,139,145,209,19,198,185,211,64,249,60,233,190,72,114,250,63,26,223,196,65,102,99,250,61,239,209,85,25,175,78,199,64,225,130,47,246,165,79,23,64,216,104,72,14,45,152,250,61,144,175,111,45,64,107,196,64,9,93,44,134,87,84,4,64,40,74,255,224,117,85,246,61,154,157,23,119,138,155,206,64,82,24,102,49,73,110,1,64,193,8,119,174,80,218,245,61,70,23,153,85,143,80,97,64,175,56,60,135,169,6,2,64,222,179,231,226,157,245,244,61,21,196,163,193,0,86,194,64,192,107,215,81,195,129,226,63,216,33,159,17,115,48,248,61,114,132,187,156,220,117,182,64,140,41,116,56,156,0,8,64,91,199,238,123,43,95,245,61,247,112,11,14,220,3,187,64,28,216,204,79,225,24,251,63,142,68,222,22,225,104,244,61,11,94,92,249,58,130,215,64,190,136,73,199,187,244,255,63,230,26,44,170,246,241,248,61,88,227,4,87,5,7,132,192,107,140,112,111,139,73,20,64,84,238,252,173,70,50,246,61,69,141,63,154,57,152,200,64,180,6,216,15,253,39,241,63,201,40,18,121,239,110,247,61,59,52,24,98,85,185,199,64,248,46,59,74,121,205,18,64,39,3,86,228,187,237,243,61,94,105,25,233,141,25,195,64,13,122,255,183,67,255,252,63,179,86,147,18,135,128,247,61,14,110,208,54,7,244,183,64,176,141,82,235,248,73,17,64,208,1,4,71,212,155,246,61,86,147,18,72,217,124,184,64,88,15,207,122,71,69,8,64,245,19,185,66,122,179,249,61,139,255,168,254,1,147,209,64,54,39,95,107,23,28,11,64,149,29,208,228,197,149,243,61,195,116,97,113,182,169,128,192,67,95,71,10,207,191,18,64,11,159,142,172,40,58,247,61,182,70,202,55,216,177,183,64,201,62,162,235,189,22,236,63,90,128,69,127,113,247,242,61,147,127,48,103,107,76,56,64,212,214,245,252,74,166,232,63,54,67,140,121,249,22,247,61,210,92,12,189,201,169,162,192,34,240,237,129,73,106,21,64,39,3,86,228,187,237,243,61,67,143,105,132,196,51,168,64,112,235,219,58,25,77,16,64,193,8,119,174,80,218,245,61,54,151,14,226,118,47,134,64,193,60,82,231,203,195,23,64,200,154,191,127,123,159,242,61,153,1,115,220,235,147,201,64,103,246,60,41,218,171,9,64,164,93,6,122,3,191,246,61,153,141,251,122,181,185,183,64,223,111,76,0,18,8,16,64,252,94,88,23,235,16,244,61,93,82,219,164,235,55,135,64,250,151,192,135,244,182,5,64,252,236,170,16,95,224,248,61,194,79,61,238,51,104,220,64,160,46,252,39,82,186,9,64,3,56,74,229,207,61,243,61,134,150,218,170,251,35,200,64,248,230,118,176,119,191,230,63,32,227,186,25,29,89,242,61,219,33,5,28,35,100,196,64,209,247,57,143,161,235,18,64,142,253,52,26,39,1,242,61,79,149,239,25,193,55,138,64,158,158,167,156,87,62,245,63,149,214,38,232,11,46,241,61,31,137,29,33,23,28,208,64,155,30,68,205,184,194,236,63,40,74,255,224,117,85,246,61,162,40,23,157,79,29,212,64,237,133,192,153,177,11,199,63,10,17,60,179,180,106,242,61,205,224,209,193,2,4,184,64,10,125,90,140,84,156,20,64,171,239,78,75,46,132,243,61,105,213,238,164,16,4,182,64,122,125,14,117,29,159,22,64,54,252,226,124,63,175,244,61,116,29,102,140,210,192,183,64,242,209,3,155,74,21,1,64,208,186,90,74,26,52,244,61,243,75,75,76,250,149,119,192,78,220,171,8,151,171,13,64,200,83,22,131,193,55,240,61,113,28,181,24,135,141,160,64,64,247,224,19,189,188,251,63,244,247,19,80,146,20,240,61,220,88,225,250,133,235,182,64,212,154,17,158,3,77,22,64,10,17,60,179,180,106,242,61,157,224,142,232,81,177,11,193,35,77,236,60,82,198,177,63,76,135,184,230,237,53,242,61,58,43,187,23,158,107,4,65,38,246,31,133,42,122,17,64,3,56,74,229,207,61,243,61,45,166,255,240,78,147,219,64,207,182,210,31,37,56,21,64,252,94,88,23,235,16,244,61,172,6,112,153,222,28,200,64,43,28,9,128,102,98,16,64,202,253,13,111,29,166,238,61,117,250,139,138,60,86,211,64,98,228,235,134,251,141,8,64,54,252,226,124,63,175,244,61,120,79,37,208,9,28,229,64,4,218,151,24,61,210,24,64,98,89,55,77,86,36,242,61,82,178,217,167,225,110,210,64,15,215,50,101,28,173,246,63,244,133,102,73,6,228,244,61,97,25,169,100,179,124,156,192,110,208,130,67,180,69,11,64,54,252,226,124,63,175,244,61,186,60,69,42,134,124,91,64,81,134,23,53,121,89,224,63,185,161,50,231,247,221,241,61,181,221,70,251,102,108,137,64,134,141,234,40,146,29,3,64,98,160,224,73,16,140,244,61,50,86,41,234,48,80,19,65,172,217,200,74,211,137,21,64,216,175,241,10,231,255,236,61,116,245,162,247,144,124,182,64,197,64,55,49,173,80,14,64,48,248,236,164,136,185,236,61,238,32,255,23,52,118,182,64,65,44,89,29,82,151,250,63,112,11,27,233,31,126,240,61,123,14,72,92,241,100,200,64,211,33,195,108,250,188,22,64,253,122,253,9,211,175,237,61,166,90,57,235,217,159,184,64,127,166,170,69,78,231,14,64,55,209,222,114,109,230,235,61,214,115,101,95,214,183,152,64,118,95,185,209,12,51,22,64,187,189,215,217,223,124,235,61,84,18,7,192,50,10,182,64,207,99,24,160,2,66,240,63,62,170,208,64,82,19,235,61,238,26,214,79,93,182,81,192,249,142,208,133,71,195,18,64,26,109,23,59,218,50,239,61,49,82,128,12,2,143,184,64,76,167,122,212,141,75,7,64,62,170,208,64,82,19,235,61,46,73,122,37,252,172,128,64,167,146,143,74,162,200,240,63,223,136,227,216,203,44,236,61,21,172,146,68,124,135,184,192,193,240,157,218,17,69,253,63,48,248,236,164,136,185,236,61,108,195,180,113,103,118,197,192,54,163,195,156,208,22,5,64,92,156,234,113,89,150,236,61,158,137,60,139,214,112,108,192,173,78,92,251,243,130,16,64,70,131,194,14,55,64,234,61,49,94,101,0,215,248,121,64,69,29,12,43,203,154,17,64,113,39,192,219,7,29,234,61,7,249,138,98,39,156,220,64,147,18,1,213,223,179,16,64,98,89,55,77,86,36,242,61,106,3,26,198,119,64,240,64,68,89,88,109,135,103,18,64,17,234,45,129,153,151,241,61,97,25,169,100,179,124,172,192,208,102,43,232,35,52,224,63,201,111,187,117,169,214,233,61,55,237,24,77,220,159,201,64,80,168,195,228,239,65,0,64,77,92,180,220,27,109,233,61,189,36,132,253,189,43,106,192,211,51,62,69,110,199,18,64,18,6,211,115,129,54,235,61,72,98,10,245,135,83,217,64,165,178,152,64,96,169,14,64,150,242,203,218,243,204,234,61,5,8,0,61,112,186,175,64,17,209,87,172,187,119,10,64,244,247,19,80,146,20,240,61,144,191,66,211,124,249,179,64,212,116,31,123,27,117,251,63,201,111,187,117,169,214,233,61,196,1,49,95,119,27,151,64,186,93,55,190,89,191,22,64,246,161,11,60,238,130,238,61,191,251,153,176,148,23,199,64,69,132,180,3,4,20,255,63,252,236,170,16,95,224,232,61,30,160,56,86,114,9,197,64,248,127,69,230,224,253,255,63,179,86,147,18,135,128,231,61,39,61,232,230,40,146,185,64,29,102,177,18,200,236,242,63,180,228,229,11,251,79,236,61,235,100,138,232,0,149,81,64,221,16,105,111,126,188,23,64,11,159,142,172,40,58,231,61,184,191,92,38,217,128,212,64,202,4,239,240,70,90,1,64,70,131,194,14,55,64,234,61,239,201,124,237,87,210,196,64,206,214,6,150,63,159,21,64,238,200,25,110,9,86,239,61,193,128,243,172,96,31,224,64,145,77,130,207,192,160,18,64,121,0,178,169,236,73,233,61,103,125,88,92,53,69,179,192,85,13,50,49,172,158,10,64,77,234,6,214,143,60,238,61,69,106,152,169,2,244,96,192,21,138,106,205,51,63,252,63,142,139,135,19,155,208,230,61,97,188,139,188,99,153,214,64,194,230,96,89,16,162,11,64,70,131,194,14,55,64,234,61,81,234,58,240,142,0,184,64,164,79,237,4,226,20,20,64,40,145,168,221,47,189,232,61,221,9,56,252,0,196,183,64,26,132,18,150,19,69,227,63,18,120,128,122,13,103,230,61,101,206,71,218,174,93,209,64,28,253,235,185,165,215,19,64,114,181,18,213,123,236,238,61,136,56,140,88,21,19,208,64,252,60,189,135,136,197,4,64,246,161,11,60,238,130,238,61,76,254,34,198,179,17,183,64,21,48,18,190,29,219,13,64,11,45,225,165,156,9,236,61,221,169,212,122,60,111,108,64,225,254,114,25,118,139,22,64,193,8,119,174,80,218,229,61,139,196,113,241,100,88,208,64,192,181,67,94,55,206,12,64,187,189,215,217,223,124,235,61,152,196,147,60,167,149,186,64,76,75,38,83,119,200,235,63,245,19,185,66,122,179,233,61,20,66,235,7,146,71,199,64,150,194,58,144,32,9,5,64,106,192,123,20,175,32,230,61,113,91,101,234,49,222,95,64,5,13,38,147,141,230,6,64,223,136,227,216,203,44,236,61,181,181,60,145,170,142,184,64,109,189,70,149,216,226,251,63], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([157,203,189,168,216,249,233,61,108,91,247,3,236,56,99,64,124,102,55,157,222,63,19,64,54,67,140,121,249,22,231,61,158,124,188,104,214,84,208,64,186,180,58,105,124,135,156,63,120,114,95,176,120,122,228,61,163,111,147,208,8,228,198,64,73,6,60,13,113,28,229,63,157,203,189,168,216,249,233,61,88,135,143,199,235,117,180,64,117,34,193,84,51,251,20,64,127,75,81,126,93,167,227,61,239,55,241,141,172,53,186,64,128,241,88,168,63,69,17,64,252,94,88,23,235,16,228,61,50,141,137,65,209,135,177,64,226,93,246,55,221,66,19,64,83,167,83,177,140,202,227,61,51,157,99,97,12,198,132,192,158,130,21,10,133,134,21,64,3,198,156,222,67,13,232,61,249,218,23,246,182,7,180,64,87,209,41,12,237,233,18,64,62,28,126,71,222,67,230,61,53,134,244,108,160,110,184,64,169,187,92,11,77,246,246,63,245,19,185,66,122,179,233,61,207,39,250,133,80,7,231,64,118,125,190,228,129,171,245,63,252,94,88,23,235,16,228,61,191,72,76,246,21,164,197,64,244,2,114,221,34,245,10,64,40,145,168,221,47,189,232,61,158,126,24,109,202,206,117,192,113,125,146,26,94,237,3,64,164,22,93,125,73,87,228,61,24,22,232,130,134,225,98,64,79,10,83,145,147,100,14,64,25,81,114,72,242,147,229,61,149,127,12,161,63,53,184,64,210,249,230,186,205,140,244,63,98,231,137,70,202,243,230,61,220,204,45,28,4,83,98,64,32,2,164,188,170,81,232,63,54,181,57,128,133,71,226,61,193,217,110,129,91,211,180,192,43,117,89,228,136,163,21,64,157,61,107,175,100,42,229,61,112,42,163,168,171,254,87,64,2,183,162,88,100,239,10,64,164,22,93,125,73,87,228,61,253,128,253,19,36,18,185,192,213,102,224,163,165,18,11,64,17,234,45,129,153,151,225,61,208,238,177,240,205,125,185,192,245,56,4,117,103,109,14,64,185,161,50,231,247,221,225,61,11,171,14,63,188,14,198,64,75,186,61,115,156,12,238,63,244,133,102,73,6,228,228,61,28,54,133,166,129,97,182,192,175,147,22,8,228,125,231,63,90,128,69,127,113,247,226,61,224,5,91,54,196,67,106,64,93,25,23,184,131,131,4,64,236,30,34,130,173,231,224,61,10,2,145,105,152,178,183,64,88,196,128,138,130,17,18,64,3,56,74,229,207,61,227,61,12,45,232,6,197,4,210,64,222,206,248,157,170,139,228,63,105,50,41,27,59,81,225,61,211,240,195,199,74,18,198,64,198,186,7,212,218,225,11,64,156,175,24,182,240,90,224,61,249,234,234,155,243,149,195,64,175,2,109,140,76,189,9,64,32,42,100,22,215,192,228,61,154,200,4,176,132,178,176,64,135,204,98,80,16,158,17,64,244,247,19,80,146,20,224,61,144,214,52,73,245,184,183,64,77,254,221,241,220,113,215,63,186,47,133,224,107,173,230,61,213,78,75,46,163,244,189,192,231,17,252,159,94,49,17,64,244,247,19,80,146,20,224,61,110,232,89,85,12,101,184,192,186,73,35,158,160,132,21,64,185,161,50,231,247,221,225,61,73,219,230,48,115,0,183,192,56,145,46,112,88,28,18,64,68,103,29,28,79,161,224,61,236,8,94,47,88,255,128,192,11,151,179,73,14,112,24,64,62,28,126,71,222,67,230,61,5,232,59,27,204,233,194,64,165,170,6,234,95,225,22,64,215,147,76,24,255,96,227,61,46,230,18,7,87,75,184,64,164,220,181,56,238,186,229,63,200,83,22,131,193,55,224,61,56,36,70,51,218,53,214,64,197,143,191,33,69,134,19,64,229,69,48,180,200,186,225,61,35,20,68,165,169,112,154,64,113,47,117,255,116,125,214,63,105,50,41,27,59,81,225,61,173,128,46,217,103,25,182,64,253,49,3,78,28,150,20,64,238,200,25,110,9,86,223,61,179,84,50,142,26,198,134,64,201,241,36,152,83,170,224,63,112,11,27,233,31,126,224,61,208,191,184,175,94,76,74,64,51,34,7,219,62,90,238,63,151,128,30,212,103,156,223,61,177,97,4,143,26,78,80,64,212,173,118,203,16,10,12,64,105,50,41,27,59,81,225,61,128,201,187,90,103,249,182,64,0,50,134,207,92,79,22,64,237,172,116,123,33,183,229,61,92,25,97,113,193,232,3,65,242,233,124,59,51,168,7,64,10,17,60,179,180,106,226,61,243,180,163,72,231,26,200,64,63,52,76,157,226,201,4,64,32,42,100,22,215,192,228,61,115,217,19,189,215,60,208,64,31,205,162,193,183,226,15,64,165,50,2,112,49,246,221,61,119,97,82,25,164,98,149,64,243,239,152,89,2,43,142,63,142,253,52,26,39,1,226,61,129,64,222,96,67,67,184,64,236,147,184,155,155,199,181,63,252,94,88,23,235,16,228,61,255,92,9,228,189,160,182,64,164,123,249,68,110,171,230,63,252,94,88,23,235,16,228,61,85,95,162,233,8,112,83,192,198,171,7,39,253,248,8,64,85,195,248,163,116,105,221,61,145,159,156,135,3,221,180,64,2,1,86,58,100,114,210,63,90,128,69,127,113,247,226,61,21,106,128,100,151,137,184,64,66,153,189,161,45,97,6,64,70,17,21,8,171,15,223,61,230,161,137,140,141,133,184,192,227,131,171,247,172,79,6,64,151,128,30,212,103,156,223,61,180,239,239,11,18,110,128,192,217,156,222,32,181,148,23,64,90,128,69,127,113,247,226,61,191,155,209,3,120,128,183,64,137,194,115,94,127,98,24,64,47,220,71,178,160,26,227,61,120,83,209,69,237,252,214,64,141,94,145,136,190,57,0,64,252,94,88,23,235,16,228,61,100,50,107,149,10,80,176,192,20,176,204,68,217,163,18,64,85,195,248,163,116,105,221,61,227,66,141,158,23,95,207,64,175,76,179,209,29,68,16,64,171,239,78,75,46,132,227,61,135,237,132,197,120,116,244,64,98,103,109,199,146,125,7,64,17,234,45,129,153,151,225,61,48,59,142,214,122,82,194,64,152,83,45,226,110,202,9,64,222,108,62,230,227,141,226,61,66,37,65,71,83,61,184,64,189,216,83,41,120,53,250,63,99,117,220,63,62,195,219,61,143,214,60,58,120,23,165,64,205,104,240,102,41,237,21,64,92,156,234,113,89,150,220,61,45,155,176,50,147,198,129,192,205,192,56,32,88,165,1,64,180,228,229,11,251,79,220,61,92,121,117,128,26,177,184,64,20,99,69,127,251,133,3,64,156,175,24,182,240,90,224,61,41,81,135,121,53,177,184,64,89,127,164,184,69,97,4,64,90,128,69,127,113,247,226,61,52,221,240,93,248,221,158,64,42,30,132,113,81,132,2,64,68,103,29,28,79,161,224,61,146,248,175,136,14,33,97,64,71,173,91,253,11,40,18,64,236,30,34,130,173,231,224,61,94,99,70,1,179,242,210,64,156,40,17,250,252,38,18,64,156,175,24,182,240,90,224,61,18,100,131,19,111,69,214,64,74,240,78,138,203,243,6,64,54,181,57,128,133,71,226,61,235,87,63,184,255,122,239,64,145,71,74,92,194,57,24,64,229,69,48,180,200,186,225,61,127,202,203,118,242,116,85,192,37,113,132,124,56,83,4,64,142,253,52,26,39,1,226,61,132,75,143,242,230,150,202,64,5,74,66,214,222,5,16,64,92,156,234,113,89,150,220,61,173,136,40,83,77,43,195,64,86,91,76,148,6,92,255,63,158,89,16,162,76,201,222,61,50,98,156,8,215,112,207,64,70,123,89,102,83,182,12,64,236,30,34,130,173,231,224,61,182,248,248,170,17,118,160,64,196,191,233,12,117,168,251,63,68,103,29,28,79,161,224,61,23,89,200,98,167,10,226,64,57,119,48,108,17,74,24,64,253,122,253,9,211,175,221,61,133,212,143,59,237,125,200,192,148,7,193,97,164,186,13,64,70,17,21,8,171,15,223,61,116,36,65,255,171,195,190,192,69,248,10,23,97,206,5,64,165,50,2,112,49,246,221,61,97,176,247,239,108,75,176,64,220,16,156,96,35,34,16,64,99,117,220,63,62,195,219,61,245,153,22,105,233,103,184,64,99,14,107,242,224,135,11,64,70,17,21,8,171,15,223,61,73,232,54,122,186,162,188,64,59,224,191,27,0,1,229,63,70,17,21,8,171,15,223,61,175,0,207,59,151,242,232,64,101,118,222,18,245,84,6,64,172,11,244,61,22,35,221,61,253,195,208,201,215,245,181,64,9,96,205,120,144,11,253,63,99,117,220,63,62,195,219,61,66,103,22,196,135,219,91,64,76,71,84,54,25,216,22,64,180,228,229,11,251,79,220,61,9,123,234,195,140,110,140,64,166,67,205,174,128,128,6,64,99,117,220,63,62,195,219,61,42,126,170,15,146,250,155,64,201,7,104,27,178,115,255,63,153,242,146,39,159,199,26,63,191,174,231,106,19,139,184,64,124,135,244,62,2,255,16,64,251,23,147,36,174,162,188,62,229,176,231,106,19,139,200,64,229,17,45,144,216,210,16,64,110,20,20,104,220,24,146,62,248,146,152,48,146,169,106,64,51,164,161,126,203,51,11,64,21,227,83,33,116,216,145,62,159,45,181,24,135,141,128,64,9,176,12,205,28,88,23,64,252,6,43,183,15,67,140,62,223,35,71,172,88,47,12,192,161,66,16,72,11,13,25,64,206,80,137,36,216,239,116,62,163,103,186,164,177,103,180,64,253,248,4,182,110,174,18,64,40,148,252,243,180,102,109,62,203,107,151,201,95,165,152,64,83,46,224,167,162,35,18,64,1,244,30,223,246,192,111,62,208,191,184,175,94,76,58,64,58,225,78,183,38,84,241,63,166,34,89,22,166,122,98,62,164,197,101,81,98,226,120,192,154,97,168,101,153,235,23,64,38,166,175,33,36,58,97,62,34,196,45,144,78,104,210,64,101,23,248,201,210,166,16,64,183,136,246,250,66,9,98,62,166,157,12,161,141,131,181,64,166,221,229,171,175,235,23,64,250,10,174,151,226,89,95,62,144,37,222,71,122,224,182,64,126,35,206,75,68,246,227,63,53,158,55,208,181,207,93,62,46,137,131,233,115,109,99,64,137,156,195,87,105,246,13,64,151,47,116,170,44,12,91,62,124,125,102,118,69,114,182,64,239,194,24,137,183,215,7,64,79,198,133,2,94,177,88,62,164,197,101,81,98,226,136,192,8,190,222,7,100,202,242,63,17,62,44,193,89,209,90,62,49,157,59,153,127,128,182,64,153,52,95,136,73,190,3,64,234,60,37,9,49,97,87,62,165,151,70,3,240,197,105,64,87,160,138,217,154,214,14,64,153,79,72,189,47,63,83,62,203,136,216,78,46,60,136,192,213,204,156,38,26,121,241,63,241,95,20,234,84,159,77,62,248,146,152,48,146,169,122,64,193,60,105,131,65,153,5,64,180,72,57,229,142,130,76,62,152,94,248,199,169,174,183,64,17,45,5,230,25,98,23,64,154,237,25,48,211,72,73,62,11,94,92,249,58,130,199,64,251,20,12,86,184,87,2,64,187,72,214,188,206,162,75,62,2,122,205,234,227,188,183,64,123,252,156,138,109,85,21,64,247,219,95,245,161,24,74,62,113,28,181,24,135,141,144,64,233,44,108,51,57,228,24,64,69,99,196,27,216,203,71,62,95,106,63,170,69,116,28,192,210,157,232,57,112,158,20,64,104,209,41,88,44,200,69,62,59,198,163,193,0,86,178,64,50,100,200,243,17,45,16,64,163,217,180,173,16,24,68,62,11,246,186,32,199,110,181,64,95,7,97,125,34,84,11,64,192,164,35,213,188,167,69,62,202,174,96,141,158,84,128,64,21,165,112,124,110,250,231,63,210,120,0,208,192,112,66,62,125,186,69,22,138,112,197,64,158,74,3,200,155,55,6,64,166,251,173,12,75,135,66,62,48,35,125,89,246,131,184,64,160,53,68,183,140,63,18,64,72,169,20,110,232,132,65,62,75,142,234,93,52,141,107,192,2,158,38,198,65,58,23,64,35,122,181,149,104,162,64,62,101,149,164,251,160,224,163,64,224,53,120,247,177,166,249,63,23,173,34,137,160,120,64,62,176,220,119,177,84,196,160,64,95,245,153,22,105,0,8,64,190,48,123,98,85,124,62,62,100,247,254,181,5,178,82,64,244,249,25,248,0,102,220,63,104,134,39,91,251,138,58,62,23,138,9,164,111,198,128,192,222,169,222,236,159,215,244,63,153,215,28,106,245,252,56,62,176,153,164,251,160,224,179,64,60,25,223,193,150,79,19,64,101,126,132,194,21,61,53,62,164,55,253,85,153,142,184,192,166,218,159,114,233,43,209,63,176,227,239,137,17,129,52,62,143,214,60,58,120,23,149,64,101,134,131,64,11,60,23,64,7,122,65,55,105,33,52,62,26,2,72,185,80,87,110,192,105,111,50,162,155,158,20,64,69,209,24,34,237,38,58,62,248,71,150,206,16,80,155,64,161,171,127,160,116,157,17,64,33,106,96,252,148,169,57,62,105,101,12,189,201,169,146,192,185,168,131,173,243,170,4,64,187,183,47,173,213,41,50,62,76,202,198,75,191,189,141,64,122,0,248,152,41,204,237,63,208,1,4,71,212,155,54,62,30,197,19,35,142,76,129,64,181,78,186,255,88,176,2,64,25,123,113,104,210,48,42,62,248,96,89,182,45,11,182,64,192,14,148,194,89,205,245,63,166,108,86,41,229,139,41,62,115,84,254,77,196,156,186,64,87,107,99,23,5,84,249,63,206,170,5,177,70,59,45,62,24,216,129,120,187,97,162,192,110,106,236,135,226,106,4,64,13,174,222,91,10,7,42,62,79,149,239,25,193,55,122,64,192,142,60,102,89,37,21,64,31,55,185,89,221,146,43,62,223,35,71,172,88,47,28,192,164,114,214,81,28,210,253,63,192,206,34,245,156,68,42,62,82,178,217,167,225,110,194,64,156,127,119,207,218,231,16,64,6,171,237,109,69,61,38,62,153,78,37,34,109,32,200,64,87,24,42,24,248,222,255,63,231,126,127,131,138,36,41,62,200,215,79,147,148,96,180,64,2,152,63,154,66,143,2,64,199,125,21,163,161,212,36,62,126,247,36,182,206,110,180,64,169,211,175,228,146,173,8,64,142,139,135,19,155,208,38,62,203,107,151,201,95,165,168,64,200,204,23,17,75,230,3,64,145,112,216,162,156,0,37,62,163,103,186,164,177,103,196,64,37,227,90,229,240,198,2,64,122,200,88,92,20,175,41,62,86,61,142,214,122,82,178,64,115,41,83,113,136,241,24,64,141,10,138,93,45,211,40,62,106,181,72,89,151,231,182,64,53,112,190,19,222,94,184,63,191,64,208,251,40,117,37,62,84,207,51,10,127,38,185,64,120,197,157,28,79,245,7,64,133,121,70,118,244,57,32,62,189,64,141,158,23,95,191,64,30,138,30,210,81,141,12,64,194,108,202,135,228,12,38,62,202,78,86,68,145,14,137,64,75,177,69,0,167,103,11,64,226,151,51,136,173,249,30,62,180,67,64,33,107,112,241,192,29,169,185,58,210,137,1,64,213,102,77,162,81,157,30,62,184,142,27,197,12,117,15,64,19,104,229,155,195,184,20,64,183,116,51,113,74,26,29,62,24,216,129,120,187,97,178,192,232,85,78,143,46,145,18,64,128,103,246,112,69,70,29,62,210,214,101,81,98,226,152,192,46,17,114,85,14,250,15,64,86,139,159,86,156,206,29,62,1,154,115,54,93,217,182,64,136,119,27,252,70,185,218,63,79,107,4,140,253,57,28,62,177,208,209,225,158,118,192,64,131,96,50,174,232,113,1,64,4,84,239,215,183,220,28,62,205,52,209,79,7,17,67,64,62,153,223,102,122,168,16,64,217,120,157,167,0,145,33,62,152,120,114,147,229,172,187,64,23,28,129,31,165,215,224,63,197,223,109,16,90,12,25,62,176,220,119,177,84,196,176,64,174,46,220,246,147,178,245,63,184,174,135,42,254,175,24,62,225,86,78,54,246,90,52,64,102,2,118,28,220,41,15,64,198,109,192,9,206,219,29,62,219,37,210,127,141,135,184,64,49,198,138,145,90,101,182,63,56,11,51,44,33,124,23,62,94,158,26,100,191,159,203,64,16,31,69,142,142,230,15,64,54,67,140,121,249,22,23,62,9,136,96,84,203,66,188,64,206,199,125,247,3,40,183,63,51,250,231,16,100,180,24,62,106,197,27,255,211,117,198,64,29,137,169,138,47,46,239,63,147,156,210,46,88,152,21,62,174,43,74,47,165,180,186,64,231,216,101,235,37,37,248,63,234,99,208,18,140,84,23,62,30,83,134,16,241,124,198,64,202,78,96,182,116,183,223,63,33,255,95,12,5,248,27,62,99,228,118,121,241,208,189,64,166,149,46,60,176,223,19,64,118,170,184,253,80,21,20,62,22,33,71,3,240,197,89,64,70,155,194,206,61,181,6,64,28,154,22,177,135,246,19,62,135,32,141,222,79,68,176,64,212,196,180,207,96,68,11,64,156,246,193,178,170,194,18,62,39,234,98,217,198,181,183,64,208,201,166,234,139,241,12,64,105,50,41,27,59,81,17,62,91,114,162,30,118,95,209,64,147,43,34,174,143,83,210,63,105,50,41,27,59,81,17,62,58,110,114,164,45,255,131,64,48,193,146,115,174,197,249,63,173,82,157,58,208,138,15,62,223,58,199,140,164,242,195,64,78,140,4,209,149,33,22,64,216,20,74,206,108,94,17,62,75,250,55,12,199,112,184,192,107,3,13,188,174,45,229,63,190,6,124,66,117,223,9,62,148,32,23,173,157,86,208,64,196,186,233,125,128,61,15,64,110,151,114,118,184,82,9,62,1,138,160,144,32,75,199,64,18,209,31,2,93,145,18,64,69,60,25,18,125,216,7,62,101,15,254,143,57,25,170,64,163,226,126,14,147,227,0,64,248,92,93,171,15,22,8,62,172,0,195,24,93,108,174,64,8,253,94,160,42,22,6,64,124,73,86,18,130,172,7,62,82,190,185,34,21,226,96,192,9,245,252,130,64,19,19,64,3,198,156,222,67,13,8,62,210,21,45,127,252,27,202,64,46,239,177,193,176,10,23,64,142,139,135,19,155,208,6,62,174,110,29,229,88,152,183,64,11,101,93,179,199,209,240,63,252,165,1,20,165,120,6,62,211,240,195,199,74,18,182,64,211,170,0,89,52,165,19,64,62,170,208,64,82,19,11,62,101,15,254,143,57,25,186,64,103,211,55,135,112,204,18,64,25,81,114,72,242,147,5,62,2,20,50,118,230,213,180,64,164,58,196,15,51,25,20,64,168,52,253,219,12,241,9,62,219,4,234,93,52,141,91,192,135,144,93,227,223,123,17,64,25,81,114,72,242,147,5,62,154,62,82,124,48,146,184,64,158,29,148,35,169,72,13,64,204,113,182,225,132,209,5,62,229,176,231,106,19,139,216,64,101,72,204,238,244,123,16,64,32,227,186,25,29,89,2,62,239,209,85,25,175,78,183,64,18,186,55,254,197,197,242,63,189,49,128,76,71,168,2,62,162,144,65,71,99,27,123,192,80,151,118,126,18,30,214,63,218,220,240,128,148,195,1,62,59,72,191,229,250,26,159,192,158,158,101,128,133,168,21,64,105,50,41,27,59,81,1,62,193,40,166,170,156,135,182,64,41,142,102,217,81,160,2,64,57,254,221,232,26,170,0,62,87,13,209,135,98,121,182,64,56,139,233,210,87,249,250,63,85,10,162,160,46,209,255,61,178,137,77,93,107,180,190,64,121,195,138,14,217,48,21,64,32,42,100,22,215,192,4,62,245,47,12,2,182,27,128,64,81,74,155,185,166,241,226,63,12,116,138,162,86,113,254,61,184,130,92,88,0,196,199,64,244,91,103,136,210,82,19,64,149,29,208,228,197,149,3,62,82,156,244,213,77,226,104,64,131,248,88,171,138,49,15,64,41,102,164,211,93,244,255,61,144,114,144,141,251,108,197,64,226,13,140,99,244,129,222,63,172,11,244,61,22,35,253,61,191,107,20,181,95,167,187,192,75,195,68,17,191,203,241,63,107,149,119,10,221,87,253,61,136,211,134,25,3,255,134,64,79,244,76,113,77,232,255,63,134,221,153,79,136,108,0,62,118,146,155,203,167,239,183,192,79,132,167,108,101,57,14,64,136,64,232,62,42,115,252,61,11,246,186,32,199,110,197,64,13,115,140,168,172,195,21,64,17,234,45,129,153,151,1,62,64,179,15,165,74,212,152,64,189,170,65,5,120,108,187,63,157,203,189,168,216,249,249,61,106,2,251,158,24,116,197,64,246,58,68,4,101,72,237,63,143,25,218,12,15,160,251,61,56,36,70,51,218,53,198,64,1,137,5,66,219,109,16,64,48,63,150,161,66,33,255,61,239,22,47,51,217,94,195,64,90,116,19,254,10,174,254,63,40,216,81,218,233,36,251,61,212,128,255,181,5,178,98,64,206,178,155,215,224,26,6,64,55,138,53,118,179,126,249,61,162,237,251,100,40,107,182,64,81,181,239,231,154,229,8,64,3,198,156,222,67,13,248,61,88,40,250,133,80,7,199,64,115,67,200,131,113,51,220,63,128,217,163,119,209,118,248,61,4,183,55,61,131,245,183,64,165,215,244,13,61,199,21,64,135,178,149,69,182,163,247,61,165,151,70,3,240,197,121,64,91,147,138,160,19,181,22,64,48,177,67,168,206,81,250,61,165,37,84,69,204,220,141,64,162,1,168,33,43,61,22,64,120,185,8,173,50,226,246,61,87,115,108,252,95,96,185,64,251,69,252,207,9,189,208,63,223,250,144,223,87,93,247,61,190,206,141,182,140,167,183,64,60,19,197,164,242,230,23,64,98,231,137,70,202,243,246,61,219,91,95,94,251,169,144,64,115,20,85,252,53,174,2,64,209,143,86,64,72,107,251,61,87,13,209,135,98,121,198,64,67,168,115,193,240,72,21,64,25,81,114,72,242,147,245,61,200,27,104,87,226,227,209,64,157,227,4,239,169,129,2,64,172,11,244,61,22,35,253,61,6,221,10,211,18,113,144,64,248,142,79,5,50,100,243,63,179,15,234,21,205,24,245,61,144,72,100,234,49,222,79,64,123,156,19,194,61,91,9,64,208,1,4,71,212,155,246,61,75,164,65,197,73,210,61,64,223,150,60,92,122,109,24,64,106,7,37,17,105,136,248,61,127,103,151,201,95,165,184,64,185,216,160,110,33,229,16,64,69,245,111,21,195,112,245,61,25,200,42,218,133,53,173,192,201,205,170,174,199,113,1,64,54,252,226,124,63,175,244,61,24,20,117,2,116,84,115,64,181,233,147,210,239,255,247,63,10,17,60,179,180,106,242,61,248,165,17,130,201,133,199,64,205,142,155,180,133,148,3,64,251,23,175,26,49,169,241,61,208,176,123,95,175,101,200,64,214,198,36,152,116,76,13,64,39,3,86,228,187,237,243,61,145,112,201,141,92,141,131,64,216,246,247,203,135,93,244,63,17,234,45,129,153,151,241,61,96,156,212,36,225,53,181,64,103,56,165,137,101,157,254,63,245,204,15,70,192,75,247,61,248,71,150,206,16,80,171,64,0,174,138,142,233,169,16,64,193,193,205,177,150,114,243,61,253,141,77,93,107,180,174,64,165,130,232,27,97,77,17,64,90,57,156,130,183,143,240,61,176,223,151,99,2,120,200,64,28,58,46,196,153,168,14,64,244,133,102,73,6,228,244,61,96,54,57,176,227,78,178,64,30,13,61,232,45,204,249,63,207,115,177,77,96,204,241,61,78,238,162,232,98,164,207,64,47,56,108,35,234,194,11,64,156,175,24,182,240,90,240,61,77,236,98,217,198,181,199,64,50,195,126,3,30,94,242,63,200,83,22,131,193,55,240,61,172,6,112,153,222,28,184,64,38,142,164,243,205,53,14,64,164,22,93,125,73,87,244,61,217,191,194,52,153,146,187,192,220,248,219,234,174,118,221,63,200,225,104,124,53,7,245,61,222,199,47,14,180,167,196,64,107,169,38,2,129,192,225,63,127,4,168,129,163,63,241,61,150,59,64,171,139,228,208,64,37,17,142,23,218,178,234,63,39,3,86,228,187,237,243,61,140,140,49,215,7,124,178,64,110,62,72,43,203,9,19,64,163,207,179,128,143,239,241,61,101,82,209,69,237,252,182,64,94,247,63,136,176,22,211,63,171,168,165,78,116,28,241,61,154,216,182,7,51,171,181,64,176,237,115,208,179,254,13,64,128,103,246,112,69,70,237,61,181,39,222,71,122,224,198,64,23,164,12,97,164,169,21,64,202,253,13,111,29,166,238,61,202,81,14,211,29,93,178,64,163,83,224,47,41,160,5,64,10,17,60,179,180,106,242,61,88,227,4,87,5,7,132,192,20,252,176,138,169,39,210,63,48,248,236,164,136,185,236,61,105,213,238,164,16,4,182,64,56,191,168,119,205,208,243,63,238,58,199,116,149,134,234,61,176,153,164,251,160,224,195,64,177,84,147,183,142,23,255,63,208,72,173,67,142,3,233,61,209,44,39,166,36,139,184,64,14,55,140,244,53,166,3,64,121,0,178,169,236,73,233,61,158,137,60,139,214,112,108,192,216,26,109,252,89,141,23,64,208,72,173,67,142,3,233,61,249,52,168,47,2,139,184,192,4,56,108,68,248,227,206,63,238,200,25,110,9,86,239,61,175,1,58,97,14,140,184,192,188,208,36,253,50,66,5,64,142,139,135,19,155,208,230,61,116,51,146,243,172,70,188,64,82,159,96,214,246,184,23,64,98,231,137,70,202,243,230,61,67,143,105,132,196,51,168,64,223,216,202,131,168,72,22,64,193,8,119,174,80,218,229,61,179,202,198,47,22,56,116,192,190,226,4,1,141,37,23,64,157,61,107,175,100,42,229,61,103,192,43,18,233,40,176,192,205,11,26,116,238,72,248,63,216,33,159,17,115,48,232,61,30,22,167,112,172,126,199,64,102,148,11,238,55,29,9,64,98,231,137,70,202,243,230,61,96,164,173,80,56,178,199,64,89,122,50,212,104,115,12,64,200,225,104,124,53,7,229,61,106,41,50,208,27,72,105,64,77,103,100,230,187,105,247,63,25,81,114,72,242,147,229,61,229,108,55,42,209,220,208,64,160,60,254,155,175,99,249,63,171,239,78,75,46,132,227,61,209,57,157,142,205,129,244,64,147,19,22,170,213,54,151,63,244,133,102,73,6,228,228,61,238,200,220,229,9,219,208,64,84,76,244,229,68,172,230,63,83,167,83,177,140,202,227,61,221,9,56,252,0,196,183,64,3,111,156,162,144,191,20,64,222,108,62,230,227,141,226,61,116,245,162,247,144,124,182,64,1,134,219,93,68,228,255,63,10,17,60,179,180,106,226,61,238,32,255,23,52,118,182,64,229,214,146,248,86,168,11,64,83,167,83,177,140,202,227,61,39,132,199,100,201,206,180,64,11,61,144,44,200,67,24,64,149,100,121,225,127,253,229,61,204,159,12,161,141,131,197,64,182,205,229,234,237,93,251,63,54,181,57,128,133,71,226,61,166,245,236,246,61,101,172,64,142,51,80,144,13,177,6,64,10,17,60,179,180,106,226,61,220,255,182,29,109,166,209,64,56,25,143,49,251,207,21,64,10,17,60,179,180,106,226,61,130,142,233,24,230,41,146,64,153,98,217,143,190,78,21,64,17,234,45,129,153,151,225,61,84,18,7,192,50,10,182,64,190,17,74,80,221,23,4,64,149,100,121,225,127,253,229,61,101,239,29,25,69,198,131,64,129,131,139,79,224,131,22,64,98,89,55,77,86,36,226,61,183,75,47,114,2,46,203,64,63,39,110,41,168,55,234,63,24,195,31,79,126,196,224,61,228,121,186,132,21,245,203,64,62,247,27,118,170,181,22,64,149,214,38,232,11,46,225,61,134,150,218,170,251,35,200,64,55,170,79,73,8,2,21,64,68,103,29,28,79,161,224,61,229,105,56,230,115,117,182,64,75,116,254,60,249,175,1,64,178,200,64,25,19,177,226,61,178,108,141,216,156,186,110,192,80,211,176,221,18,88,250,63,112,11,27,233,31,126,224,61,201,176,105,41,81,125,182,64,22,237,140,23,84,237,9,64,10,17,60,179,180,106,226,61,59,52,24,98,85,185,199,64,96,112,109,171,208,121,8,64,134,36,67,76,66,212,226,61,56,110,168,77,207,62,184,64,26,233,71,238,169,223,253,63,215,147,76,24,255,96,227,61,11,38,130,161,66,217,208,64,151,168,174,225,193,141,0,64,229,69,48,180,200,186,225,61,25,200,42,218,133,53,189,192,19,169,211,251,114,64,6,64,63,56,35,58,198,226,223,61,191,72,76,246,21,164,181,64,69,238,114,220,236,31,17,64,63,56,35,58,198,226,223,61,94,105,25,233,141,25,195,64,139,207,126,83,65,145,10,64,229,69,48,180,200,186,225,61,88,135,143,199,235,117,180,64,21,12,76,70,76,251,11,64,70,17,21,8,171,15,223,61,20,66,235,7,146,71,183,64,17,237,91,148,118,118,239,63,24,195,31,79,126,196,224,61,27,96,149,116,24,138,184,64,6,255,83,88,70,102,5,64,3,56,74,229,207,61,227,61,222,152,102,6,102,23,38,192,152,70,165,110,237,212,19,64,253,122,253,9,211,175,221,61,177,181,150,192,206,253,214,64,215,174,39,191,231,61,246,63,172,11,244,61,22,35,221,61,87,117,114,96,214,140,200,192,222,141,246,89,20,127,219,63,77,234,6,214,143,60,222,61,195,116,97,113,182,169,112,192,11,36,25,83,95,1,22,64,151,128,30,212,103,156,223,61,248,104,50,226,132,135,200,64,172,166,35,52,13,196,18,64,10,17,60,179,180,106,226,61,210,92,12,189,201,169,162,192,43,33,90,86,90,121,226,63,165,50,2,112,49,246,221,61,219,33,5,28,35,100,196,64,170,183,148,96,98,223,24,64,11,45,225,165,156,9,220,61,236,8,94,47,88,255,128,192,63,246,64,76,62,165,247,63,253,122,253,9,211,175,221,61,85,237,233,22,25,187,212,64,52,61,185,138,235,230,1,64,99,117,220,63,62,195,219,61,193,28,66,55,15,183,177,192,79,137,15,223,206,205,8,64,180,228,229,11,251,79,220,61,205,52,209,79,7,17,83,64,4,193,212,176,142,96,22,64,92,156,234,113,89,150,220,61,70,248,172,165,103,169,141,64,117,42,240,128,120,178,22,64,99,117,220,63,62,195,219,61,100,27,164,95,239,102,202,64,45,247,255,250,179,146,1,64,187,189,215,217,223,124,219,61,239,209,85,25,175,78,199,64,51,24,68,32,110,57,16,64,106,129,100,113,198,33,210,62,191,174,231,106,19,139,184,64,243,179,51,122,165,36,5,64,66,202,161,234,135,71,155,62,0,0,0,0,0,0,0,0,240,133,44,127,124,217,18,64,71,41,40,252,172,116,128,62,229,176,231,106,19,139,200,64,48,161,112,224,79,129,3,64,77,228,94,169,133,233,84,62,248,146,152,48,146,169,106,64,216,253,20,219,101,70,250,63,187,183,47,173,213,41,82,62,159,45,181,24,135,141,128,64,48,67,32,237,56,11,18,64,81,229,84,43,111,184,76,62,223,35,71,172,88,47,12,192,148,128,165,174,13,9,248,63,216,98,160,225,34,69,65,62,208,191,184,175,94,76,58,64,202,54,231,21,140,160,222,63,13,90,224,27,74,205,64,62,46,137,131,233,115,109,99,64,35,180,237,205,210,4,21,64,11,188,56,137,2,5,53,62,124,125,102,118,69,114,182,64,230,22,4,160,155,187,18,64,133,85,239,130,30,240,52,62,49,157,59,153,127,128,182,64,62,12,127,22,227,77,232,63,90,128,69,127,113,247,50,62,163,103,186,164,177,103,180,64,155,108,49,175,139,29,24,64,28,83,109,180,205,142,49,62,95,106,63,170,69,116,28,192,188,206,111,96,190,49,175,63,35,193,94,146,34,10,51,62,229,190,238,87,28,249,242,64,76,192,23,117,153,5,13,64,168,23,83,255,50,38,44,62,34,196,45,144,78,104,210,64,176,180,94,156,144,159,2,64,77,121,94,185,245,55,39,62,152,94,248,199,169,174,183,64,40,144,7,146,223,89,244,63,118,98,10,23,165,129,45,62,203,136,216,78,46,60,136,192,121,40,243,87,20,235,231,63,118,241,97,250,10,125,38,62,2,122,205,234,227,188,183,64,163,188,249,135,217,17,13,64,207,199,175,141,32,6,43,62,165,151,70,3,240,197,105,64,129,249,74,113,108,151,22,64,193,8,119,174,80,218,37,62,203,107,151,201,95,165,152,64,185,254,250,116,126,238,24,64,191,249,38,255,110,13,35,62,75,142,234,93,52,141,107,192,38,181,125,179,192,243,244,63,57,225,51,12,65,223,34,62,144,37,222,71,122,224,182,64,212,219,75,140,248,65,3,64,185,18,219,3,146,226,40,62,87,13,209,135,98,121,182,64,139,228,205,15,147,116,23,64,44,175,72,60,243,86,30,62,248,146,152,48,146,169,122,64,16,40,251,228,177,33,232,63,198,109,192,9,206,219,29,62,164,197,101,81,98,226,136,192,218,173,243,220,51,184,5,64,50,192,147,87,176,30,29,62,202,174,96,141,158,84,128,64,90,212,67,14,243,8,5,64,18,6,211,115,129,54,27,62,166,157,12,161,141,131,181,64,151,134,15,92,77,117,245,63,79,36,91,143,67,210,25,62,26,2,72,185,80,87,110,192,59,251,116,131,59,44,216,63,194,150,201,167,196,169,26,62,23,138,9,164,111,198,128,192,69,169,143,80,203,60,7,64,168,237,83,223,82,137,23,62,164,197,101,81,98,226,120,192,26,138,59,222,228,63,244,63,133,121,70,118,244,57,32,62,216,219,165,142,36,197,181,192,157,66,111,112,112,167,17,64,30,182,187,163,111,149,29,62,39,234,98,217,198,181,183,64,140,249,200,204,86,145,3,64,237,101,203,126,103,79,19,62,113,28,181,24,135,141,144,64,50,50,127,135,205,42,20,64,14,232,50,21,190,156,21,62,30,197,19,35,142,76,129,64,210,181,168,175,228,203,14,64,103,5,42,165,141,141,12,62,76,202,198,75,191,189,141,64,2,202,131,77,205,196,3,64,37,72,4,117,154,90,10,62,59,198,163,193,0,86,178,64,69,88,143,38,215,115,21,64,157,203,189,168,216,249,9,62,143,214,60,58,120,23,149,64,55,28,155,191,55,189,240,63,205,255,8,219,248,160,10,62,222,152,102,6,102,23,38,192,145,83,242,236,29,110,207,63,109,9,32,125,68,131,4,62,176,220,119,177,84,196,160,64,144,99,225,167,78,44,18,64,171,239,78,75,46,132,3,62,200,215,79,147,148,96,180,64,46,17,81,71,37,183,16,64,139,66,227,170,5,110,8,62,248,71,150,206,16,80,155,64,219,60,181,202,177,188,23,64,160,63,102,27,64,37,1,62,11,94,92,249,58,130,199,64,71,78,46,223,93,251,227,63,65,172,203,172,45,14,7,62,105,101,12,189,201,169,146,192,203,183,123,15,80,139,16,64,24,195,31,79,126,196,0,62,1,154,115,54,93,217,182,64,93,83,118,179,108,173,1,64,102,48,46,175,95,86,5,62,84,207,51,10,127,38,185,64,209,108,33,63,80,19,18,64,204,227,99,232,16,2,1,62,164,55,253,85,153,142,184,192,46,135,39,5,39,228,253,63,238,200,25,110,9,86,255,61,126,247,36,182,206,110,180,64,243,202,207,239,246,86,244,63,92,227,147,110,19,254,254,61,176,153,164,251,160,224,179,64,10,176,32,177,3,133,181,63,187,4,129,214,153,228,253,61,248,96,89,182,45,11,182,64,43,2,229,180,124,152,10,64,216,104,72,14,45,152,250,61,125,186,69,22,138,112,197,64,3,135,16,138,191,53,16,64,145,141,130,127,118,203,2,62,161,237,99,124,69,167,3,65,127,126,89,134,170,187,6,64,163,207,179,128,143,239,1,62,203,107,151,201,95,165,168,64,43,76,76,8,55,96,1,64,223,65,58,220,17,197,249,61,11,246,186,32,199,110,181,64,68,97,201,181,158,238,19,64,238,129,112,113,79,238,252,61,106,181,72,89,151,231,182,64,42,189,123,239,139,47,18,64,99,188,133,60,248,42,254,61,152,120,114,147,229,172,187,64,230,170,177,56,39,188,224,63,135,107,236,72,252,59,245,61,101,149,164,251,160,224,163,64,209,92,200,159,127,97,9,64,69,60,25,18,125,216,247,61,86,61,142,214,122,82,178,64,152,34,137,246,98,172,247,63,215,218,245,20,185,200,245,61,202,78,86,68,145,14,137,64,233,3,161,115,185,108,12,64,142,253,52,26,39,1,242,61,79,149,239,25,193,55,122,64,64,233,250,244,142,105,227,63,193,122,36,181,220,10,241,61,174,43,74,47,165,180,186,64,176,184,162,14,215,28,8,64,2,241,160,232,21,214,240,61,210,214,101,81,98,226,152,192,13,66,113,174,254,19,22,64,114,181,18,213,123,236,238,61,176,220,119,177,84,196,176,64,130,111,139,19,14,6,7,64,85,195,248,163,116,105,237,61,9,136,96,84,203,66,188,64,248,212,76,31,3,175,249,63,223,136,227,216,203,44,236,61,193,40,166,170,156,135,182,64,155,255,143,199,151,6,228,63,40,145,168,221,47,189,232,61,163,103,186,164,177,103,196,64,232,65,149,40,232,255,11,64,195,36,28,161,56,121,239,61,82,156,244,213,77,226,104,64,50,41,173,219,122,135,22,64,85,195,248,163,116,105,237,61,58,110,114,164,45,255,131,64,226,234,233,235,69,215,23,64,3,198,156,222,67,13,232,61,162,144,65,71,99,27,123,192,60,96,223,205,161,76,1,64,48,248,236,164,136,185,236,61,245,47,12,2,182,27,128,64,96,127,238,216,195,147,2,64,91,14,152,120,229,198,231,61,174,110,29,229,88,152,183,64,254,78,91,111,16,115,4,64,121,0,178,169,236,73,233,61,127,103,151,201,95,165,184,64,41,16,176,53,223,237,18,64,26,109,23,59,218,50,239,61,228,143,121,51,243,74,2,65,38,166,153,91,18,139,21,64,157,61,107,175,100,42,229,61,189,64,141,158,23,95,191,64,68,95,205,67,158,123,20,64,32,42,100,22,215,192,228,61,162,237,251,100,40,107,182,64,93,164,227,121,143,66,19,64,62,170,208,64,82,19,235,61,99,228,118,121,241,208,189,64,4,12,205,160,154,133,204,63,62,170,208,64,82,19,235,61,100,247,254,181,5,178,82,64,9,147,28,143,157,72,15,64,90,128,69,127,113,247,226,61,190,206,141,182,140,167,183,64,184,245,180,114,24,92,246,63,120,114,95,176,120,122,228,61,118,146,155,203,167,239,183,192,70,98,36,169,188,85,21,64,134,36,67,76,66,212,226,61,172,0,195,24,93,108,174,64,58,221,48,12,131,32,17,64,222,108,62,230,227,141,226,61,82,178,217,167,225,110,194,64,67,76,244,191,125,235,23,64,47,220,71,178,160,26,227,61,24,216,129,120,187,97,162,192,186,205,210,80,206,220,18,64,171,239,78,75,46,132,227,61,115,84,254,77,196,156,186,64,140,178,139,93,51,109,224,63,112,11,27,233,31,126,224,61,24,216,129,120,187,97,178,192,246,63,182,232,65,218,200,63,142,253,52,26,39,1,226,61,180,67,64,33,107,112,241,192,66,19,142,68,91,218,56,63,193,122,36,181,220,10,225,61,219,37,210,127,141,135,184,64,180,119,42,6,102,250,0,64,253,122,253,9,211,175,221,61,75,250,55,12,199,112,184,192,41,149,131,232,47,69,236,63,134,72,175,47,198,62,131,62,191,174,231,106,19,139,184,64,181,100,245,17,111,26,242,63,103,183,211,145,215,166,60,62,229,176,231,106,19,139,200,64,253,67,230,9,5,206,232,63,77,92,180,220,27,109,25,62,46,137,131,233,115,109,99,64,112,48,72,184,152,184,222,63,255,96,83,131,198,11,16,62,248,146,152,48,146,169,106,64,106,88,94,130,235,147,24,64,242,202,20,218,228,80,11,62,159,45,181,24,135,141,128,64,134,75,173,72,99,136,7,64,43,218,76,70,197,31,7,62,124,125,102,118,69,114,182,64,48,94,180,70,139,211,190,63,54,67,140,121,249,22,7,62,49,157,59,153,127,128,182,64,229,228,100,51,158,68,21,64,172,196,74,65,92,187,250,61,75,142,234,93,52,141,107,192,86,156,134,130,251,184,8,64,11,230,55,169,226,161,249,61,152,94,248,199,169,174,183,64,137,187,137,64,70,7,8,64,40,145,168,221,47,189,248,61,2,122,205,234,227,188,183,64,17,104,47,41,222,179,254,63,237,172,116,123,33,183,245,61,69,68,171,63,52,87,53,192,43,167,223,179,229,46,22,64,3,127,243,225,137,165,245,61,26,2,72,185,80,87,110,192,226,1,20,12,175,40,254,63,47,220,71,178,160,26,243,61,165,151,70,3,240,197,105,64,192,229,124,116,148,66,244,63,156,175,24,182,240,90,240,61,23,138,9,164,111,198,128,192,78,81,162,227,114,33,18,64,77,92,180,220,27,109,233,61,202,174,96,141,158,84,128,64,231,95,233,129,49,80,18,64,2,241,160,232,21,214,240,61,34,196,45,144,78,104,210,64,97,84,21,196,135,204,226,63,40,145,168,221,47,189,232,61,248,146,152,48,146,169,122,64,103,247,243,140,206,154,20,64,187,189,215,217,223,124,235,61,30,197,19,35,142,76,129,64,181,166,83,0,135,108,21,64,215,147,76,24,255,96,227,61,163,103,186,164,177,103,180,64,37,214,190,141,136,98,245,63,92,156,234,113,89,150,220,61,144,37,222,71,122,224,182,64,130,89,24,87,153,245,16,64,67,3,202,66,187,110,48,62,191,174,231,106,19,139,184,64,119,144,141,246,46,210,22,64,10,88,229,175,110,210,244,61,229,176,231,106,19,139,200,64,245,17,134,110,231,160,21,64,48,248,236,164,136,185,236,61,46,137,131,233,115,109,99,64,183,53,3,11,73,214,255,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,184,143,154,126,162,101,63,231,42,171,35,38,44,154,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,187,164,98,74,193,166,16,63,58,140,48,226,142,121,85,190,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,52,11,180,59,164,232,62,58,140,48,226,142,121,69,62,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,165,29,171,82,130,231,62,58,140,48,226,142,121,69,62,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,157,36,2,122,134,21,211,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,78,122,190,234,241,192,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,140,241,130,4,156,192,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,60,241,255,87,219,188,190,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,122,41,101,231,167,183,190,58,140,48,226,142,121,69,190,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,9,202,167,166,168,35,181,190,58,140,48,226,142,121,69,190,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,9,202,167,166,168,35,165,190,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,202,167,166,168,35,165,190,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,147,201,37,101,189,222,158,62,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,69,20,238,240,50,158,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,252,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,193,157,118,190,192,40,152,62], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,248,255,255,255,12,0,0,0,0,0,0,0,43,105,164,41,43,27,144,190,43,105,164,41,43,27,128,190,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,140,48,226,142,121,149,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,122,234,5,93,202,146,62,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,246,216,142,144,30,146,62,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,239,113,199,23,196,114,145,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,184,223,136,139,47,140,190,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,2,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,133,166,153,172,89,128,137,62,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,2,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,193,157,118,190,192,40,136,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,243,255,255,255,255,255,255,255,72,175,188,154,242,215,122,190,72,175,188,154,242,215,106,62,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,118,131,13,244,245,33,132,62,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,179,122,234,5,93,202,130,190,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,122,234,5,93,202,130,62,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,122,234,5,93,202,130,190,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,179,122,234,5,93,202,130,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,254,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,239,113,199,23,196,114,129,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,192,2,119,36,135,125,190,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,208,192,2,119,36,135,125,62,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,208,192,2,119,36,135,125,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,159,254,121,59,62,49,173,190,0,0,0,0,0,0,0,0,26,181,98,42,193,53,124,61,66,22,120,219,206,157,17,64,242,146,96,98,74,100,202,63,190,15,64,222,208,99,123,61,212,169,146,207,224,213,222,63,103,150,137,89,122,54,204,63,202,44,61,136,238,205,116,61,96,49,17,120,96,203,239,63,70,124,97,124,244,184,224,63,252,61,194,49,191,98,116,61,134,199,227,138,80,211,10,64,35,189,43,122,128,45,225,63,14,110,193,38,68,226,112,61,61,244,212,137,167,68,22,64,173,20,245,93,98,77,203,63,79,42,154,127,13,233,102,61,102,238,124,107,3,134,22,64,173,20,245,93,98,77,219,63,18,222,68,185,39,27,106,61,136,28,156,204,223,63,1,64,181,156,70,123,58,243,224,63,35,164,71,180,61,207,91,61,111,15,91,177,68,178,255,63,190,163,70,123,58,243,240,63,88,92,126,62,64,131,95,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,174,122,107,180,206,78,124,61,70,112,54,46,22,166,6,64,242,146,96,98,74,100,202,63,126,76,144,234,26,115,123,61,65,205,107,13,177,197,20,64,103,150,137,89,122,54,204,63,85,84,100,129,43,210,116,61,237,170,246,181,248,211,22,64,70,124,97,124,244,184,224,63,189,61,204,41,254,95,116,61,202,175,120,73,182,132,252,63,35,189,43,122,128,45,225,63,11,172,157,194,159,43,114,61,235,27,35,201,207,37,16,64,173,20,245,93,98,77,203,63,138,134,55,68,214,2,103,61,54,137,39,139,163,59,16,64,173,20,245,93,98,77,219,63,117,132,119,217,248,179,105,61,132,229,78,167,227,194,227,63,181,156,70,123,58,243,224,63,89,202,192,149,171,162,99,189,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,116,156,221,179,196,91,61,89,236,110,89,251,74,218,63,190,163,70,123,58,243,240,63,26,192,78,135,65,99,90,61,222,194,121,244,159,215,9,64,173,20,245,93,98,77,203,63,69,1,138,74,1,63,83,61,171,218,242,195,6,158,24,64,181,156,70,123,58,243,224,63,103,73,227,164,138,214,75,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,235,186,47,123,70,67,62,44,82,231,165,240,15,242,63,173,20,245,93,98,77,219,63,251,198,201,252,54,176,64,62,152,189,45,60,248,165,5,64,242,146,96,98,74,100,202,63,106,230,224,243,57,48,64,62,78,216,21,124,190,135,1,64,103,150,137,89,122,54,204,63,64,87,83,21,144,8,58,62,160,62,217,37,63,252,9,64,190,163,70,123,58,243,240,63,197,156,175,145,229,152,56,62,228,110,41,52,169,71,22,64,70,124,97,124,244,184,224,63,42,86,185,48,102,31,56,62,153,12,137,142,195,58,20,64,35,189,43,122,128,45,225,63,26,61,108,123,231,93,17,62,158,24,142,204,226,201,11,64,91,55,144,114,255,34,125,63,177,133,180,250,157,241,8,62,159,53,188,130,52,95,215,63,129,207,119,198,9,122,228,63,63,77,146,34,16,21,14,62,139,20,23,77,249,154,250,63,207,211,42,96,214,216,218,63,173,142,191,26,239,115,2,62,223,129,225,246,38,62,245,63,138,85,191,91,238,193,219,63,220,104,162,229,70,188,3,62,7,207,151,166,52,0,17,64,173,20,245,93,98,77,203,63,61,104,127,42,209,74,254,61,255,82,39,202,62,202,12,64,5,228,233,184,215,108,249,63,208,236,88,34,232,80,245,61,19,248,215,119,33,141,19,64,196,17,212,123,23,214,240,63,158,67,113,116,33,14,246,61,179,21,142,249,25,12,239,63,181,156,70,123,58,243,224,63,198,247,135,209,246,187,244,61,1,99,253,224,22,240,21,64,184,53,185,122,93,16,241,63,79,14,110,38,187,254,245,61,233,161,206,54,221,197,6,64,141,41,123,40,228,36,195,63,231,205,207,125,36,97,237,61,212,112,210,41,5,55,226,63,19,175,146,199,195,63,212,63,166,10,116,97,237,27,234,61,119,70,69,5,22,125,0,64,34,24,30,85,146,31,205,63,106,27,32,108,212,68,227,61,181,200,13,163,9,182,16,64,103,150,137,89,122,54,188,63,162,35,12,29,76,176,229,61,140,217,207,89,61,33,23,64,190,145,140,104,40,134,179,63,150,218,67,253,208,2,225,61,69,227,69,173,215,210,22,64,215,91,124,125,174,126,224,63,50,85,155,120,250,11,226,61,106,201,144,86,92,167,20,64,91,193,105,232,159,195,162,63,49,196,68,15,56,73,224,61,118,113,181,77,61,112,8,64,19,175,146,199,195,63,228,63,43,68,21,39,73,4,225,61,192,41,168,176,208,137,2,64,33,98,175,232,176,72,164,63,98,80,239,250,45,237,219,61,96,68,223,83,161,142,1,64,91,193,105,232,159,195,178,63,140,123,78,63,210,201,216,61,239,169,102,106,230,242,6,64,55,17,204,102,50,123,201,63,11,139,243,142,148,211,215,61,244,150,51,166,5,178,19,64,146,221,16,121,198,103,225,63,15,155,46,222,219,81,213,61,27,52,15,55,91,29,8,64,156,6,92,171,165,95,238,63,115,9,168,193,87,183,212,61,66,14,248,106,155,163,5,64,242,146,96,98,74,100,186,63,61,135,108,39,18,37,206,61,204,6,223,77,63,11,24,64,173,20,245,93,98,77,235,63,148,156,216,50,79,128,204,61,59,141,144,38,71,62,255,63,193,236,197,122,134,204,202,63,107,141,26,71,204,21,204,61,208,40,51,200,41,171,7,64,152,60,36,65,62,206,203,63,92,129,4,70,54,152,203,61,27,120,112,252,244,199,251,63,124,110,90,118,158,181,203,63,129,60,242,71,62,253,202,61,211,108,121,143,117,86,9,64,222,186,143,69,38,229,202,63,26,52,48,98,41,128,200,61,169,228,94,131,219,161,232,63,240,239,92,197,79,180,212,63,153,103,96,47,4,61,199,61,166,103,93,75,98,237,11,64,63,214,243,106,252,80,176,63,145,1,47,139,215,131,198,61,119,156,57,189,139,146,224,63,240,239,92,197,79,180,228,63,74,167,247,117,142,111,203,61,106,145,14,107,82,151,10,64,91,55,144,114,255,34,141,63,189,250,113,146,129,193,199,61,52,60,196,155,104,39,17,64,113,193,222,19,77,140,231,63,85,255,71,138,214,123,195,61,23,166,145,139,142,21,24,64,65,70,45,117,43,217,224,63,254,81,17,180,241,33,195,61,235,216,2,126,109,102,18,64,40,243,95,129,73,13,225,63,175,209,176,27,198,233,194,61,24,194,213,34,234,101,17,64,218,124,2,230,203,248,181,63,142,97,94,81,113,79,194,61,29,226,137,50,117,199,2,64,107,154,58,236,61,159,134,63,85,182,231,1,54,88,192,61,158,252,112,232,90,40,19,64,186,210,122,130,3,211,224,63,194,19,106,240,70,31,192,61,197,227,27,138,167,83,23,64,176,102,18,116,113,19,225,63,126,226,69,7,245,161,191,61,181,33,199,15,134,138,5,64,221,153,178,80,170,8,190,63,177,152,117,6,172,22,191,61,91,46,149,165,203,114,0,64,6,107,49,127,110,227,201,63,155,241,196,214,44,167,187,61,253,218,238,98,204,183,231,63,124,143,55,107,26,146,184,63,252,54,43,121,147,94,191,61,206,94,54,56,125,150,15,64,242,154,70,123,58,243,0,64,2,20,108,250,199,77,67,62,67,244,107,150,196,92,23,64,173,20,245,93,98,77,219,63,108,1,42,138,219,200,64,62,115,78,201,76,27,19,242,63,242,146,96,98,74,100,202,63,67,155,219,117,42,55,64,62,227,150,102,236,62,212,227,63,103,150,137,89,122,54,204,63,144,214,59,56,65,3,58,62,168,206,25,166,4,215,250,63,190,163,70,123,58,243,240,63,72,230,179,174,193,160,56,62,196,108,101,101,241,0,16,64,70,124,97,124,244,184,224,63,169,57,213,187,8,29,56,62,234,201,126,206,206,228,11,64,35,189,43,122,128,45,225,63,129,28,112,161,44,172,17,62,156,10,247,6,197,8,254,63,91,55,144,114,255,34,125,63,80,120,244,210,116,251,8,62,133,40,245,241,4,79,20,64,129,207,119,198,9,122,228,63,159,3,3,223,161,2,14,62,235,70,136,10,210,55,183,63,207,211,42,96,214,216,218,63,37,64,99,100,252,121,2,62,34,172,219,182,83,40,24,64,138,85,191,91,238,193,219,63,135,182,43,34,78,64,0,62,178,203,243,80,133,57,1,64,173,20,245,93,98,77,203,63,150,232,152,128,176,162,254,61,105,123,12,21,68,61,20,64,181,156,70,123,58,243,224,63,78,31,170,67,159,72,254,61,23,122,8,57,73,57,0,64,5,228,233,184,215,108,249,63,89,125,245,43,127,80,245,61,222,251,245,192,154,138,10,64,196,17,212,123,23,214,240,63,44,181,107,18,31,187,244,61,224,186,125,197,67,79,15,64,184,53,185,122,93,16,241,63,95,152,226,246,238,250,245,61,81,141,60,108,128,104,244,63,141,41,123,40,228,36,195,63,28,134,115,250,184,112,237,61,229,41,133,132,149,52,21,64,19,175,146,199,195,63,212,63,157,208,201,118,59,38,234,61,166,243,100,12,224,83,223,63,34,24,30,85,146,31,205,63,175,200,109,109,175,44,230,61,42,230,95,133,96,153,3,64,103,150,137,89,122,54,188,63,190,134,242,67,140,172,229,61,223,6,45,221,126,216,16,64,190,145,140,104,40,134,179,63,180,17,146,107,159,16,225,61,8,49,21,194,46,144,16,64,215,91,124,125,174,126,224,63,229,136,175,79,35,15,226,61,42,202,143,182,64,188,12,64,91,193,105,232,159,195,162,63,186,16,234,35,186,61,224,61,39,26,57,28,221,25,248,63,19,175,146,199,195,63,228,63,97,53,118,53,171,4,225,61,222,209,7,31,98,224,231,63,33,98,175,232,176,72,164,63,135,70,95,32,255,195,219,61,122,43,126,72,54,17,228,63,91,193,105,232,159,195,178,63,10,93,107,113,113,92,217,61,25,167,71,189,131,37,244,63,55,17,204,102,50,123,201,63,112,235,136,250,105,209,215,61,35,137,166,244,113,211,10,64,146,221,16,121,198,103,225,63,2,126,244,104,170,82,213,61,249,116,224,170,175,41,247,63,156,6,92,171,165,95,238,63,59,120,255,13,150,37,213,61,49,45,20,201,155,237,241,63,242,146,96,98,74,100,186,63,63,109,61,111,135,43,206,61,35,89,78,241,236,193,17,64,173,20,245,93,98,77,235,63,68,137,19,13,227,144,204,61,12,238,181,165,169,63,216,63,193,236,197,122,134,204,202,63,109,219,204,249,226,24,204,61,77,228,164,108,168,48,246,63,152,60,36,65,62,206,203,63,199,26,136,125,1,164,203,61,206,132,27,115,199,23,197,63,124,110,90,118,158,181,203,63,179,42,28,118,200,15,203,61,66,110,120,135,80,130,249,63,222,186,143,69,38,229,202,63,187,252,157,58,158,235,208,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,209,150,221,205,114,200,61,27,5,198,26,66,236,21,64,240,239,92,197,79,180,212,63,89,22,52,104,34,201,198,61,194,46,32,80,229,230,254,63,63,214,243,106,252,80,176,63,90,70,131,227,42,138,198,61,31,216,31,57,31,235,20,64,240,239,92,197,79,180,228,63,193,181,127,74,20,210,203,61,246,141,165,1,163,178,251,63,91,55,144,114,255,34,141,63,217,155,143,44,186,154,199,61,29,208,86,5,113,183,5,64,113,193,222,19,77,140,231,63,146,112,188,150,18,126,195,61,223,95,247,206,221,205,17,64,65,70,45,117,43,217,224,63,0,118,35,55,106,32,195,61,189,227,19,112,46,60,8,64,40,243,95,129,73,13,225,63,170,37,192,32,72,231,194,61,84,55,16,244,97,58,6,64,218,124,2,230,203,248,181,63,95,28,11,102,152,32,194,61,53,86,205,129,159,70,233,63,107,154,58,236,61,159,134,63,9,61,28,233,138,87,192,61,197,243,41,132,18,192,9,64,186,210,122,130,3,211,224,63,18,221,217,222,2,30,192,61,57,14,8,18,253,10,17,64,176,102,18,116,113,19,225,63,22,186,237,71,227,218,191,61,33,228,44,185,155,238,241,63,221,153,178,80,170,8,190,63,27,206,143,93,50,36,191,61,131,227,194,230,215,108,221,63,6,107,49,127,110,227,201,63,9,144,48,125,108,126,191,61,251,191,23,119,9,92,1,64,124,143,55,107,26,146,184,63,152,88,86,143,173,93,191,61,31,39,201,137,114,5,3,64,242,154,70,123,58,243,0,64,108,174,227,212,251,97,55,62,247,212,34,35,120,220,252,63,173,20,245,93,98,77,203,63,3,65,128,127,219,173,48,62,112,8,88,198,169,172,18,64,181,156,70,123,58,243,224,63,95,111,152,229,126,236,22,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,175,71,59,227,161,249,61,194,31,57,39,10,155,21,64,242,146,96,98,74,100,202,63,253,236,169,52,208,228,243,61,127,96,90,40,203,186,19,64,103,150,137,89,122,54,204,63,6,52,166,106,194,163,243,61,224,224,203,56,172,60,9,64,141,41,123,40,228,36,179,63,51,252,221,133,175,44,241,61,229,157,108,22,136,66,13,64,173,20,245,93,98,77,219,63,116,56,26,231,177,161,234,61,40,141,44,130,52,246,22,64,190,163,70,123,58,243,240,63,246,85,55,199,122,229,226,61,253,38,88,32,221,103,251,63,35,189,43,122,128,45,225,63,50,228,142,35,208,186,224,61,200,67,160,127,41,127,2,64,70,124,97,124,244,184,224,63,227,154,43,196,23,226,213,61,43,97,195,93,43,34,21,64,190,145,140,104,40,134,163,63,6,59,229,53,163,95,203,61,112,99,181,14,115,49,17,64,207,211,42,96,214,216,218,63,171,187,108,152,86,32,200,61,23,189,134,229,1,149,24,64,91,55,144,114,255,34,125,63,209,0,69,55,75,113,188,61,9,240,157,90,212,39,8,64,129,207,119,198,9,122,228,63,249,149,53,120,137,77,116,63,186,220,62,19,184,237,13,64,181,156,70,123,58,243,224,63,242,104,151,62,22,69,102,63,57,184,87,82,101,16,16,64,173,20,245,93,98,77,203,63,108,233,196,66,119,86,89,63,224,48,25,245,61,93,1,64,190,145,140,104,40,134,163,63,194,121,54,125,160,106,75,63,45,49,149,149,135,183,2,64,141,41,123,40,228,36,179,63,210,44,142,133,24,63,51,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,168,86,165,231,125,31,63,91,3,152,253,233,92,16,64,190,163,70,123,58,243,240,63,235,87,227,32,225,221,19,63,69,161,15,9,161,238,9,64,173,20,245,93,98,77,219,63,41,90,83,30,114,92,244,62,75,219,179,202,250,49,240,63,242,146,96,98,74,100,202,63,194,89,101,111,91,207,243,62,16,250,124,190,225,35,15,64,103,150,137,89,122,54,204,63,122,71,17,168,0,82,244,62,163,212,4,24,237,48,19,64,141,41,123,40,228,36,195,63,80,196,175,47,114,21,238,62,116,13,153,170,161,243,14,64,70,124,97,124,244,184,224,63,245,146,80,169,242,127,237,62,255,238,131,202,102,118,222,63,35,189,43,122,128,45,225,63,79,6,29,233,211,185,232,62,28,155,59,156,63,225,232,63,190,145,140,104,40,134,179,63,196,175,218,191,16,245,224,62,90,199,149,72,136,9,10,64,91,193,105,232,159,195,162,63,250,243,129,97,222,248,223,62,146,227,251,166,24,233,16,64,33,98,175,232,176,72,164,63,136,181,112,247,11,11,218,62,86,215,223,171,33,222,209,63,91,193,105,232,159,195,178,63,148,86,24,176,108,80,210,62,177,216,93,154,6,195,17,64,5,228,233,184,215,108,249,63,91,225,116,180,134,207,207,62,244,219,24,181,37,160,20,64,91,55,144,114,255,34,125,63,58,203,0,162,87,118,202,62,219,34,48,28,198,160,24,64,207,211,42,96,214,216,218,63,85,7,16,205,51,232,201,62,140,251,83,213,223,244,3,64,129,207,119,198,9,122,228,63,73,111,254,152,33,100,199,62,20,156,202,13,190,188,19,64,103,150,137,89,122,54,188,63,128,241,186,87,50,128,201,62,214,222,208,63,143,148,19,64,212,207,191,162,222,33,25,64,64,87,58,76,163,15,195,62,95,63,110,85,19,29,21,64,242,146,96,98,74,100,186,63,66,179,36,243,223,34,194,62,143,191,173,222,63,54,23,64,19,175,146,199,195,63,212,63,204,204,230,224,236,167,189,62,92,255,157,38,144,124,161,63,192,127,101,195,51,109,36,64,225,5,12,202,175,163,182,62,239,209,178,134,93,3,0,64,98,12,90,4,16,81,88,63,227,68,47,160,184,161,179,62,25,190,243,149,227,101,3,64,19,175,146,199,195,63,228,63,74,68,44,224,107,176,177,62,88,225,178,187,138,252,8,64,138,85,191,91,238,193,219,63,95,166,105,211,107,113,176,62,209,48,238,204,198,53,8,64,196,17,212,123,23,214,240,63,80,49,25,54,175,78,178,62,60,138,216,195,50,67,9,64,104,169,108,33,127,153,242,63,193,160,128,61,204,90,167,62,83,122,84,225,120,77,234,63,184,53,185,122,93,16,241,63,252,152,7,233,8,23,163,62,51,138,168,247,56,43,245,63,156,6,92,171,165,95,238,63,86,233,148,238,171,48,166,62,228,91,54,99,191,178,209,63,62,244,15,95,28,19,235,63,224,102,252,97,129,16,165,62,4,27,72,60,31,45,23,64,116,117,114,8,66,244,194,63,28,225,42,171,218,39,165,62,193,245,162,225,116,111,231,63,83,190,184,60,86,183,204,63,229,106,63,181,56,111,160,62,180,170,193,63,237,127,8,64,123,195,29,3,147,185,10,64,175,211,183,9,43,58,153,62,125,5,31,209,104,90,18,64,248,240,70,104,23,1,162,63,41,99,139,103,213,223,148,62,81,193,199,130,33,253,245,63,63,214,243,106,252,80,176,63,239,119,173,253,32,145,148,62,210,246,108,22,154,227,16,64,107,154,58,236,61,159,134,63,177,50,16,197,42,43,147,62,105,237,154,8,176,182,13,64,166,221,131,72,134,85,195,63,143,249,252,12,181,16,147,62,80,119,206,0,166,200,6,64,133,50,210,104,57,11,165,63,214,164,212,244,3,238,143,62,90,113,7,128,185,24,14,64,34,24,30,85,146,31,205,63,184,22,7,192,2,55,146,62,213,18,212,36,169,147,240,63,121,249,165,151,123,245,153,63,113,120,105,180,169,47,143,62,245,62,129,31,160,247,221,63,218,124,2,230,203,248,181,63,246,30,123,112,200,65,137,62,22,19,158,251,137,41,19,64,242,154,70,123,58,243,0,64,219,37,119,252,243,89,142,62,234,195,163,75,209,180,250,63,42,89,88,168,91,98,178,63,200,66,206,154,31,185,141,62,194,104,11,235,113,128,15,64,98,12,90,4,16,81,104,63,184,116,245,20,80,83,141,62,155,9,162,163,32,232,188,63,240,249,157,168,108,231,179,63,8,90,117,175,131,216,138,62,164,123,191,216,186,30,16,64,193,236,197,122,134,204,202,63,230,16,14,94,124,99,138,62,23,124,245,221,175,252,235,63,152,60,36,65,62,206,203,63,98,220,248,18,165,144,137,62,219,5,25,68,209,173,23,64,6,107,49,127,110,227,201,63,217,246,178,50,200,62,134,62,24,161,115,74,164,100,4,64,113,193,222,19,77,140,231,63,107,20,132,21,119,32,133,62,181,202,181,157,49,28,21,64,224,225,195,18,147,198,231,63,41,119,113,100,154,151,136,62,248,238,137,53,123,132,8,64,240,239,92,197,79,180,212,63,232,202,112,47,168,68,135,62,10,175,81,20,106,23,8,64,230,127,183,73,240,186,193,63,49,196,184,228,191,202,132,62,96,101,37,234,179,5,16,64,215,91,124,125,174,126,224,63,241,86,41,194,215,248,133,62,85,214,181,226,80,77,253,63,173,20,245,93,98,77,235,63,216,167,112,130,21,40,126,62,224,190,15,57,99,226,242,63,55,17,204,102,50,123,201,63,209,227,178,125,128,23,125,62,82,91,245,225,169,217,213,63,146,221,16,121,198,103,225,63,78,145,71,28,91,12,127,62,164,156,120,185,22,158,227,63,186,210,122,130,3,211,224,63,118,87,76,20,137,171,126,62,44,110,29,254,79,204,13,64,176,102,18,116,113,19,225,63,114,63,128,170,150,67,117,62,25,45,81,105,192,123,3,64,97,76,81,19,112,169,247,63,186,182,195,46,229,240,115,62,106,212,114,205,79,86,12,64,124,110,90,118,158,181,203,63,17,154,177,206,170,87,118,62,1,23,138,165,81,51,12,64,71,251,15,95,28,19,251,63,226,65,157,162,97,123,115,62,107,6,37,164,43,212,245,63,222,186,143,69,38,229,202,63,246,238,175,10,197,22,115,62,239,192,128,140,15,175,3,64,217,63,147,110,104,152,218,63,89,178,237,60,183,111,114,62,206,224,157,16,221,150,17,64,221,153,178,80,170,8,190,63,216,119,7,63,245,101,115,62,156,9,116,188,171,43,16,64,19,175,146,199,195,63,244,63,33,50,115,140,225,171,114,62,233,221,144,60,158,235,6,64,11,39,65,170,235,153,238,63,13,128,110,21,143,28,116,62,91,177,20,39,159,14,20,64,91,55,144,114,255,34,141,63,61,164,72,81,92,182,113,62,245,121,107,7,139,3,3,64,240,239,92,197,79,180,228,63,84,36,0,42,73,208,115,62,135,154,35,149,21,47,10,64,12,82,119,185,180,79,249,63,160,1,248,197,11,48,113,62,250,198,152,194,139,53,21,64,124,143,55,107,26,146,184,63,40,6,252,142,88,190,112,62,178,1,214,203,205,198,21,64,181,217,28,98,44,35,178,63,238,51,50,204,114,35,108,62,96,67,182,56,135,220,16,64,65,70,45,117,43,217,224,63,245,23,233,77,127,158,107,62,154,73,249,219,74,52,191,63,40,243,95,129,73,13,225,63,122,50,163,237,36,129,111,62,111,167,116,9,137,244,2,64,101,121,217,238,155,38,180,63,82,221,237,96,107,187,112,62,74,77,98,88,41,20,244,63,187,23,250,209,128,22,58,64,144,149,178,112,55,74,112,62,241,196,78,226,6,184,22,64,59,10,176,28,180,134,188,63,105,70,171,215,117,103,103,62,199,172,247,162,215,130,227,63,183,70,43,109,43,3,246,63,73,136,213,62,23,41,105,62,70,47,8,192,25,37,19,64,158,218,210,156,60,73,189,63,129,104,51,142,76,46,100,62,200,211,176,35,138,173,242,63,255,117,92,184,250,137,249,63,193,80,143,25,53,253,102,62,163,126,7,228,192,79,248,63,230,127,183,73,240,186,209,63,53,246,114,253,71,171,107,62,2,224,133,138,189,196,253,63,59,10,176,28,180,134,204,63,176,244,16,140,2,144,104,62,80,38,129,81,214,108,232,63,91,193,105,232,159,195,194,63,34,142,9,128,97,220,97,62,179,67,133,203,129,197,244,63,121,249,165,151,123,245,169,63,220,173,27,131,15,32,100,62,57,52,62,155,129,190,240,63,60,10,178,120,161,97,223,63,177,120,11,74,164,62,94,62,79,35,18,218,230,121,11,64,141,41,123,40,228,36,211,63,249,128,12,205,114,82,98,62,18,28,206,94,172,48,4,64,73,74,214,83,41,132,214,63,206,171,68,212,50,132,92,62,8,118,234,188,65,60,7,64,164,142,173,200,125,5,228,63,217,55,59,165,70,210,95,62,223,241,180,246,219,244,226,63,9,162,158,220,111,37,188,63,87,138,211,245,150,68,91,62,203,78,217,251,100,104,19,64,110,203,191,162,222,33,41,64,246,192,44,75,180,131,88,62,120,254,141,155,56,52,11,64,225,199,29,3,147,185,26,64,241,33,228,141,196,236,88,62,109,104,115,155,9,40,23,64,149,32,36,232,142,62,161,63,252,72,167,17,114,96,91,62,176,226,158,196,52,112,164,63,98,59,223,32,162,182,242,63,109,219,37,143,249,151,88,62,145,254,144,132,252,78,6,64,203,127,97,124,244,184,240,63,249,234,131,130,120,227,84,62,43,93,45,206,193,83,10,64,111,23,250,33,92,124,242,63,162,17,105,197,246,218,83,62,175,46,146,140,160,149,5,64,74,137,67,3,204,60,114,63,208,217,99,214,201,175,81,62,58,46,32,76,70,34,8,64,103,150,137,89,122,54,220,63,239,163,97,151,87,108,80,62,209,186,140,208,203,74,22,64,113,62,5,171,64,178,176,63,6,235,19,193,24,199,78,62,232,200,139,193,246,178,247,63,45,230,118,172,95,37,238,63,203,48,102,4,2,145,82,62,113,71,222,82,220,195,246,63,218,160,206,154,40,253,202,63,137,59,221,28,46,110,82,62,107,166,95,233,120,193,11,64,128,136,27,33,156,157,203,63,202,42,248,119,60,224,77,62,126,97,172,235,95,125,24,64,242,146,96,98,74,100,218,63,146,140,116,43,173,42,78,62,172,102,121,129,63,93,250,63,232,2,245,232,193,205,165,63,205,122,12,72,11,74,78,62,168,33,186,143,123,245,23,64,108,114,193,92,248,231,204,63,182,189,45,164,101,103,71,62,159,242,73,203,109,171,6,64,183,128,93,108,244,12,219,63,15,139,8,168,0,126,70,62,72,203,177,18,75,74,224,63,53,110,200,201,55,203,211,63,224,252,114,237,55,43,77,62,66,136,1,6,22,132,20,64,33,98,175,232,176,72,180,63,234,78,117,208,4,234,69,62,226,43,41,228,42,211,238,63,161,1,76,69,8,164,194,63,144,16,99,165,85,49,70,62,8,3,177,207,76,202,9,64,242,0,54,5,97,185,252,63,99,29,95,186,242,84,78,62,125,133,90,118,60,72,3,64,190,145,140,104,40,134,195,63,229,215,220,187,36,225,68,62,27,108,37,130,18,171,2,64,169,20,241,165,135,151,181,63,99,108,123,241,44,189,68,62,222,95,180,176,13,204,24,64,12,65,5,199,230,92,244,63,22,32,224,85,97,69,71,62,96,213,164,96,237,233,6,64,248,240,70,104,23,1,178,63,128,204,67,29,165,235,70,62,120,78,46,254,196,170,226,63,242,84,215,186,202,45,203,63,238,12,130,130,107,208,70,62,108,92,160,220,35,59,17,64,103,212,18,1,250,108,203,63,2,25,193,217,251,140,74,62,246,177,12,167,200,253,6,64,203,229,140,2,42,165,199,63,159,50,105,66,130,119,71,62,115,184,19,96,217,173,7,64,205,203,174,41,78,138,193,63,214,69,24,66,118,35,67,62,226,0,41,83,154,144,20,64,226,67,24,26,9,48,5,64,76,123,248,2,179,188,68,62,104,186,124,112,244,32,18,64,128,233,86,77,92,2,220,63,162,206,200,134,34,100,65,62,6,51,200,93,184,38,2,64,186,84,25,57,234,111,210,63,121,250,14,7,211,223,64,62,102,133,61,152,224,56,16,64,31,31,58,159,16,20,202,63,211,154,85,247,189,77,63,62,159,19,128,197,125,110,21,64,108,114,193,92,248,231,188,63,46,239,53,35,133,75,68,62,75,201,151,3,73,15,17,64,192,255,124,10,44,223,224,63,163,251,109,118,167,37,68,62,219,68,82,70,59,44,179,63,169,57,16,236,72,7,225,63,135,199,189,45,128,103,62,62,7,17,130,207,225,197,254,63,24,229,198,206,140,31,228,63,72,153,173,6,49,226,67,62,123,227,113,6,22,195,7,64,52,211,62,7,216,142,196,63,6,177,166,183,223,188,65,62,88,151,124,179,207,157,10,64,207,211,42,96,214,216,234,63,237,211,220,15,206,208,59,62,182,181,201,251,175,163,7,64,32,79,122,168,134,17,0,64,119,161,98,79,128,179,57,62,169,105,114,111,119,62,237,63,193,116,101,195,51,109,52,64,250,150,86,144,147,185,57,62,93,245,170,149,169,244,9,64,245,81,141,251,168,228,0,64,90,241,134,25,96,197,58,62,212,65,114,108,48,248,223,63,163,168,140,79,208,141,219,63,158,190,57,158,171,137,61,62,131,237,97,201,13,174,6,64,223,88,175,235,27,149,131,63,135,208,242,58,38,217,65,62,63,243,73,54,165,159,1,64,163,164,79,226,2,84,216,63,173,240,56,118,50,88,60,62,37,170,73,66,17,234,17,64,116,131,172,247,85,3,241,63,221,103,130,22,136,117,58,62,147,176,107,251,91,149,20,64,189,180,184,109,8,230,245,63,168,106,70,17,61,122,58,62,0,21,84,210,66,21,216,63,197,103,194,81,68,25,219,63,11,107,119,70,119,84,59,62,70,21,245,1,72,76,9,64,248,219,197,236,95,169,137,63,34,201,180,5,76,178,59,62,39,19,54,201,162,138,11,64,198,44,127,146,84,235,224,63,209,13,217,253,175,159,59,62,204,219,63,131,104,186,236,63,163,12,14,100,32,251,224,63,26,99,255,99,62,71,59,62,60,234,149,89,205,57,17,64,187,23,250,209,128,22,74,64,36,0,212,6,184,133,55,62,148,110,131,47,181,27,15,64,199,157,89,206,92,198,1,64,83,16,123,79,87,241,54,62,219,67,176,150,150,62,5,64,253,197,233,102,106,29,179,63,206,131,48,165,39,236,54,62,201,31,220,84,243,168,20,64,29,141,12,234,93,44,179,63,26,100,136,14,207,19,55,62,223,217,220,37,52,42,24,64,63,214,243,106,252,80,192,63,182,108,25,18,244,40,55,62,188,0,72,129,108,94,237,63,112,178,224,254,30,227,240,63,206,204,178,54,20,186,60,62,173,51,53,119,132,183,8,64,34,86,167,252,17,86,204,63,170,157,183,28,186,200,53,62,35,178,114,195,201,62,17,64,27,140,211,247,212,75,203,63,142,174,116,170,82,199,53,62,198,234,196,169,184,135,226,63,62,157,22,196,239,78,203,63,134,249,54,16,13,77,56,62,4,31,20,47,174,161,5,64,2,161,249,20,7,82,231,63,12,170,33,11,179,196,52,62,181,186,175,143,170,205,7,64,239,117,176,247,107,84,178,63,245,149,135,189,163,212,59,62,32,196,177,141,203,47,245,63,107,154,58,236,61,159,150,63,245,53,39,67,168,194,58,62,126,156,113,3,126,225,6,64,206,48,39,195,219,40,213,63,91,245,164,149,228,247,51,62,206,94,70,231,59,84,19,64,43,221,69,89,92,245,179,63,59,182,92,224,227,220,59,62,218,57,48,7,48,207,5,64,117,130,227,80,157,220,216,63,62,93,226,175,209,28,52,62,146,172,96,109,10,75,230,63,26,182,43,122,128,45,241,63,51,195,164,59,222,127,56,62,171,70,14,144,180,173,22,64,12,229,19,38,16,90,182,63,162,35,117,165,246,78,58,62,127,139,173,205,212,54,248,63,27,123,188,177,28,120,179,63,175,31,73,182,117,236,57,62,56,158,13,28,116,188,255,63,55,212,125,113,216,129,239,63,5,190,44,224,30,154,50,62,49,253,194,102,93,67,6,64,148,193,39,106,128,129,219,63,209,78,57,173,238,26,52,62,154,98,240,147,83,89,21,64,78,32,10,225,87,60,203,63,10,182,100,116,188,13,52,62,141,208,206,153,57,89,23,64,11,9,224,218,108,94,203,63,237,195,248,64,50,18,54,62,77,75,20,191,252,164,8,64,231,65,46,162,112,132,178,63,214,149,171,37,48,211,51,62,245,90,157,246,132,150,250,63,27,53,218,92,168,135,235,63,208,55,38,134,105,80,51,62,57,91,198,155,106,230,0,64,24,170,63,226,180,229,178,63,170,239,249,201,60,96,50,62,100,139,38,163,185,221,22,64,2,169,182,110,19,100,179,63,136,150,167,211,179,126,48,62,23,62,13,171,174,142,228,63,118,117,116,100,47,207,213,63,41,238,241,101,236,230,52,62,79,212,102,123,78,173,19,64,51,17,200,174,87,197,179,63,81,121,206,48,250,73,46,62,205,134,59,222,20,104,4,64,28,220,196,85,112,223,175,63,255,237,56,34,151,235,48,62,144,250,167,58,192,131,15,64,228,5,217,90,41,250,170,63,167,200,156,8,108,91,49,62,89,238,61,47,228,51,2,64,61,240,209,67,216,107,214,63,149,35,211,165,181,245,48,62,3,233,135,95,59,253,255,63,67,13,97,200,253,146,194,63,35,28,103,15,73,253,43,62,212,165,211,160,236,47,237,63,144,58,190,33,215,242,224,63,195,249,233,253,48,252,43,62,187,207,120,1,108,109,11,64,217,254,206,212,157,243,224,63,186,121,190,54,240,128,48,62,241,32,73,52,30,136,24,64,6,111,110,236,59,29,237,63,206,212,116,95,201,182,42,62,43,153,146,99,163,158,232,63,124,253,228,101,124,27,112,63,79,64,15,28,221,231,42,62,248,72,160,233,104,248,12,64,221,153,178,80,170,8,206,63,26,174,244,172,123,238,48,62,247,249,216,129,17,94,19,64,191,115,86,25,6,15,106,63,147,162,130,175,208,78,48,62,253,161,217,91,220,6,253,63,228,153,149,34,204,213,199,63,166,117,225,189,64,41,49,62,249,108,32,218,28,49,246,63,6,111,110,236,59,29,221,63,0,4,12,216,56,178,40,62,215,107,13,235,224,94,237,63,150,152,206,170,200,124,254,63,175,221,54,126,46,103,42,62,200,34,202,124,234,130,5,64,29,31,56,67,35,57,215,63,238,102,19,168,145,117,39,62,45,89,194,0,28,3,243,63,228,98,44,125,165,73,203,63,71,2,180,252,87,114,39,62,225,237,5,101,6,158,13,64,117,198,189,62,31,81,203,63,60,97,115,208,91,175,44,62,135,31,26,28,142,9,231,63,237,182,40,95,204,178,201,63,163,255,32,85,154,230,40,62,220,184,105,112,215,170,254,63,157,223,11,220,247,238,224,63,137,40,52,55,39,221,40,62,192,185,71,194,112,100,3,64,204,89,129,26,125,247,224,63,146,203,3,55,24,154,42,62,122,51,103,177,152,200,17,64,129,207,118,24,147,12,211,63,48,165,21,157,231,163,38,62,30,204,93,214,210,131,14,64,91,222,195,18,147,198,247,63,165,38,134,200,230,88,47,62,242,254,56,72,195,100,7,64,230,1,86,0,215,87,227,63,230,97,112,227,113,222,42,62,159,16,73,221,220,121,253,63,215,57,141,156,43,196,187,63,148,175,174,177,187,120,38,62,121,17,89,6,149,159,16,64,25,29,32,200,160,34,244,63,126,230,217,224,187,79,38,62,204,30,167,192,94,165,189,63,13,53,5,132,171,237,202,63,165,75,113,84,178,70,38,62,166,237,26,244,95,22,19,64,76,244,228,55,25,173,203,63,252,189,212,120,150,81,37,62,9,47,146,173,32,127,221,63,106,68,83,254,65,0,241,63,50,75,76,94,52,142,39,62,181,152,132,245,216,158,248,63,80,106,104,65,109,21,226,63,236,135,155,74,231,123,43,62,217,207,223,47,138,166,212,63,73,74,214,83,41,132,230,63,207,141,203,107,202,230,38,62,149,29,56,30,183,48,201,63,255,51,192,105,146,235,193,63,231,170,150,255,52,151,36,62,20,107,113,215,2,168,13,64,144,70,43,147,194,52,203,63,23,131,227,103,34,106,36,62,61,171,7,171,211,233,242,63,202,226,190,40,2,102,203,63,197,192,109,227,105,225,37,62,148,131,185,201,1,160,19,64,121,81,170,11,192,165,195,63,224,134,216,172,13,118,35,62,255,10,93,60,209,81,11,64,54,240,238,113,182,158,204,63,231,1,92,105,59,43,37,62,231,54,76,79,128,101,18,64,146,114,80,60,1,196,202,63,142,83,138,55,31,231,36,62,219,236,209,21,231,29,210,63,200,182,153,127,195,214,203,63,61,16,134,155,139,253,36,62,205,239,51,179,34,217,16,64,83,182,62,98,187,67,198,63,144,97,180,160,63,237,35,62,47,128,15,20,81,159,239,63,74,18,81,34,249,70,179,63,14,141,157,81,240,159,35,62,12,42,192,237,33,207,225,63,208,64,165,46,207,2,179,63,153,130,13,212,148,49,37,62,23,111,74,247,39,25,226,63,131,185,213,172,132,43,208,63,193,209,57,138,252,31,40,62,89,229,77,127,201,177,246,63,74,61,102,185,68,9,226,63,113,112,61,52,176,2,36,62,228,116,223,23,58,71,16,64,123,241,57,248,50,230,240,63,206,3,18,188,129,169,16,62,106,28,73,118,167,47,241,63,204,145,123,157,224,144,83,64,18,186,66,255,26,76,116,63,101,78,138,247,29,93,1,64,181,156,70,123,58,243,224,63,222,79,4,50,33,77,102,63,114,46,18,63,51,142,3,64,173,20,245,93,98,77,203,63,190,251,204,140,211,86,89,63,199,111,212,231,72,45,227,63,190,145,140,104,40,134,163,63,230,147,164,177,130,103,75,63,83,73,88,119,123,153,232,63,141,41,123,40,228,36,179,63,40,109,124,226,106,48,54,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,106,241,133,16,125,31,63,9,17,234,108,8,41,4,64,190,163,70,123,58,243,240,63,16,192,11,70,162,227,19,63,175,92,56,177,33,184,250,63,173,20,245,93,98,77,219,63,141,59,90,73,125,152,244,62,153,255,97,213,186,212,22,64,242,146,96,98,74,100,202,63,69,67,248,7,136,214,243,62,251,12,61,213,83,145,2,64,103,150,137,89,122,54,204,63,83,101,197,226,152,80,244,62,207,41,190,71,198,208,9,64,141,41,123,40,228,36,195,63,209,243,102,24,150,35,238,62,102,237,78,94,187,105,2,64,70,124,97,124,244,184,224,63,173,193,47,150,215,125,237,62,140,211,72,236,26,193,20,64,35,189,43,122,128,45,225,63,182,136,156,45,29,184,232,62,185,147,192,24,59,245,21,64,190,145,140,104,40,134,179,63,119,35,154,23,212,241,224,62,43,159,176,195,165,240,250,63,91,193,105,232,159,195,162,63,244,230,0,254,103,249,223,62,90,249,203,226,78,64,5,64,33,98,175,232,176,72,164,63,232,126,161,163,116,53,218,62,1,52,193,26,154,248,19,64,91,193,105,232,159,195,178,63,130,195,39,42,86,80,210,62,35,190,226,144,40,245,6,64,5,228,233,184,215,108,249,63,114,91,187,108,119,15,208,62,146,2,64,155,185,147,12,64,91,55,144,114,255,34,125,63,86,102,6,27,214,163,202,62,85,225,78,178,56,36,18,64,207,211,42,96,214,216,218,63,42,163,62,183,245,240,201,62,192,243,247,114,87,137,237,63,129,207,119,198,9,122,228,63,79,85,187,3,59,28,200,62,224,102,141,234,183,231,10,64,103,150,137,89,122,54,188,63,213,127,167,69,155,128,201,62,144,251,132,218,16,152,10,64,212,207,191,162,222,33,25,64,157,131,159,149,156,165,198,62,229,148,138,153,168,172,210,63,242,146,96,98,74,100,186,63,35,127,240,173,132,232,193,62,178,193,52,23,77,226,16,64,19,175,146,199,195,63,212,63,36,21,183,187,220,179,189,62,48,0,88,15,65,253,18,64,192,127,101,195,51,109,36,64,169,247,65,3,78,27,183,62,90,162,149,100,104,141,219,63,98,12,90,4,16,81,88,63,218,115,22,51,237,235,178,62,79,147,52,140,121,82,235,63,19,175,146,199,195,63,228,63,112,189,149,94,205,181,177,62,67,162,244,3,45,212,248,63,138,85,191,91,238,193,219,63,177,61,175,99,55,114,176,62,162,132,2,137,182,90,247,63,196,17,212,123,23,214,240,63,137,219,232,235,237,74,178,62,63,68,233,102,202,101,249,63,104,169,108,33,127,153,242,63,106,171,11,8,62,90,167,62,142,141,176,237,68,35,22,64,184,53,185,122,93,16,241,63,1,220,13,225,31,2,163,62,116,31,104,190,104,31,24,64,156,6,92,171,165,95,238,63,18,164,95,229,11,44,166,62,208,124,99,98,65,245,19,64,62,244,15,95,28,19,235,63,56,80,125,69,167,9,165,62,58,226,84,122,77,228,16,64,116,117,114,8,66,244,194,63,29,21,48,51,72,37,165,62,244,218,235,242,250,198,21,64,83,190,184,60,86,183,204,63,89,134,236,167,95,105,160,62,185,80,61,239,77,217,247,63,123,195,29,3,147,185,10,64,114,92,165,60,57,51,151,62,2,72,127,238,105,62,8,64,248,240,70,104,23,1,162,63,88,39,120,250,229,89,148,62,91,251,114,29,96,55,5,64,107,154,58,236,61,159,134,63,122,228,87,241,7,17,147,62,4,78,12,241,139,109,244,63,133,50,210,104,57,11,165,63,175,104,50,134,210,41,147,62,38,254,201,121,158,37,1,64,166,221,131,72,134,85,195,63,42,15,19,248,128,142,146,62,246,74,47,185,216,198,21,64,63,214,243,106,252,80,176,63,68,136,125,52,144,249,143,62,235,68,57,242,47,134,1,64,34,24,30,85,146,31,205,63,34,73,88,2,54,216,146,62], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);
/* memory initializer */ allocate([215,176,158,249,214,240,22,64,121,249,165,151,123,245,153,63,24,218,212,7,75,77,143,62,165,220,77,49,29,70,184,63,42,89,88,168,91,98,178,63,5,32,135,57,2,44,143,62,182,238,26,211,212,184,20,64,218,124,2,230,203,248,181,63,156,74,33,254,252,65,137,62,253,10,195,90,32,194,9,64,242,154,70,123,58,243,0,64,154,5,132,2,200,121,141,62,165,214,197,216,126,239,2,64,98,12,90,4,16,81,104,63,160,32,170,226,131,79,141,62,146,23,176,123,65,77,19,64,240,249,157,168,108,231,179,63,182,42,164,168,86,225,138,62,77,241,129,187,61,168,3,64,193,236,197,122,134,204,202,63,180,44,24,207,241,102,138,62,186,171,150,207,92,88,22,64,152,60,36,65,62,206,203,63,213,148,85,169,59,13,133,62,134,0,161,138,253,169,13,64,224,225,195,18,147,198,231,63,35,122,76,35,61,221,136,62,65,92,119,237,23,62,17,64,6,107,49,127,110,227,201,63,89,30,214,19,22,151,136,62,108,93,116,47,38,234,247,63,240,239,92,197,79,180,212,63,47,240,118,94,250,113,135,62,180,193,175,169,216,56,247,63,230,127,183,73,240,186,193,63,219,173,21,110,115,225,132,62,22,119,175,140,177,22,241,63,113,193,222,19,77,140,231,63,96,23,33,245,137,222,132,62,13,154,153,224,102,138,3,64,215,91,124,125,174,126,224,63,238,220,241,201,110,253,133,62,16,80,124,221,107,160,208,63,173,20,245,93,98,77,235,63,15,25,207,141,9,35,127,62,218,16,190,81,138,86,23,64,55,17,204,102,50,123,201,63,179,56,66,162,66,21,125,62,220,198,48,121,84,55,20,64,146,221,16,121,198,103,225,63,95,68,21,200,69,11,127,62,209,202,133,98,126,77,21,64,186,210,122,130,3,211,224,63,111,47,180,199,3,163,126,62,227,89,32,214,43,58,1,64,176,102,18,116,113,19,225,63,1,147,250,114,223,61,117,62,165,106,231,90,56,168,235,63,97,76,81,19,112,169,247,63,62,229,59,24,143,248,115,62,212,206,252,190,177,135,255,63,124,110,90,118,158,181,203,63,57,229,135,228,247,138,115,62,138,179,79,14,17,75,24,64,222,186,143,69,38,229,202,63,145,63,204,212,41,85,118,62,200,163,198,127,27,69,255,63,71,251,15,95,28,19,251,63,219,71,133,112,254,40,115,62,59,198,63,164,247,126,236,63,217,63,147,110,104,152,218,63,221,114,212,10,54,134,114,62,185,110,172,227,17,155,6,64,221,153,178,80,170,8,190,63,252,47,2,23,63,115,115,62,79,205,119,189,121,218,3,64,19,175,146,199,195,63,244,63,88,112,91,56,173,175,114,62,24,225,6,233,241,175,244,63,11,39,65,170,235,153,238,63,181,67,78,237,77,83,116,62,183,23,155,85,142,107,11,64,91,55,144,114,255,34,141,63,205,169,50,200,54,187,113,62,48,203,236,51,91,196,233,63,240,239,92,197,79,180,228,63,247,30,199,178,99,204,115,62,83,193,73,46,254,71,251,63,12,82,119,185,180,79,249,63,102,220,131,204,254,230,114,62,166,31,105,77,140,7,223,63,124,143,55,107,26,146,184,63,68,247,187,26,149,248,112,62,206,112,208,73,73,6,15,64,181,217,28,98,44,35,178,63,170,78,108,69,210,39,108,62,182,214,132,165,27,42,5,64,65,70,45,117,43,217,224,63,207,137,43,124,168,156,107,62,27,103,73,134,131,86,19,64,40,243,95,129,73,13,225,63,193,162,91,75,59,134,111,62,153,161,164,28,108,138,233,63,101,121,217,238,155,38,180,63,10,72,245,109,228,233,112,62,189,162,21,132,231,234,23,64,187,23,250,209,128,22,58,64,148,30,47,117,225,69,112,62,160,123,165,92,67,111,16,64,59,10,176,28,180,134,188,63,182,93,199,119,247,106,103,62,181,206,144,7,94,74,21,64,183,70,43,109,43,3,246,63,128,107,80,204,175,182,103,62,70,188,105,211,152,246,24,64,230,127,183,73,240,186,209,63,58,193,166,134,127,41,105,62,102,199,238,4,70,184,9,64,158,218,210,156,60,73,189,63,110,163,32,152,46,46,100,62,229,21,32,209,236,132,23,64,255,117,92,184,250,137,249,63,108,80,208,158,246,167,107,62,141,200,159,143,130,132,210,63,59,10,176,28,180,134,204,63,123,78,88,209,232,115,104,62,231,137,142,95,214,230,21,64,91,193,105,232,159,195,194,63,47,74,124,70,44,123,98,62,81,64,64,248,215,247,23,64,121,249,165,151,123,245,169,63,42,48,56,67,13,102,94,62,145,140,146,171,42,120,21,64,53,110,200,201,55,203,211,63,184,24,88,253,146,42,100,62,170,148,174,13,94,8,23,64,60,10,178,120,161,97,223,63,196,27,91,126,151,61,94,62,184,134,86,179,202,209,253,63,141,41,123,40,228,36,211,63,175,162,236,180,117,91,98,62,242,113,175,114,88,122,238,63,73,74,214,83,41,132,214,63,163,237,190,153,36,47,95,62,147,72,62,104,199,55,21,64,9,162,158,220,111,37,188,63,128,238,241,136,64,138,90,62,2,116,125,65,204,192,244,63,164,142,173,200,125,5,228,63,166,130,72,73,219,68,91,62,128,47,49,8,191,63,10,64,110,203,191,162,222,33,41,64,149,181,208,160,3,126,88,62,189,85,229,145,21,68,253,63,225,199,29,3,147,185,26,64,139,88,74,189,89,110,88,62,147,162,233,182,84,48,23,64,124,253,228,101,124,27,112,63,67,44,30,117,55,91,91,62,188,52,36,48,195,2,19,64,98,59,223,32,162,182,242,63,23,252,121,47,167,139,88,62,224,212,147,182,63,146,243,63,203,127,97,124,244,184,240,63,52,212,31,24,122,139,84,62,165,242,131,234,218,30,252,63,111,23,250,33,92,124,242,63,152,175,132,6,153,108,83,62,192,26,121,220,5,252,16,64,149,32,36,232,142,62,161,63,23,106,43,176,82,181,81,62,50,44,138,31,99,31,247,63,103,150,137,89,122,54,220,63,93,181,163,79,239,179,83,62,224,78,8,183,218,7,242,63,74,137,67,3,204,60,114,63,212,184,0,109,3,234,78,62,239,173,143,112,157,164,24,64,45,230,118,172,95,37,238,63,145,66,20,218,106,242,79,62,189,98,176,73,95,111,17,64,242,146,96,98,74,100,218,63,22,202,60,80,36,152,82,62,243,90,249,7,175,137,24,64,218,160,206,154,40,253,202,63,2,39,110,27,181,113,82,62,231,77,39,95,248,94,254,63,128,136,27,33,156,157,203,63,70,119,128,151,149,116,78,62,62,143,102,22,157,184,16,64,113,62,5,171,64,178,176,63,75,69,201,89,54,43,78,62,144,232,115,25,41,152,179,63,232,2,245,232,193,205,165,63,236,46,119,105,177,70,78,62,254,193,251,187,168,172,17,64,108,114,193,92,248,231,204,63,109,85,68,77,141,109,71,62,174,29,140,90,123,43,244,63,183,128,93,108,244,12,219,63,239,181,76,58,92,39,77,62,248,110,26,40,75,119,12,64,33,98,175,232,176,72,180,63,113,235,82,116,92,221,69,62,225,191,185,54,80,180,22,64,161,1,76,69,8,164,194,63,189,52,43,113,245,82,78,62,143,80,211,186,175,220,234,63,190,145,140,104,40,134,195,63,43,64,11,181,164,35,70,62,221,216,143,56,30,117,250,63,242,0,54,5,97,185,252,63,20,89,120,40,145,87,73,62,163,129,30,189,165,146,244,63,248,240,70,104,23,1,178,63,134,245,226,100,79,217,68,62,181,236,249,58,11,108,232,63,169,20,241,165,135,151,181,63,172,184,157,60,96,178,68,62,228,177,198,47,199,133,18,64,12,65,5,199,230,92,244,63,18,74,235,176,101,244,70,62,29,129,218,47,3,46,21,64,242,84,215,186,202,45,203,63,106,96,28,111,215,215,70,62,195,161,53,217,223,227,5,64,103,212,18,1,250,108,203,63,196,149,120,35,181,132,74,62,234,65,12,99,164,216,244,63,203,229,140,2,42,165,199,63,172,58,10,84,197,35,67,62,133,189,173,66,54,144,12,64,226,67,24,26,9,48,5,64,88,250,215,196,140,65,70,62,243,54,240,195,95,242,16,64,205,203,174,41,78,138,193,63,134,62,213,173,237,194,68,62,142,232,222,153,167,175,7,64,128,233,86,77,92,2,220,63,249,218,139,198,151,105,65,62,128,68,143,6,100,92,230,63,186,84,25,57,234,111,210,63,153,115,199,149,187,108,64,62,122,74,235,19,253,253,3,64,31,31,58,159,16,20,202,63,162,162,175,49,49,75,63,62,6,31,107,128,166,76,14,64,108,114,193,92,248,231,188,63,85,195,220,63,57,74,68,62,168,251,255,164,9,142,5,64,192,255,124,10,44,223,224,63,172,200,9,19,144,33,68,62,13,231,187,30,3,38,19,64,169,57,16,236,72,7,225,63,134,60,102,7,200,126,62,62,21,134,250,119,241,151,214,63,24,229,198,206,140,31,228,63,237,81,49,244,235,222,67,62,132,176,146,3,68,100,246,63,52,211,62,7,216,142,196,63,199,166,102,149,213,128,60,62,0,194,192,165,43,214,11,64,189,180,184,109,8,230,245,63,31,224,136,38,208,201,59,62,35,96,244,29,131,35,246,63,32,79,122,168,134,17,0,64,149,42,192,33,218,129,63,62,194,192,142,12,48,230,243,63,223,88,175,235,27,149,131,63,173,134,224,35,191,198,66,62,143,247,118,159,149,53,14,64,163,164,79,226,2,84,216,63,235,183,73,123,18,190,57,62,14,249,161,76,44,130,22,64,193,116,101,195,51,109,52,64,91,149,247,56,48,176,57,62,245,130,149,54,21,202,250,63,245,81,141,251,168,228,0,64,47,110,58,201,93,148,58,62,48,84,153,90,21,220,20,64,163,168,140,79,208,141,219,63,0,73,205,199,117,84,60,62,206,153,117,183,223,66,7,64,116,131,172,247,85,3,241,63,184,146,129,136,168,122,60,62,194,199,85,11,106,5,1,64,207,211,42,96,214,216,234,63,99,183,43,125,113,113,58,62,20,169,44,246,33,84,20,64,197,103,194,81,68,25,219,63,187,55,7,19,130,176,59,62,138,178,78,23,32,244,253,63,198,44,127,146,84,235,224,63,84,179,84,241,29,157,59,62,248,146,9,56,236,112,22,64,163,12,14,100,32,251,224,63,143,161,142,183,96,17,59,62,153,36,117,109,116,121,249,63,248,219,197,236,95,169,137,63,83,239,186,45,11,124,59,62,155,68,66,68,63,248,5,64,187,23,250,209,128,22,74,64,134,166,198,177,201,131,55,62,108,28,8,171,148,138,2,64,199,157,89,206,92,198,1,64,7,50,47,109,157,238,54,62,69,30,149,143,8,91,241,63,253,197,233,102,106,29,179,63,240,223,14,10,154,233,54,62,58,143,154,174,186,192,12,64,29,141,12,234,93,44,179,63,73,162,181,121,76,41,55,62,136,193,129,102,97,133,22,64,112,178,224,254,30,227,240,63,198,139,59,24,5,179,60,62,234,225,109,186,177,75,248,63,34,86,167,252,17,86,204,63,149,242,87,35,144,208,53,62,108,154,21,249,9,235,5,64,27,140,211,247,212,75,203,63,216,14,206,81,14,207,53,62,118,32,110,56,176,41,21,64,62,157,22,196,239,78,203,63,203,208,15,155,225,192,52,62,226,181,127,232,184,120,246,63,239,117,176,247,107,84,178,63,150,225,245,126,115,194,59,62,153,196,246,135,77,39,24,64,107,154,58,236,61,159,150,63,135,53,125,180,154,205,58,62,19,18,188,251,137,164,244,63,206,48,39,195,219,40,213,63,83,228,171,229,238,16,52,62,120,241,254,229,92,24,10,64,43,221,69,89,92,245,179,63,206,60,192,132,138,235,59,62,141,52,79,99,236,120,242,63,117,130,227,80,157,220,216,63,158,43,226,173,122,63,59,62,47,122,165,231,14,211,24,64,27,123,188,177,28,120,179,63,14,192,211,191,123,28,52,62,136,195,175,9,240,162,21,64,26,182,43,122,128,45,241,63,224,172,62,162,205,227,54,62,74,179,184,5,110,63,243,63,2,161,249,20,7,82,231,63,214,217,45,138,246,124,56,62,15,211,194,156,21,101,16,64,12,229,19,38,16,90,182,63,77,25,71,146,208,230,57,62,35,86,123,88,236,113,218,63,55,212,125,113,216,129,239,63,228,141,5,165,195,159,50,62,81,249,43,188,245,97,243,63,148,193,39,106,128,129,219,63,203,13,211,23,15,35,52,62,15,39,238,125,179,31,14,64,78,32,10,225,87,60,203,63,223,233,82,97,218,20,52,62,60,168,62,186,233,15,17,64,11,9,224,218,108,94,203,63,136,114,46,128,18,38,50,62,122,250,25,129,68,243,20,64,118,117,116,100,47,207,213,63,101,15,164,192,218,18,54,62,22,184,222,132,97,29,248,63,231,65,46,162,112,132,178,63,231,229,232,2,189,215,51,62,42,163,70,213,240,25,183,63,27,53,218,92,168,135,235,63,91,19,181,10,15,78,51,62,79,244,100,62,233,83,225,63,24,170,63,226,180,229,178,63,203,55,92,114,87,91,50,62,38,90,172,162,59,149,16,64,2,169,182,110,19,100,179,63,29,200,225,87,129,141,53,62,131,245,137,106,89,193,10,64,191,115,86,25,6,15,106,63,11,152,150,98,103,230,52,62,150,142,223,137,204,201,10,64,51,17,200,174,87,197,179,63,117,218,90,43,45,169,49,62,79,23,203,66,90,223,218,63,67,13,97,200,253,146,194,63,86,153,169,108,60,212,44,62,84,172,254,163,195,111,22,64,63,214,243,106,252,80,192,63,41,128,207,40,165,123,49,62,232,19,135,161,172,125,230,63,61,240,209,67,216,107,214,63,52,70,15,95,54,251,43,62,23,237,252,211,176,127,22,64,144,58,190,33,215,242,224,63,162,11,197,49,41,250,43,62,186,109,9,157,184,185,253,63,217,254,206,212,157,243,224,63,134,189,56,82,250,115,48,62,91,141,234,133,101,64,18,64,6,111,110,236,59,29,237,63,136,207,52,23,106,255,47,62,21,117,89,0,227,46,206,63,215,57,141,156,43,196,187,63,142,142,136,26,209,241,42,62,14,9,139,164,217,101,0,64,221,153,178,80,170,8,206,63,62,13,77,252,206,76,48,62,175,153,96,89,88,34,207,63,228,153,149,34,204,213,199,63,57,74,159,172,87,183,40,62,68,185,237,105,63,134,22,64,150,152,206,170,200,124,254,63,20,161,225,156,62,110,42,62,61,127,25,10,193,225,241,63,29,31,56,67,35,57,215,63,19,229,139,92,208,125,39,62,205,148,89,31,108,153,23,64,228,98,44,125,165,73,203,63,39,184,114,98,210,122,39,62,236,254,101,152,100,11,1,64,117,198,189,62,31,81,203,63,161,52,143,233,251,229,40,62,57,156,116,98,198,40,214,63,157,223,11,220,247,238,224,63,233,233,210,154,100,219,40,62,186,156,29,128,87,79,235,63,204,89,129,26,125,247,224,63,119,35,124,39,142,151,42,62,231,198,221,52,32,0,7,64,129,207,118,24,147,12,211,63,202,197,5,71,11,165,38,62,7,21,74,147,170,240,1,64,91,222,195,18,147,198,247,63,160,247,71,221,144,80,47,62,73,177,11,161,13,170,245,63,230,1,86,0,215,87,227,63,122,208,250,42,61,31,40,62,181,202,41,133,67,42,177,63,28,220,196,85,112,223,175,63,230,90,3,223,118,140,38,62,148,50,148,155,82,26,19,64,228,5,217,90,41,250,170,63,75,240,14,2,103,24,38,62,249,131,167,76,132,28,5,64,25,29,32,200,160,34,244,63,39,131,7,32,200,94,38,62,119,76,223,8,49,78,19,64,13,53,5,132,171,237,202,63,83,2,210,17,157,78,38,62,22,229,235,70,101,154,9,64,76,244,228,55,25,173,203,63,181,13,134,181,146,186,43,62,122,246,147,179,21,138,21,64,237,182,40,95,204,178,201,63,145,108,226,157,25,81,37,62,110,106,207,209,136,177,20,64,106,68,83,254,65,0,241,63,37,107,179,231,119,150,39,62,49,22,56,69,253,0,25,64,80,106,104,65,109,21,226,63,83,64,70,42,32,239,38,62,187,117,140,209,190,159,19,64,255,51,192,105,146,235,193,63,55,166,35,29,164,133,43,62,48,148,76,49,40,35,20,64,73,74,214,83,41,132,230,63,82,50,63,68,163,209,44,62,89,9,59,88,220,110,24,64,6,111,110,236,59,29,221,63,255,142,9,49,141,158,36,62,143,221,189,57,76,21,1,64,144,70,43,147,194,52,203,63,15,148,150,228,119,113,36,62,76,82,184,215,43,147,23,64,202,226,190,40,2,102,203,63,204,165,92,174,93,233,37,62,195,40,234,142,208,167,10,64,121,81,170,11,192,165,195,63,149,36,225,123,50,125,35,62,191,206,47,91,164,126,253,63,54,240,238,113,182,158,204,63,109,145,124,64,239,43,37,62,48,250,223,242,131,60,8,64,146,114,80,60,1,196,202,63,212,5,140,188,156,238,36,62,216,211,253,88,151,250,19,64,200,182,153,127,195,214,203,63,87,134,45,245,149,253,36,62,240,41,36,140,43,41,5,64,83,182,62,98,187,67,198,63,66,109,171,15,225,234,35,62,227,15,13,76,92,205,22,64,74,18,81,34,249,70,179,63,30,72,22,74,142,159,35,62,8,154,26,60,90,19,21,64,208,64,165,46,207,2,179,63,124,126,166,239,13,53,37,62,155,235,137,75,233,26,21,64,131,185,213,172,132,43,208,63,224,30,184,163,42,44,40,62,111,41,115,236,74,133,24,64,74,61,102,185,68,9,226,63,199,131,242,215,221,69,35,62,178,127,205,181,174,56,229,63,6,140,14,116,234,191,182,63,125,54,37,107,121,5,36,62,157,34,113,8,216,254,3,64,123,241,57,248,50,230,240,63,129,239,245,253,120,195,16,62,103,24,101,103,248,47,23,64,204,145,123,157,224,144,83,64,33,187,60,217,68,247,30,63,41,228,6,78,157,125,221,63,173,20,245,93,98,77,203,63,148,180,94,64,99,144,29,63,118,253,160,182,186,174,218,63,181,156,70,123,58,243,224,63,204,52,142,233,151,12,9,63,101,162,217,9,164,84,18,64,190,145,140,104,40,134,163,63,232,112,27,182,44,175,231,62,41,28,125,221,241,8,23,64,141,41,123,40,228,36,179,63,136,221,155,190,144,27,232,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,202,34,16,71,248,171,203,62,30,178,240,17,75,234,23,64,173,20,245,93,98,77,219,63,68,175,87,188,225,237,198,62,216,165,234,195,129,135,232,63,190,163,70,123,58,243,240,63,122,96,217,1,53,161,175,62,236,208,82,0,126,174,13,64,242,146,96,98,74,100,202,63,6,28,147,49,6,121,171,62,175,228,244,108,72,179,213,63,103,150,137,89,122,54,204,63,40,47,224,243,39,98,155,62,47,143,197,153,123,34,221,63,70,124,97,124,244,184,224,63,46,224,116,224,248,69,149,62,214,38,187,46,75,144,11,64,35,189,43,122,128,45,225,63,49,119,105,28,159,92,144,62,246,252,73,154,160,168,22,64,91,193,105,232,159,195,162,63,188,21,58,161,6,118,145,62,111,170,133,200,9,233,254,63,141,41,123,40,228,36,195,63,21,59,89,209,194,16,143,62,157,198,115,177,229,118,215,63,33,98,175,232,176,72,164,63,205,101,167,214,68,87,138,62,207,17,226,241,219,86,9,64,190,145,140,104,40,134,179,63,162,220,114,43,52,68,141,62,55,51,93,135,242,181,248,63,91,55,144,114,255,34,125,63,25,145,113,127,233,122,131,62,59,185,182,78,17,87,249,63,103,150,137,89,122,54,188,63,35,199,95,150,143,59,130,62,131,7,211,74,179,245,20,64,129,207,119,198,9,122,228,63,87,81,227,65,146,51,124,62,49,99,151,15,187,34,2,64,19,175,146,199,195,63,212,63,146,178,53,21,192,47,124,62,244,60,252,107,36,177,5,64,207,211,42,96,214,216,218,63,5,12,183,186,57,171,122,62,24,100,28,20,253,219,241,63,5,228,233,184,215,108,249,63,180,126,116,146,132,36,124,62,107,29,91,90,218,68,11,64,192,127,101,195,51,109,36,64,237,161,245,221,235,119,118,62,60,60,115,35,210,123,14,64,121,249,165,151,123,245,153,63,186,134,14,108,150,114,117,62,60,75,137,210,198,40,14,64,91,193,105,232,159,195,178,63,4,3,97,172,91,54,109,62,87,184,132,108,1,86,3,64,242,146,96,98,74,100,186,63,103,0,199,145,13,193,104,62,154,149,175,127,27,111,23,64,138,85,191,91,238,193,219,63,146,18,183,240,194,15,101,62,225,191,119,222,120,119,213,63,98,12,90,4,16,81,88,63,7,129,90,206,78,8,92,62,81,182,238,126,116,164,21,64,19,175,146,199,195,63,228,63,12,68,225,137,5,93,90,62,247,60,236,20,26,123,24,64,104,169,108,33,127,153,242,63,69,67,48,32,207,129,89,62,224,63,88,41,198,56,24,64,196,17,212,123,23,214,240,63,238,26,183,228,251,36,83,62,208,77,212,10,59,43,9,64,62,244,15,95,28,19,235,63,115,92,130,88,181,251,80,62,137,74,19,157,128,4,228,63,123,195,29,3,147,185,10,64,222,169,250,147,92,31,81,62,194,163,26,11,198,66,14,64,184,53,185,122,93,16,241,63,168,24,1,40,147,201,80,62,157,27,237,175,227,246,255,63,6,107,49,127,110,227,201,63,252,106,57,5,92,110,79,62,137,44,224,23,144,57,198,63,248,240,70,104,23,1,162,63,67,29,52,93,119,152,76,62,81,238,44,143,232,83,17,64,156,6,92,171,165,95,238,63,150,27,204,173,186,71,72,62,209,255,161,138,170,155,24,64,98,12,90,4,16,81,104,63,47,189,98,213,181,24,70,62,235,90,36,111,39,231,202,63,34,24,30,85,146,31,205,63,162,164,216,100,233,253,69,62,103,81,49,165,142,73,16,64,121,249,165,151,123,245,169,63,253,36,49,160,171,244,66,62,221,146,100,246,76,29,223,63,193,236,197,122,134,204,202,63,144,172,217,36,162,104,66,62,222,222,215,150,160,18,21,64,133,50,210,104,57,11,165,63,108,16,37,221,67,109,64,62,14,115,225,191,197,137,20,64,187,23,250,209,128,22,58,64,241,239,21,37,211,109,66,62,236,113,233,84,155,92,7,64,116,117,114,8,66,244,194,63,134,122,172,246,195,26,66,62,252,245,55,68,44,214,12,64,152,60,36,65,62,206,203,63,40,253,107,0,254,178,64,62,42,109,164,88,252,46,14,64,63,214,243,106,252,80,176,63,244,95,124,38,15,217,65,62,36,86,202,227,56,205,24,64,240,239,92,197,79,180,212,63,100,158,61,246,183,192,61,62,24,145,49,194,100,44,18,64,173,20,245,93,98,77,235,63,34,157,51,49,106,43,61,62,222,158,141,203,184,14,7,64,42,89,88,168,91,98,178,63,127,115,182,235,173,5,56,62,94,123,208,74,37,109,252,63,224,225,195,18,147,198,231,63,63,141,16,13,127,142,51,62,254,217,63,30,209,152,15,64,240,249,157,168,108,231,179,63,117,181,230,10,253,186,56,62,12,209,7,101,191,223,14,64,55,17,204,102,50,123,201,63,41,189,80,41,82,99,50,62,76,72,245,91,241,117,247,63,242,154,70,123,58,243,0,64,135,209,2,30,147,17,50,62,239,14,2,13,230,175,21,64,107,154,58,236,61,159,134,63,253,35,47,165,17,25,50,62,122,87,181,87,224,75,11,64,83,190,184,60,86,183,204,63,250,221,196,158,246,206,54,62,85,1,189,154,104,89,225,63,215,91,124,125,174,126,224,63,141,41,229,126,83,112,48,62,136,46,109,241,124,112,236,63,166,221,131,72,134,85,195,63,248,37,11,28,149,111,50,62,28,142,169,41,15,123,246,63,91,55,144,114,255,34,141,63,242,195,212,229,102,102,43,62,44,232,119,63,246,245,240,63,221,153,178,80,170,8,190,63,229,136,220,8,101,183,43,62,68,96,233,8,92,21,25,64,124,110,90,118,158,181,203,63,207,54,43,134,191,219,40,62,27,41,93,126,98,120,20,64,240,239,92,197,79,180,228,63,5,41,220,139,130,212,43,62,138,4,62,142,253,80,16,64,222,186,143,69,38,229,202,63,114,238,184,86,70,102,41,62,164,214,0,182,199,132,249,63,53,110,200,201,55,203,211,63,214,177,89,4,123,153,41,62,152,46,99,162,255,8,21,64,217,63,147,110,104,152,218,63,101,84,242,58,27,45,43,62,249,145,55,224,50,214,14,64,218,124,2,230,203,248,181,63,242,45,91,126,96,222,38,62,204,68,32,182,152,125,12,64,186,210,122,130,3,211,224,63,111,156,36,133,3,196,39,62,195,190,65,187,79,91,212,63,230,127,183,73,240,186,193,63,254,210,177,67,42,183,36,62,115,244,150,222,47,153,10,64,146,221,16,121,198,103,225,63,70,26,224,204,85,85,37,62,83,125,151,102,154,174,218,63,176,102,18,116,113,19,225,63,68,180,214,184,20,195,10,62,236,184,248,253,187,104,254,63,187,23,250,209,128,22,74,64,219,212,37,226,231,199,198,189,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,73,66,254,56,224,183,61,175,74,135,117,200,151,17,64,110,203,191,162,222,33,41,64,127,222,190,114,119,166,165,61,30,144,72,73,212,158,202,63,212,207,191,162,222,33,25,64,169,179,42,63,232,72,112,61,197,163,92,228,218,195,16,64,18,222,15,250,102,217,50,64,12,201,137,87,164,196,60,61,150,21,203,199,71,134,21,64,67,23,178,88,204,255,84,64,110,20,89,106,17,214,203,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,114,172,90,191,230,183,61,147,52,35,170,88,159,6,64,110,203,191,162,222,33,41,64,61,228,38,191,25,55,166,61,53,177,181,211,215,137,18,64,212,207,191,162,222,33,25,64,82,169,76,243,55,74,112,61,21,224,213,118,3,247,4,64,18,222,15,250,102,217,50,64,162,33,153,11,190,197,60,61,159,55,20,208,251,121,14,64,67,23,178,88,204,255,84,64,246,187,214,209,183,185,218,61,185,78,69,115,223,155,20,64,212,207,191,162,222,33,25,64,15,232,200,22,162,189,142,189,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,252,178,86,144,158,103,61,156,4,203,120,205,155,228,63,110,203,191,162,222,33,41,64,85,49,223,72,48,180,180,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,137,127,28,224,71,161,62,233,76,109,127,186,2,24,64,110,203,191,162,222,33,41,64,74,251,35,148,240,183,75,62,47,36,185,211,118,214,23,64,18,222,15,250,102,217,50,64,173,66,207,180,198,242,70,62,23,145,231,2,206,31,0,64,212,207,191,162,222,33,25,64,32,95,218,127,33,221,33,62,196,37,124,210,52,186,251,63,58,100,130,15,67,30,25,64,254,152,4,53,151,217,33,62,118,19,83,56,148,169,19,64,109,59,253,53,122,37,25,64,96,38,122,73,37,83,5,62,237,207,249,103,52,37,215,63,129,99,105,125,171,210,18,64,84,113,19,106,70,148,4,62,236,248,225,96,189,107,14,64,92,238,37,176,240,6,25,64,181,33,76,241,37,121,4,62,195,231,224,175,85,196,6,64,76,177,89,149,204,60,25,64,80,152,121,176,253,184,0,62,194,120,237,22,82,218,20,64,107,43,242,202,20,209,232,63,59,115,65,221,247,83,253,61,117,176,151,144,215,244,219,63,190,163,70,123,58,243,240,63,8,254,39,124,47,175,255,61,56,158,241,13,61,208,146,63,39,60,22,200,17,113,31,64,173,194,26,20,171,236,248,61,208,36,220,251,239,74,1,64,92,251,86,83,119,3,23,64,124,225,62,156,56,124,248,61,81,35,44,1,251,61,247,63,97,211,97,66,42,138,23,64,175,119,174,110,145,113,248,61,189,133,3,60,227,225,17,64,76,164,40,242,69,64,27,64,204,174,158,17,209,15,246,61,45,43,139,216,160,200,20,64,225,199,29,3,147,185,26,64,89,29,102,44,150,194,243,61,77,23,62,44,63,170,23,64,110,203,191,162,222,33,57,64,35,218,237,127,78,137,243,61,35,104,23,22,0,102,242,63,76,183,32,36,184,130,24,64,154,154,67,11,12,232,242,61,100,121,223,129,35,2,22,64,92,232,94,33,5,193,25,64,175,199,22,5,98,13,241,61,87,102,116,54,60,96,7,64,84,219,3,226,117,242,21,64,124,0,226,87,148,79,236,61,151,69,125,174,155,190,13,64,238,191,123,99,71,81,28,64,71,149,91,34,125,179,235,61,78,195,73,151,230,234,23,64,82,116,156,98,39,41,25,64,102,122,115,48,144,108,235,61,246,168,74,201,177,171,229,63,86,43,227,226,149,26,25,64,178,23,105,0,30,231,234,61,229,1,16,91,149,49,7,64,103,138,97,9,188,7,22,64,1,59,127,223,21,179,230,61,216,255,198,245,174,233,24,64,194,255,86,83,119,3,39,64,117,77,224,231,10,14,233,61,90,30,180,212,115,130,247,63,29,173,16,86,205,148,39,64,86,56,46,225,42,6,231,61,167,100,148,137,227,130,14,64,65,21,30,60,1,60,28,64,141,15,154,34,47,116,231,61,178,16,134,132,96,58,211,63,91,55,144,114,255,34,125,63,234,22,192,242,3,37,227,61,242,37,18,141,218,11,247,63,240,149,223,5,70,123,233,63,105,195,102,116,216,160,224,61,253,196,255,55,9,154,16,64,109,82,133,180,168,198,18,64,73,129,33,247,6,194,219,61,57,140,133,183,0,82,10,64,98,188,217,195,251,232,13,64,176,112,88,102,114,201,220,61,233,10,36,170,25,235,16,64,60,238,113,153,221,32,25,64,157,33,211,129,167,199,220,61,109,52,49,186,11,90,3,64,6,173,13,172,223,34,25,64,185,229,38,118,110,106,218,61,214,254,159,169,3,131,18,64,26,36,208,143,115,71,24,64,224,153,186,13,255,92,218,61,60,109,27,5,112,79,254,63,62,214,74,66,50,140,16,64,237,76,4,199,25,36,217,61,34,107,226,93,206,21,0,64,40,119,175,181,73,252,25,64,104,155,113,204,51,125,215,61,27,216,147,188,20,80,172,63,54,178,103,132,116,28,243,63,54,131,217,52,100,155,214,61,47,55,161,45,161,17,244,63,5,228,233,184,215,108,249,63,36,125,224,165,69,255,208,61,120,100,107,180,11,227,10,64,188,96,201,177,159,167,33,64,77,120,122,42,143,52,209,61,12,141,1,105,195,5,19,64,130,98,154,129,197,219,32,64,7,124,40,41,220,115,206,61,207,227,218,59,171,124,21,64,190,202,6,3,155,187,19,64,203,187,51,221,205,36,212,61,127,236,39,5,139,137,223,63,75,206,168,162,230,35,18,64,42,153,53,238,172,138,208,61,222,106,137,213,156,147,173,63,201,116,209,66,58,30,41,64,39,190,163,99,252,117,211,61,61,250,181,117,138,148,17,64,70,227,165,129,193,90,20,64,33,103,250,26,162,108,204,61,59,244,104,151,194,157,20,64,251,206,97,66,42,138,39,64,130,20,87,189,39,201,202,61,211,3,54,42,115,32,228,63,79,240,0,193,80,41,24,64,81,29,59,203,136,220,204,61,19,134,217,41,22,120,22,64,76,177,89,149,204,60,9,64,222,136,37,42,108,237,201,61,82,80,47,185,42,186,15,64,204,194,100,99,79,83,21,64,168,79,184,36,160,199,202,61,174,162,72,53,145,130,18,64,213,124,94,108,172,35,41,64,7,58,124,198,55,71,201,61,29,57,195,200,50,24,24,64,89,175,126,132,108,26,26,64,140,80,98,94,184,20,201,61,145,38,14,56,227,141,16,64,39,60,22,200,17,113,15,64,71,62,68,104,151,199,199,61,92,83,203,19,37,75,245,63,234,212,120,66,34,136,30,64,168,14,125,26,35,49,207,61,2,105,150,74,83,120,4,64,217,186,194,195,3,235,22,64,210,214,138,247,57,199,197,61,209,5,11,70,23,211,5,64,118,216,26,226,109,240,28,64,81,94,192,189,61,12,204,61,226,193,188,234,42,116,16,64,105,224,188,129,185,88,27,64,249,40,126,105,161,230,204,61,56,170,232,160,197,199,24,64,123,102,107,81,235,15,32,64,32,226,29,243,178,232,203,61,73,211,224,235,228,112,2,64,98,188,217,195,251,232,29,64,49,42,130,105,175,95,194,61,182,231,156,107,251,169,21,64,236,153,162,171,67,244,37,64,124,155,85,159,98,126,195,61,49,74,222,142,57,209,13,64,91,130,28,101,65,168,16,64,64,252,42,178,127,126,194,61,63,163,179,92,50,145,210,63,193,208,50,18,80,190,38,64,129,174,66,2,157,116,194,61,71,124,37,12,136,111,250,63,228,38,238,3,16,229,20,64,180,190,179,210,36,174,199,61,148,232,207,131,113,193,19,64,107,146,223,5,70,123,249,63,61,157,59,164,49,185,194,61,176,104,174,133,104,69,3,64,92,238,37,176,240,6,9,64,79,192,142,229,213,128,192,61,186,13,55,200,238,114,19,64,139,244,91,0,224,247,251,63,100,1,2,195,30,140,190,61,47,83,229,234,244,246,20,64,94,116,145,65,173,94,29,64,11,28,103,34,184,108,189,61,52,58,132,56,133,99,11,64,44,243,233,192,88,43,1,64,196,134,169,42,197,61,192,61,64,180,241,193,135,27,254,63,35,189,43,122,128,45,225,63,169,125,72,163,131,49,194,61,61,146,249,119,135,231,254,63,168,51,193,95,132,168,233,63,171,116,254,192,62,230,190,61,153,185,81,255,56,81,3,64,70,124,97,124,244,184,224,63,85,231,190,52,45,146,194,61,52,3,171,75,187,243,16,64,18,31,227,211,207,228,195,63,64,135,202,132,130,32,188,61,223,17,216,26,105,64,253,63,99,203,202,195,88,236,20,64,191,245,106,144,13,0,185,61,176,217,102,220,199,110,23,64,186,246,183,46,239,86,28,64,66,230,69,14,136,57,185,61,107,159,127,159,240,14,18,64,82,58,129,126,153,66,49,64,50,45,65,138,47,219,187,61,147,30,216,153,130,216,2,64,102,130,17,68,199,221,20,64,253,93,144,30,202,222,189,61,200,208,112,140,157,196,1,64,202,64,186,48,154,69,33,64,77,217,133,127,0,153,186,61,33,151,159,81,164,210,23,64,211,230,71,33,13,195,18,64,62,103,11,131,163,184,187,61,164,233,66,63,177,84,246,63,238,168,199,22,206,236,21,64,62,255,64,64,87,235,188,61,64,110,187,156,237,232,22,64,158,7,225,153,242,237,154,63,96,149,195,186,24,5,188,61,211,51,33,135,164,57,49,63,86,20,228,126,14,153,245,63,86,13,250,22,171,56,175,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,34,15,85,110,72,161,62,181,166,10,165,43,186,17,64,110,203,191,162,222,33,41,64,111,244,55,67,99,184,75,62,209,65,77,202,239,141,17,64,18,222,15,250,102,217,50,64,16,83,23,159,190,243,51,62,115,250,100,33,30,79,23,64,212,207,191,162,222,33,25,64,28,12,200,248,36,221,33,62,102,100,236,111,251,193,196,63,58,100,130,15,67,30,25,64,42,134,56,225,252,217,33,62,78,88,19,30,249,193,10,64,109,59,253,53,122,37,25,64,43,110,170,245,230,83,5,62,218,122,183,149,211,75,20,64,129,99,105,125,171,210,18,64,185,197,233,6,181,148,4,62,107,184,145,23,208,218,1,64,92,238,37,176,240,6,25,64,214,31,225,29,171,123,4,62,2,218,243,253,76,102,244,63,76,177,89,149,204,60,25,64,50,101,109,125,92,191,0,62,121,204,247,88,98,35,13,64,107,43,242,202,20,209,232,63,170,188,9,86,51,112,253,61,77,182,98,252,85,152,20,64,190,163,70,123,58,243,240,63,251,77,189,221,145,248,255,61,172,39,92,79,249,220,18,64,39,60,22,200,17,113,31,64,18,140,218,214,18,200,249,61,162,119,148,247,208,44,229,63,92,251,86,83,119,3,23,64,158,8,1,238,208,118,248,61,183,40,83,52,72,159,24,64,97,211,97,66,42,138,23,64,248,184,92,79,22,116,248,61,98,192,193,93,204,48,7,64,76,164,40,242,69,64,27,64,49,33,232,127,14,17,246,61,247,94,117,130,170,1,13,64,225,199,29,3,147,185,26,64,130,215,242,146,211,194,243,61,93,28,1,237,185,97,17,64,110,203,191,162,222,33,57,64,3,27,199,199,166,137,243,61,234,238,123,81,245,114,23,64,76,183,32,36,184,130,24,64,27,33,93,100,124,220,242,61,243,19,31,157,78,105,15,64,92,232,94,33,5,193,25,64,107,150,248,134,31,13,241,61,29,18,212,47,178,161,245,63,84,219,3,226,117,242,21,64,191,117,79,236,43,81,236,61,64,244,25,93,50,46,1,64,238,191,123,99,71,81,28,64,252,4,71,93,139,180,235,61,152,200,186,218,40,162,17,64,82,116,156,98,39,41,25,64,167,131,204,15,21,129,235,61,87,94,22,249,22,139,21,64,86,43,227,226,149,26,25,64,240,217,140,95,219,217,234,61,193,131,48,53,2,225,244,63,103,138,97,9,188,7,22,64,238,166,67,38,6,73,233,61,195,3,142,155,187,177,24,64,29,173,16,86,205,148,39,64,1,148,142,241,247,149,230,61,13,237,33,164,52,139,18,64,194,255,86,83,119,3,39,64,93,18,33,200,198,76,232,61,111,47,158,183,90,88,20,64,91,55,144,114,255,34,125,63,97,205,205,145,240,4,231,61,133,32,156,30,88,242,1,64,65,21,30,60,1,60,28,64,201,57,78,49,68,137,227,61,174,37,89,167,98,191,24,64,240,149,223,5,70,123,233,63,113,211,219,47,55,64,225,61,27,33,225,161,195,235,22,64,109,82,133,180,168,198,18,64,52,233,6,112,1,223,219,61,240,56,81,22,236,157,251,63,98,188,217,195,251,232,13,64,242,42,149,192,173,201,220,61,143,7,11,148,57,69,5,64,60,238,113,153,221,32,25,64,201,22,11,168,86,200,220,61,116,81,151,164,172,35,235,63,6,173,13,172,223,34,25,64,227,171,10,36,98,50,218,61,17,85,194,208,86,162,8,64,26,36,208,143,115,71,24,64,146,226,219,177,169,102,218,61,252,204,119,94,5,219,212,63,62,214,74,66,50,140,16,64,4,186,146,78,55,41,217,61,35,213,134,130,170,38,220,63,40,119,175,181,73,252,25,64,124,204,84,88,75,137,215,61,141,157,251,52,59,23,19,64,54,178,103,132,116,28,243,63,37,81,5,237,31,161,214,61,183,80,1,247,104,221,23,64,5,228,233,184,215,108,249,63,106,214,42,193,213,231,208,61,197,77,127,191,234,126,252,63,188,96,201,177,159,167,33,64,9,149,207,230,150,61,209,61,129,167,240,31,117,121,9,64,130,98,154,129,197,219,32,64,88,241,199,246,134,117,206,61,112,170,167,80,251,104,14,64,190,202,6,3,155,187,19,64,185,228,141,253,93,39,212,61,165,222,10,48,228,210,20,64,75,206,168,162,230,35,18,64,116,159,179,190,41,139,208,61,248,32,6,87,159,20,19,64,201,116,209,66,58,30,41,64,7,6,159,66,186,80,204,61,105,122,236,29,47,153,12,64,251,206,97,66,42,138,39,64,24,52,126,239,55,202,209,61,56,143,111,78,52,112,5,64,70,227,165,129,193,90,20,64,239,32,32,26,169,59,205,61,116,180,192,130,246,125,238,63,76,177,89,149,204,60,9,64,74,238,150,29,179,144,202,61,77,249,190,234,57,81,21,64,79,240,0,193,80,41,24,64,216,92,201,42,65,238,201,61,193,144,51,34,113,41,3,64,204,194,100,99,79,83,21,64,21,93,199,35,10,200,202,61,214,136,52,18,12,116,8,64,213,124,94,108,172,35,41,64,89,66,251,147,178,71,201,61,91,90,90,0,161,207,17,64,89,175,126,132,108,26,26,64,175,147,184,58,182,49,207,61,122,39,3,64,111,157,239,63,217,186,194,195,3,235,22,64,228,19,55,200,6,101,198,61,105,74,229,176,170,193,23,64,234,212,120,66,34,136,30,64,169,100,43,214,145,182,203,61,164,134,236,165,18,51,18,64,123,102,107,81,235,15,32,64,46,19,177,3,233,234,203,61,45,92,190,63,98,130,231,63,98,188,217,195,251,232,29,64,224,48,197,33,225,184,196,61,237,220,250,125,29,36,241,63,118,216,26,226,109,240,28,64,178,92,125,122,49,97,203,61,133,88,253,14,181,0,4,64,105,224,188,129,185,88,27,64,141,145,12,11,9,3,195,61,3,80,182,50,237,153,14,64,236,153,162,171,67,244,37,64,249,109,197,5,204,172,195,61,201,220,189,83,219,50,21,64,91,130,28,101,65,168,16,64,7,7,15,71,144,135,194,61,194,91,94,52,95,2,20,64,193,208,50,18,80,190,38,64,170,137,191,170,40,36,194,61,56,1,168,30,128,53,4,64,39,60,22,200,17,113,15,64,15,230,39,236,161,170,199,61,45,237,169,43,211,241,10,64,107,146,223,5,70,123,249,63,219,3,226,139,122,180,194,61,152,158,174,217,101,213,234,63,92,238,37,176,240,6,9,64,88,197,238,214,171,140,190,61,50,176,90,66,247,91,13,64,94,116,145,65,173,94,29,64,207,175,202,247,161,152,190,61,19,105,128,12,6,58,209,63,139,244,91,0,224,247,251,63,174,35,223,235,211,208,189,61,83,191,121,135,119,212,18,64,181,156,70,123,58,243,224,63,226,160,84,153,116,100,192,61,165,15,83,100,236,106,212,63,35,189,43,122,128,45,225,63,52,53,102,230,39,234,190,61,8,10,217,136,127,146,9,64,186,246,183,46,239,86,28,64,244,117,146,102,232,123,191,61,103,91,229,150,47,248,204,63,228,38,238,3,16,229,20,64,109,94,234,52,111,83,194,61,17,236,175,60,212,252,11,64,168,51,193,95,132,168,233,63,145,169,110,18,159,54,194,61,38,27,179,79,75,91,23,64,18,31,227,211,207,228,195,63,178,21,8,70,156,238,190,61,182,247,225,146,46,117,234,63,70,124,97,124,244,184,224,63,190,207,220,142,149,77,189,61,198,101,225,97,224,120,15,64,102,130,17,68,199,221,20,64,226,7,255,63,22,214,185,61,234,190,6,35,93,202,20,64,44,243,233,192,88,43,1,64,85,204,174,203,91,159,185,61,203,145,249,70,71,225,7,64,82,58,129,126,153,66,49,64,7,230,221,96,164,254,189,61,38,29,136,89,143,222,228,63,202,64,186,48,154,69,33,64,224,49,184,152,2,80,187,61,246,130,241,197,107,192,11,64,99,203,202,195,88,236,20,64,213,187,66,215,192,24,189,61,75,170,105,55,55,56,240,63,158,7,225,153,242,237,154,63,70,202,29,95,80,177,187,61,216,159,246,204,172,110,24,64,238,168,199,22,206,236,21,64,168,47,49,235,11,161,186,61,119,143,120,128,229,106,250,63,86,20,228,126,14,153,245,63,84,141,189,33,208,235,155,61,107,80,146,36,6,195,9,64,16,189,104,24,107,21,85,64,176,17,172,107,151,28,195,62,231,45,26,90,74,79,11,64,212,207,191,162,222,33,25,64,70,139,105,199,48,38,109,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,210,234,110,150,111,84,62,217,67,88,32,249,246,10,64,110,203,191,162,222,33,41,64,242,155,62,213,116,100,240,61,71,202,123,192,145,159,10,64,18,222,15,250,102,217,50,64,45,18,52,115,216,217,215,61,69,246,32,196,33,47,253,63,228,38,238,3,16,229,20,64,84,0,91,198,113,88,213,61,209,19,190,150,199,27,15,64,103,138,97,9,188,7,22,64,143,168,222,235,93,108,211,61,36,137,63,253,237,198,20,64,129,99,105,125,171,210,2,64,181,121,48,184,172,126,211,61,191,64,214,97,125,170,2,64,67,23,178,88,204,255,84,64,204,20,188,107,32,116,205,61,111,231,134,219,208,202,1,64,181,156,70,123,58,243,224,63,139,253,136,69,123,11,197,61,236,89,117,169,241,64,1,64,58,100,130,15,67,30,25,64,55,136,81,11,2,7,197,61,49,185,6,156,224,121,248,63,109,59,253,53,122,37,25,64,213,94,111,210,8,18,194,61,56,240,159,7,159,132,19,64,192,127,101,195,51,109,36,64,136,179,151,253,153,254,239,63,17,23,154,119,70,14,252,63,212,207,191,162,222,33,25,64,14,94,162,64,40,27,129,63,116,56,41,24,146,93,251,63,110,203,191,162,222,33,41,64,113,254,41,227,6,252,118,63], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+30720);
/* memory initializer */ allocate([101,0,88,145,11,112,27,63,216,100,1,143,244,172,250,63,18,222,15,250,102,217,50,64,236,229,31,91,77,79,0,63,193,155,72,53,105,102,229,63,67,23,178,88,204,255,84,64,255,212,42,52,149,195,250,62,192,128,157,71,117,168,226,63,181,156,70,123,58,243,224,63,227,185,98,12,6,105,246,62,238,43,190,5,48,122,241,63,76,177,89,149,204,60,249,63,130,79,250,66,92,158,241,62,251,163,60,51,223,182,223,63,58,100,130,15,67,30,25,64,206,160,250,131,16,155,241,62,241,42,226,185,175,156,24,64,109,59,253,53,122,37,25,64,156,45,153,27,157,80,238,62,174,235,23,15,46,200,11,64,129,99,105,125,171,210,2,64,117,57,43,140,119,225,230,62,238,80,21,222,205,132,13,64,228,38,238,3,16,229,20,64,103,121,47,133,188,152,227,62,115,207,20,134,181,75,24,64,152,101,11,251,170,18,40,64,250,146,202,165,45,220,226,62,38,229,83,39,216,103,9,64,192,127,101,195,51,109,36,64,126,97,128,111,85,195,215,62,183,128,67,226,73,56,1,64,190,163,70,123,58,243,240,63,106,212,117,184,216,180,220,62,172,142,23,48,83,233,244,63,92,251,86,83,119,3,23,64,72,244,98,7,93,208,222,62,114,136,69,229,127,107,17,64,240,149,223,5,70,123,217,63,91,54,250,234,249,149,220,62,157,99,235,244,238,190,1,64,129,99,105,125,171,210,18,64,174,45,108,42,142,163,217,62,194,226,28,250,5,138,21,64,76,164,40,242,69,64,27,64,26,52,126,144,75,243,210,62,37,39,191,221,180,89,24,64,97,211,97,66,42,138,23,64,206,10,214,215,107,247,210,62,231,190,194,217,133,120,244,63,92,238,37,176,240,6,25,64,237,111,107,65,19,221,210,62,227,125,138,253,252,121,21,64,76,177,89,149,204,60,25,64,114,168,206,112,190,9,209,62,158,82,11,22,143,101,225,63,225,199,29,3,147,185,26,64,80,153,114,106,76,179,214,62,207,237,158,84,85,45,233,63,107,43,242,202,20,209,232,63,146,93,194,232,49,241,214,62,136,6,86,60,15,98,247,63,201,14,107,53,120,73,44,64,34,217,170,24,28,213,213,62,245,45,187,218,85,187,17,64,39,60,22,200,17,113,31,64,96,2,226,5,147,8,194,62,40,29,223,139,74,2,18,64,194,255,86,83,119,3,39,64,225,240,100,195,89,30,195,62,242,191,234,104,192,212,243,63,65,21,30,60,1,60,28,64,61,63,106,238,197,243,194,62,66,79,227,75,240,45,10,64,109,82,133,180,168,198,18,64,155,249,2,202,77,119,197,62,52,28,17,78,175,31,2,64,52,205,144,114,4,86,40,64,196,128,37,75,244,124,197,62,78,149,157,34,158,70,247,63,83,122,123,131,197,183,230,63,90,217,122,56,59,227,189,62,53,240,185,9,81,178,7,64,240,149,223,5,70,123,233,63,48,218,5,52,131,11,187,62,70,155,188,224,115,146,247,63,84,219,3,226,117,242,21,64,155,45,171,144,245,130,190,62,145,88,30,219,2,246,215,63,35,254,93,9,205,33,25,64,28,205,98,92,213,130,190,62,105,216,120,41,193,24,25,64,31,157,33,60,240,33,25,64,189,230,219,90,108,20,186,62,64,160,221,183,91,252,249,63,110,203,191,162,222,33,57,64,11,186,234,213,70,138,193,62,236,1,84,100,128,104,23,64,29,173,16,86,205,148,39,64,36,182,32,147,88,199,192,62,20,127,93,211,210,73,16,64,61,109,91,82,51,202,49,64,113,52,107,188,131,162,181,62,36,42,198,80,58,222,20,64,238,191,123,99,71,81,28,64,230,241,242,42,111,126,181,62,206,81,249,200,77,53,19,64,98,188,217,195,251,232,13,64,217,194,4,114,190,120,185,62,122,187,123,163,106,208,235,63,173,20,245,93,98,77,203,63,234,191,86,64,153,181,175,62,74,175,87,221,77,104,18,64,236,153,162,171,67,244,37,64,170,52,186,69,238,27,170,62,135,199,95,25,120,130,253,63,188,96,201,177,159,167,33,64,59,179,210,89,242,242,169,62,255,167,120,226,141,169,12,64,103,138,97,9,188,7,22,64,97,117,166,199,39,170,168,62,29,170,16,205,237,143,5,64,5,228,233,184,215,108,249,63,202,174,223,242,81,238,165,62,111,152,123,114,235,53,13,64,251,206,97,66,42,138,39,64,73,171,245,144,207,56,165,62,243,49,166,240,47,238,1,64,193,32,98,123,152,12,25,64,126,200,65,40,109,34,165,62,207,88,46,178,228,160,17,64,129,122,29,202,36,55,25,64,94,35,240,108,53,208,172,62,74,210,66,252,199,49,8,64,4,152,46,147,20,233,100,64,198,167,105,75,155,217,171,62,178,223,77,14,41,197,24,64,123,195,29,3,147,185,10,64,91,228,134,133,85,45,165,62,223,30,253,219,57,30,0,64,91,55,144,114,255,34,125,63,243,203,143,175,207,38,164,62,239,154,230,81,45,50,11,64,62,214,74,66,50,140,16,64,172,216,59,247,67,145,170,62,7,175,196,209,116,242,3,64,26,36,208,143,115,71,24,64,34,191,5,169,96,91,169,62,212,149,127,205,81,163,16,64,40,119,175,181,73,252,25,64,6,39,128,164,40,186,166,62,84,3,181,155,251,34,16,64,10,82,182,118,34,224,34,64,10,180,95,78,103,5,162,62,130,192,150,133,217,254,248,63,54,178,103,132,116,28,243,63,21,211,144,35,139,41,163,62,230,193,180,206,69,77,5,64,60,238,113,153,221,32,25,64,189,97,88,180,179,40,163,62,106,40,47,4,250,226,15,64,6,173,13,172,223,34,25,64,84,113,193,195,158,66,161,62,138,175,5,32,41,238,244,63,82,116,156,98,39,41,25,64,14,156,72,93,145,18,161,62,42,50,124,234,72,105,21,64,86,43,227,226,149,26,25,64,187,133,139,178,236,164,160,62,124,206,194,240,117,39,5,64,76,183,32,36,184,130,24,64,246,53,54,49,221,29,160,62,250,248,174,115,14,9,16,64,92,232,94,33,5,193,25,64,126,28,234,169,136,59,163,62,210,102,55,31,61,91,14,64,76,177,89,149,204,60,9,64,1,67,195,240,75,200,159,62,165,133,7,108,176,109,24,64,92,238,37,176,240,6,9,64,34,254,27,21,87,34,160,62,229,232,124,63,249,21,19,64,168,51,193,95,132,168,233,63,24,164,103,146,164,157,155,62,57,69,53,140,236,157,10,64,130,98,154,129,197,219,32,64,155,246,82,205,7,141,161,62,116,136,158,169,11,57,21,64,123,218,187,232,102,188,42,64,137,38,92,173,13,58,161,62,109,229,254,97,13,35,23,64,94,243,71,25,169,180,40,64,251,118,74,174,128,255,160,62,141,254,80,242,160,106,0,64,129,25,136,74,98,182,39,64,205,144,185,30,198,31,157,62,236,152,137,183,242,40,13,64,82,58,129,126,153,66,49,64,53,161,162,102,20,135,154,62,229,96,195,153,180,184,19,64,238,168,199,22,206,236,21,64,180,44,101,32,199,111,160,62,137,77,124,51,192,17,221,63,194,92,248,225,121,115,34,64,0,69,89,82,78,237,159,62,89,7,214,161,252,73,9,64,199,124,224,124,8,109,23,64,166,123,244,46,33,186,159,62,74,77,99,173,82,227,227,63,70,227,165,129,193,90,4,64,128,89,77,211,2,130,153,62,58,87,102,231,48,82,8,64,173,20,245,93,98,77,219,63,152,95,5,42,0,220,149,62,180,146,14,87,212,206,233,63,39,60,22,200,17,113,15,64,79,215,23,157,112,217,149,62,91,22,128,49,28,150,255,63,44,243,233,192,88,43,1,64,72,166,13,207,241,210,149,62,175,74,230,71,116,196,6,64,91,130,28,101,65,168,16,64,92,226,38,133,234,216,149,62,180,85,241,47,169,36,8,64,70,227,165,129,193,90,20,64,119,68,82,167,172,204,146,62,238,248,117,220,89,112,24,64,213,124,94,108,172,35,41,64,55,226,99,247,161,193,152,62,162,209,137,217,218,74,7,64,234,78,184,83,222,18,50,64,126,150,144,253,71,156,144,62,65,20,146,28,228,110,1,64,158,7,225,153,242,237,154,63,110,200,183,211,112,91,148,62,139,112,254,106,21,232,255,63,75,206,168,162,230,35,18,64,147,184,213,39,152,89,141,62,185,214,193,39,180,128,20,64,193,208,50,18,80,190,38,64,211,52,93,204,217,141,146,62,192,156,159,179,108,221,222,63,7,26,33,217,16,32,41,64,8,241,35,41,206,131,141,62,46,97,255,189,239,140,18,64,201,116,209,66,58,30,41,64,238,183,89,84,169,119,139,62,103,152,73,155,253,120,247,63,186,246,183,46,239,86,28,64,94,172,151,237,5,134,145,62,110,190,3,158,119,124,211,63,21,27,90,132,144,219,81,64,83,124,135,238,232,174,142,62,226,168,253,199,143,14,19,64,123,102,107,81,235,15,32,64,203,248,213,226,249,229,136,62,138,109,117,174,176,17,11,64,139,244,91,0,224,247,251,63,217,192,57,236,128,51,143,62,109,86,6,103,160,193,24,64,39,171,53,38,205,81,50,64,115,186,184,190,228,241,134,62,178,75,158,210,197,204,226,63,190,202,6,3,155,187,19,64,56,42,231,244,186,25,141,62,104,108,192,15,68,54,17,64,25,30,238,3,16,229,36,64,160,240,145,106,123,70,140,62,62,120,45,168,95,103,14,64,98,188,217,195,251,232,29,64,36,118,178,99,45,50,131,62,74,52,178,74,238,182,244,63,97,211,97,66,42,138,7,64,191,9,131,212,126,162,130,62,230,83,139,132,18,97,18,64,202,64,186,48,154,69,33,64,32,94,184,194,212,204,137,62,76,83,111,38,175,162,223,63,194,180,96,173,85,76,49,64,30,204,189,8,179,88,137,62,173,23,219,145,97,106,3,64,42,155,9,52,102,132,99,64,255,105,108,83,128,4,136,62,144,206,114,64,22,67,196,63,107,146,223,5,70,123,249,63,246,203,132,148,175,67,130,62,60,167,229,101,249,201,20,64,68,49,116,74,18,49,42,64,179,53,33,212,213,47,132,62,234,242,182,200,127,246,8,64,60,173,98,138,17,127,48,64,186,247,195,241,40,143,130,62,193,150,185,223,167,168,24,64,234,212,120,66,34,136,30,64,137,14,2,192,34,77,131,62,150,144,109,17,176,255,246,63,193,116,101,195,51,109,52,64,90,87,98,175,36,205,129,62,211,222,122,133,164,224,12,64,79,27,208,143,115,71,40,64,89,114,186,72,69,30,127,62,174,189,54,111,33,218,21,64,204,194,100,99,79,83,21,64,22,16,31,14,40,60,131,62,137,242,91,143,154,29,24,64,94,116,145,65,173,94,29,64,204,248,152,1,34,146,128,62,24,27,246,219,141,224,8,64,239,150,32,118,49,30,25,64,66,141,240,201,209,143,128,62,98,157,59,160,155,80,12,64,185,8,95,207,139,37,25,64,57,51,211,204,234,165,122,62,7,23,213,95,46,38,244,63,118,216,26,226,109,240,28,64,218,107,75,144,132,172,128,62,195,37,71,243,32,14,241,63,115,70,41,3,143,56,46,64,198,117,179,147,41,124,125,62,170,202,55,6,66,138,1,64,16,158,20,16,69,250,37,64,101,237,162,217,7,23,127,62,87,87,25,151,183,55,16,64,217,186,194,195,3,235,22,64,68,42,60,169,16,74,120,62,20,111,15,64,20,184,21,64,201,88,39,18,84,63,35,64,154,143,178,134,15,221,119,62,192,188,102,75,180,47,20,64,208,135,119,32,144,151,24,64,91,211,210,107,146,38,124,62,31,28,33,184,230,7,5,64,105,224,188,129,185,88,27,64,238,136,245,151,185,219,125,62,31,71,7,57,140,181,16,64,39,60,22,200,17,113,47,64,161,252,12,243,173,43,119,62,89,1,183,45,28,159,249,63,114,19,8,37,45,172,25,64,10,62,117,108,69,228,118,62,42,87,74,111,11,182,3,64,57,72,250,210,180,108,45,64,22,54,45,219,111,47,117,62,77,62,207,238,111,59,9,64,242,154,70,123,58,243,0,64,235,113,2,14,204,59,124,62,141,252,116,222,29,46,19,64,86,20,228,126,14,153,245,63,125,39,139,6,80,35,124,62,177,38,33,194,181,159,7,64,82,108,76,157,50,255,23,64,147,190,143,222,208,245,115,62,10,242,246,33,164,174,21,64,79,240,0,193,80,41,24,64,203,31,180,214,81,126,122,62,242,139,196,62,175,144,13,64,240,46,51,168,138,68,26,64,216,146,45,124,144,148,120,62,13,179,85,151,163,97,15,64,115,213,240,105,157,146,22,64,19,172,244,85,15,207,114,62,227,22,129,226,85,190,243,63,89,175,126,132,108,26,26,64,43,141,205,179,191,82,122,62,134,59,109,247,113,182,254,63,71,124,99,230,119,58,53,64,240,81,2,164,175,76,120,62,135,186,42,52,175,118,18,64,211,230,71,33,13,195,18,64,174,34,35,18,53,71,116,62,233,94,112,156,49,202,243,63,178,218,114,169,103,20,41,64,15,230,246,125,208,13,118,62,136,252,157,225,23,9,213,63,136,210,3,226,117,242,37,64,233,39,140,251,157,73,115,62,105,106,127,179,21,134,23,64,72,221,65,231,237,250,24,64,193,146,2,171,50,36,115,62,212,145,89,80,65,143,232,63,250,189,61,94,207,72,25,64,64,113,43,186,117,218,113,62,150,144,232,47,219,91,230,63,212,171,214,229,85,79,21,64,206,40,128,113,26,219,115,62,163,60,93,81,86,157,12,64,35,189,43,122,128,45,225,63,80,9,93,205,99,235,115,62,9,7,238,8,108,34,20,64,173,50,49,39,17,139,55,64,237,13,150,25,48,124,112,62,147,103,34,87,97,61,238,63,168,201,238,210,184,237,41,64,214,9,235,42,224,27,113,62,251,98,7,100,75,211,24,64,181,93,216,250,121,116,238,63,138,0,50,142,50,18,113,62,220,97,33,235,241,36,20,64,56,132,87,135,23,218,255,63,141,44,40,8,60,209,110,62,171,50,46,1,161,107,24,64,124,28,73,231,69,148,238,63,142,140,193,140,3,216,114,62,11,209,139,162,41,41,231,63,70,124,97,124,244,184,224,63,13,146,9,166,181,44,113,62,127,158,148,2,154,207,15,64,152,101,11,251,170,18,56,64,32,182,141,11,31,238,116,62,58,43,174,11,193,56,17,64,112,11,187,140,0,1,54,64,166,176,77,115,236,91,113,62,251,18,94,188,71,0,12,64,99,203,202,195,88,236,20,64,125,138,238,13,45,54,116,62,180,69,213,148,68,30,12,64,2,6,152,112,49,108,50,64,192,36,25,112,135,150,114,62,145,6,13,18,154,242,5,64,18,31,227,211,207,228,195,63,176,179,212,120,230,178,112,62,250,58,62,72,215,240,1,64,245,94,248,225,121,115,50,64,131,63,152,80,244,131,111,62,215,240,206,49,164,169,2,64,129,207,119,198,9,122,228,63,187,5,79,89,142,208,112,62,109,115,22,63,98,135,1,64,9,153,131,215,54,28,25,64,206,187,92,139,80,204,112,62,125,46,83,115,138,212,17,64,57,2,252,109,134,39,25,64,108,180,142,248,80,150,110,62,102,13,106,203,110,254,11,64,107,43,242,202,20,209,248,63,174,242,202,43,174,1,113,62,178,55,116,136,8,157,228,63,102,130,17,68,199,221,20,64,148,101,100,43,107,30,113,62,1,128,39,180,82,5,2,64,242,121,205,41,230,153,22,64,167,92,245,111,89,104,113,62,223,162,13,70,143,226,255,63,242,146,96,98,74,100,186,63,53,90,22,14,126,108,105,62,57,215,19,163,22,245,13,64,255,73,203,162,218,160,44,64,78,110,18,112,126,217,104,62,106,146,142,149,253,88,245,63,189,146,232,247,214,182,225,63,119,142,83,205,145,204,112,62,15,144,248,18,86,149,17,64,187,23,250,209,128,22,58,64,18,193,147,254,249,161,112,62,104,138,197,154,67,178,4,64,221,98,31,216,9,43,85,64,21,145,241,183,208,136,112,62,22,33,150,158,71,33,19,64,109,35,223,154,148,237,109,64,248,81,181,105,25,199,106,62,79,0,184,145,51,102,231,63,44,25,134,110,174,109,83,64,131,192,206,162,45,79,109,62,175,24,152,157,209,2,8,64,3,74,54,121,77,184,24,64,191,105,15,72,74,28,106,62,15,207,246,90,69,35,14,64,154,18,222,66,234,145,86,64,104,41,47,250,220,184,108,62,74,214,109,155,10,79,13,64,63,81,73,204,111,139,25,64,211,143,169,186,232,117,110,62,64,149,4,237,34,83,17,64,182,37,178,27,215,169,27,64,160,24,1,31,37,122,105,62,94,137,72,209,200,67,23,64,184,165,108,13,195,33,25,64,255,0,103,206,255,121,105,62,210,63,44,161,192,162,234,63,240,249,18,56,250,33,25,64,179,213,177,53,232,188,101,62,214,8,134,166,186,71,14,64,212,116,62,221,188,4,25,64,94,32,180,215,37,205,102,62,146,86,230,150,152,6,3,64,111,180,55,36,176,128,31,64,106,170,90,212,139,158,101,62,127,106,58,14,175,233,6,64,110,38,65,104,0,63,25,64,232,226,25,44,14,208,101,62,235,132,241,189,193,82,3,64,198,91,103,43,180,19,13,64,116,204,6,170,235,181,108,62,101,149,147,20,114,191,10,64,204,67,102,31,154,40,57,64,93,252,222,47,155,237,105,62,216,44,178,173,237,146,6,64,219,159,51,19,192,10,23,64,85,191,247,127,92,80,103,62,245,211,252,131,167,127,22,64,212,243,168,95,103,244,28,64,221,46,195,107,62,151,101,62,16,236,85,218,127,200,225,63,204,142,97,9,188,7,38,64,128,198,243,116,187,9,102,62,116,232,160,240,159,95,10,64,123,30,159,200,180,214,26,64,112,230,54,159,15,127,103,62,192,63,48,55,251,131,14,64,205,255,75,50,253,56,27,64,111,33,18,217,137,203,97,62,44,191,240,112,89,123,12,64,42,188,12,156,85,47,41,64,110,180,217,83,155,90,97,62,134,73,78,169,214,189,20,64,184,53,185,122,93,16,241,63,171,187,0,167,244,2,99,62,34,148,137,122,253,94,15,64,169,188,57,92,220,213,35,64,130,36,49,244,67,207,99,62,33,74,232,25,60,195,16,64,60,89,88,6,62,218,39,64,117,111,128,18,53,227,100,62,104,218,38,192,32,47,22,64,141,41,123,40,228,36,179,63,125,32,53,6,42,80,96,62,242,158,98,220,147,236,24,64,69,191,112,111,231,33,41,64,182,97,242,75,147,215,96,62,216,121,214,110,8,212,24,64,198,238,233,192,88,43,17,64,118,231,171,145,140,154,101,62,136,215,175,50,198,31,243,63,191,233,110,239,239,174,42,64,60,148,115,235,206,183,97,62,241,218,133,17,7,224,252,63,78,212,212,177,155,38,37,64,253,214,165,93,116,132,99,62,146,10,38,168,40,100,22,64,251,224,29,18,75,213,24,64,167,62,196,111,17,72,96,62,4,186,22,34,74,135,9,64,216,223,224,201,140,13,50,64,31,52,115,224,28,43,94,62,4,82,73,197,156,96,16,64,134,203,85,235,153,220,108,63,198,161,199,137,14,217,99,62,72,202,126,167,139,224,20,64,176,162,70,102,226,221,23,64,241,150,166,238,205,32,99,62,164,115,155,225,144,152,240,63,71,186,97,51,114,110,25,64,51,160,26,12,238,216,98,62,70,20,221,129,93,225,246,63,146,248,56,223,218,101,26,64,49,20,232,190,45,108,99,62,23,160,252,105,246,5,8,64,101,27,170,196,120,20,24,64,128,71,102,56,61,46,92,62,203,34,203,94,18,127,3,64,253,121,194,8,108,207,26,64,229,92,178,165,107,58,91,62,104,250,184,59,54,78,249,63,201,195,111,75,86,106,63,64,247,215,207,8,143,229,98,62,130,142,143,214,250,132,21,64,6,46,4,250,66,82,111,64,250,110,238,107,120,175,91,62,41,226,32,138,236,157,19,64,103,7,167,170,255,186,48,64,96,26,192,124,193,97,98,62,212,255,175,115,237,43,13,64,67,132,213,128,68,47,26,64,168,3,68,94,215,206,93,62,207,243,70,53,111,118,10,64,25,81,15,226,113,113,41,64,240,122,38,131,224,36,98,62,128,226,159,208,237,245,251,63,214,29,103,123,0,228,45,64,136,33,6,56,61,96,96,62,94,208,220,205,116,70,146,63,249,68,3,112,153,237,18,64,238,160,253,85,205,122,92,62,31,50,104,248,34,174,17,64,69,33,189,60,81,116,23,64,247,120,159,139,248,126,89,62,1,147,238,233,198,9,13,64,54,178,103,132,116,28,3,64,202,175,106,162,236,42,93,62,229,217,4,193,17,163,8,64,243,14,29,155,6,15,40,64,92,199,79,152,50,80,96,62,16,85,89,32,46,51,213,63,148,237,14,214,213,33,41,64,2,145,44,126,41,216,87,62,19,41,136,148,228,15,21,64,225,199,29,3,147,185,42,64,9,36,68,93,219,87,96,62,81,242,143,99,16,17,19,64,81,11,105,88,188,22,61,64,62,226,89,133,71,85,93,62,128,204,31,89,206,70,20,64,198,75,156,114,0,213,43,64,20,191,9,36,158,138,88,62,46,6,148,130,218,209,23,64,153,200,172,79,188,78,24,64,16,247,144,156,75,190,85,62,71,138,36,197,69,63,16,64,235,246,97,116,241,205,18,64,119,4,156,153,47,156,85,62,93,20,248,176,96,225,3,64,234,250,104,166,6,13,25,64,46,167,242,81,236,130,85,62,51,45,175,188,181,167,16,64,88,160,22,159,182,54,25,64,26,173,223,198,237,180,87,62,16,46,8,79,2,40,230,63,169,210,210,245,0,245,25,64,203,79,237,239,191,164,90,62,90,179,108,113,213,198,23,64,61,188,249,90,79,22,40,64,25,59,48,245,111,225,86,62,110,140,85,227,101,144,18,64,222,86,122,147,46,252,22,64,38,125,180,58,136,68,90,62,65,12,120,205,208,128,24,64,141,41,123,40,228,36,195,63,160,82,200,226,254,191,84,62,254,237,182,32,63,154,204,63,7,100,52,1,35,11,43,64,221,176,36,153,41,235,91,62,86,138,76,183,193,31,17,64,2,209,251,138,23,93,18,64,212,139,226,200,90,28,90,62,236,84,226,220,163,77,194,63,104,169,108,33,127,153,242,63,244,150,130,74,113,36,84,62,142,249,158,241,64,77,239,63,118,180,49,37,229,29,25,64,229,242,10,120,66,32,84,62,173,126,173,251,116,174,22,64,204,230,77,32,216,37,25,64,17,116,147,236,71,40,87,62,62,4,52,187,102,18,0,64,28,250,243,205,168,35,50,64,177,15,135,110,143,25,85,62,160,226,95,129,112,108,208,63,238,173,168,244,95,191,18,64,150,8,200,245,228,17,89,62,244,249,130,180,234,161,17,64,106,80,86,66,46,11,36,64,178,16,179,120,11,20,84,62,242,177,180,121,74,23,21,64,206,12,220,55,188,17,207,63,29,95,178,0,173,40,90,62,37,91,45,122,129,161,17,64,117,33,252,22,41,201,87,64,140,228,83,149,154,233,82,62,222,105,2,16,191,225,200,63,140,77,109,66,38,9,43,64,107,45,9,212,41,39,87,62,218,162,255,108,119,178,246,63,120,90,202,88,35,38,24,64,57,90,218,171,106,62,87,62,18,175,171,113,254,229,18,64,194,255,86,83,119,3,55,64,112,26,233,56,147,220,87,62,121,144,128,30,191,51,3,64,34,151,132,55,167,86,41,64,21,178,159,81,115,60,86,62,117,104,136,90,224,235,20,64,202,64,181,236,153,29,26,64,164,169,114,68,220,63,83,62,161,47,151,76,36,203,0,64,100,68,5,178,142,71,27,64,161,149,93,252,180,198,83,62,141,47,74,151,50,49,214,63,190,31,46,154,114,73,80,64,154,145,4,104,173,242,80,62,249,188,148,51,53,183,230,63,151,80,173,93,39,70,149,63,242,109,143,191,189,196,80,62,92,196,96,113,253,197,23,64,188,191,165,79,250,22,25,64,20,20,16,242,56,188,80,62,47,0,111,13,180,135,230,63,134,219,217,245,194,44,25,64,25,174,245,237,155,167,82,62,8,221,194,26,193,242,17,64,188,96,201,177,159,167,49,64,200,115,11,6,167,207,78,62,93,93,172,71,119,242,7,64,103,150,137,89,122,54,188,63,158,152,76,228,105,212,79,62,38,86,169,219,113,57,2,64,196,17,212,123,23,214,240,63,47,63,95,201,253,152,78,62,101,192,120,33,241,233,250,63,83,79,62,18,76,61,42,64,126,232,179,217,46,164,77,62,69,26,14,255,241,25,10,64,18,236,165,129,193,90,36,64,172,21,82,154,92,115,83,62,36,76,197,50,142,128,9,64,112,86,182,118,34,224,50,64,175,129,64,227,99,39,80,62,67,236,242,37,196,153,22,64,190,145,140,104,40,134,179,63,59,116,144,81,2,177,82,62,114,154,240,28,194,242,21,64,152,229,13,29,171,166,51,64,172,3,222,241,130,131,77,62,32,120,34,174,149,251,22,64,203,175,108,49,221,16,24,64,29,1,23,54,163,233,82,62,54,158,120,126,3,254,22,64,245,210,189,197,34,239,57,64,180,133,170,125,193,123,80,62,221,14,134,249,74,232,24,64,129,99,105,125,171,210,34,64,158,137,114,11,52,51,83,62,32,198,223,206,220,193,24,64,107,233,181,72,111,130,64,64,200,171,178,106,40,135,77,62,140,208,74,132,188,124,21,64,19,175,146,199,195,63,228,63,204,7,107,133,154,172,74,62,242,123,221,67,8,140,247,63,114,237,23,193,72,39,15,64,215,137,111,14,213,40,79,62,127,52,255,234,73,147,16,64,126,163,55,44,20,143,41,64,68,156,62,231,132,221,75,62,58,202,90,30,166,207,236,63,221,239,18,20,224,50,26,64,68,82,76,29,26,105,79,62,113,138,157,246,193,10,23,64,10,242,83,53,204,162,50,64,200,162,193,140,98,172,77,62,23,107,172,154,23,94,241,63,113,38,157,98,135,8,3,64,26,76,96,185,92,16,82,62,154,55,123,48,181,163,21,64,124,212,204,214,101,51,48,64,26,68,103,49,144,146,73,62,136,105,43,208,243,90,246,63,29,169,104,243,210,255,38,64,42,130,40,155,232,58,74,62,148,31,192,75,71,206,236,63,19,34,174,2,131,37,41,64,84,197,143,139,109,164,80,62,112,242,86,54,212,12,17,64,250,25,220,171,150,53,50,64,11,46,202,233,180,227,74,62,182,12,53,239,21,150,246,63,123,60,47,83,215,248,27,64,48,75,201,199,233,144,74,62,31,53,95,191,122,193,6,64,70,60,104,252,85,91,56,64,127,18,180,219,181,18,79,62,127,197,211,129,239,46,21,64,190,145,140,104,40,134,163,63,144,81,197,171,16,209,77,62,163,32,231,196,177,224,19,64,219,58,174,62,105,119,207,63,206,158,209,91,224,227,69,62,41,167,49,42,83,238,3,64,158,58,255,199,25,115,24,64,249,172,171,61,197,8,75,62,96,149,189,131,187,183,18,64,32,46,1,87,50,184,21,64,172,242,86,108,142,222,75,62,238,82,76,89,49,49,241,63,52,214,110,218,148,251,40,64,215,119,67,229,1,74,69,62,224,132,56,130,189,240,18,64,121,168,64,31,250,252,24,64,17,96,92,73,89,28,69,62,96,157,188,238,116,162,16,64,164,96,128,125,163,208,25,64,1,1,84,157,121,156,73,62,55,77,133,132,115,129,11,64,161,162,58,201,21,41,25,64,197,110,156,80,84,31,69,62,11,163,172,71,225,156,254,63,47,247,62,38,195,70,25,64,146,67,123,249,36,179,68,62,244,49,20,121,79,92,238,63,62,214,74,66,50,140,32,64,133,237,181,81,145,63,73,62,205,189,215,239,59,211,9,64,161,248,68,124,167,26,25,64,223,129,149,147,155,225,69,62,173,51,18,230,156,187,1,64,76,237,16,143,59,23,41,64,83,172,128,129,186,102,68,62,207,244,245,14,61,0,5,64,213,220,24,30,94,33,41,64,3,130,241,60,242,192,68,62,191,40,94,72,55,113,23,64,81,143,43,19,107,9,25,64,116,94,80,151,185,164,68,62,239,175,245,145,243,59,233,63,241,11,84,50,82,58,25,64,202,40,201,115,82,0,72,62,232,176,71,114,10,117,15,64,144,152,82,130,5,204,49,64,108,22,20,41,236,226,72,62,252,3,62,105,102,252,239,63,233,76,100,34,97,200,49,64,154,9,249,255,94,95,67,62,202,209,201,167,25,14,21,64,235,169,89,185,4,177,24,64,112,92,48,106,183,249,66,62,219,79,107,224,17,243,247,63,71,251,15,95,28,19,251,63,120,197,67,68,190,117,70,62,122,250,200,31,206,109,230,63,103,150,137,89,122,54,204,63,44,68,250,72,23,4,74,62,85,224,160,193,138,42,16,64,8,40,164,66,237,164,84,64,30,141,209,84,2,88,66,62,218,243,217,169,80,41,247,63,189,245,37,140,184,146,25,64,26,47,232,109,109,78,70,62,212,68,57,255,55,103,221,63,172,68,88,51,105,4,47,64,180,43,248,188,56,50,72,62,34,7,222,15,135,103,15,64,242,146,96,98,74,100,202,63,5,254,98,141,110,173,66,62,146,158,172,204,54,165,17,64,156,6,92,171,165,95,238,63,153,143,186,68,254,11,67,62,211,231,107,169,165,56,3,64,55,121,226,226,53,59,15,64,91,46,106,159,153,219,67,62,66,206,139,225,222,108,246,63,38,83,158,70,64,18,25,64,13,208,226,111,137,196,67,62,89,32,52,168,225,251,20,64,28,72,225,254,124,49,25,64,28,242,249,194,116,46,65,62,250,144,67,28,247,185,12,64,226,67,24,26,9,48,5,64,73,159,137,82,178,176,67,62,62,70,39,68,222,194,3,64,63,149,243,62,87,187,98,64,228,200,207,53,82,24,71,62,133,243,187,136,248,65,245,63,45,77,55,101,128,121,66,64,63,196,210,245,154,201,64,62,104,239,0,127,38,166,24,64,86,120,235,157,130,55,19,64,223,225,4,106,122,125,68,62,141,65,61,153,97,138,15,64,7,186,102,39,95,34,41,64,53,1,32,246,166,23,69,62,12,100,181,22,14,54,206,63,14,52,146,190,174,206,38,64,193,222,159,156,98,65,69,62,193,111,4,84,174,122,18,64,245,29,185,175,68,206,54,64,41,239,20,169,158,157,64,62,12,128,200,100,31,71,14,64,175,90,124,213,35,86,31,64,97,80,133,219,217,226,67,62,244,207,109,7,109,201,1,64,81,162,35,69,221,75,6,64,254,187,228,2,180,112,63,62,135,120,126,68,126,158,244,63,171,245,184,119,112,33,25,64,52,125,63,136,48,112,63,62,242,168,225,165,129,112,21,64,253,169,198,205,76,34,25,64,8,235,124,144,115,178,62,62,160,122,61,246,3,17,22,64,159,225,177,153,178,65,49,64,84,226,119,217,162,16,65,62,39,55,185,154,46,11,5,64,195,69,112,99,75,210,40,64,46,84,150,79,190,84,67,62,86,129,140,61,108,204,6,64,195,137,191,145,89,32,25,64,108,88,216,207,134,80,67,62,181,95,98,31,169,92,14,64,229,21,192,179,99,35,25,64,48,113,202,178,49,210,65,62,108,46,33,109,171,193,224,63,251,224,29,18,75,213,40,64,235,168,78,199,139,79,66,62,21,137,92,11,173,45,19,64,148,218,144,11,232,247,37,64,242,45,30,190,101,161,65,62,236,168,112,216,145,66,249,63,71,67,180,75,159,240,37,64,112,105,43,118,166,77,59,62,21,137,39,186,240,213,22,64,255,117,92,184,250,137,249,63,174,14,52,196,235,167,63,62,57,159,171,137,61,189,14,64,138,252,146,59,176,62,16,64,107,175,217,144,214,15,63,62,69,145,212,30,87,138,8,64,216,159,24,158,5,32,100,64,218,255,202,30,141,46,59,62,245,14,198,126,219,5,245,63,228,153,70,102,226,221,39,64,93,16,164,42,147,62,65,62,230,251,1,231,114,232,11,64,62,244,15,95,28,19,235,63,149,195,253,39,242,243,58,62,189,161,63,13,83,131,248,63,173,20,245,93,98,77,235,63,57,103,98,171,164,73,62,62,75,116,84,238,112,73,10,64,72,216,3,189,191,101,23,64,197,53,218,113,190,118,58,62,54,72,75,93,49,163,247,63,199,94,80,242,229,74,22,64,73,52,62,190,46,167,64,62,55,41,153,246,189,96,249,63,83,47,7,42,17,83,33,64,164,200,31,160,11,76,57,62,223,75,23,26,210,224,244,63,221,104,224,177,151,165,40,64,199,105,235,140,139,129,56,62,161,131,82,94,169,56,18,64,144,169,110,182,129,44,41,64,117,36,87,23,175,157,57,62,208,8,168,60,156,3,8,64,205,76,84,237,233,85,21,64,169,69,217,150,105,212,60,62,248,119,237,14,16,140,19,64,45,129,224,124,8,109,39,64,42,71,159,160,22,133,57,62,24,4,153,136,88,206,18,64,13,229,118,81,231,142,35,64,23,40,105,231,5,123,55,62,70,56,190,120,122,90,18,64,191,178,24,202,148,215,50,64,175,145,62,126,119,59,59,62,60,71,173,225,247,161,242,63,187,23,250,209,128,22,74,64,17,253,137,146,247,42,59,62,134,201,28,118,118,90,15,64,163,78,133,114,8,215,36,64,215,114,209,251,65,122,58,62,38,161,105,109,143,38,1,64,105,243,180,179,43,155,24,64,126,42,248,234,23,155,54,62,62,145,144,119,41,68,24,64,197,54,223,222,77,218,50,64,234,210,15,39,16,10,56,62,74,163,146,150,24,105,7,64,138,85,191,91,238,193,219,63,191,241,131,138,147,45,55,62,124,121,254,112,85,244,9,64,99,247,195,33,60,37,25,64,230,146,135,31,164,45,55,62,49,199,190,26,4,60,11,64,223,163,187,35,129,30,25,64,21,241,47,95,141,117,62,62,212,215,69,81,185,77,235,63,38,254,116,199,19,161,19,64,7,228,201,202,96,58,60,62,54,213,152,45,157,155,19,64,97,188,195,92,86,135,39,64,80,97,112,78,89,153,57,62,2,9,241,101,168,254,253,63,91,55,144,114,255,34,141,63,153,141,57,96,134,3,54,62,218,8,201,88,196,226,13,64,18,191,12,174,113,233,40,64,44,183,196,189,43,118,57,62,16,209,182,44,21,2,18,64,217,167,202,145,145,168,25,64,155,167,106,35,255,139,54,62,11,142,114,85,69,125,17,64,103,86,69,179,27,7,39,64,191,191,4,24,33,6,58,62,127,56,246,248,38,167,4,64,2,132,243,207,42,64,24,64,35,140,217,43,44,190,54,62,27,57,134,250,105,204,7,64,87,253,91,0,224,247,11,64,222,134,186,132,198,255,56,62,7,224,126,220,95,253,198,63,251,27,54,87,192,42,210,63,77,34,215,29,216,107,52,62,236,130,176,173,67,182,255,63,215,178,149,140,229,214,8,64,248,128,138,204,112,108,59,62,190,151,75,114,243,96,208,63,136,246,123,129,183,136,24,64,180,21,139,194,151,77,60,62,27,204,223,10,251,1,6,64,240,176,184,129,145,112,68,64,47,87,59,203,21,31,55,62,95,239,159,89,55,62,228,63,216,193,124,127,221,123,54,64,148,44,232,184,240,118,57,62,74,136,37,98,194,193,250,63,12,82,119,185,180,79,249,63,148,4,125,147,80,175,52,62,210,246,33,75,188,25,12,64,160,84,133,180,168,198,34,64,16,53,55,177,201,200,57,62,53,245,53,55,152,113,22,64,79,168,119,45,161,78,21,64,13,159,222,182,245,163,55,62,231,58,81,178,102,38,16,64,166,27,140,117,146,3,26,64,100,90,8,6,137,254,54,62,214,110,165,184,184,125,24,64,239,157,68,136,35,178,101,64,92,222,13,165,13,218,56,62,49,200,134,25,168,28,22,64,252,157,8,73,208,73,193,63,96,78,12,173,205,193,53,62,40,211,152,63,62,240,239,63,146,183,238,81,210,250,40,64,224,47,166,175,52,167,57,62,61,74,89,167,142,45,24,64,122,229,187,232,102,188,58,64,51,41,5,54,88,221,54,62,240,196,86,146,229,100,15,64,115,34,249,36,138,175,16,64,92,245,154,30,78,97,54,62,190,17,117,224,100,225,24,64,131,152,229,206,68,154,56,64,42,150,246,71,229,76,52,62,71,246,95,220,116,186,13,64,117,78,43,88,211,237,28,64,105,159,128,74,108,229,57,62,212,153,27,47,25,91,235,63,184,92,218,128,97,43,116,64,226,13,168,41,130,63,51,62,158,73,154,98,175,212,246,63,33,244,67,0,85,48,22,64,8,227,148,220,198,16,57,62,188,182,33,181,107,68,178,63,80,10,104,154,111,54,82,64,18,9,96,25,187,196,49,62,228,230,201,192,180,82,21,64,56,206,221,22,123,191,37,64,131,119,48,61,166,54,54,62,154,232,191,63,102,195,220,63,94,133,64,21,128,216,50,64,247,140,60,129,23,117,56,62,130,140,138,241,115,158,7,64,75,92,119,172,69,79,88,64,247,204,69,234,29,56,49,62,172,63,143,202,1,0,12,64,44,179,238,81,210,250,24,64,217,172,247,194,24,141,52,62,3,182,65,49,110,201,24,64,30,237,6,252,238,75,61,64,149,30,112,232,38,28,49,62,221,172,63,184,45,106,20,64,68,168,130,78,27,25,17,64,159,128,125,208,178,159,48,62,95,228,220,123,36,128,9,64,22,232,144,243,234,72,25,64,237,88,160,117,10,20,54,62,250,104,236,6,234,179,250,63,243,18,197,253,0,164,40,64,70,112,115,252,14,136,48,62,4,121,83,123,107,200,17,64,165,101,120,174,107,68,49,64,22,148,206,174,170,48,49,62,111,227,224,77,167,231,20,64,33,167,59,69,104,19,28,64,175,109,98,49,228,181,48,62,19,47,139,21,19,124,17,64,26,45,26,130,137,214,45,64,97,37,180,6,104,253,52,62,66,34,124,11,236,228,23,64,97,76,81,19,112,169,247,63,215,107,233,82,27,16,48,62,115,62,254,11,114,182,0,64,53,202,142,219,31,177,27,64,63,17,11,59,169,156,53,62,197,26,197,64,44,162,18,64,119,223,30,52,53,40,49,64,115,215,62,123,97,216,50,62,234,72,10,253,100,77,19,64,65,43,201,165,133,36,109,64,93,141,133,200,28,208,49,62,6,246,27,174,122,233,13,64,27,198,76,51,109,133,43,64,210,140,229,137,93,242,47,62,151,22,3,93,16,98,242,63,209,24,121,34,112,48,25,64,130,11,224,173,189,229,48,62,209,121,1,95,82,245,248,63,213,72,250,144,20,125,31,64,6,63,0,151,217,139,47,62,49,97,90,106,136,16,22,64,215,134,6,35,77,19,25,64,95,23,206,54,246,47,48,62,207,253,1,200,214,118,24,64,220,221,63,165,248,160,16,64,142,180,43,233,193,82,49,62,252,14,27,92,170,78,20,64,35,67,229,5,152,87,47,64,38,200,166,151,198,42,48,62,247,104,125,181,128,32,234,63,107,146,223,5,70,123,9,64,77,60,158,183,83,202,52,62,172,89,134,26,134,196,245,63,128,65,87,122,88,14,41,64,27,61,249,156,248,65,53,62,25,67,22,7,19,206,5,64,151,25,156,99,189,54,100,64,34,142,197,31,31,175,49,62,105,215,61,54,208,95,227,63,220,243,162,96,156,145,22,64,242,43,127,133,105,220,48,62,108,119,71,46,236,108,235,63,148,155,68,42,191,100,53,64,23,134,105,241,170,47,47,62,219,200,216,71,162,106,12,64,130,220,163,107,225,45,25,64,161,48,88,46,118,40,47,62,153,214,90,234,195,197,8,64,192,190,219,217,219,21,25,64,112,6,236,66,230,88,48,62,3,33,200,82,118,96,228,63,0,15,138,78,199,64,49,64,215,136,58,63,106,10,51,62,45,76,173,23,211,100,19,64,200,245,26,107,62,200,29,64,146,20,227,72,122,227,47,62,102,38,102,122,171,79,245,63,207,211,42,96,214,216,218,63,146,241,196,190,243,136,48,62,194,48,2,102,202,187,223,63,11,39,65,170,235,153,238,63,201,237,16,140,76,237,45,62,209,133,144,63,209,229,1,64,30,12,10,72,228,59,39,64,240,203,46,75,43,4,49,62,58,99,136,122,194,168,10,64,151,165,18,51,137,199,54,64,227,48,235,151,156,96,45,62,118,212,54,122,116,36,23,64,24,173,40,242,69,64,43,64,30,28,103,146,119,153,44,62,232,12,26,241,213,30,185,63,130,98,154,129,197,219,48,64,193,224,87,118,223,17,50,62,255,18,236,200,31,98,238,63,121,154,192,254,68,221,61,64,241,112,120,126,157,19,44,62,171,137,100,131,113,67,198,63,195,143,25,192,219,255,22,64,200,175,225,60,228,136,44,62,236,112,247,174,15,198,246,63,128,83,166,195,215,29,25,64,171,210,178,132,74,87,51,62,28,107,147,212,179,161,205,63,47,241,16,157,66,43,246,63,192,162,235,160,38,138,50,62,239,159,95,97,123,236,185,63,9,143,0,46,68,180,16,64,249,150,233,105,122,52,44,62,23,220,195,255,231,238,20,64,194,71,217,129,229,37,25,64,204,119,8,137,200,45,43,62,1,212,151,73,187,5,16,64,119,28,45,18,210,254,52,64,152,192,2,92,169,221,49,62,175,153,49,213,115,118,21,64,116,130,191,105,112,159,23,64,218,117,88,42,232,159,46,62,221,186,236,102,68,35,17,64,124,253,228,101,124,27,112,63,101,200,133,94,86,48,46,62,199,111,46,95,14,21,17,64,223,207,180,129,100,87,29,64,88,144,24,216,218,105,46,62,252,49,22,64,112,208,23,64,183,178,89,185,4,177,40,64,196,180,185,71,205,110,41,62,155,208,243,107,199,215,241,63,28,109,21,108,171,181,58,64,87,39,55,22,250,113,41,62,251,7,20,57,22,233,14,64,44,206,230,16,18,130,228,63,41,69,33,8,4,174,48,62,98,210,18,80,66,76,244,63,206,24,192,219,76,164,26,64,94,244,82,222,113,19,41,62,129,151,91,104,105,162,19,64,183,70,43,109,43,3,246,63,148,17,123,137,78,194,42,62,156,132,191,227,198,244,13,64,111,244,247,190,93,120,163,63,22,72,148,65,97,155,49,62,160,144,8,13,103,177,16,64,178,20,58,158,162,103,70,64,158,192,47,83,35,232,40,62,15,104,114,179,116,164,23,64,91,157,21,250,228,152,52,64,26,134,246,71,51,66,44,62,35,198,166,204,134,231,3,64,221,76,180,162,226,162,37,64,227,64,213,93,118,228,48,62,20,160,245,150,51,245,241,63,231,192,4,144,227,38,216,63,68,238,196,27,35,244,41,62,183,116,60,51,210,206,19,64,9,32,225,207,136,211,61,64,75,61,254,37,47,10,40,62,205,223,8,3,222,119,20,64,253,16,234,205,0,97,51,64,186,53,3,42,2,47,45,62,236,227,70,180,168,106,24,64,102,167,220,228,32,178,27,64,153,18,205,225,61,245,47,62,184,215,144,193,124,245,242,63,255,172,190,33,137,170,62,64,118,183,74,129,38,233,46,62,228,154,152,85,209,10,12,64,199,132,48,66,253,150,24,64,63,22,28,137,127,188,47,62,97,109,199,185,15,75,2,64,185,33,80,136,3,24,5,64,114,97,59,233,91,6,39,62,143,110,189,183,145,245,199,63,127,11,102,133,225,67,27,64,185,60,146,155,63,11,46,62,171,93,37,45,97,37,9,64,225,26,79,3,192,172,25,64,216,168,230,172,139,227,42,62,136,158,28,199,132,178,3,64,3,74,54,121,77,184,40,64,150,218,72,212,75,215,43,62,6,175,54,232,134,6,17,64,154,37,9,7,205,133,48,64,74,160,30,188,197,89,38,62,214,174,170,210,166,225,19,64,190,116,220,99,180,232,36,64,133,101,44,1,178,28,39,62,130,72,148,6,52,251,2,64,19,175,146,199,195,63,212,63,0,217,44,220,69,252,40,62,134,143,141,125,60,238,16,64,203,3,107,53,120,73,60,64,32,223,83,162,244,205,42,62,30,108,142,162,241,31,217,63,237,142,162,171,67,244,53,64,209,141,144,3,104,12,43,62,235,42,33,145,113,191,8,64,210,215,206,220,172,112,39,64,239,20,129,57,81,53,42,62,176,70,179,55,105,62,22,64,150,104,34,29,239,56,24,64,162,148,136,112,116,70,40,62,87,230,4,139,137,74,20,64,122,165,100,218,126,123,20,64,214,123,148,26,12,161,42,62,162,127,122,181,126,254,19,64,242,45,32,231,251,254,49,64,107,110,16,98,244,154,36,62,209,168,249,111,113,126,4,64,183,35,238,127,207,5,25,64,83,153,13,74,122,122,36,62,27,14,245,179,132,89,16,64,139,119,145,197,237,61,25,64,157,31,235,63,242,105,40,62,164,214,159,153,209,30,4,64,218,151,227,77,203,224,21,64,207,189,154,39,26,118,40,62,131,153,233,109,249,240,20,64,98,104,41,111,71,176,36,64,209,172,111,62,90,241,40,62,94,222,214,60,69,105,241,63], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+40960);
/* memory initializer */ allocate([17,55,93,40,206,10,26,64,176,74,18,77,161,97,43,62,76,75,225,237,173,215,18,64,15,52,236,221,34,44,101,64,65,222,110,56,137,48,42,62,209,30,51,249,129,74,210,63,28,134,191,139,188,199,32,64,232,44,212,255,174,145,40,62,141,239,3,244,213,238,1,64,83,190,184,60,86,183,204,63,175,182,234,18,210,51,39,62,147,130,33,210,44,7,177,63,185,210,206,113,102,132,24,64,103,148,144,90,79,143,37,62,67,110,224,14,234,143,244,63,113,221,255,163,107,225,36,64,49,178,181,117,122,136,38,62,29,118,7,108,114,20,211,63,238,204,176,211,86,191,25,64,19,209,228,181,7,135,38,62,232,203,78,247,104,125,24,64,6,233,71,33,13,195,34,64,85,97,62,58,206,53,40,62,103,177,84,253,28,1,17,64,14,217,64,47,146,188,23,64,174,150,77,109,31,81,36,62,250,109,155,220,118,184,11,64,93,254,71,25,169,180,56,64,56,189,177,171,216,66,36,62,175,68,201,48,154,42,23,64,69,210,121,114,12,88,33,64,47,38,241,20,237,131,36,62,25,248,35,68,231,145,16,64,104,3,156,247,241,98,28,64,229,105,109,79,87,37,33,62,148,73,22,240,177,208,0,64,100,60,186,48,154,69,49,64,145,151,92,99,20,22,39,62,41,151,140,236,81,109,248,63,123,207,236,4,83,176,81,64,129,36,57,84,13,127,38,62,89,77,161,18,117,46,3,64,52,194,62,22,43,135,26,64,84,107,11,200,214,22,38,62,183,142,82,9,251,103,226,63,233,154,29,1,198,211,24,64,86,204,41,200,44,46,38,62,255,0,71,104,193,97,22,64,117,120,187,186,179,94,72,64,64,122,153,194,63,97,36,62,59,47,108,254,233,94,20,64,230,66,135,99,67,208,47,64,208,18,167,132,125,63,36,62,245,158,142,59,7,199,17,64,113,4,160,63,119,200,8,64,30,10,210,178,26,15,37,62,41,237,145,15,179,221,8,64,113,110,157,243,209,40,229,63,143,179,198,65,201,91,36,62,103,101,39,73,117,221,4,64,66,186,96,173,85,76,65,64,120,204,237,231,147,125,35,62,149,163,107,87,36,30,13,64,201,235,87,129,197,33,157,63,131,202,99,72,235,190,29,62,73,253,220,82,218,75,198,63,62,30,254,225,247,50,52,64,145,188,180,48,62,0,28,62,20,86,114,20,194,55,15,64,244,82,187,163,34,91,62,64,201,198,60,21,133,243,34,62,138,13,8,59,112,226,19,64,18,164,1,146,109,32,25,64,140,20,171,251,224,241,34,62,182,239,192,196,226,214,250,63,48,247,125,179,79,35,25,64,144,125,117,143,62,117,34,62,103,73,162,9,238,241,16,64,96,31,74,41,9,206,51,64,211,50,129,70,98,24,32,62,56,54,179,253,14,181,23,64,51,186,44,40,85,196,60,64,66,6,108,154,123,104,33,62,47,195,39,232,8,102,17,64,85,18,140,84,14,126,56,64,78,103,205,112,168,14,31,62,176,146,134,87,195,205,22,64,31,237,11,64,239,115,52,64,21,54,178,11,191,40,32,62,97,225,7,23,198,31,229,63,29,173,16,86,205,148,55,64,126,196,121,185,161,128,23,62,204,207,128,117,84,176,1,64,81,76,168,138,241,187,56,64,215,63,255,2,184,140,29,62,93,208,255,183,27,197,19,64,145,64,229,82,179,254,100,64,167,178,74,38,91,63,29,62,56,38,117,145,89,60,247,63,37,219,108,176,184,221,116,64,45,124,67,18,251,74,24,62,87,32,225,95,247,25,22,64,86,147,31,41,117,77,100,64,116,129,177,130,83,100,28,62,152,160,200,196,103,111,16,64,92,28,215,183,122,100,86,64,187,61,245,255,205,57,28,62,183,198,56,186,122,128,231,63,55,220,60,215,196,85,74,64,255,126,195,194,162,190,27,62,180,241,233,250,103,84,12,64,178,40,242,84,205,169,64,64,186,9,239,18,89,99,26,62,185,243,219,31,215,31,16,64,4,30,226,201,102,67,67,64,115,243,111,174,240,94,27,62,154,57,79,88,148,189,16,64,213,24,186,59,230,136,108,64,126,131,127,71,1,118,18,62,103,95,121,242,27,135,251,63,68,186,120,81,83,254,84,64,125,244,206,27,76,117,18,62,129,148,180,233,163,17,6,64,129,113,235,95,69,1,85,64,214,250,249,99,49,170,16,62,219,30,209,39,227,221,16,64,204,145,123,157,224,144,83,64,135,2,252,45,166,158,21,62,113,183,64,43,254,122,208,63,107,215,71,81,10,121,115,64,204,103,100,74,233,78,21,62,35,147,15,82,180,185,222,63,157,162,83,242,194,77,102,64,147,158,250,248,158,252,14,62,191,105,85,20,114,240,216,63,79,67,4,96,169,110,77,64,222,224,5,199,27,129,19,62,96,32,160,33,102,175,215,63,106,15,141,249,29,155,83,64,130,185,40,122,97,170,15,62,147,214,23,69,84,117,17,64,11,37,40,1,71,91,89,64,86,228,211,242,179,33,18,62,254,133,45,190,164,64,1,64,250,63,190,243,213,76,76,64,6,199,153,124,108,84,17,62,137,202,149,131,233,208,21,64,199,129,99,230,119,58,69,64,237,201,22,146,125,204,8,62,213,205,79,246,121,144,249,63,88,41,245,143,163,182,110,64,139,29,16,126,227,191,7,62,20,118,112,105,222,75,23,64,195,17,178,88,204,255,100,64,244,247,107,80,37,123,7,62,20,61,251,156,86,161,12,64,188,163,63,16,231,67,78,64,93,24,226,17,235,202,0,62,234,92,238,186,126,203,13,64,176,16,10,45,8,36,88,64,68,149,190,221,215,198,1,62,23,3,46,214,144,176,21,64,28,40,238,4,52,137,110,64,124,197,16,52,247,12,0,62,41,122,113,27,58,43,3,64,19,157,221,73,72,242,97,64,39,149,89,67,22,108,3,62,33,139,249,171,166,110,6,64,182,110,251,152,45,234,84,64,2,204,24,109,98,65,3,62,10,224,239,33,151,56,250,63,16,189,104,24,107,21,85,64,71,97,169,245,90,49,0,62,142,87,255,116,153,187,236,63,194,89,79,6,218,198,115,64,70,84,223,97,218,222,0,62,94,93,2,53,244,174,9,64,217,32,69,180,248,95,121,64,228,248,165,93,238,100,0,62,4,230,64,124,107,59,21,64,168,62,17,61,209,144,102,64,170,3,114,165,100,25,251,61,105,9,79,92,168,143,1,64,25,19,141,247,168,13,112,64,238,5,84,183,159,40,251,61,29,144,140,86,35,83,20,64,219,161,113,202,235,159,110,64,229,240,170,39,40,8,250,61,25,44,113,147,116,97,17,64,248,53,192,243,4,154,99,64,93,220,202,62,138,176,249,61,96,81,148,126,141,231,4,64,141,155,178,132,161,173,120,64,67,182,118,215,87,77,245,61,90,17,28,137,42,198,6,64,238,153,2,169,246,86,99,64,188,72,209,109,76,135,235,61,199,86,85,65,121,175,19,64,87,37,179,176,118,91,108,64,128,110,145,207,140,54,238,61,231,125,183,149,237,239,188,63,134,164,39,8,165,187,100,64,4,40,181,152,92,129,228,61,211,242,206,2,172,233,16,64,169,32,164,70,215,191,107,64,181,124,203,213,11,71,228,61,171,246,10,26,147,60,211,63,118,212,188,214,130,20,115,64,61,154,161,53,84,214,230,61,81,62,85,92,112,14,233,63,17,202,193,68,81,149,111,64,208,186,243,93,82,200,216,61,71,52,119,37,92,118,14,64,38,166,215,227,79,18,122,64,5,42,240,188,29,255,239,63,22,29,171,164,89,97,199,63,212,207,191,162,222,33,25,64,79,158,25,210,100,3,153,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,247,165,146,64,87,27,129,63,48,111,168,4,12,220,193,63,110,203,191,162,222,33,41,64,201,43,236,68,68,112,27,63,54,237,110,97,154,174,184,63,18,222,15,250,102,217,50,64,120,189,62,33,77,79,0,63,61,38,98,171,73,134,21,64,67,23,178,88,204,255,84,64,102,130,246,120,131,243,250,62,93,178,32,165,61,52,21,64,181,156,70,123,58,243,224,63,184,23,175,233,90,132,246,62,138,0,186,127,210,76,5,64,76,177,89,149,204,60,249,63,234,157,58,222,163,158,241,62,83,84,75,209,228,212,20,64,58,100,130,15,67,30,25,64,149,9,119,161,88,155,241,62,5,172,226,244,40,84,18,64,109,59,253,53,122,37,25,64,83,251,36,182,176,53,238,62,18,65,248,92,56,105,254,63,129,99,105,125,171,210,2,64,48,15,118,19,60,206,231,62,238,108,197,195,169,23,21,64,228,38,238,3,16,229,20,64,70,222,32,88,81,153,227,62,12,167,220,238,30,3,18,64,152,101,11,251,170,18,40,64,111,8,202,51,210,227,226,62,118,142,78,181,159,176,249,63,192,127,101,195,51,109,36,64,28,200,0,36,196,201,215,62,123,251,50,206,226,153,226,63,190,163,70,123,58,243,240,63,231,88,94,191,225,64,223,62,239,206,130,60,114,117,6,64,240,149,223,5,70,123,217,63,201,74,219,170,239,208,218,62,5,165,108,238,236,29,24,64,92,251,86,83,119,3,23,64,4,113,70,228,197,148,220,62,56,185,77,108,172,182,228,63,129,99,105,125,171,210,18,64,0,111,96,155,138,164,217,62,17,105,189,86,192,130,14,64,76,164,40,242,69,64,27,64,248,135,173,60,249,227,210,62,102,116,192,191,120,28,18,64,97,211,97,66,42,138,23,64,99,209,249,96,186,247,210,62,197,250,108,248,149,247,23,64,92,238,37,176,240,6,25,64,236,86,238,203,195,225,210,62,40,255,86,215,190,99,14,64,76,177,89,149,204,60,25,64,23,219,2,185,155,33,215,62,248,102,107,242,167,176,15,64,103,138,97,9,188,7,22,64,177,117,0,57,119,10,209,62,131,95,246,176,101,6,21,64,225,199,29,3,147,185,26,64,73,255,21,127,52,182,214,62,131,208,144,63,2,255,21,64,107,43,242,202,20,209,232,63,24,31,88,85,4,234,214,62,189,31,246,37,63,177,24,64,201,14,107,53,120,73,44,64,20,94,127,13,154,69,213,62,157,139,185,157,66,246,6,64,39,60,22,200,17,113,31,64,247,253,212,162,247,105,194,62,239,196,124,181,99,158,7,64,194,255,86,83,119,3,39,64,31,211,100,11,106,30,195,62,135,95,244,35,158,206,23,64,65,21,30,60,1,60,28,64,72,74,87,1,204,28,195,62,236,230,123,82,191,97,19,64,109,82,133,180,168,198,18,64,135,217,16,130,153,119,197,62,67,5,61,104,155,57,230,63,52,205,144,114,4,86,40,64,154,155,79,58,224,123,197,62,242,244,126,237,60,171,24,64,83,122,123,131,197,183,230,63,87,50,9,216,211,19,190,62,199,52,84,220,230,102,246,63,240,149,223,5,70,123,233,63,12,165,14,3,83,131,190,62,67,30,58,91,58,208,18,64,31,157,33,60,240,33,25,64,180,33,89,49,115,131,190,62,114,237,37,180,212,88,20,64,35,254,93,9,205,33,25,64,158,79,154,124,155,20,186,62,59,155,246,119,117,75,171,63,110,203,191,162,222,33,57,64,191,42,171,85,212,78,193,62,89,59,8,35,125,34,17,64,29,173,16,86,205,148,39,64,158,211,172,122,51,32,185,62,248,92,232,34,253,75,24,64,84,219,3,226,117,242,21,64,99,36,24,88,75,200,192,62,13,118,65,200,235,2,4,64,61,109,91,82,51,202,49,64,179,39,61,114,90,163,181,62,88,172,200,158,180,43,13,64,238,191,123,99,71,81,28,64,235,175,96,98,249,132,181,62,79,140,11,57,232,220,9,64,98,188,217,195,251,232,13,64,220,169,171,226,164,166,185,62,96,148,21,72,99,83,22,64,173,20,245,93,98,77,203,63,143,97,116,169,110,235,179,62,210,103,139,88,118,208,21,64,10,82,182,118,34,224,34,64,59,98,104,52,230,80,170,62,245,17,138,31,196,18,210,63,188,96,201,177,159,167,33,64,76,225,179,28,22,172,168,62,131,128,247,244,106,253,241,63,5,228,233,184,215,108,249,63,82,134,118,235,191,11,166,62,143,110,18,101,150,182,0,64,251,206,97,66,42,138,39,64,33,144,10,21,27,57,165,62,212,131,18,33,158,116,229,63,193,32,98,123,152,12,25,64,68,8,6,151,48,34,165,62,86,197,157,69,250,176,6,64,129,122,29,202,36,55,25,64,30,129,109,106,110,187,165,62,239,220,15,71,58,14,223,63,91,55,144,114,255,34,125,63,223,165,177,227,52,208,172,62,168,133,155,193,148,65,247,63,4,152,46,147,20,233,100,64,223,85,113,154,44,19,171,62,110,119,225,106,95,132,237,63,26,36,208,143,115,71,24,64,16,153,157,248,216,7,172,62,201,22,143,63,222,134,18,64,123,195,29,3,147,185,10,64,174,180,139,112,248,41,164,62,197,116,18,144,160,69,253,63,62,214,74,66,50,140,16,64,63,230,231,164,104,92,169,62,82,34,63,61,114,181,4,64,40,119,175,181,73,252,25,64,157,170,165,18,34,126,163,62,80,162,235,196,96,167,225,63,236,153,162,171,67,244,37,64,58,136,27,29,88,8,162,62,89,242,75,122,74,26,25,64,54,178,103,132,116,28,243,63,252,119,40,122,217,41,163,62,76,42,113,97,114,120,241,63,60,238,113,153,221,32,25,64,245,246,255,142,2,41,163,62,15,252,147,96,236,81,3,64,6,173,13,172,223,34,25,64,151,82,82,183,251,66,161,62,194,238,157,19,211,20,24,64,82,116,156,98,39,41,25,64,94,119,74,133,137,31,161,62,97,1,5,229,127,52,14,64,86,43,227,226,149,26,25,64,13,152,28,129,43,165,160,62,12,214,98,230,218,44,241,63,76,183,32,36,184,130,24,64,207,106,21,88,121,15,160,62,130,1,45,117,13,115,3,64,92,232,94,33,5,193,25,64,183,252,32,178,95,128,164,62,190,123,180,193,152,95,21,64,76,177,89,149,204,60,9,64,145,157,130,8,113,61,160,62,205,161,229,23,151,218,173,63,168,51,193,95,132,168,233,63,125,97,30,3,93,198,159,62,169,93,220,48,242,36,18,64,92,238,37,176,240,6,9,64,5,34,184,228,2,57,160,62,35,113,196,137,105,139,208,63,186,246,183,46,239,86,28,64,55,159,232,87,207,58,161,62,50,5,32,209,111,218,16,64,94,243,71,25,169,180,40,64,144,108,130,80,242,253,160,62,124,166,19,155,241,207,222,63,129,25,136,74,98,182,39,64,44,246,224,138,108,48,153,62,99,106,115,188,104,153,249,63,130,98,154,129,197,219,32,64,99,61,178,8,92,143,160,62,160,175,212,34,100,66,1,64,70,227,165,129,193,90,4,64,39,140,245,54,165,131,154,62,191,242,221,14,10,224,10,64,238,168,199,22,206,236,21,64,53,124,28,193,128,109,160,62,147,123,120,104,174,169,20,64,194,92,248,225,121,115,34,64,129,204,123,230,186,73,156,62,161,140,243,19,224,133,0,64,82,58,129,126,153,66,49,64,33,182,4,191,206,122,153,62,101,88,86,94,105,127,247,63,173,20,245,93,98,77,219,63,194,13,14,8,30,230,148,62,201,26,76,168,211,236,12,64,44,243,233,192,88,43,1,64,15,168,63,74,199,225,149,62,228,130,199,106,37,171,17,64,91,130,28,101,65,168,16,64,122,217,112,100,109,176,154,62,20,104,85,12,176,205,18,64,199,124,224,124,8,109,23,64,215,18,122,254,222,204,146,62,194,160,29,241,213,39,18,64,213,124,94,108,172,35,41,64,202,57,55,41,163,107,152,62,90,98,60,254,223,88,245,63,234,78,184,83,222,18,50,64,94,137,215,0,168,176,144,62,187,221,19,47,132,254,13,64,158,7,225,153,242,237,154,63,195,42,90,23,168,92,148,62,191,235,179,18,72,29,219,63,75,206,168,162,230,35,18,64,41,141,10,224,207,245,145,62,112,189,235,250,37,226,23,64,39,60,22,200,17,113,15,64,2,1,55,143,17,142,146,62,187,185,124,219,78,199,20,64,7,26,33,217,16,32,41,64,226,87,134,127,116,173,144,62,156,113,177,115,248,9,240,63,70,227,165,129,193,90,20,64,250,151,187,156,193,132,141,62,214,37,143,85,192,136,8,64,201,116,209,66,58,30,41,64,45,166,238,152,32,65,145,62,60,55,11,119,88,72,232,63,123,218,187,232,102,188,42,64,199,107,255,195,228,130,139,62,224,80,81,84,80,143,11,64,193,208,50,18,80,190,38,64,119,154,69,92,67,114,145,62,22,152,95,162,85,248,253,63,21,27,90,132,144,219,81,64,183,138,62,128,70,245,135,62,252,206,136,207,69,16,20,64,139,244,91,0,224,247,251,63,203,67,73,132,17,52,143,62,121,202,138,24,28,121,18,64,39,171,53,38,205,81,50,64,164,113,11,206,133,242,134,62,48,36,27,27,52,51,21,64,190,202,6,3,155,187,19,64,7,87,143,247,36,72,140,62,47,34,111,197,171,214,1,64,98,188,217,195,251,232,29,64,169,215,104,66,25,126,135,62,190,153,245,141,92,165,24,64,25,30,238,3,16,229,36,64,232,227,186,203,0,218,138,62,45,87,248,210,37,189,7,64,123,102,107,81,235,15,32,64,104,145,222,75,206,136,130,62,166,166,47,238,79,55,8,64,202,64,186,48,154,69,33,64,171,189,98,94,45,245,130,62,51,189,243,222,127,38,24,64,97,211,97,66,42,138,7,64,236,69,65,207,178,88,137,62,164,120,226,179,143,101,235,63,42,155,9,52,102,132,99,64,68,149,117,93,203,0,136,62,58,94,106,38,156,122,19,64,107,146,223,5,70,123,249,63,187,79,19,103,254,67,130,62,218,139,48,60,228,2,13,64,68,49,116,74,18,49,42,64,6,47,150,57,124,57,132,62,28,52,175,142,203,208,248,63,60,173,98,138,17,127,48,64,28,95,126,40,228,43,136,62,69,228,229,173,74,155,0,64,194,180,96,173,85,76,49,64,211,201,47,225,244,70,131,62,40,144,112,15,115,152,24,64,193,116,101,195,51,109,52,64,188,115,212,30,171,96,128,62,55,177,144,17,196,135,17,64,234,212,120,66,34,136,30,64,32,27,238,220,238,244,129,62,153,203,92,46,12,75,0,64,79,27,208,143,115,71,40,64,151,247,57,3,213,30,127,62,12,59,249,30,98,35,15,64,204,194,100,99,79,83,21,64,180,23,73,50,94,40,130,62,122,245,237,76,206,42,247,63,103,7,167,170,255,186,48,64,38,204,103,69,39,61,131,62,184,89,82,220,215,212,17,64,94,116,145,65,173,94,29,64,46,32,67,18,103,146,128,62,233,19,8,199,255,158,248,63,239,150,32,118,49,30,25,64,65,185,26,204,21,144,128,62,233,74,105,52,18,127,255,63,185,8,95,207,139,37,25,64,147,22,208,41,111,178,128,62,184,247,6,207,132,30,23,64,115,70,41,3,143,56,46,64,110,121,38,149,243,120,125,62,28,207,38,233,7,224,227,63,16,158,20,16,69,250,37,64,6,184,225,203,207,214,128,62,226,34,94,133,87,188,4,64,39,60,22,200,17,113,47,64,172,148,234,44,106,23,127,62,249,192,242,100,112,222,3,64,217,186,194,195,3,235,22,64,226,157,132,118,155,67,120,62,28,18,86,147,69,220,14,64,201,88,39,18,84,63,35,64,166,246,1,179,252,114,120,62,123,215,38,140,51,78,23,64,118,216,26,226,109,240,28,64,49,55,55,142,37,219,119,62,66,69,241,244,56,206,11,64,208,135,119,32,144,151,24,64,159,169,228,76,31,44,119,62,205,237,64,116,43,83,159,63,114,19,8,37,45,172,25,64,64,191,0,36,40,48,117,62,250,205,51,28,196,84,249,63,242,154,70,123,58,243,0,64,131,93,138,15,26,70,118,62,137,53,178,97,101,67,235,63,57,72,250,210,180,108,45,64,179,104,254,5,188,95,123,62,9,184,85,167,15,228,192,63,86,20,228,126,14,153,245,63,125,103,61,27,237,28,123,62,172,42,92,82,24,205,239,63,105,224,188,129,185,88,27,64,235,124,152,203,237,31,124,62,172,191,27,41,61,29,246,63,82,108,76,157,50,255,23,64,135,107,8,113,64,188,115,62,95,17,46,126,204,170,14,64,79,240,0,193,80,41,24,64,255,5,36,146,196,125,122,62,68,253,92,208,210,255,0,64,240,46,51,168,138,68,26,64,94,216,166,29,101,207,114,62,239,247,157,68,4,201,23,64,89,175,126,132,108,26,26,64,143,248,214,78,32,107,114,62,211,82,180,90,114,76,18,64,212,243,168,95,103,244,28,64,244,210,254,45,109,71,116,62,33,40,73,167,3,204,23,64,178,218,114,169,103,20,41,64,254,186,80,92,33,157,121,62,108,93,0,245,65,246,11,64,71,124,99,230,119,58,53,64,62,51,144,77,233,73,115,62,3,85,203,98,142,61,17,64,72,221,65,231,237,250,24,64,26,16,165,69,162,36,115,62,155,41,20,53,214,235,21,64,250,189,61,94,207,72,25,64,71,128,70,71,161,218,113,62,206,106,142,204,246,164,21,64,212,171,214,229,85,79,21,64,212,164,13,154,177,235,118,62,238,210,65,157,223,62,253,63,204,142,97,9,188,7,38,64,145,212,35,57,229,45,119,62,86,186,162,33,59,198,21,64,115,213,240,105,157,146,22,64,111,250,127,244,50,255,115,62,162,65,27,231,159,23,0,64,35,189,43,122,128,45,225,63,246,237,5,128,180,235,115,62,110,146,48,143,108,183,11,64,173,50,49,39,17,139,55,64,56,85,16,96,218,123,112,62,132,42,136,107,86,161,22,64,168,201,238,210,184,237,41,64,97,161,170,246,27,14,113,62,46,109,110,121,229,181,11,64,56,132,87,135,23,218,255,63,2,238,31,124,179,179,112,62,56,57,62,137,34,132,248,63,181,93,216,250,121,116,238,63,187,69,29,110,150,107,111,62,2,42,51,221,159,1,246,63,124,28,73,231,69,148,238,63,90,200,142,54,28,45,113,62,225,213,233,57,195,62,3,64,152,101,11,251,170,18,56,64,162,232,178,223,172,229,114,62,180,116,134,50,21,151,21,64,70,124,97,124,244,184,224,63,3,128,41,86,62,187,114,62,68,230,55,184,164,12,19,64,136,210,3,226,117,242,37,64,101,205,253,212,231,6,116,62,200,61,11,15,16,178,5,64,112,11,187,140,0,1,54,64,135,35,195,11,131,221,108,62,63,9,96,103,231,210,2,64,255,73,203,162,218,160,44,64,134,109,8,141,254,54,116,62,119,184,215,4,97,26,255,63,2,6,152,112,49,108,50,64,81,175,189,91,174,80,114,62,218,125,224,103,193,89,17,64,18,31,227,211,207,228,195,63,54,191,186,217,225,178,112,62,247,245,199,5,118,126,229,63,245,94,248,225,121,115,50,64,15,10,164,163,132,174,113,62,78,76,250,136,116,214,1,64,102,130,17,68,199,221,20,64,41,252,200,216,227,136,111,62,207,22,240,191,12,104,232,63,129,207,119,198,9,122,228,63,121,53,252,144,211,208,112,62,201,248,179,101,82,217,227,63,9,153,131,215,54,28,25,64,218,153,85,136,106,204,112,62,187,163,212,205,29,24,7,64,57,2,252,109,134,39,25,64,24,45,199,153,25,176,108,62,146,26,177,120,199,162,255,63,211,230,71,33,13,195,18,64,210,3,229,219,225,255,109,62,38,138,128,106,75,196,254,63,107,43,242,202,20,209,248,63,8,191,243,47,38,137,114,62,246,97,224,33,233,144,12,64,242,146,96,98,74,100,186,63,28,210,109,159,37,150,112,62,60,187,142,228,76,202,20,64,99,203,202,195,88,236,20,64,202,114,196,22,220,155,112,62,196,5,126,240,28,56,234,63,242,121,205,41,230,153,22,64,141,144,235,41,0,234,108,62,36,110,7,184,22,160,21,64,44,25,134,110,174,109,83,64,103,152,210,121,129,253,112,62,132,220,168,219,187,179,6,64,187,23,250,209,128,22,58,64,33,253,3,40,0,104,104,62,96,40,96,242,248,119,7,64,189,146,232,247,214,182,225,63,177,67,105,221,235,161,112,62,138,71,165,16,169,161,16,64,221,98,31,216,9,43,85,64,63,193,230,100,208,136,112,62,87,176,15,163,145,177,9,64,109,35,223,154,148,237,109,64,57,66,212,51,139,209,106,62,69,74,155,64,119,88,247,63,249,68,3,112,153,237,18,64,23,131,128,45,22,76,109,62,123,15,149,150,39,227,246,63,3,74,54,121,77,184,24,64,146,233,161,92,74,28,106,62,144,137,67,192,71,146,1,64,154,18,222,66,234,145,86,64,128,33,212,146,74,175,108,62,159,231,88,25,98,177,0,64,63,81,73,204,111,139,25,64,223,19,110,165,177,118,110,62,97,50,108,87,230,20,6,64,182,37,178,27,215,169,27,64,10,173,212,253,141,122,105,62,216,102,246,0,66,251,16,64,184,165,108,13,195,33,25,64,34,166,225,163,104,122,105,62,25,22,194,152,204,45,22,64,240,249,18,56,250,33,25,64,158,160,125,153,255,189,101,62,111,168,27,111,61,182,1,64,212,116,62,221,188,4,25,64,31,30,21,128,221,206,102,62,184,104,55,58,174,215,233,63,111,180,55,36,176,128,31,64,176,104,32,81,233,158,101,62,26,232,93,90,58,177,244,63,110,38,65,104,0,63,25,64,133,62,197,243,3,213,101,62,143,137,26,252,157,227,15,64,198,91,103,43,180,19,13,64,242,11,228,182,248,21,106,62,227,96,203,48,245,106,244,63,219,159,51,19,192,10,23,64,173,248,15,113,51,85,108,62,59,92,69,50,25,170,19,64,204,67,102,31,154,40,57,64,234,140,66,32,190,10,102,62,94,70,47,156,230,156,251,63,123,30,159,200,180,214,26,64,49,241,255,60,103,127,103,62,78,26,6,207,250,242,1,64,205,255,75,50,253,56,27,64,23,247,3,186,73,95,97,62,110,100,66,172,191,233,12,64,184,53,185,122,93,16,241,63,104,107,88,221,213,127,96,62,212,14,196,99,222,175,3,64,69,33,189,60,81,116,23,64,93,225,69,199,243,148,96,62,29,159,129,209,182,182,22,64,169,188,57,92,220,213,35,64,88,169,128,149,85,55,98,62,185,178,90,152,27,131,14,64,198,75,156,114,0,213,43,64,109,33,147,196,86,80,96,62,193,79,34,185,15,164,18,64,69,191,112,111,231,33,41,64,198,222,144,96,154,148,101,62,39,133,197,7,172,160,23,64,191,233,110,239,239,174,42,64,79,78,115,241,35,168,97,62,131,198,239,219,2,132,238,63,124,212,204,214,101,51,48,64,91,190,163,218,86,226,100,62,50,11,132,211,162,137,15,64,141,41,123,40,228,36,179,63,220,81,183,205,125,96,96,62,88,13,22,14,57,255,249,63,216,223,224,201,140,13,50,64,40,134,62,102,95,85,99,62,73,217,83,199,50,31,16,64,251,224,29,18,75,213,24,64,48,36,197,245,36,206,99,62,221,220,202,96,231,48,13,64,176,162,70,102,226,221,23,64,59,16,215,53,153,33,99,62,98,32,220,243,146,255,22,64,71,186,97,51,114,110,25,64,141,149,183,59,29,207,93,62,234,18,191,140,126,10,5,64,134,203,85,235,153,220,108,63,173,44,97,94,229,96,95,62,120,144,65,69,66,165,252,63,25,81,15,226,113,113,41,64,77,185,237,93,150,217,98,62,44,221,123,110,156,145,24,64,146,248,56,223,218,101,26,64,75,99,252,236,101,110,99,62,148,47,17,176,50,235,246,63,101,27,170,196,120,20,24,64,238,4,128,198,82,128,91,62,195,41,176,48,46,108,2,64,42,188,12,156,85,47,41,64,207,40,189,80,199,52,92,62,77,216,30,104,168,182,235,63,253,121,194,8,108,207,26,64,91,249,114,216,230,97,91,62,106,237,231,51,101,71,24,64,78,212,212,177,155,38,37,64,98,232,177,90,142,58,91,62,193,57,241,146,44,25,134,63,201,195,111,75,86,106,63,64,171,192,55,168,142,229,98,62,240,166,108,17,248,120,14,64,6,46,4,250,66,82,111,64,48,88,190,31,206,98,98,62,214,32,171,185,125,154,0,64,67,132,213,128,68,47,26,64,38,233,159,191,246,121,89,62,115,88,117,123,97,118,0,64,54,178,103,132,116,28,3,64,154,88,36,33,227,27,93,62,228,145,43,147,61,41,248,63,243,14,29,155,6,15,40,64,118,116,156,88,95,80,96,62,5,166,208,18,170,44,20,64,148,237,14,214,213,33,41,64,131,93,216,90,74,215,87,62,113,98,45,191,239,142,13,64,225,199,29,3,147,185,42,64,204,1,41,43,189,62,96,62,135,159,224,62,60,232,171,63,81,11,105,88,188,22,61,64,117,186,49,25,245,229,93,62,88,196,106,193,159,12,11,64,214,29,103,123,0,228,45,64,71,162,19,107,214,162,88,62,105,248,96,4,124,135,17,64,153,200,172,79,188,78,24,64,243,106,52,27,136,156,85,62,249,120,47,223,76,65,237,63,234,250,104,166,6,13,25,64,228,142,237,110,127,221,85,62,36,59,118,130,102,180,22,64,235,246,97,116,241,205,18,64,23,73,180,18,28,131,85,62,156,31,48,35,253,189,4,64,88,160,22,159,182,54,25,64,136,194,252,37,244,178,87,62,27,127,129,25,178,158,21,64,169,210,210,245,0,245,25,64,129,84,174,109,140,165,90,62,255,134,149,80,62,126,17,64,61,188,249,90,79,22,40,64,174,239,159,37,216,184,92,62,246,87,163,116,205,111,23,64,2,209,251,138,23,93,18,64,135,0,3,149,8,80,90,62,224,54,104,241,181,56,18,64,141,41,123,40,228,36,195,63,140,70,82,211,65,240,91,62,130,54,169,132,31,119,15,64,152,229,13,29,171,166,51,64,158,167,42,223,237,158,87,62,97,115,45,218,114,233,20,64,140,77,109,66,38,9,43,64,142,219,249,31,88,73,90,62,16,210,152,95,167,110,19,64,104,169,108,33,127,153,242,63,161,247,180,25,192,36,84,62,93,101,192,162,30,195,22,64,118,180,49,37,229,29,25,64,92,117,116,105,159,32,84,62,32,202,44,161,237,101,16,64,204,230,77,32,216,37,25,64,17,87,92,30,106,39,87,62,157,189,53,122,113,12,220,63,28,250,243,205,168,35,50,64,32,75,54,61,59,71,85,62,229,198,87,191,203,70,253,63,238,173,168,244,95,191,18,64,30,15,243,144,162,4,89,62,253,161,90,21,166,176,6,64,106,80,86,66,46,11,36,64,129,56,143,232,25,244,82,62,48,163,103,191,142,109,6,64,198,238,233,192,88,43,17,64,55,33,160,210,9,41,90,62,249,54,183,142,247,177,6,64,117,33,252,22,41,201,87,64,171,11,74,101,154,60,87,62,77,183,124,62,149,130,24,64,120,90,202,88,35,38,24,64,67,245,87,3,18,215,83,62,31,104,241,126,30,119,13,64,206,12,220,55,188,17,207,63,222,80,167,220,166,251,81,62,106,119,133,16,144,58,213,63,83,79,62,18,76,61,42,64,175,149,82,251,70,221,87,62,83,245,77,97,134,138,234,63,34,151,132,55,167,86,41,64,19,245,236,30,237,60,86,62,62,230,111,219,163,70,13,64,202,64,181,236,153,29,26,64,219,138,72,93,167,68,81,62,133,59,206,114,20,25,19,64,7,100,52,1,35,11,43,64,140,66,92,35,22,242,83,62,184,16,228,166,38,252,6,64,83,47,7,42,17,83,33,64,1,234,126,214,156,64,83,62,50,50,71,53,96,231,224,63,100,68,5,178,142,71,27,64,105,77,194,4,103,234,80,62,159,238,30,85,244,33,245,63,103,150,137,89,122,54,188,63,219,88,77,201,29,194,83,62,96,252,1,127,124,172,254,63,190,31,46,154,114,73,80,64,191,185,187,97,95,232,82,62,134,43,167,89,245,199,7,64,222,86,122,147,46,252,22,64,161,16,78,162,252,196,80,62,33,208,238,203,130,125,17,64,188,191,165,79,250,22,25,64,167,235,40,23,125,188,80,62,54,240,192,75,107,170,21,64,134,219,217,245,194,44,25,64,176,170,135,23,219,243,84,62,178,67,154,108,110,193,8,64,194,255,86,83,119,3,55,64,206,113,255,30,59,217,80,62,112,207,221,86,181,106,6,64,188,96,201,177,159,167,49,64,94,66,170,245,154,195,79,62,150,122,119,62,107,23,1,64,151,80,173,93,39,70,149,63,230,201,186,250,120,133,79,62,147,163,41,122,229,161,230,63,196,17,212,123,23,214,240,63,140,210,208,234,252,121,81,62,111,69,205,13,179,148,15,64,19,175,146,199,195,63,228,63,157,68,186,255,200,36,80,62,225,219,68,160,38,81,16,64,190,145,140,104,40,134,179,63,173,239,248,38,167,223,75,62,149,138,1,193,27,20,25,64,29,169,104,243,210,255,38,64,148,242,225,209,239,131,77,62,138,201,221,174,223,179,16,64,203,175,108,49,221,16,24,64,239,27,237,84,78,39,83,62,100,207,47,251,232,159,247,63,107,233,181,72,111,130,64,64,213,237,194,145,81,98,80,62,229,127,30,67,41,157,18,64,129,99,105,125,171,210,34,64,128,244,252,206,83,41,79,62,60,97,146,157,129,149,4,64,126,163,55,44,20,143,41,64,184,49,254,214,64,222,75,62,168,125,70,190,129,115,22,64,221,239,18,20,224,50,26,64,166,5,206,122,189,105,79,62,198,79,31,168,54,194,16,64,10,242,83,53,204,162,50,64,166,7,26,149,164,185,77,62,182,139,42,230,92,65,5,64,113,38,157,98,135,8,3,64,207,229,210,10,65,59,74,62,37,79,216,84,55,115,22,64,19,34,174,2,131,37,41,64,165,226,33,178,172,193,80,62,148,184,234,92,55,34,19,64,112,86,182,118,34,224,50,64,144,10,28,122,194,149,80,62,234,111,154,233,49,142,5,64,250,25,220,171,150,53,50,64,48,223,25,58,63,114,80,62,104,62,203,63,160,107,16,64,245,210,189,197,34,239,57,64,224,75,188,49,249,249,76,62,205,183,129,221,67,186,211,63,122,165,100,218,126,123,20,64,220,99,33,252,27,227,74,62,220,247,100,209,12,127,24,64,123,60,47,83,215,248,27,64,84,215,185,24,71,86,79,62,226,165,207,158,101,221,13,64,190,145,140,104,40,134,163,63,41,71,99,114,147,84,74,62,224,38,202,179,39,70,244,63,70,60,104,252,85,91,56,64,211,75,12,210,123,228,69,62,57,243,159,248,157,120,17,64,159,225,177,153,178,65,49,64,74,39,75,94,248,166,77,62,170,40,172,61,253,24,11,64,219,58,174,62,105,119,207,63,147,246,253,35,129,228,69,62,217,24,158,180,8,116,237,63,158,58,255,199,25,115,24,64,163,4,95,73,113,223,75,62,177,197,104,136,194,37,23,64,52,214,110,218,148,251,40,64,122,163,222,95,141,73,69,62,20,66,198,82,89,80,9,64,121,168,64,31,250,252,24,64,95,68,145,28,195,27,69,62,168,234,254,125,176,177,4,64,164,96,128,125,163,208,25,64,234,31,168,104,114,88,74,62,129,238,50,91,206,244,24,64,32,46,1,87,50,184,21,64,223,127,212,107,228,156,73,62,32,26,161,231,201,224,253,63,161,162,58,201,21,41,25,64,62,154,7,50,172,31,69,62,73,171,253,31,14,235,213,63,47,247,62,38,195,70,25,64,246,168,2,66,56,181,68,62,112,81,21,246,62,165,22,64,62,214,74,66,50,140,32,64,158,213,31,68,171,5,73,62,149,227,140,220,206,18,23,64,233,76,100,34,97,200,49,64,150,40,132,136,255,63,73,62,163,105,72,183,130,132,250,63,161,248,68,124,167,26,25,64,151,239,165,183,186,225,69,62,44,233,111,18,162,170,228,63,76,237,16,143,59,23,41,64,125,53,145,32,228,102,68,62,233,69,167,29,112,222,240,63,213,220,24,30,94,33,41,64,227,207,247,215,81,92,74,62,57,93,13,100,207,10,4,64,216,193,124,127,221,123,54,64,165,252,142,141,70,193,68,62,160,150,132,227,176,40,17,64,81,143,43,19,107,9,25,64,89,34,245,173,245,164,68,62,142,96,42,173,156,0,22,64,241,11,84,50,82,58,25,64,31,205,217,220,193,1,72,62,78,204,245,205,40,228,2,64,144,152,82,130,5,204,49,64,16,3,31,74,233,163,68,62,159,131,94,235,123,207,6,64,242,146,96,98,74,100,202,63,60,104,137,6,201,254,66,62,21,84,162,210,201,213,24,64,71,251,15,95,28,19,251,63,77,179,20,58,175,162,70,62,233,55,48,112,1,167,21,64,103,150,137,89,122,54,204,63,42,152,216,59,127,26,74,62,209,40,81,106,180,116,22,64,8,40,164,66,237,164,84,64,51,109,167,155,109,84,69,62,166,36,193,255,175,178,241,63,18,236,165,129,193,90,36,64,148,254,185,22,12,222,66,62,190,207,90,246,43,244,6,64,156,6,92,171,165,95,238,63,142,196,225,130,220,85,66,62,98,37,103,231,120,163,24,64,189,245,37,140,184,146,25,64,4,212,142,190,213,146,66,62,183,34,64,102,152,255,245,63,86,120,235,157,130,55,19,64,52,171,24,122,79,80,70,62,166,233,125,195,47,175,20,64,172,68,88,51,105,4,47,64,37,101,218,200,57,11,67,62,245,182,191,125,140,157,234,63,55,121,226,226,53,59,15,64,103,158,114,221,22,226,65,62,102,201,50,154,64,216,12,64,235,169,89,185,4,177,24,64,149,34,54,10,113,217,67,62,88,153,65,217,10,117,24,64,38,83,158,70,64,18,25,64,44,31,95,24,221,196,67,62,13,101,123,249,182,102,13,64,28,72,225,254,124,49,25,64,75,66,34,216,117,48,70,62,31,169,102,137,178,129,10,64,199,94,80,242,229,74,22,64,60,13,53,11,252,46,65,62,54,195,15,199,235,40,0,64,226,67,24,26,9,48,5,64,112,179,83,75,72,178,67,62,186,175,132,85,66,198,236,63,63,149,243,62,87,187,98,64,195,32,64,108,172,23,71,62,23,32,190,224,121,48,7,64,45,77,55,101,128,121,66,64,47,255,134,79,67,58,69,62,35,88,225,228,111,201,19,64,14,52,146,190,174,206,38,64,79,48,46,249,173,125,68,62,158,47,176,237,107,249,2,64,7,186,102,39,95,34,41,64,155,87,176,143,14,159,64,62,102,255,98,196,207,181,1,64,175,90,124,213,35,86,31,64,190,55,182,134,150,103,63,62,38,123,87,37,94,111,11,64,60,89,88,6,62,218,39,64,22,144,147,175,82,226,68,62,19,105,240,99,148,200,24,64,245,29,185,175,68,206,54,64,86,205,190,6,35,222,67,62,112,190,216,133,58,214,228,63,81,162,35,69,221,75,6,64,227,102,18,209,67,113,63,62,211,126,207,17,28,1,24,64,171,245,184,119,112,33,25,64,221,237,79,84,192,112,63,62,165,146,221,164,5,80,14,64,253,169,198,205,76,34,25,64,1,175,152,92,237,16,65,62,230,88,39,155,93,244,240,63,195,69,112,99,75,210,40,64,180,212,11,19,180,86,67,62,88,3,115,60,44,124,244,63,195,137,191,145,89,32,25,64,36,47,252,97,98,81,67,62,2,7,252,186,166,203,1,64,229,21,192,179,99,35,25,64,13,141,86,3,102,204,65,62,187,68,203,104,141,240,20,64,251,224,29,18,75,213,40,64,108,239,115,183,54,80,59,62,73,146,169,26,77,141,16,64,255,117,92,184,250,137,249,63,129,27,250,241,163,174,66,62,147,116,43,149,115,34,252,63,136,246,123,129,183,136,24,64,146,155,30,240,82,187,59,62,10,230,20,18,89,173,23,64,130,98,154,129,197,219,48,64,133,29,102,165,103,227,63,62,181,132,194,87,145,168,21,64,138,252,146,59,176,62,16,64,20,57,165,97,180,19,63,62,60,2,109,88,187,241,247,63,216,159,24,158,5,32,100,64,133,170,14,190,58,103,65,62,136,164,250,48,252,183,254,63,62,244,15,95,28,19,235,63,185,227,39,82,61,100,65,62,40,205,243,193,146,142,14,64,114,237,23,193,72,39,15,64,78,230,97,196,193,243,58,62,200,119,72,95,32,250,24,64,173,20,245,93,98,77,235,63,13,109,69,111,184,254,57,62,221,103,124,242,232,30,224,63,35,67,229,5,152,87,47,64,234,251,22,34,110,129,56,62,93,15,34,144,95,224,7,64,144,169,110,182,129,44,41,64,19,70,158,161,201,221,56,62,108,49,191,134,32,89,24,64,228,153,70,102,226,221,39,64,161,207,253,68,167,172,55,62,210,7,39,126,52,108,23,64,221,104,224,177,151,165,40,64,134,142,8,223,43,188,63,62,125,115,131,254,134,139,3,64,38,254,116,199,19,161,19,64,83,166,57,228,174,123,55,62,52,83,244,36,247,35,8,64,191,178,24,202,148,215,50,64,119,191,119,118,64,112,59,62,211,215,59,26,175,140,23,64,187,23,250,209,128,22,74,64,195,49,192,244,120,58,58,62,142,124,58,119,77,75,214,63,91,55,144,114,255,34,141,63,106,149,210,12,40,182,63,62,48,82,57,131,103,171,21,64,29,173,16,86,205,148,55,64,157,36,95,85,10,165,55,62,235,36,232,191,25,201,6,64,103,86,69,179,27,7,39,64,211,241,84,79,192,26,59,62,183,47,3,53,143,204,2,64,163,78,133,114,8,215,36,64,93,232,228,107,149,124,58,62,185,225,39,115,217,84,226,63,105,243,180,179,43,155,24,64,110,124,245,57,55,155,54,62,26,136,201,250,177,251,17,64,197,54,223,222,77,218,50,64,108,112,232,173,71,4,56,62,21,199,172,234,227,175,245,63,138,85,191,91,238,193,219,63,83,182,254,254,30,46,55,62,65,60,169,13,87,198,250,63,99,247,195,33,60,37,25,64,128,157,65,104,14,46,55,62,9,65,216,104,6,86,253,63,223,163,187,35,129,30,25,64,155,38,167,136,254,58,60,62,150,149,93,83,35,166,10,64,97,188,195,92,86,135,39,64,49,94,239,12,67,1,54,62,87,148,119,9,151,82,1,64,18,191,12,174,113,233,40,64,92,187,119,37,166,120,57,62,66,47,138,184,252,114,7,64,217,167,202,145,145,168,25,64,50,77,68,6,214,159,59,62,55,183,203,63,162,137,16,64,252,157,8,73,208,73,193,63,227,206,105,152,14,125,53,62,58,23,65,51,128,113,14,64,71,67,180,75,159,240,37,64,124,83,85,118,198,255,55,62,9,43,147,73,203,81,241,63,2,132,243,207,42,64,24,64,243,8,38,33,228,125,57,62,161,242,215,54,114,212,234,63,79,168,119,45,161,78,21,64,73,45,252,145,76,109,52,62,138,91,115,166,179,107,12,64,215,178,149,140,229,214,8,64,46,157,68,26,185,88,60,62,165,118,226,183,134,72,17,64,240,176,184,129,145,112,68,64,141,70,126,33,252,89,57,62,218,138,228,83,93,63,19,64,72,216,3,189,191,101,23,64,7,205,15,241,94,110,57,62,23,93,148,84,0,116,185,63,12,82,119,185,180,79,249,63,238,120,16,111,59,165,55,62,250,94,24,142,130,187,3,64,166,27,140,117,146,3,26,64,52,222,119,150,136,254,54,62,210,184,198,234,57,53,18,64,239,157,68,136,35,178,101,64,129,73,14,62,35,191,53,62,138,214,205,46,223,215,22,64,146,183,238,81,210,250,40,64,210,49,63,154,214,115,57,62,124,104,107,188,14,88,245,63,122,229,187,232,102,188,58,64,149,97,37,168,146,97,54,62,193,4,61,32,230,152,18,64,131,152,229,206,68,154,56,64,202,242,193,213,43,247,54,62,253,169,230,103,15,13,22,64,115,34,249,36,138,175,16,64,233,44,248,184,125,237,52,62,86,48,217,239,171,237,244,63,205,76,84,237,233,85,21,64,43,157,32,111,44,78,52,62,181,241,237,183,197,40,1,64,117,78,43,88,211,237,28,64,96,112,85,140,108,229,57,62,241,254,188,166,223,68,22,64,184,92,218,128,97,43,116,64,144,14,67,248,133,143,50,62,154,223,212,2,52,236,20,64,160,84,133,180,168,198,34,64,147,190,25,125,220,57,51,62,75,243,84,143,76,137,24,64,33,244,67,0,85,48,22,64,179,0,163,0,242,15,57,62,140,22,127,177,158,34,19,64,80,10,104,154,111,54,82,64,31,33,86,66,224,54,54,62,24,79,48,152,179,165,20,64,94,133,64,21,128,216,50,64,240,159,67,229,37,116,56,62,176,17,144,12,57,27,246,63,75,92,119,172,69,79,88,64,169,140,222,33,183,112,49,62,210,224,164,9,152,207,216,63,68,168,130,78,27,25,17,64,240,67,253,121,51,10,49,62,211,131,153,23,51,30,20,64,87,253,91,0,224,247,11,64,33,155,24,17,52,240,48,62,2,85,235,132,70,197,254,63,44,179,238,81,210,250,24,64,117,179,134,230,30,137,52,62], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+51200);
/* memory initializer */ allocate([38,182,104,86,136,136,18,64,30,237,6,252,238,75,61,64,53,99,161,206,189,160,48,62,204,201,142,102,204,221,249,63,22,232,144,243,234,72,25,64,124,39,132,162,103,21,54,62,67,82,207,109,224,33,185,63,243,18,197,253,0,164,40,64,169,137,5,128,171,48,49,62,103,83,24,115,209,63,13,64,33,167,59,69,104,19,28,64,251,83,53,237,206,12,53,62,227,87,148,13,204,157,17,64,97,76,81,19,112,169,247,63,156,246,204,236,50,17,48,62,115,123,3,8,110,148,224,63,53,202,142,219,31,177,27,64,142,159,30,149,222,215,50,62,93,51,6,208,243,9,10,64,65,43,201,165,133,36,109,64,162,109,157,149,170,142,53,62,217,63,17,41,182,177,8,64,119,223,30,52,53,40,49,64,228,12,65,79,141,120,48,62,115,67,167,79,16,98,6,64,26,45,26,130,137,214,45,64,137,115,72,109,158,38,48,62,89,147,43,118,51,36,7,64,165,101,120,174,107,68,49,64,172,177,136,160,190,243,47,62,96,153,163,12,182,113,23,64,209,24,121,34,112,48,25,64,96,155,94,73,41,206,49,62,217,251,127,4,142,88,1,64,27,198,76,51,109,133,43,64,51,8,203,135,37,228,48,62,129,47,196,167,85,22,25,64,213,72,250,144,20,125,31,64,35,86,101,7,110,170,47,62,77,122,115,221,172,126,15,64,215,134,6,35,77,19,25,64,156,128,200,224,35,59,48,62,168,243,182,169,100,119,246,63,220,221,63,165,248,160,16,64,138,206,30,76,120,146,49,62,78,92,66,220,150,158,3,64,13,229,118,81,231,142,35,64,61,235,203,64,114,221,48,62,37,46,131,109,191,104,24,64,148,218,144,11,232,247,37,64,112,47,253,110,188,202,52,62,11,197,161,183,129,74,24,64,128,65,87,122,88,14,41,64,16,71,220,101,219,65,53,62,232,28,88,249,49,122,242,63,151,25,156,99,189,54,100,64,216,143,99,96,224,39,48,62,86,210,66,215,52,28,22,64,107,146,223,5,70,123,9,64,171,85,45,143,181,84,47,62,112,79,126,210,139,102,248,63,192,190,219,217,219,21,25,64,167,184,109,160,185,227,48,62,177,195,86,156,96,72,22,64,148,155,68,42,191,100,53,64,65,77,55,213,92,49,47,62,81,213,55,88,41,179,255,63,130,220,163,107,225,45,25,64,46,15,106,190,253,188,49,62,155,45,154,81,134,102,0,64,237,142,162,171,67,244,53,64,237,126,10,148,33,11,51,62,253,28,191,94,70,56,10,64,200,245,26,107,62,200,29,64,164,160,69,78,29,139,48,62,157,232,148,35,191,215,20,64,11,39,65,170,235,153,238,63,2,29,2,235,94,241,45,62,42,32,149,224,92,74,229,63,30,12,10,72,228,59,39,64,2,138,2,118,206,23,49,62,160,251,151,245,124,73,252,63,151,165,18,51,137,199,54,64,205,70,30,182,105,58,45,62,201,206,11,135,188,95,11,64,56,206,221,22,123,191,37,64,152,101,132,175,3,101,49,62,146,240,5,249,200,8,242,63,19,175,146,199,195,63,212,63,39,83,93,156,200,97,45,62,100,100,159,41,243,219,16,64,24,173,40,242,69,64,43,64,112,5,32,162,36,70,47,62,210,108,219,6,180,76,21,64,0,15,138,78,199,64,49,64,165,74,141,20,112,139,44,62,214,172,189,38,5,139,24,64,128,83,166,195,215,29,25,64,57,197,228,177,65,87,51,62,75,53,128,61,62,214,252,63,47,241,16,157,66,43,246,63,247,20,240,176,232,135,50,62,191,163,54,128,203,63,19,64,9,143,0,46,68,180,16,64,252,229,85,232,20,76,44,62,222,186,104,8,168,66,13,64,194,71,217,129,229,37,25,64,172,12,198,17,78,159,43,62,82,4,215,37,122,119,19,64,195,143,25,192,219,255,22,64,32,172,235,65,72,188,49,62,9,25,110,151,136,121,14,64,116,130,191,105,112,159,23,64,250,199,122,133,3,244,42,62,182,120,77,73,3,245,3,64,119,28,45,18,210,254,52,64,22,174,77,77,100,47,46,62,201,10,188,150,133,153,5,64,223,207,180,129,100,87,29,64,14,129,3,135,124,149,44,62,83,89,242,142,51,140,10,64,56,206,221,22,123,191,21,64,38,95,2,121,227,106,46,62,152,3,171,114,227,135,17,64,183,178,89,185,4,177,40,64,96,46,139,75,116,160,43,62,40,45,155,104,146,21,21,64,111,244,247,190,93,120,163,63,195,236,72,71,2,107,41,62,168,203,59,4,67,71,23,64,28,109,21,108,171,181,58,64,221,244,21,41,140,174,48,62,78,42,218,54,122,236,23,64,206,24,192,219,76,164,26,64,98,55,121,68,155,25,41,62,72,47,100,63,197,178,10,64,183,70,43,109,43,3,246,63,22,221,191,99,236,167,49,62,227,215,32,70,207,248,22,64,178,20,58,158,162,103,70,64,39,233,144,95,13,53,41,62,128,200,166,206,127,57,2,64,44,206,230,16,18,130,228,63,101,62,119,3,166,9,49,62,105,113,95,73,206,87,23,64,231,192,4,144,227,38,216,63,242,25,88,67,133,59,44,62,35,238,205,32,8,91,23,64,124,253,228,101,124,27,112,63,50,127,72,219,199,245,47,62,246,72,164,236,148,244,241,63,101,227,130,105,216,117,48,64,157,43,240,21,233,56,44,62,229,118,170,154,25,98,237,63,221,76,180,162,226,162,37,64,75,62,156,114,111,31,48,62,47,12,127,205,244,178,20,64,220,243,162,96,156,145,22,64,247,30,203,152,187,245,41,62,98,128,43,20,138,13,11,64,9,32,225,207,136,211,61,64,122,79,105,103,30,10,40,62,27,52,172,208,154,94,12,64,253,16,234,205,0,97,51,64,100,159,127,236,255,47,45,62,32,255,228,4,0,34,18,64,102,167,220,228,32,178,27,64,64,198,47,152,50,218,47,62,202,165,154,233,161,12,6,64,255,172,190,33,137,170,62,64,92,230,133,128,232,234,46,62,248,64,13,170,72,243,254,63,199,132,48,66,253,150,24,64,157,85,3,11,139,175,47,62,53,172,63,27,55,225,230,63,185,33,80,136,3,24,5,64,41,59,63,133,196,7,39,62,82,153,253,71,106,153,19,64,127,11,102,133,225,67,27,64,132,247,27,91,197,7,46,62,218,125,128,188,160,40,249,63,225,26,79,3,192,172,25,64,151,126,53,2,163,228,42,62,251,251,2,191,221,132,236,63,3,74,54,121,77,184,40,64,199,26,50,219,229,146,39,62,220,164,83,85,21,104,14,64,91,157,21,250,228,152,52,64,181,94,114,91,60,107,40,62,228,174,0,158,97,40,5,64,203,3,107,53,120,73,60,64,8,160,200,118,42,44,42,62,69,22,231,6,0,231,15,64,150,104,34,29,239,56,24,64,48,158,20,186,157,155,36,62,190,109,207,132,79,181,239,63,183,35,238,127,207,5,25,64,139,41,35,27,37,123,36,62,187,252,12,31,19,33,4,64,139,119,145,197,237,61,25,64,219,100,92,176,52,147,41,62,202,53,219,138,147,101,23,64,154,37,9,7,205,133,48,64,124,97,100,247,62,79,42,62,38,241,210,107,20,232,250,63,210,215,206,220,172,112,39,64,138,7,52,171,67,182,42,62,148,137,155,55,193,146,226,63,162,116,19,143,239,130,59,64,209,69,41,212,201,241,40,62,182,53,155,153,252,51,23,64,17,55,93,40,206,10,26,64,162,134,244,175,84,64,40,62,13,86,187,252,82,146,237,63,218,151,227,77,203,224,21,64,98,227,27,34,96,98,43,62,171,118,249,28,67,30,9,64,15,52,236,221,34,44,101,64,121,173,39,227,198,26,41,62,16,10,144,53,65,101,12,64,242,70,91,225,93,214,208,63,29,192,137,34,124,237,36,62,201,68,142,148,49,241,18,64,107,234,8,210,140,65,217,63,235,38,54,181,220,49,42,62,147,196,23,129,63,254,19,64,28,134,191,139,188,199,32,64,89,168,255,248,77,153,40,62,54,6,190,107,111,120,229,63,83,190,184,60,86,183,204,63,83,4,191,84,69,177,38,62,128,155,249,123,215,164,21,64,121,154,192,254,68,221,61,64,125,89,118,74,93,58,39,62,91,5,166,47,255,28,19,64,185,210,206,113,102,132,24,64,79,206,123,152,194,1,37,62,81,237,100,182,60,9,24,64,45,129,224,124,8,109,39,64,82,175,31,117,96,137,38,62,45,99,172,88,179,10,20,64,238,204,176,211,86,191,25,64,177,226,78,39,87,220,33,62,162,255,248,133,124,236,23,64,62,30,254,225,247,50,52,64,212,132,75,222,189,57,40,62,119,12,63,140,145,112,5,64,14,217,64,47,146,188,23,64,111,138,76,150,45,81,36,62,95,65,51,82,197,78,254,63,93,254,71,25,169,180,56,64,83,249,88,234,254,68,36,62,228,97,192,15,13,226,16,64,69,210,121,114,12,88,33,64,243,142,44,112,86,130,36,62,202,159,106,117,3,147,4,64,104,3,156,247,241,98,28,64,234,153,117,71,176,6,33,62,166,234,145,130,18,139,224,63,100,60,186,48,154,69,49,64,199,219,96,88,225,21,39,62,120,52,190,238,208,244,24,64,123,207,236,4,83,176,81,64,71,173,5,179,229,246,34,62,208,189,4,157,221,63,0,64,174,41,12,120,172,130,17,64,127,223,225,99,219,125,38,62,60,225,18,158,146,115,234,63,52,194,62,22,43,135,26,64,156,8,187,49,195,67,38,62,108,192,204,219,207,56,236,63,117,120,187,186,179,94,72,64,13,63,151,120,205,102,36,62,181,41,245,199,228,42,12,64,230,66,135,99,67,208,47,64,222,34,48,136,7,60,37,62,165,103,219,67,170,210,248,63,113,110,157,243,209,40,229,63,217,138,199,241,161,87,36,62,30,121,23,148,229,182,16,64,66,186,96,173,85,76,65,64,137,75,2,161,224,81,30,62,103,110,119,145,180,27,248,63,33,159,230,201,10,205,51,64,232,205,50,152,167,175,35,62,122,175,114,96,45,242,0,64,201,235,87,129,197,33,157,63,239,118,250,226,213,251,34,62,50,14,232,95,242,231,10,64,119,242,49,21,23,16,209,63,23,210,178,217,178,177,35,62,128,234,14,128,249,225,218,63,98,12,90,4,16,81,88,63,110,46,132,244,107,255,27,62,185,50,247,108,161,166,2,64,244,82,187,163,34,91,62,64,75,71,219,13,33,244,34,62,110,243,122,222,194,51,11,64,18,164,1,146,109,32,25,64,51,51,136,237,124,242,34,62,104,152,46,45,121,74,187,63,48,247,125,179,79,35,25,64,25,221,109,141,231,103,33,62,45,60,250,53,135,59,6,64,85,18,140,84,14,126,56,64,27,223,46,87,168,73,30,62,82,120,221,120,58,216,239,63,31,237,11,64,239,115,52,64,227,238,31,124,225,130,23,62,195,190,161,135,226,124,228,63,81,76,168,138,241,187,56,64,138,14,65,0,70,143,29,62,26,150,98,42,48,124,205,63,145,64,229,82,179,254,100,64,130,148,126,171,92,63,29,62,137,114,94,215,146,168,24,64,37,219,108,176,184,221,116,64,134,178,117,216,251,74,24,62,213,198,144,249,240,162,15,64,86,147,31,41,117,77,100,64,203,171,192,82,130,9,27,62,47,22,32,44,238,57,0,64,39,60,22,200,17,113,63,64,172,142,58,208,224,91,28,62,249,99,109,223,172,110,2,64,55,220,60,215,196,85,74,64,157,39,113,101,143,93,28,62,90,127,185,171,196,78,4,64,92,28,215,183,122,100,86,64,15,243,171,83,11,197,27,62,213,144,37,59,184,113,20,64,178,40,242,84,205,169,64,64,249,8,126,98,145,104,26,62,242,186,38,204,142,103,22,64,4,30,226,201,102,67,67,64,199,48,214,179,238,94,27,62,153,20,224,83,43,234,4,64,213,24,186,59,230,136,108,64,163,208,157,149,200,194,25,62,165,162,187,6,110,255,12,64,72,135,82,84,187,60,60,64,7,211,141,28,214,169,25,62,36,47,212,52,184,219,16,64,51,186,44,40,85,196,60,64,86,238,251,156,3,118,18,62,75,211,108,149,20,41,195,63,68,186,120,81,83,254,84,64,24,102,248,184,74,117,18,62,233,64,104,26,77,1,243,63,129,113,235,95,69,1,85,64,35,198,191,124,109,195,16,62,40,47,183,59,225,62,5,64,204,145,123,157,224,144,83,64,72,103,139,120,165,158,21,62,60,174,41,119,44,225,19,64,107,215,71,81,10,121,115,64,16,96,199,146,14,79,21,62,194,163,26,112,20,197,20,64,157,162,83,242,194,77,102,64,39,90,180,206,166,250,14,62,165,69,144,56,159,93,255,63,79,67,4,96,169,110,77,64,152,101,68,39,130,129,19,62,119,233,160,244,103,84,20,64,106,15,141,249,29,155,83,64,229,146,52,22,133,170,15,62,238,191,11,186,166,89,6,64,11,37,40,1,71,91,89,64,24,124,243,61,139,59,18,62,189,108,173,191,36,207,13,64,250,63,190,243,213,76,76,64,116,159,29,109,131,90,17,62,62,218,69,68,108,177,231,63,199,129,99,230,119,58,69,64,57,22,119,146,131,204,8,62,210,138,247,9,52,159,155,63,88,41,245,143,163,182,110,64,70,21,190,229,220,191,7,62,200,58,92,25,96,3,17,64,195,17,178,88,204,255,100,64,118,132,35,25,131,156,7,62,67,0,98,75,160,151,20,64,188,163,63,16,231,67,78,64,181,52,172,38,202,202,0,62,140,163,201,192,136,58,1,64,176,16,10,45,8,36,88,64,92,17,91,172,94,188,1,62,71,114,177,236,110,210,14,64,28,40,238,4,52,137,110,64,156,171,109,67,20,108,3,62,102,65,88,230,82,187,243,63,182,110,251,152,45,234,84,64,255,212,7,178,172,47,0,62,136,100,127,127,35,113,22,64,194,89,79,6,218,198,115,64,80,235,92,164,220,222,0,62,22,161,250,42,236,59,250,63,217,32,69,180,248,95,121,64,0,48,133,102,15,102,0,62,223,119,199,224,148,229,13,64,168,62,17,61,209,144,102,64,16,166,177,130,154,214,254,61,45,66,105,80,205,167,189,63,16,189,104,24,107,21,85,64,108,232,173,11,96,25,251,61,58,54,154,115,173,250,227,63,25,19,141,247,168,13,112,64,151,24,230,68,217,40,251,61,124,177,175,188,64,21,12,64,219,161,113,202,235,159,110,64,38,0,50,32,128,9,250,61,191,65,165,137,29,170,23,64,248,53,192,243,4,154,99,64,37,128,115,219,137,176,249,61,70,5,236,233,31,173,240,63,141,155,178,132,161,173,120,64,108,43,245,246,49,216,240,61,132,235,202,89,42,171,242,63,19,157,221,73,72,242,97,64,196,142,105,157,191,190,240,61,215,126,103,216,173,9,10,64,87,37,179,176,118,91,108,64,181,50,178,96,110,108,238,61,60,106,98,138,208,254,250,63,134,164,39,8,165,187,100,64,58,44,83,222,210,127,228,61,226,68,176,68,165,66,5,64,169,32,164,70,215,191,107,64,113,167,248,174,173,69,228,61,72,157,255,105,103,13,20,64,118,212,188,214,130,20,115,64,182,242,42,0,110,215,230,61,197,9,185,247,51,251,21,64,17,202,193,68,81,149,111,64,113,68,155,147,104,200,216,61,240,243,220,254,90,229,1,64,38,166,215,227,79,18,122,64,17,28,11,104,207,116,199,62,58,24,246,215,240,150,9,64,16,189,104,24,107,21,85,64,196,30,15,54,222,11,177,62,172,73,94,62,127,176,21,64,103,138,97,9,188,7,22,64,241,91,102,98,1,254,170,62,148,177,75,73,178,10,15,64,228,38,238,3,16,229,20,64,229,157,64,104,248,109,157,62,92,175,173,180,140,162,13,64,129,99,105,125,171,210,2,64,146,167,18,105,198,97,149,62,213,27,39,236,66,255,15,64,76,177,89,149,204,60,249,63,174,30,45,252,242,127,142,62,62,14,113,123,190,224,15,64,177,90,103,175,146,195,240,63,88,129,34,192,78,22,134,62,47,166,100,255,246,133,12,64,199,124,224,124,8,109,23,64,135,145,19,12,43,95,136,62,44,176,84,158,34,240,19,64,212,207,191,162,222,33,25,64,115,183,80,193,112,109,131,62,189,22,134,67,61,159,13,64,10,82,182,118,34,224,34,64,29,140,124,147,14,52,131,62,31,194,160,37,251,70,11,64,192,127,101,195,51,109,36,64,154,247,171,3,165,19,126,62,96,230,152,150,120,81,19,64,201,14,107,53,120,73,44,64,241,88,142,229,5,68,125,62,238,2,221,86,85,165,0,64,76,164,40,242,69,64,27,64,204,90,147,212,152,20,122,62,53,125,33,55,116,207,11,64,109,82,133,180,168,198,18,64,118,49,218,108,44,209,123,62,73,65,246,182,255,57,16,64,72,117,163,196,241,197,81,64,186,136,139,40,201,126,119,62,158,162,69,84,234,202,17,64,92,251,86,83,119,3,23,64,106,146,28,47,157,93,118,62,185,188,212,67,129,247,19,64,186,246,183,46,239,86,28,64,76,209,39,162,200,134,114,62,46,133,126,232,42,77,17,64,86,43,227,226,149,26,25,64,153,203,116,239,19,140,120,62,19,79,190,187,235,68,242,63,115,53,42,158,202,123,26,64,100,204,229,246,75,87,115,62,22,179,1,40,168,254,12,64,181,156,70,123,58,243,224,63,209,172,61,110,240,169,116,62,134,215,111,68,143,55,22,64,42,243,9,243,227,243,100,64,52,54,3,213,115,231,107,62,206,62,36,160,205,1,25,64,234,78,184,83,222,18,50,64,97,7,114,71,7,3,107,62,63,201,101,247,141,250,3,64,129,99,105,125,171,210,18,64,229,194,184,76,3,78,104,62,189,167,177,97,62,174,2,64,76,177,89,149,204,60,25,64,252,73,5,100,246,132,105,62,154,73,173,223,134,179,230,63,97,211,97,66,42,138,23,64,128,210,126,146,175,17,103,62,20,137,114,10,115,161,241,63,225,199,29,3,147,185,26,64,19,246,3,185,189,178,100,62,86,248,152,171,58,53,253,63,84,219,3,226,117,242,21,64,111,124,67,159,242,52,108,62,15,91,3,57,239,178,17,64,39,60,22,200,17,113,31,64,23,143,21,248,104,155,101,62,105,21,111,222,99,123,20,64,123,218,187,232,102,188,42,64,21,130,253,231,125,205,101,62,212,119,54,103,124,30,24,64,39,60,22,200,17,113,15,64,241,81,181,145,197,99,100,62,23,236,172,6,159,98,220,63,76,177,89,149,204,60,9,64,187,57,172,165,66,126,95,62,130,5,39,27,35,127,20,64,190,163,70,123,58,243,240,63,40,235,178,225,124,206,98,62,104,36,250,62,244,175,21,64,26,36,208,143,115,71,24,64,160,22,215,78,36,180,99,62,100,243,159,117,18,84,18,64,234,71,61,72,88,99,40,64,204,154,28,223,224,50,95,62,34,127,124,79,55,211,254,63,236,153,162,171,67,244,37,64,133,157,88,194,195,124,90,62,17,169,241,43,18,125,227,63,40,119,175,181,73,252,25,64,109,52,64,102,190,230,92,62,248,147,16,250,127,75,246,63,112,11,187,140,0,1,54,64,160,77,12,80,102,23,87,62,200,214,52,112,20,60,17,64,115,213,240,105,157,146,22,64,232,18,33,238,87,6,88,62,130,69,76,200,88,7,234,63,202,64,186,48,154,69,33,64,57,231,123,138,145,132,83,62,213,125,97,252,168,10,14,64,123,195,29,3,147,185,10,64,42,221,42,126,201,235,87,62,80,138,32,117,147,19,6,64,152,101,11,251,170,18,40,64,235,233,207,168,150,225,84,62,241,159,122,247,111,204,22,64,29,173,16,86,205,148,39,64,65,37,253,87,82,102,80,62,37,130,102,106,185,201,255,63,240,149,223,5,70,123,217,63,130,102,170,240,153,239,80,62,195,212,50,17,224,163,9,64,70,227,165,129,193,90,20,64,210,94,118,163,149,152,78,62,132,63,38,236,232,6,25,64,70,227,165,129,193,90,4,64,208,137,230,42,147,91,81,62,187,219,89,4,148,166,208,63,194,180,96,173,85,76,49,64,189,210,212,79,60,23,78,62,187,50,146,251,108,191,18,64,65,21,30,60,1,60,28,64,174,196,180,243,92,248,79,62,195,106,149,228,226,134,6,64,245,210,189,197,34,239,57,64,243,207,155,248,167,44,82,62,170,64,173,12,220,211,19,64,145,232,228,147,53,143,99,64,226,42,248,108,230,32,72,62,110,160,208,193,174,12,3,64,98,188,217,195,251,232,13,64,243,216,151,199,102,68,69,62,89,178,203,151,237,45,17,64,194,92,248,225,121,115,34,64,0,239,241,193,192,179,67,62,238,98,94,133,243,153,8,64,91,130,28,101,65,168,16,64,138,58,88,77,46,145,66,62,243,42,133,79,50,135,225,63,130,98,154,129,197,219,32,64,72,93,109,77,171,81,71,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,25,73,151,27,229,67,62,73,152,123,64,209,223,23,64,238,191,123,99,71,81,28,64,33,140,167,148,179,179,65,62,28,216,103,61,89,211,247,63,25,30,238,3,16,229,36,64,42,111,201,236,111,193,65,62,8,40,85,12,148,26,12,64,194,255,86,83,119,3,39,64,34,31,179,132,199,107,67,62,90,9,27,85,97,133,192,63,204,142,97,9,188,7,38,64,116,239,53,190,146,236,63,62,200,6,38,238,125,219,255,63,187,23,250,209,128,22,58,64,204,35,30,248,84,112,66,62,252,102,136,25,20,244,16,64,121,154,192,254,68,221,61,64,182,183,178,35,222,88,64,62,151,93,245,161,233,73,7,64,249,68,3,112,153,237,18,64,216,187,91,164,25,124,62,62,70,77,214,251,2,139,254,63,123,102,107,81,235,15,32,64,205,74,127,197,67,104,64,62,250,96,114,99,14,157,227,63,240,149,223,5,70,123,233,63,236,23,15,137,9,94,62,62,208,29,180,44,48,22,246,63,44,243,233,192,88,43,1,64,154,31,193,201,11,132,64,62,86,173,105,108,88,227,250,63,71,124,99,230,119,58,53,64,30,230,193,176,62,74,65,62,81,222,74,77,123,130,20,64,97,211,97,66,42,138,7,64,34,139,96,232,24,90,57,62,240,135,215,131,133,41,0,64,107,43,242,202,20,209,232,63,14,108,56,68,132,13,54,62,250,0,89,199,174,218,4,64,110,203,191,162,222,33,41,64,151,108,146,0,175,187,55,62,47,64,236,109,229,206,249,63,168,51,193,95,132,168,233,63,20,114,38,223,236,65,57,62,3,3,112,179,253,106,18,64,211,230,71,33,13,195,18,64,53,56,167,224,82,98,54,62,128,211,245,32,56,224,22,64,188,96,201,177,159,167,33,64,91,149,170,62,165,2,53,62,168,104,249,230,107,132,13,64,173,20,245,93,98,77,203,63,242,220,129,100,193,30,54,62,170,128,163,17,42,102,16,64,241,121,119,218,211,51,80,64,169,46,207,148,47,234,53,62,130,93,119,211,177,164,22,64,255,176,225,155,179,229,64,64,24,35,36,96,67,213,53,62,227,145,49,100,191,126,239,63,62,214,74,66,50,140,16,64,38,30,24,27,42,17,50,62,145,231,9,95,97,43,193,63,92,238,37,176,240,6,9,64,243,201,152,24,76,7,52,62,78,150,168,105,52,4,234,63,102,130,17,68,199,221,20,64,222,114,70,119,107,155,49,62,112,23,63,100,126,42,23,64,173,20,245,93,98,77,219,63,154,82,146,231,208,224,51,62,74,161,75,48,49,255,243,63,39,60,22,200,17,113,47,64,79,195,212,160,5,148,53,62,83,210,54,255,199,46,19,64,82,116,156,98,39,41,25,64,248,146,145,214,193,253,53,62,101,143,24,175,189,123,14,64,99,203,202,195,88,236,20,64,223,2,226,41,188,185,55,62,124,7,241,70,222,119,240,63,213,112,186,250,99,248,109,64,170,13,138,122,213,110,52,62,156,131,228,138,111,57,12,64,60,173,98,138,17,127,48,64,242,71,96,207,115,209,48,62,76,163,25,131,36,96,22,64,5,228,233,184,215,108,249,63,94,44,59,159,148,233,52,62,66,213,35,204,167,101,10,64,234,212,120,66,34,136,30,64,167,31,192,64,10,89,47,62,92,109,114,30,168,147,244,63,233,154,29,1,198,211,24,64,234,18,45,36,203,37,49,62,204,78,194,16,110,205,8,64,204,67,102,31,154,40,57,64,129,158,170,41,77,133,44,62,19,154,168,209,201,217,24,64,52,205,144,114,4,86,40,64,8,147,249,39,118,60,44,62,23,42,181,180,229,203,18,64,118,216,26,226,109,240,28,64,121,15,71,139,183,212,45,62,177,105,22,84,71,11,5,64,94,116,145,65,173,94,29,64,134,25,104,72,208,103,45,62,174,51,17,98,75,146,7,64,201,88,39,18,84,63,35,64,9,147,15,117,227,187,48,62,222,99,111,185,235,152,243,63,92,232,94,33,5,193,25,64,18,194,79,198,74,27,45,62,49,177,120,157,111,179,248,63,214,29,103,123,0,228,45,64,253,21,62,122,245,78,42,62,246,215,18,92,133,17,243,63,83,47,7,42,17,83,33,64,149,133,44,232,248,22,44,62,204,88,12,77,26,239,21,64,54,178,103,132,116,28,243,63,39,211,81,149,161,163,42,62,136,76,33,118,72,154,233,63,194,20,99,184,196,220,66,64,160,95,157,38,58,227,39,62,57,14,219,21,93,25,218,63,69,33,189,60,81,116,23,64,73,134,246,210,24,241,40,62,86,140,106,193,158,240,4,64,152,229,13,29,171,166,51,64,208,118,32,19,208,9,39,62,12,48,220,63,223,19,5,64,212,243,168,95,103,244,28,64,255,240,175,231,29,197,37,62,91,237,99,162,231,104,24,64,105,224,188,129,185,88,27,64,232,198,6,74,78,141,36,62,79,163,80,39,94,116,13,64,72,216,3,189,191,101,23,64,145,170,22,181,18,210,38,62,46,222,158,0,59,221,24,64,136,246,123,129,183,136,24,64,35,15,58,161,116,6,36,62,46,95,0,101,181,117,23,64,75,206,168,162,230,35,18,64,36,124,250,70,36,167,35,62,209,117,37,69,58,68,18,64,98,188,217,195,251,232,29,64,155,250,53,207,254,18,36,62,15,10,3,230,177,138,3,64,193,208,50,18,80,190,38,64,41,141,106,248,129,29,43,62,123,247,134,34,171,6,250,63,109,123,223,89,18,93,111,64,234,202,97,131,213,158,41,62,227,150,228,51,200,109,6,64,139,244,91,0,224,247,251,63,166,14,139,0,41,212,39,62,166,33,123,239,178,157,18,64,58,130,237,130,78,143,84,64,254,178,226,78,71,183,35,62,218,118,107,210,90,78,17,64,2,97,166,182,191,158,213,63,46,36,254,188,110,209,34,62,61,198,17,216,21,20,18,64,81,11,105,88,188,22,61,64,50,73,224,123,38,211,34,62,74,148,131,35,220,25,8,64,103,7,167,170,255,186,48,64,106,138,7,219,242,105,37,62,11,199,61,131,103,131,192,63,134,76,39,73,39,76,99,64,136,137,184,68,93,32,33,62,164,146,77,94,145,233,14,64,61,109,91,82,51,202,49,64,12,221,209,120,17,78,32,62,59,175,53,97,17,55,20,64,193,116,101,195,51,109,52,64,106,75,96,181,87,122,32,62,188,160,202,115,158,199,1,64,132,120,228,212,213,211,68,64,30,177,169,189,25,118,32,62,64,11,12,239,168,230,235,63,95,115,207,174,15,88,83,64,53,126,9,72,47,133,31,62,168,201,208,51,63,32,16,64,29,173,16,86,205,148,55,64,145,140,24,225,11,118,21,62,78,45,5,140,230,192,23,64,107,233,181,72,111,130,64,64,193,99,45,126,64,97,25,62,158,69,120,207,111,241,228,63,67,199,178,214,199,222,87,64,145,190,141,192,133,184,21,62,25,215,37,48,251,120,0,64,67,23,178,88,204,255,84,64,4,167,95,94,42,173,20,62,34,116,84,255,147,40,13,64,70,220,101,241,230,202,70,64,203,15,32,248,121,175,15,62,151,237,91,187,60,239,9,64,249,190,60,46,77,131,83,64,47,4,73,91,76,248,10,62,77,14,136,36,221,44,20,64,187,23,250,209,128,22,74,64,141,79,73,20,68,110,11,62,88,23,90,108,6,0,20,64,167,226,206,158,38,198,98,64,216,136,72,101,64,59,11,62,223,111,107,42,102,165,140,63,103,184,148,2,137,167,86,64,41,103,213,161,161,64,10,62,19,22,128,239,184,68,20,64,9,64,231,13,248,193,72,64,62,116,245,179,244,140,2,62,124,35,210,40,184,99,22,64,63,237,243,253,212,42,100,64,26,255,138,81,230,84,3,62,232,107,58,104,138,207,4,64,30,176,30,90,14,76,82,64,151,124,84,205,3,252,2,62,221,240,51,89,99,66,23,64,238,65,2,234,120,231,97,64,67,12,116,252,153,148,2,62,60,119,214,211,28,20,11,64,107,3,200,48,201,48,116,64,172,64,227,226,216,128,250,61,179,66,181,88,132,40,241,63,169,120,164,5,85,47,109,64,107,75,2,135,75,128,250,61,160,31,255,151,209,244,2,64,86,235,31,232,242,188,101,64,209,19,245,163,32,230,253,61,249,48,82,166,181,5,21,64,254,102,119,195,140,65,100,64,190,85,7,1,163,106,250,61,248,125,185,203,238,237,21,64,24,2,46,108,228,100,88,64,41,169,54,196,86,158,243,61,8,244,164,186,184,162,238,63,53,143,199,61,242,54,101,64,58,246,188,158,254,160,231,61,72,122,162,204,251,49,254,63,239,215,215,80,167,80,108,64,87,230,174,32,162,255,228,61,233,206,183,63,131,219,15,64,184,136,90,96,32,227,116,64,64,167,160,40,53,3,223,61,152,104,106,86,182,76,6,64,31,126,53,1,114,126,115,64,214,180,172,66,166,24,172,191,237,130,53,87,50,243,235,191,124,63,28,36,39,247,222,191,222,188,87,38,125,159,223,63,248,20,62,178,22,120,220,191,7,221,217,78,71,231,231,63,158,64,188,204,235,195,235,191,83,167,255,12,145,90,201,191,124,108,139,147,214,46,221,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,66,251,130,164,193,0,0,0,0,80,82,5,193,0,0,0,0,64,77,224,64,0,0,0,172,109,242,149,65,0,0,0,0,0,191,193,64,0,0,0,0,128,8,206,64,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,64,27,31,105,193,0,0,0,0,0,44,154,192,0,0,0,0,0,192,202,192,0,0,0,0,8,220,85,65,0,0,0,0,0,142,167,192,0,0,0,0,0,235,177,192,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,128,30,94,65,193,0,0,0,0,0,64,109,192,0,0,0,0,0,216,165,64,0,0,0,0,54,220,45,65,0,0,0,0,0,80,126,192,0,0,0,0,0,120,149,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,186,167,63,65,0,0,0,0,0,224,105,64,0,0,0,0,0,208,133,192,0,0,0,0,168,99,43,193,0,0,0,0,0,96,125,64,0,0,0,0,0,48,114,192,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,133,54,65,0,0,0,0,0,98,172,192,0,0,0,0,128,20,199,64,0,0,0,0,240,8,242,64,0,0,0,0,0,0,103,192,0,0,0,0,0,16,158,192,0,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,84,139,31,193,0,0,0,0,0,40,147,64,0,0,0,0,0,96,128,192,0,0,0,0,16,100,11,65,0,0,0,0,0,40,133,192,0,0,0,0,0,192,101,192,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,238,179,37,65,0,0,0,0,0,64,82,64,0,0,0,0,0,64,139,192,0,0,0,0,0,94,186,192,0,0,0,0,0,0,0,0,0,0,0,0,0,96,118,64,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,136,163,23,193,0,0,0,0,0,240,118,192,0,0,0,0,0,192,119,64,0,0,0,0,192,128,8,65,0,0,0,0,0,0,50,64,0,0,0,0,0,224,115,64,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,84,102,18,193,0,0,0,0,0,0,66,192,0,0,0,0,0,128,137,64,0,0,0,0,16,128,255,64,0,0,0,0,0,128,79,192,0,0,0,0,0,240,118,64,0,0,0,0,255,255,255,255,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,168,88,10,65,0,0,0,0,0,224,126,192,0,0,0,0,0,192,91,64,0,0,0,0,144,107,247,192,0,0,0,0,0,176,114,64,0,0,0,0,0,128,96,64,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,48,78,255,64,0,0,0,0,0,32,97,64,0,0,0,0,0,160,102,64,0,0,0,0,96,215,240,192,0,0,0,0,0,0,34,192,0,0,0,0,0,128,67,64,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,16,36,254,64,0,0,0,0,0,0,38,64,0,0,0,0,0,0,51,64,0,0,0,0,224,7,234,192,0,0,0,0,0,0,64,64,0,0,0,0,0,0,16,192,255,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,42,3,65,0,0,0,0,0,0,36,64,0,0,0,0,0,0,101,192,0,0,0,0,0,76,147,192,0,0,0,0,0,0,0,0,0,0,0,0,0,128,84,64,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,192,208,238,64,0,0,0,0,0,128,79,64,0,0,0,0,0,0,59,64,0,0,0,0,128,57,224,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,192,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,79,236,192,0,0,0,0,0,128,79,192,0,0,0,0,0,160,103,192,0,0,0,0,64,177,222,64,0,0,0,0,0,0,0,0,0,0,0,0,0,192,82,192,255,255,255,255,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,32,31,237,192,0,0,0,0,0,0,38,192,0,0,0,0,0,160,98,64,0,0,0,0,192,241,216,64,0,0,0,0,0,0,38,192,0,0,0,0,0,128,80,64,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,160,51,233,192,0,0,0,0,0,0,69,192,0,0,0,0,0,32,96,64,0,0,0,0,128,191,217,64,0,0,0,0,0,0,0,0,0,0,0,0,0,128,83,64,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,160,104,230,64,0,0,0,0,0,0,73,64,0,0,0,0,0,0,63,64,0,0,0,0,0,171,215,192,0,0,0,0,0,0,36,192,0,0,0,0,0,0,52,64,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,243,238,64,0,0,0,0,0,0,38,64,0,0,0,0,0,192,98,192,0,0,0,0,0,16,147,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,64,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,96,213,226,192,0,0,0,0,0,0,240,191,0,0,0,0,0,192,99,64,0,0,0,0,0,17,208,64,0,0,0,0,0,0,38,192,0,0,0,0,0,0,81,64,0,0,0,0,254,255,255,255,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,64,184,223,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,203,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,77,231,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,192,0,0,0,0,0,208,125,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,192,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,128,81,222,192,0,0,0,0,0,0,240,191,0,0,0,0,0,96,96,64,0,0,0,0,0,219,201,64,0,0,0,0,0,0,38,192,0,0,0,0,0,128,77,64,1,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,64,236,219,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,25,200,192,0,0,0,0,0,0,36,64,0,0,0,0,0,0,8,192,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,64,246,211,64,0,0,0,0,0,0,53,64,0,0,0,0,0,0,36,64,0,0,0,0,0,3,197,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,142,220,64,0,0,0,0,0,0,0,0,0,0,0,0,0,128,82,192,0,0,0,0,0,8,131,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,64,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,71,217,64,0,0,0,0,0,0,0,0,0,0,0,0,0,128,80,192,0,0,0,0,0,48,129,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,64,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,128,114,203,192,0,0,0,0,0,0,57,192,0,0,0,0,0,192,83,64,0,0,0,0,128,179,192,64,0,0,0,0,0,0,0,192,0,0,0,0,0,128,70,192,255,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,158,205,64,0,0,0,0,0,0,36,64,0,0,0,0,0,0,38,64,0,0,0,0,0,65,191,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,2,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,217,206,192,0,0,0,0,0,0,82,64,0,0,0,0,0,0,48,192,0,0,0,0,0,194,186,64,0,0,0,0,0,0,69,192,0,0,0,0,0,0,20,192,0,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,69,213,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,64,0,0,0,0,0,224,100,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,64,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,128,36,201,192,0,0,0,0,0,0,36,192,0,0,0,0,0,128,66,192,0,0,0,0,0,41,187,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,192,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,183,200,192,0,0,0,0,0,0,38,64,0,0,0,0,0,128,79,64,0,0,0,0,0,15,185,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,64,255,255,255,255,0,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,238,195,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,64,0,0,0,0,0,102,180,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,64,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,80,208,64,0,0,0,0,0,64,85,192,0,0,0,0,0,0,36,192,0,0,0,0,0,0,101,64,0,0,0,0,0,0,240,191,0,0,0,0,0,0,36,64,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,11,190,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,64,0,0,0,0,0,136,169,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,64,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,197,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,192,0,0,0,0,0,0,90,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,142,189,64,0,0,0,0,0,0,53,192,0,0,0,0,0,0,38,192,0,0,0,0,0,100,169,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,192,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,237,185,192,0,0,0,0,0,0,38,192,0,0,0,0,0,0,57,64,0,0,0,0,0,50,170,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,64,0,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,229,187,192,0,0,0,0,0,0,53,64,0,0,0,0,0,0,32,64,0,0,0,0,0,252,167,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,158,184,192,0,0,0,0,0,0,38,192,0,0,0,0,0,0,0,64,0,0,0,0,0,144,169,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,1,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,168,182,64,0,0,0,0,0,0,36,64,0,0,0,0,0,0,0,64,0,0,0,0,0,202,167,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,2,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,43,185,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,192,0,0,0,0,0,160,165,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,254,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,142,182,192,0,0,0,0,0,0,38,192,0,0,0,0,0,0,46,192,0,0,0,0,0,194,167,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,192,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,230,180,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,64,0,0,0,0,0,14,165,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,64,0,0,0,0,255,255,255,255,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,144,178,192,0,0,0,0,0,0,38,192,0,0,0,0,0,0,8,192,0,0,0,0,0,62,165,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,76,179,192,0,0,0,0,0,0,38,192,0,0,0,0,0,0,53,192,0,0,0,0,0,64,165,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,192], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+61440);
/* memory initializer */ allocate([255,255,255,255,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,188,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,192,0,0,0,0,0,128,73,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,194,175,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,64,0,0,0,0,0,60,161,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,185,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,192,0,0,0,0,0,224,104,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,246,171,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,176,157,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,178,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,192,0,0,0,0,0,128,68,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,6,168,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,132,148,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,176,166,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,64,0,0,0,0,0,68,147,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,64,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,176,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,192,0,0,0,0,0,64,84,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,1,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,124,166,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,64,0,0,0,0,0,64,147,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,176,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,0,52,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,255,255,255,255,255,255,255,255,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,6,166,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,64,0,0,0,0,0,220,146,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,175,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,0,68,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,255,255,255,255,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,174,164,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,64,0,0,0,0,0,164,145,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,236,161,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,192,0,0,0,0,0,200,147,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,1,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,98,163,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,192,0,0,0,0,0,152,144,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,6,161,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,164,145,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,255,255,255,255,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,169,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,34,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,170,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,128,65,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,170,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,192,0,0,0,0,0,192,90,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,255,255,255,255,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,12,159,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,192,0,0,0,0,0,196,144,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,244,158,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,138,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,175,64,0,0,0,0,0,0,0,0,0,0,0,0,0,16,118,192,0,0,0,0,0,72,129,192,0,0,0,0,0,0,0,0,0,0,0,0,0,96,97,192,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,240,153,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,192,0,0,0,0,0,48,134,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,255,255,255,255,0,0,0,0,2,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,196,151,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,64,0,0,0,0,0,56,132,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,255,255,255,255,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,136,148,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,133,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,12,148,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,204,148,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,64,0,0,0,0,0,184,132,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,254,255,255,255,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,156,149,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,144,130,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,244,149,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,16,131,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,1,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,40,148,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,129,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,248,146,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,48,128,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,255,255,255,255,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,232,145,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,160,126,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,2,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,216,143,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,120,128,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,2,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,48,145,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,64,0,0,0,0,0,16,125,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,80,142,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,127,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,152,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,192,0,0,0,0,0,0,73,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,48,141,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,240,120,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,4,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,208,140,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,176,120,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,120,137,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,96,122,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,16,138,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,128,123,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,128,147,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,101,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,255,255,255,255,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,148,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,192,0,0,0,0,0,128,67,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,96,134,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,80,120,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,254,255,255,255,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,148,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,55,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,255,255,255,255,255,255,255,255,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,48,135,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,112,120,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,224,143,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,192,0,0,0,0,0,240,126,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,192,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,88,134,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,0,0,0,0,0,96,116,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,208,132,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,16,119,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,216,132,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,160,117,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,134,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,176,133,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,96,114,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,254,255,255,255,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,143,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,1,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,72,130,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,192,115,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,255,255,255,255,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,141,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,32,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,255,255,255,255,1,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,152,130,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,112,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,128,128,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,113,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,112,130,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,128,111,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,255,255,255,255,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,208,129,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,128,110,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,96,127,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,64,111,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,1,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,139,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,61,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,192,126,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,48,113,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,184,128,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,128,108,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,255,255,255,255,255,255,255,255,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,48,125,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,110,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,120,130,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,111,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,252,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,80,124,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,128,110,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,255,255,255,255,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,135,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,34,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,224,123,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,32,108,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,2,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,128,126,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,224,105,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,64,125,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,105,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,80,122,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,107,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,255,255,255,255,1,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,240,124,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,133,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,44,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,132,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,96,123,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,103,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,96,120,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,105,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,131,64,0,0,0,0,0,0,38,192,0,0,0,0,0,0,0,192,0,0,0,0,0,0,51,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,192,121,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,102,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,144,118,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,103,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,128,118,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,32,103,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,130,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,56,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,130,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,20,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,192,120,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,101,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,129,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,24,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,240,116,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,103,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,255,255,255,255,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,80,118,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,64,99,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,16,116,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,192,101,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,208,114,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,64,100,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,224,116,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,126,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,46,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,126,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,51,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,16,117,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,224,97,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,128,113,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,98,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,80,115,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,192,96,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,112,112,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,96,96,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,160,111,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,64,97,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,160,110,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,49,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,160,108,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,224,108,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,48,112,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,64,91,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,2,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,119,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,32,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,128,111,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,160,110,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,90,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,4,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,96,110,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,90,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,106,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,92,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,224,104,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,89,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,106,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,64,90,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,116,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,44,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,116,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,28,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,96,103,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,160,104,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,89,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,104,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,128,87,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,2,0,0,0,253,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,128,103,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,84,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,113,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,113,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,24,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,64,103,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,192,83,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,96,107,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,69,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,113,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,252,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,32,99,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,85,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,128,99,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,84,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,64,99,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,128,83,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,2,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,192,101,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,192,82,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,96,100,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,64,81,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,254,255,255,255,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,108,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,192,86,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,0,0,0,0,0,0,75,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,254,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,224,101,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,82,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,224,99,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,81,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,160,97,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,96,98,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,82,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,128,96,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,81,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,224,99,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,192,0,0,0,0,0,0,75,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,64,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,106,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,192,94,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,128,93,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,128,80,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,98,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,128,78,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,64,94,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,78,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,192,96,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,76,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,255,255,255,255,1,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,64,90,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,76,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,128,89,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,94,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,252,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,64,89,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,64,92,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,77,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+71680);
/* memory initializer */ allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,128,90,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,78,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,32,96,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,128,75,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,128,92,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,76,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,64,92,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,128,72,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,128,89,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,128,87,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,73,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,89,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,76,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,192,85,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,71,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,100,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,88,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,98,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,20,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,254,255,255,255,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,90,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,2,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,128,91,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,89,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,73,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,192,0,0,0,0,0,0,40,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,254,255,255,255,1,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,128,84,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,70,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,128,84,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,70,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,128,83,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,68,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,64,83,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,69,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,128,87,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,4,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,64,87,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,192,84,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,64,0,0,0,0,0,0,68,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,255,255,255,255,0,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,192,84,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,192,86,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,67,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,96,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,192,83,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,254,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,192,84,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,71,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,85,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,192,84,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,69,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,192,86,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,67,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,64,83,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,67,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,85,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,69,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,87,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,128,67,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,87,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,128,67,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,87,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,2,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,81,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,128,78,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,252,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,192,81,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,79,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,128,79,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,64,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,64,82,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,92,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,89,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,128,79,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,128,82,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,89,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,2,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,64,81,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,128,76,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,87,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,80,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,64,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,128,79,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,67,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,253,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,128,69,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,252,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,128,70,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,128,71,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,72,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,128,70,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,76,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,254,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,82,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,85,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,128,72,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,82,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,1,0,0,0,255,255,255,255,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,128,67,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,128,70,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,128,73,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,68,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,128,68,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,69,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,128,73,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,69,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,4,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,128,67,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,71,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,128,74,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,84,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,84,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,16,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,128,71,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,128,74,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,128,70,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,128,64,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,78,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,254,255,255,255,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,60,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,67,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,128,64,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,253,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,78,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,72,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,253,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,59,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,254,255,255,255,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,67,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,252,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,63,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,61,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,60,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,252,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,64,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,252,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,128,70,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,252,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,70,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,254,255,255,255,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,60,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,73,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,66,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,70,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,58,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,128,65,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,59,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,71,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,4,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,66,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,66,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,128,65,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,128,66,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,64,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,128,65,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,64,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,80,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,71,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,64,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,128,66,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,2,0,0,0,4,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,62,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,64,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,63,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,128,66,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,2,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,63,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,72,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,64,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,55,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,6,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,128,69,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,58,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,6,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,64,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,61,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,59,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,1,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,38,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,53,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,65,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,36,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,34,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,40,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,254,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,53,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,46,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,254,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,254,255,255,255,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,64], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+81920);
/* memory initializer */ allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,54,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,44,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,56,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,252,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,38,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,44,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,50,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,48,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,252,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,50,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,252,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,36,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,49,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,34,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,48,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,54,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,252,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,42,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,252,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,49,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,252,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,44,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,255,255,255,255,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,51,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,52,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,34,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,50,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,42,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,40,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,46,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,38,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,42,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,65,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,34,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,4,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,51,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0,252,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,58,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,32,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,4,0,0,0,252,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,36,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,0,0,0,0,4,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,36,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,53,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,34,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,51,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,40,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,54,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,36,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,52,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,4,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,49,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,254,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,46,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,32,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,4,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,40,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,42,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,254,255,255,255,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,44,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,42,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,49,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,40,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,254,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,36,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,36,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,46,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,55,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,40,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,46,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,255,255,255,255,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,40,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,32,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,36,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,53,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,4,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,48,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,2,0,0,0,4,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,51,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,54,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,48,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,2,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,51,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,34,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,34,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,2,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,34,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,32,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,50,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,254,255,255,255,2,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,36,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,2,0,0,0,6,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,55,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,40,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,32,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,56,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,36,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,4,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,48,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,48,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,49,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,56,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,255,255,255,255,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,40,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,56,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,55,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,6,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,42,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,46,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,159,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,154,192,255,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,79,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,192,0,0,0,0,254,255,255,255,2,0,0,0,254,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,2,0,0,0,254,255,255,255,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,118,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,64,255,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,144,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,139,192,255,255,255,255,255,255,255,255,2,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,116,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,20,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,254,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,254,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,28,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,28,64], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+92160);
/* memory initializer */ allocate([16,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,192,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,253,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,2,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,4,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,28,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,4,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,254,255,255,255,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,254,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,252,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,252,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,28,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,20,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,20,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,32,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,24,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,20,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,250,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,252,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,20,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,252,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,34,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,34,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,254,255,255,255,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,250,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,252,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,252,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,252,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,24,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,4,0,0,0,252,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,4,0,0,0,252,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,254,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,253,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,254,255,255,255,4,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,20,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,36,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,64,0,0,0,0,0,0,24,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,192,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,64,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,100,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,97,192,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,82,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,28,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,253,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,4,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,20,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,254,255,255,255,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,24,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,255,255,255,255,0,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,255,255,255,255,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,2,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,192,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,4,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,254,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,4,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,252,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,28,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,32,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4,0,0,0,252,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,254,255,255,255,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,253,255,255,255,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,2,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,32,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,252,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,24,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,32,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,252,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,28,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,24,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,24,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,24,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,20,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,2,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,24,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,192,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,192,255,255,255,255,2,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,4,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,28,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,6,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,254,255,255,255,2,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,24,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,20,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,28,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,2,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+102406);
/* memory initializer */ allocate([2,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,4,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,24,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,1,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,28,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,24,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,255,255,255,255,2,0,0,0,6,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,6,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,20,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,4,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,5,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,24,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,4,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,24,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,24,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,28,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,2,0,0,0,6,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,20,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,24,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,24,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,28,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,24,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,2,0,0,0,6,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,4,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,2,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,66,251,130,164,193,0,0,0,0,80,82,5,193,0,0,0,0,64,77,224,64,0,0,0,172,109,242,149,65,0,0,0,0,0,191,193,64,0,0,0,0,128,8,206,64,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,64,27,31,105,193,0,0,0,0,0,44,154,192,0,0,0,0,0,192,202,192,0,0,0,0,8,220,85,65,0,0,0,0,0,142,167,192,0,0,0,0,0,235,177,192,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,128,30,94,65,193,0,0,0,0,0,64,109,192,0,0,0,0,0,216,165,64,0,0,0,0,54,220,45,65,0,0,0,0,0,80,126,192,0,0,0,0,0,120,149,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,186,167,63,65,0,0,0,0,0,224,105,64,0,0,0,0,0,208,133,192,0,0,0,0,168,99,43,193,0,0,0,0,0,96,125,64,0,0,0,0,0,48,114,192,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,133,54,65,0,0,0,0,0,98,172,192,0,0,0,0,128,20,199,64,0,0,0,0,240,8,242,64,0,0,0,0,0,0,103,192,0,0,0,0,0,16,158,192,0,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,84,139,31,193,0,0,0,0,0,40,147,64,0,0,0,0,0,96,128,192,0,0,0,0,16,100,11,65,0,0,0,0,0,40,133,192,0,0,0,0,0,192,101,192,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,238,179,37,65,0,0,0,0,0,64,82,64,0,0,0,0,0,64,139,192,0,0,0,0,0,94,186,192,0,0,0,0,0,0,0,0,0,0,0,0,0,96,118,64,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,136,163,23,193,0,0,0,0,0,240,118,192,0,0,0,0,0,192,119,64,0,0,0,0,192,128,8,65,0,0,0,0,0,0,50,64,0,0,0,0,0,224,115,64,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,84,102,18,193,0,0,0,0,0,0,66,192,0,0,0,0,0,128,137,64,0,0,0,0,16,128,255,64,0,0,0,0,0,128,79,192,0,0,0,0,0,240,118,64,0,0,0,0,255,255,255,255,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,168,88,10,65,0,0,0,0,0,224,126,192,0,0,0,0,0,192,91,64,0,0,0,0,144,107,247,192,0,0,0,0,0,176,114,64,0,0,0,0,0,128,96,64,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,48,78,255,64,0,0,0,0,0,32,97,64,0,0,0,0,0,160,102,64,0,0,0,0,96,215,240,192,0,0,0,0,0,0,34,192,0,0,0,0,0,128,67,64,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,16,36,254,64,0,0,0,0,0,0,38,64,0,0,0,0,0,0,51,64,0,0,0,0,224,7,234,192,0,0,0,0,0,0,64,64,0,0,0,0,0,0,16,192,255,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,42,3,65,0,0,0,0,0,0,36,64,0,0,0,0,0,0,101,192,0,0,0,0,0,76,147,192,0,0,0,0,0,0,0,0,0,0,0,0,0,128,84,64,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,192,208,238,64,0,0,0,0,0,128,79,64,0,0,0,0,0,0,59,64,0,0,0,0,128,57,224,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,192,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,79,236,192,0,0,0,0,0,128,79,192,0,0,0,0,0,160,103,192,0,0,0,0,64,177,222,64,0,0,0,0,0,0,0,0,0,0,0,0,0,192,82,192,255,255,255,255,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,32,31,237,192,0,0,0,0,0,0,38,192,0,0,0,0,0,160,98,64,0,0,0,0,192,241,216,64,0,0,0,0,0,0,38,192,0,0,0,0,0,128,80,64,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,160,51,233,192,0,0,0,0,0,0,69,192,0,0,0,0,0,32,96,64,0,0,0,0,128,191,217,64,0,0,0,0,0,0,0,0,0,0,0,0,0,128,83,64,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,160,104,230,64,0,0,0,0,0,0,73,64,0,0,0,0,0,0,63,64,0,0,0,0,0,171,215,192,0,0,0,0,0,0,36,192,0,0,0,0,0,0,52,64,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,243,238,64,0,0,0,0,0,0,38,64,0,0,0,0,0,192,98,192,0,0,0,0,0,16,147,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,64,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,96,213,226,192,0,0,0,0,0,0,240,191,0,0,0,0,0,192,99,64,0,0,0,0,0,17,208,64,0,0,0,0,0,0,38,192,0,0,0,0,0,0,81,64,0,0,0,0,254,255,255,255,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,64,184,223,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,203,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,77,231,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,192,0,0,0,0,0,208,125,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,192,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,128,81,222,192,0,0,0,0,0,0,240,191,0,0,0,0,0,96,96,64,0,0,0,0,0,219,201,64,0,0,0,0,0,0,38,192,0,0,0,0,0,128,77,64,1,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,64,236,219,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,25,200,192,0,0,0,0,0,0,36,64,0,0,0,0,0,0,8,192,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,64,246,211,64,0,0,0,0,0,0,53,64,0,0,0,0,0,0,36,64,0,0,0,0,0,3,197,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,142,220,64,0,0,0,0,0,0,0,0,0,0,0,0,0,128,82,192,0,0,0,0,0,8,131,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,64,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,71,217,64,0,0,0,0,0,0,0,0,0,0,0,0,0,128,80,192,0,0,0,0,0,48,129,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,64,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,128,114,203,192,0,0,0,0,0,0,57,192,0,0,0,0,0,192,83,64,0,0,0,0,128,179,192,64,0,0,0,0,0,0,0,192,0,0,0,0,0,128,70,192,255,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,158,205,64,0,0,0,0,0,0,36,64,0,0,0,0,0,0,38,64,0,0,0,0,0,65,191,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,2,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,217,206,192,0,0,0,0,0,0,82,64,0,0,0,0,0,0,48,192,0,0,0,0,0,194,186,64,0,0,0,0,0,0,69,192,0,0,0,0,0,0,20,192,0,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,69,213,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,64,0,0,0,0,0,224,100,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,64,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,128,36,201,192,0,0,0,0,0,0,36,192,0,0,0,0,0,128,66,192,0,0,0,0,0,41,187,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,192,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,183,200,192,0,0,0,0,0,0,38,64,0,0,0,0,0,128,79,64,0,0,0,0,0,15,185,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,64,255,255,255,255,0,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,238,195,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,64,0,0,0,0,0,102,180,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,64,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,80,208,64,0,0,0,0,0,64,85,192,0,0,0,0,0,0,36,192,0,0,0,0,0,0,101,64,0,0,0,0,0,0,240,191,0,0,0,0,0,0,36,64,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,11,190,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,64,0,0,0,0,0,136,169,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,64,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,197,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,192,0,0,0,0,0,0,90,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,142,189,64,0,0,0,0,0,0,53,192,0,0,0,0,0,0,38,192,0,0,0,0,0,100,169,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,192,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,237,185,192,0,0,0,0,0,0,38,192,0,0,0,0,0,0,57,64,0,0,0,0,0,50,170,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,64,0,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,229,187,192,0,0,0,0,0,0,53,64,0,0,0,0,0,0,32,64,0,0,0,0,0,252,167,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,158,184,192,0,0,0,0,0,0,38,192,0,0,0,0,0,0,0,64,0,0,0,0,0,144,169,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,1,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,168,182,64,0,0,0,0,0,0,36,64,0,0,0,0,0,0,0,64,0,0,0,0,0,202,167,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,2,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,43,185,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,192,0,0,0,0,0,160,165,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,254,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,142,182,192,0,0,0,0,0,0,38,192,0,0,0,0,0,0,46,192,0,0,0,0,0,194,167,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,192,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,230,180,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,64,0,0,0,0,0,14,165,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,64,0,0,0,0,255,255,255,255,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,144,178,192,0,0,0,0,0,0,38,192,0,0,0,0,0,0,8,192,0,0,0,0,0,62,165,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,76,179,192,0,0,0,0,0,0,38,192,0,0,0,0,0,0,53,192,0,0,0,0,0,64,165,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,192,255,255,255,255,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,188,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,192,0,0,0,0,0,128,73,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,194,175,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,64,0,0,0,0,0,60,161,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,185,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,192,0,0,0,0,0,224,104,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,246,171,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,176,157,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,178,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,192,0,0,0,0,0,128,68,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,6,168,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,132,148,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,176,166,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,64,0,0,0,0,0,68,147,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,64,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,176,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,192,0,0,0,0,0,64,84,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,1,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,124,166,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,64,0,0,0,0,0,64,147,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,176,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,0,52,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,255,255,255,255,255,255,255,255,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,6,166,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,64,0,0,0,0,0,220,146,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,175,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,0,68,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,255,255,255,255,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,174,164,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,64,0,0,0,0,0,164,145,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,236,161,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,192,0,0,0,0,0,200,147,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,1,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,98,163,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,192,0,0,0,0,0,152,144,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,6,161,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,164,145,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,255,255,255,255,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,169,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,34,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,170,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,128,65,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,170,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,192,0,0,0,0,0,192,90,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,255,255,255,255,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,12,159,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,192,0,0,0,0,0,196,144,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,244,158,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,138,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,175,64,0,0,0,0,0,0,0,0,0,0,0,0,0,16,118,192,0,0,0,0,0,72,129,192,0,0,0,0,0,0,0,0,0,0,0,0,0,96,97,192,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,240,153,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,192,0,0,0,0,0,48,134,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,255,255,255,255,0,0,0,0,2,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,196,151,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,64,0,0,0,0,0,56,132,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,255,255,255,255,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,136,148,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,133,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,12,148,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,204,148,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,64,0,0,0,0,0,184,132,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,254,255,255,255,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,156,149,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,144,130,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,244,149,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,16,131,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,1,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,40,148,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,129,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,224,254,4,193,102,102,102,102,102,198,101,192,0,0,0,0,144,119,246,64,205,204,204,204,204,204,33,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,28,160,64,154,153,153,153,153,153,201,63,0,0,0,0,0,248,139,192,0,0,0,0,0,0,224,63,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,71,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,192,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+112656);
/* memory initializer */ allocate([2,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,128,193,201,192,154,153,153,153,153,153,249,191,0,0,0,0,0,104,182,64,205,204,204,204,204,204,8,192,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,150,64,51,51,51,51,51,51,11,192,0,0,0,0,0,0,75,64,154,153,153,153,153,153,185,191,0,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,40,128,192,51,51,51,51,51,51,243,63,0,0,0,0,0,0,108,64,51,51,51,51,51,51,227,191,0,0,0,0,255,255,255,255,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,32,107,64,0,0,0,0,0,0,224,191,0,0,0,0,0,192,87,192,51,51,51,51,51,51,211,63,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,32,96,64,154,153,153,153,153,153,185,63,0,0,0,0,0,128,81,192,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,64,154,153,153,153,153,153,185,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,46,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,64,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,48,192,154,153,153,153,153,153,185,63,0,0,0,0,0,0,28,64,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,40,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,64,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,24,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,20,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,196,161,192,154,153,153,153,153,153,201,191,0,0,0,0,0,136,142,64,0,0,0,0,0,0,224,191,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,134,64,154,153,153,153,153,153,185,63,0,0,0,0,0,0,28,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,32,120,192,154,153,153,153,153,153,217,191,0,0,0,0,0,0,105,64,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,208,114,192,0,0,0,0,0,0,0,0,0,0,0,0,0,32,96,64,154,153,153,153,153,153,185,191,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,192,99,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,192,94,64,0,0,0,0,0,0,0,0,0,0,0,0,0,128,74,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,79,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,128,79,64,154,153,153,153,153,153,185,63,0,0,0,0,0,128,64,192,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,77,192,154,153,153,153,153,153,185,191,0,0,0,0,0,0,64,64,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,128,77,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,64,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,128,73,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,67,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,64,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,61,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,192,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,63,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,53,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,192,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,48,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,192,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,42,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,64,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,36,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,28,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,28,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,32,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,24,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,24,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,28,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,24,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,20,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,20,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,98,59,253,55,198,216,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,227,35,148,132,37,231,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,174,54,17,1,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,210,240,150,253,96,248,63,76,206,97,227,167,157,244,61,0,0,0,0,0,0,0,0,137,80,54,55,119,207,20,64,143,174,184,210,144,12,192,62,158,119,191,104,24,192,48,190,15,124,187,14,29,28,35,64,157,154,157,30,186,109,246,190,136,22,233,30,74,214,103,62,250,94,195,20,236,55,51,64,225,249,97,21,10,240,152,190,164,2,133,3,163,71,122,62,23,251,89,80,66,28,62,64,215,23,194,151,173,232,187,190,155,7,112,246,39,106,114,62,38,89,3,107,7,136,111,64,180,60,238,173,188,11,244,65,42,145,68,47,163,216,254,191,250,234,79,135,90,191,102,64,129,120,21,245,50,100,223,65,84,53,65,212,125,0,227,63,34,118,191,109,218,29,89,64,2,101,181,243,194,79,211,65,152,105,251,87,86,90,0,192,130,180,247,144,237,54,118,64,253,77,120,75,10,137,196,65,153,216,124,92,27,42,238,63,150,29,234,144,254,44,65,64,186,160,30,111,126,12,154,65,152,250,121,83,145,154,62,192,125,225,223,177,233,9,73,64,48,100,117,20,158,250,132,65,122,112,119,214,110,231,82,64,2,201,9,77,225,160,115,64,202,253,14,126,165,107,109,65,222,176,109,81,102,3,252,191,130,29,65,34,148,5,115,64,108,178,70,205,39,1,94,65,222,200,60,242,7,3,203,63,48,212,55,42,36,82,202,63,244,231,89,148,75,191,42,63,155,15,189,193,230,199,199,190,39,8,130,119,222,188,123,63,194,75,251,37,172,77,63,191,55,255,254,55,39,148,228,62,123,159,204,117,17,28,145,63,49,247,54,165,143,140,59,191,212,8,59,213,250,147,234,190,176,245,75,215,26,233,183,63,7,228,181,67,97,166,77,63,38,40,246,118,97,233,224,190,66,135,228,87,184,212,168,63,181,183,24,154,43,190,90,63,141,193,89,62,145,182,8,191,102,30,164,95,206,112,172,63,142,213,111,168,148,101,108,191,41,7,214,97,99,223,16,191,135,210,34,144,71,191,167,63,216,39,233,106,254,226,49,191,6,240,118,3,156,140,224,62,216,118,254,224,136,93,131,63,4,82,124,226,219,160,15,63,0,0,0,0,0,0,0,0,130,248,233,13,49,93,83,64,155,85,159,171,29,87,182,64,25,202,137,118,21,82,19,192,7,181,223,218,9,114,96,64,200,152,187,150,144,239,101,64,121,30,220,157,181,39,127,192,97,36,205,130,253,187,89,64,97,195,211,43,45,174,198,64,229,155,109,110,76,163,74,64,190,213,223,183,246,0,117,64,32,41,34,195,58,54,207,64,68,139,108,231,251,41,79,192,151,184,101,242,147,169,44,64,177,220,210,106,192,78,190,64,252,198,215,158,89,63,112,64,38,45,100,199,169,67,87,64,94,244,21,164,223,234,211,64,14,21,227,252,77,200,103,64,40,53,40,88,43,160,101,64,217,119,69,240,31,31,169,64,235,57,233,125,227,11,65,192,133,103,91,48,101,15,72,64,153,71,254,96,224,106,144,64,203,243,224,238,172,101,59,64,254,183,146,29,27,5,28,64,87,9,22,135,51,200,106,192,179,41,87,120,151,139,210,63,108,56,52,126,68,40,11,64,57,185,223,161,40,216,62,192,65,212,125,0,82,91,39,192,0,0,0,0,0,0,0,0,176,201,26,245,144,95,125,64,146,34,50,172,226,205,10,192,187,82,34,203,122,152,253,63,50,90,71,85,19,85,114,192,205,59,78,209,145,60,32,192,48,232,16,122,46,218,244,63,0,111,129,4,197,227,81,192,100,35,16,175,235,231,39,64,143,119,30,71,57,233,3,64,241,244,74,89,134,246,86,64,168,198,75,55,137,169,49,192,181,103,125,103,7,190,232,63,197,85,101,223,21,93,78,192,30,109,28,177,22,31,244,63,244,83,152,206,185,81,252,63,58,59,25,28,37,63,32,64,222,147,135,133,90,211,180,63,19,163,0,180,90,42,72,64,103,184,1,159,55,163,177,192,205,30,104,5,134,204,63,192,43,252,248,207,131,43,83,64,220,75,26,163,61,140,195,192,111,245,156,244,190,169,73,192,232,249,79,14,241,219,101,64,102,73,128,154,162,243,192,192,201,89,216,211,14,175,46,64,235,136,42,153,111,199,72,64,207,44,9,80,115,190,196,192,124,213,202,132,95,210,108,192,179,187,56,216,184,29,89,64,105,169,188,29,9,218,184,64,79,59,252,53,89,104,116,64,143,179,225,151,151,106,92,64,22,53,152,134,25,12,194,192,183,69,153,13,50,143,80,192,114,200,130,153,97,128,82,64,55,195,13,248,76,218,164,64,110,192,231,135,17,62,98,64,45,99,191,254,22,121,96,64,220,157,181,219,46,190,107,192,168,111,153,211,101,49,233,191,0,0,0,0,208,254,240,64,0,0,0,0,208,119,242,64,0,0,0,0,32,143,245,64,0,0,0,0,96,63,237,64,0,0,0,0,0,193,206,64,0,0,0,0,240,90,241,64,0,0,0,0,232,90,1,65,0,0,0,0,0,28,168,64,0,0,0,0,0,0,0,0,0,0,0,0,192,89,213,64,0,0,0,0,64,3,224,64,0,0,0,0,128,77,218,64,0,0,0,0,128,89,197,64,0,0,0,0,128,162,217,64,0,0,0,0,160,89,229,64,0,0,0,0,96,77,234,64,0,0,0,0,192,66,220,64,0,0,0,0,0,0,0,0,0,0,0,0,0,65,207,64,0,0,0,0,192,89,213,64,0,0,0,0,0,65,223,64,0,0,0,0,128,89,197,64,0,0,0,0,128,96,204,64,0,0,0,0,0,248,207,64,0,0,0,0,0,235,205,64,0,0,0,0,64,3,224,64,0,0,0,0,0,0,0,0,0,0,0,0,0,201,184,64,0,0,0,0,0,138,190,64,0,0,0,0,0,138,206,64,0,0,0,0,0,165,187,64,0,0,0,0,0,248,191,64,0,0,0,0,128,169,203,64,0,0,0,0,0,76,145,64,0,0,0,0,0,8,179,64,0,0,0,0,0,0,0,0,0,0,0,0,0,128,155,64,0,0,0,0,0,184,150,64,0,0,0,0,0,60,146,64,0,0,0,0,0,128,139,64,0,0,0,0,0,240,113,64,0,0,0,0,0,160,164,64,0,0,0,0,0,0,51,64,0,0,0,0,0,252,159,64,0,0,0,0,0,184,150,64,0,0,0,0,0,240,129,64,0,0,0,0,0,0,0,0,0,0,0,0,0,128,139,64,0,0,0,0,0,240,113,64,0,0,0,0,0,0,51,64,0,0,0,0,0,128,155,64,0,0,0,0,0,60,146,64,0,0,0,0,0,32,115,64,0,0,0,0,0,240,129,64,0,0,0,0,0,128,105,64,0,0,0,0,0,0,0,0,0,0,0,0,0,32,102,64,0,0,0,0,0,196,147,64,0,0,0,0,0,0,16,64,0,0,0,0,0,16,120,64,0,0,0,0,0,0,105,64,0,0,0,0,0,0,106,64,0,0,0,0,0,128,105,64,0,0,0,0,0,0,0,0,0,0,0,0,0,128,89,64,0,0,0,0,0,128,90,64,0,0,0,0,0,0,16,64,0,0,0,0,0,128,88,64,0,0,0,0,0,92,149,64,0,0,0,0,0,112,126,64,0,0,0,0,0,128,105,64,0,0,0,0,0,0,0,0,0,0,0,0,0,28,168,64,0,0,0,0,0,193,206,64,0,0,0,0,208,254,240,64,0,0,0,0,96,63,237,64,0,0,0,0,208,119,242,64,0,0,0,0,32,143,245,64,0,0,0,0,128,186,200,64,0,0,0,0,0,196,164,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,89,213,64,0,0,0,0,64,3,224,64,0,0,0,0,128,89,197,64,0,0,0,0,0,64,82,64,0,0,0,0,0,35,177,64,0,0,0,0,128,77,218,64,0,0,0,0,0,4,151,64,0,0,0,0,0,218,160,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,64,0,0,0,0,0,65,207,64,0,0,0,0,192,89,213,64,0,0,0,0,128,89,197,64,0,0,0,0,0,4,151,64,0,0,0,0,0,65,223,64,0,0,0,0,0,35,177,64,0,0,0,0,0,64,82,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,64,0,0,0,0,0,201,184,64,0,0,0,0,0,138,190,64,0,0,0,0,0,76,145,64,0,0,0,0,0,138,206,64,0,0,0,0,0,165,187,64,0,0,0,0,0,248,191,64,0,0,0,0,0,160,128,64,0,0,0,0,0,0,36,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,64,0,0,0,0,0,128,155,64,0,0,0,0,0,184,150,64,0,0,0,0,0,240,113,64,0,0,0,0,0,60,146,64,0,0,0,0,0,128,139,64,0,0,0,0,0,240,129,64,0,0,0,0,0,160,164,64,0,0,0,0,0,0,51,64,0,0,0,0,0,184,150,64,0,0,0,0,0,0,51,64,0,0,0,0,0,240,129,64,0,0,0,0,0,240,113,64,0,0,0,0,0,32,115,64,0,0,0,0,0,128,155,64,0,0,0,0,0,0,40,64,0,0,0,0,0,0,63,64,0,0,0,0,0,0,67,64,0,0,0,0,0,0,51,64,0,0,0,0,0,240,129,64,0,0,0,0,0,0,16,64,0,0,0,0,0,128,105,64,0,0,0,0,0,32,102,64,0,0,0,0,0,0,32,64,0,0,0,0,0,0,63,64,0,0,0,0,0,0,105,64,0,0,0,0,0,196,147,64,0,0,0,0,0,128,89,64,0,0,0,0,0,0,16,64,0,0,0,0,0,128,105,64,0,0,0,0,0,0,16,64,0,0,0,0,0,128,89,64,0,0,0,0,0,128,90,64,0,0,0,0,0,0,32,64,0,0,0,0,0,128,88,64,0,0,0,0,0,92,149,64,0,0,0,0,0,112,126,64,0,0,0,0,0,128,105,64,0,0,0,0,0,0,16,64,0,0,0,0,0,128,89,64,0,0,0,0,0,0,16,64,0,0,0,0,0,0,42,192,0,0,0,0,0,0,38,64,0,0,0,0,0,0,34,192,0,0,0,0,0,0,34,192,0,0,0,0,0,0,8,192,0,0,0,0,0,0,240,191,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,128,99,192,0,0,0,0,0,128,77,64,0,0,0,0,0,0,69,192,0,0,0,0,0,0,24,64,0,0,0,0,0,0,51,64,0,0,0,0,0,0,52,192,0,0,0,0,0,0,36,192,0,0,0,0,0,0,40,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,64,0,0,0,0,0,0,99,192,0,0,0,0,0,0,79,64,0,0,0,0,0,0,32,192,0,0,0,0,0,0,64,64,0,0,0,0,0,128,68,192,0,0,0,0,0,0,51,64,0,0,0,0,0,0,38,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,64,0,0,0,0,0,104,131,64,0,0,0,0,0,32,98,192,0,0,0,0,0,0,106,64,0,0,0,0,0,0,75,64,0,0,0,0,0,128,76,192,0,0,0,0,0,0,62,64,0,0,0,0,0,0,46,64,0,0,0,0,0,0,0,0,0,0,0,0,64,227,214,192,0,0,0,0,0,148,164,192,0,0,0,0,0,201,185,64,0,0,0,0,0,115,184,64,0,0,0,0,0,140,151,192,0,0,0,0,0,116,156,192,0,0,0,0,0,120,164,64,0,0,0,0,0,134,160,192,0,0,0,0,0,68,151,192,0,0,0,0,224,183,238,64,0,0,0,0,240,70,253,192,0,0,0,0,128,94,243,64,0,0,0,0,128,101,209,64,0,0,0,0,64,172,215,192,0,0,0,0,0,146,199,64,0,0,0,0,0,57,192,64,0,0,0,0,0,29,179,192,0,0,0,0,0,99,193,64,0,0,0,0,20,191,23,65,0,0,0,0,104,255,15,193,0,0,0,0,0,135,229,192,0,0,0,0,128,97,192,64,0,0,0,0,0,112,214,192,0,0,0,0,0,90,160,192,0,0,0,0,0,56,131,192,0,0,0,0,0,252,194,192,0,0,0,0,0,233,185,64,0,0,0,0,44,41,25,193,0,0,0,0,176,43,3,193,0,0,0,0,128,177,222,192,0,0,0,0,32,119,226,64,0,0,0,0,0,6,195,192,0,0,0,0,0,0,42,192,0,0,0,0,0,25,189,192,0,0,0,0,0,214,194,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,192,0,0,0,0,0,0,240,191,0,0,0,0,0,0,34,64,0,0,0,0,0,0,24,64,0,0,0,0,0,0,24,192,0,0,0,0,0,0,20,64,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,192,0,0,0,0,0,64,95,192,0,0,0,0,0,0,58,192,0,0,0,0,0,128,66,192,0,0,0,0,0,0,50,64,0,0,0,0,0,0,42,192,0,0,0,0,0,0,52,192,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,192,98,192,0,0,0,0,0,0,71,192,0,0,0,0,0,0,81,64,0,0,0,0,0,0,75,64,0,0,0,0,0,0,44,64,0,0,0,0,0,0,56,64,0,0,0,0,0,0,60,192,0,0,0,0,0,0,54,64,0,0,0,0,0,0,0,0,0,0,0,0,0,104,131,192,0,0,0,0,0,160,128,64,0,0,0,0,0,176,133,192,0,0,0,0,0,0,52,192,0,0,0,0,0,0,104,64,0,0,0,0,0,128,87,192,0,0,0,0,0,192,81,64,0,0,0,0,0,64,82,192,0,0,0,0,0,0,0,0,0,0,0,0,0,139,204,192,0,0,0,0,0,93,211,192,0,0,0,0,0,237,182,192,0,0,0,0,0,100,157,64,0,0,0,0,0,20,177,192,0,0,0,0,0,158,161,192,0,0,0,0,0,112,136,64,0,0,0,0,0,16,141,64,0,0,0,0,0,136,140,64,0,0,0,0,200,14,1,65,0,0,0,0,0,0,0,0,0,0,0,0,192,22,216,64,0,0,0,0,96,246,232,64,0,0,0,0,0,238,179,192,0,0,0,0,0,5,189,64,0,0,0,0,0,254,175,192,0,0,0,0,0,224,158,192,0,0,0,0,0,175,194,192,0,0,0,0,8,219,0,193,0,0,0,0,0,0,0,0,0,0,0,0,160,42,226,64,0,0,0,0,224,241,231,192,0,0,0,0,160,117,228,192,0,0,0,0,0,138,224,192,0,0,0,0,64,103,218,192,0,0,0,0,0,93,200,192,0,0,0,0,64,91,210,64,0,0,0,0,0,0,0,0,0,0,0,0,0,211,219,64,0,0,0,0,160,67,0,65,0,0,0,0,96,1,241,64,0,0,0,0,64,140,233,64,0,0,0,0,32,53,232,192,0,0,0,0,128,207,217,192,0,0,0,0,0,18,172,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,64,0,0,0,0,0,192,87,192,0,0,0,0,0,160,99,192,0,0,0,0,0,128,68,64,0,0,0,0,0,0,20,192,0,0,0,0,0,0,69,64,0,0,0,0,0,0,55,64,0,0,0,0,0,0,62,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,192,0,0,0,0,0,144,115,192,0,0,0,0,0,96,109,192,0,0,0,0,0,0,78,64,0,0,0,0,0,128,82,192,0,0,0,0,0,0,83,192,0,0,0,0,0,0,59,192,0,0,0,0,0,0,65,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,116,192,0,0,0,0,0,32,116,192,0,0,0,0,0,192,83,192,0,0,0,0,0,0,109,64,0,0,0,0,0,0,74,192,0,0,0,0,0,64,88,64,0,0,0,0,0,128,75,64,0,0,0,0,0,128,68,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,161,64,0,0,0,0,0,152,142,192,0,0,0,0,0,16,137,64,0,0,0,0,0,208,130,64,0,0,0,0,0,224,132,192,0,0,0,0,0,128,64,192,0,0,0,0,0,144,117,64,0,0,0,0,0,32,105,64,0,0,0,0,0,128,75,192,0,0,0,0,0,0,0,0,0,0,0,0,0,186,189,64,0,0,0,0,0,133,179,192,0,0,0,0,0,9,190,192,0,0,0,0,0,209,182,192,0,0,0,0,0,114,164,192,0,0,0,0,0,108,145,64,0,0,0,0,0,96,135,192,0,0,0,0,0,248,130,192,0,0,0,0,0,186,183,64,0,0,0,0,0,32,118,64,0,0,0,0,64,29,210,192,0,0,0,0,64,107,221,64,0,0,0,0,0,139,211,64,0,0,0,0,0,208,134,192,0,0,0,0,0,192,137,64,0,0,0,0,0,0,55,64,0,0,0,0,0,36,148,64,0,0,0,0,0,0,118,192,0,0,0,0,128,215,204,192,0,0,0,0,0,28,160,192,0,0,0,0,104,130,0,193,0,0,0,0,0,129,204,192,0,0,0,0,0,101,176,64,0,0,0,0,0,124,175,192,0,0,0,0,0,254,181,192,0,0,0,0,0,164,166,192,0,0,0,0,0,216,163,64,0,0,0,0,0,32,115,192,0,0,0,0,0,246,166,64,0,0,0,0,0,8,159,64,0,0,0,0,192,245,245,64,0,0,0,0,0,110,160,64,0,0,0,0,128,129,193,64,0,0,0,0,0,14,165,64,0,0,0,0,0,196,172,64,0,0,0,0,0,192,153,64,0,0,0,0,0,16,139,64,0,0,0,0,0,64,99,192,0,0,0,0,0,172,158,192,0,0,0,0,0,176,113,192,0,0,0,0,0,96,117,192,0,0,0,0,0,0,97,64,0,0,0,0,0,0,55,192,0,0,0,0,0,0,79,64,0,0,0,0,0,128,80,64,0,0,0,0,0,0,74,192,0,0,0,0,0,128,64,192,0,0,0,0,0,0,49,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,128,64,0,0,0,0,0,160,98,192,0,0,0,0,0,128,65,192,0,0,0,0,0,64,93,64,0,0,0,0,0,224,98,64,0,0,0,0,0,128,94,64,0,0,0,0,0,192,81,192,0,0,0,0,0,0,79,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,90,192,0,0,0,0,0,32,97,192,0,0,0,0,0,32,112,64,0,0,0,0,0,128,65,64,0,0,0,0,0,0,93,192,0,0,0,0,0,0,86,192,0,0,0,0,0,0,92,192,0,0,0,0,0,0,84,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,138,64,0,0,0,0,0,160,105,192,0,0,0,0,0,64,141,192,0,0,0,0,0,0,110,192,0,0,0,0,0,128,97,64,0,0,0,0,0,80,117,192,0,0,0,0,0,64,88,192,0,0,0,0,0,0,109,192,0,0,0,0,0,192,128,64,0,0,0,0,0,0,0,0,0,0,0,0,128,210,235,192,0,0,0,0,0,80,191,64,0,0,0,0,0,160,143,64,0,0,0,0,0,160,150,64,0,0,0,0,0,160,167,192,0,0,0,0,0,252,172,192,0,0,0,0,0,224,115,64,0,0,0,0,0,112,127,64], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+122896);
/* memory initializer */ allocate([0,0,0,0,0,110,173,64,0,0,0,0,0,8,130,64,0,0,0,0,112,235,0,65,0,0,0,0,0,83,202,192,0,0,0,0,0,100,179,192,0,0,0,0,0,132,150,64,0,0,0,0,0,156,148,192,0,0,0,0,0,40,151,192,0,0,0,0,0,176,122,64,0,0,0,0,0,80,147,64,0,0,0,0,128,231,193,192,0,0,0,0,0,248,157,192,0,0,0,0,32,100,241,64,0,0,0,0,128,19,228,192,0,0,0,0,0,214,180,64,0,0,0,0,0,71,179,192,0,0,0,0,0,224,156,192,0,0,0,0,0,128,80,64,0,0,0,0,0,32,123,64,0,0,0,0,0,80,155,192,0,0,0,0,0,136,173,64,0,0,0,0,0,232,133,192,0,0,0,0,160,67,231,192,0,0,0,0,128,191,198,64,0,0,0,0,0,236,160,64,0,0,0,0,0,244,168,64,0,0,0,0,0,56,133,64,0,0,0,0,0,0,0,0,0,0,0,0,0,128,110,192,0,0,0,0,0,48,122,192,0,0,0,0,0,198,163,192,0,0,0,0,0,0,72,64,0,0,0,0,108,250,86,65,0,0,0,0,46,239,24,65,0,0,0,0,18,19,20,65,0,0,0,0,43,164,71,65,82,184,30,133,107,93,144,64,0,0,0,0,0,85,171,64,0,0,0,0,64,85,214,64,0,0,0,0,128,220,210,64,231,52,11,180,59,164,24,63,219,128,116,86,176,50,111,63,78,180,138,130,9,113,31,191,13,67,22,47,55,148,178,191,169,41,110,129,169,11,253,62,226,64,39,8,71,94,240,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,36,154,31,3,162,101,191,231,42,171,35,38,44,154,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,182,217,22,109,167,16,191,58,140,48,226,142,121,85,62,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,52,11,180,59,164,232,190,58,140,48,226,142,121,69,190,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,165,29,171,82,130,231,190,58,140,48,226,142,121,69,190,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,85,228,8,0,43,211,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,78,122,190,234,241,192,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,140,241,130,4,156,192,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,60,241,255,87,219,188,62,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,122,41,101,231,167,183,62,58,140,48,226,142,121,69,62,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,9,202,167,166,168,35,181,62,58,140,48,226,142,121,69,62,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,9,202,167,166,168,35,165,62,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,202,167,166,168,35,165,62,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,147,201,37,101,189,222,158,190,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,69,20,238,240,50,158,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,252,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,193,157,118,190,192,40,152,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,248,255,255,255,12,0,0,0,0,0,0,0,43,105,164,41,43,27,144,62,43,105,164,41,43,27,128,62,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,140,48,226,142,121,149,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,122,234,5,93,202,146,190,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,246,216,142,144,30,146,190,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,239,113,199,23,196,114,145,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,184,223,136,139,47,140,62,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,2,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,133,166,153,172,89,128,137,190,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,2,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,193,157,118,190,192,40,136,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,243,255,255,255,255,255,255,255,72,175,188,154,242,215,122,62,72,175,188,154,242,215,106,190,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,118,131,13,244,245,33,132,190,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,179,122,234,5,93,202,130,62,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,122,234,5,93,202,130,62,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,122,234,5,93,202,130,190,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,179,122,234,5,93,202,130,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,254,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,239,113,199,23,196,114,129,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,192,2,119,36,135,125,62,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,208,192,2,119,36,135,125,190,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,208,192,2,119,36,135,125,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,122,234,5,93,202,114,190,141,179,109,65,132,242,205,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,219,44,226,100,176,188,62,43,105,164,41,43,27,96,190,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,105,164,41,43,27,160,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,214,76,132,46,93,72,63,253,148,83,208,39,209,134,190,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,211,228,181,84,214,13,63,43,105,164,41,43,27,112,62,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,166,90,77,207,162,228,62,58,140,48,226,142,121,69,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,117,252,188,78,143,226,190,58,140,48,226,142,121,69,62,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,188,126,218,11,121,194,218,190,72,175,188,154,242,215,106,190,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,56,64,89,198,192,201,190,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,74,8,119,227,180,194,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,86,27,107,152,4,188,62,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,78,185,29,117,207,181,62,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,2,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,196,139,174,160,163,52,175,62,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,148,83,208,39,209,166,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,184,97,202,118,116,162,190,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,32,52,80,83,170,200,161,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,246,216,142,144,30,146,190,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,246,216,142,144,30,146,190,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,254,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,239,113,199,23,196,114,145,190,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,141,237,181,160,247,198,144,190,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,192,2,119,36,135,141,62,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,184,223,136,139,47,140,190,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,72,175,188,154,242,215,138,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,148,83,208,39,209,134,62,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,239,113,199,23,196,114,129,62,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,239,113,199,23,196,114,129,190,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,105,164,41,43,27,128,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,192,2,119,36,135,125,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,118,131,13,244,245,33,148,62,249,122,231,229,234,166,248,190,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,105,164,41,43,27,96,190,71,184,160,41,1,82,183,190,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,140,48,226,142,121,69,190,43,105,164,41,43,27,144,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,192,2,119,36,135,141,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,239,113,199,23,196,114,145,190,58,140,48,226,142,121,69,190,231,52,11,180,59,164,24,63,71,33,36,102,81,51,111,63,0,186,253,44,117,20,32,191,150,126,252,132,55,148,178,191,148,211,133,245,210,86,253,62,243,134,3,58,246,96,240,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,36,154,31,3,162,101,191,231,42,171,35,38,44,154,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,182,217,22,109,167,16,191,58,140,48,226,142,121,85,62,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,52,11,180,59,164,232,190,58,140,48,226,142,121,69,190,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,165,29,171,82,130,231,190,58,140,48,226,142,121,69,190,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,85,228,8,0,43,211,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,78,122,190,234,241,192,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,140,241,130,4,156,192,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,60,241,255,87,219,188,62,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,122,41,101,231,167,183,62,58,140,48,226,142,121,69,62,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,9,202,167,166,168,35,181,62,58,140,48,226,142,121,69,62,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,9,202,167,166,168,35,165,62,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,202,167,166,168,35,165,62,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,147,201,37,101,189,222,158,190,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,69,20,238,240,50,158,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,252,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,193,157,118,190,192,40,152,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,248,255,255,255,12,0,0,0,0,0,0,0,43,105,164,41,43,27,144,62,43,105,164,41,43,27,128,62,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,140,48,226,142,121,149,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,122,234,5,93,202,146,190,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,246,216,142,144,30,146,190,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,239,113,199,23,196,114,145,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,184,223,136,139,47,140,62,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,2,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,133,166,153,172,89,128,137,190,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,2,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,193,157,118,190,192,40,136,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,243,255,255,255,255,255,255,255,72,175,188,154,242,215,122,62,72,175,188,154,242,215,106,190,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,118,131,13,244,245,33,132,190,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,179,122,234,5,93,202,130,62,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,122,234,5,93,202,130,62,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,122,234,5,93,202,130,190,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,179,122,234,5,93,202,130,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,254,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,239,113,199,23,196,114,129,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,192,2,119,36,135,125,62,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,208,192,2,119,36,135,125,190,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,208,192,2,119,36,135,125,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,122,234,5,93,202,114,190,141,179,109,65,132,242,205,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,157,181,29,75,6,189,62,43,105,164,41,43,27,96,190,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,105,164,41,43,27,160,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,244,189,10,25,93,72,63,253,148,83,208,39,209,134,190,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,211,228,181,84,214,13,63,43,105,164,41,43,27,112,62,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,166,90,77,207,162,228,62,58,140,48,226,142,121,69,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,117,252,188,78,143,226,190,58,140,48,226,142,121,69,62,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,188,126,218,11,121,194,218,190,72,175,188,154,242,215,106,190,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,56,64,89,198,192,201,190,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,74,8,119,227,180,194,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,86,27,107,152,4,188,62,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,78,185,29,117,207,181,62,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,2,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,196,139,174,160,163,52,175,62,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,148,83,208,39,209,166,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,184,97,202,118,116,162,190,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,32,52,80,83,170,200,161,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,246,216,142,144,30,146,190,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,246,216,142,144,30,146,190,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,254,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,239,113,199,23,196,114,145,190,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,141,237,181,160,247,198,144,190,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,192,2,119,36,135,141,62,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,184,223,136,139,47,140,190,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,72,175,188,154,242,215,138,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,148,83,208,39,209,134,62,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,239,113,199,23,196,114,129,62,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,239,113,199,23,196,114,129,190,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,105,164,41,43,27,128,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,192,2,119,36,135,125,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,118,131,13,244,245,33,148,62,91,4,41,37,194,142,248,190,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,105,164,41,43,27,96,190,242,95,255,249,166,126,184,190,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,140,48,226,142,121,69,190,141,237,181,160,247,198,144,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,147,201,37,101,189,222,142,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,239,113,199,23,196,114,145,190,58,140,48,226,142,121,69,190,226,3,59,254,11,4,145,191,172,200,232,128,196,80,159,64,141,82,248,34,144,129,219,191,148,200,87,101,83,108,201,191,191,218,96,199,208,200,223,62,197,118,219,171,173,221,216,62,81,188,202,218,166,120,124,191,151,140,99,36,123,132,154,191,251,252,156,39,67,104,54,192,93,160,40,249,166,35,95,63,244,255,76,178,69,58,82,63,15,206,178,110,13,58,130,62,195,245,40,156,231,27,90,193,133,235,81,136,190,142,97,65,72,225,122,20,174,194,148,64,31,133,235,81,184,8,152,64,20,174,71,225,72,32,9,65,31,133,235,81,142,174,2,65,41,92,143,194,117,219,169,192,195,245,40,92,143,170,138,64,82,184,30,133,235,215,159,64,215,163,112,61,138,250,161,192,61,10,215,163,112,93,84,64,164,112,61,10,215,35,94,64,164,112,61,10,215,99,52,192,113,61,10,215,163,112,46,192,174,71,225,122,20,174,251,63,195,245,40,92,143,194,249,191,154,153,153,153,153,153,185,191,41,92,143,194,245,40,188,63,123,20,174,71,225,122,148,191,123,20,174,71,225,122,148,191,143,194,245,40,16,250,31,193,113,61,10,215,210,124,33,65,0,0,0,0,0,6,129,192,195,245,40,92,143,170,124,192,123,20,174,71,1,7,201,64,133,235,81,184,62,225,198,64,215,163,112,61,10,223,104,64,195,245,40,92,143,46,114,192,72,225,122,20,174,119,99,64,113,61,10,215,163,232,97,192,0,0,0,0,0,0,6,192,123,20,174,71,225,122,240,191,82,184,30,133,235,81,244,191,143,194,245,40,92,143,242,191,0,0,0,0,0,0,0,0,123,20,174,71,225,122,132,191,82,184,30,133,131,27,246,192,164,112,61,10,107,227,247,64,31,133,235,81,184,206,91,64,133,235,81,184,30,45,97,64,184,30,133,235,209,23,161,64,31,133,235,81,184,162,159,64,184,30,133,235,81,184,68,64,225,122,20,174,71,161,73,192,236,81,184,30,133,235,58,64,246,40,92,143,194,117,56,192,113,61,10,215,163,112,221,191,236,81,184,30,133,235,209,191,41,92,143,194,245,40,204,191,154,153,153,153,153,153,201,191,143,194,245,40,140,15,244,64,113,61,10,215,35,225,245,192,164,112,61,10,215,163,59,192,205,204,204,204,204,12,61,192,61,10,215,163,112,81,159,192,225,122,20,174,71,181,156,192,41,92,143,194,245,8,66,192,0,0,0,0,0,0,72,64,174,71,225,122,20,110,56,192,41,92,143,194,245,104,54,64,20,174,71,225,122,20,222,63,184,30,133,235,81,184,206,63,154,153,153,153,153,153,201,63,10,215,163,112,61,10,199,63,61,10,215,163,96,170,236,64,236,81,184,30,5,219,188,64,205,204,204,204,204,96,125,64,205,204,204,204,204,12,104,192,195,245,40,92,143,138,100,64,164,112,61,10,215,128,148,192,143,194,245,40,92,119,102,192,174,71,225,122,20,238,60,192,92,143,194,245,40,92,49,192,72,225,122,20,174,71,253,191,0,0,0,0,0,0,224,191,143,194,245,40,92,143,12,64,0,0,0,0,0,0,0,0,164,112,61,10,215,163,192,63,184,30,133,235,113,19,212,192,20,174,71,225,154,233,213,64,215,163,112,61,10,215,52,192,102,102,102,102,102,102,49,192,133,235,81,184,30,93,127,64,123,20,174,71,225,186,124,64,154,153,153,153,153,153,77,64,51,51,51,51,51,211,80,192,82,184,30,133,235,81,24,64,113,61,10,215,163,112,22,192,195,245,40,92,143,194,245,191,10,215,163,112,61,10,243,191,184,30,133,235,17,160,219,64,82,184,30,133,235,23,133,192,184,30,133,235,81,88,65,192,102,102,102,102,102,230,65,64,164,112,61,10,215,35,46,192,184,30,133,235,81,196,131,192,225,122,20,174,71,97,38,192,246,40,92,143,194,245,232,63,82,184,30,133,235,209,32,192,195,245,40,92,143,194,197,63,123,20,174,71,225,122,132,63,236,81,184,30,133,235,177,63,205,204,204,204,108,23,206,192,0,0,0,0,96,153,211,64,61,10,215,163,112,61,46,64,205,204,204,204,204,204,63,64,92,143,194,245,40,12,124,64,0,0,0,0,0,136,117,64,20,174,71,225,122,20,23,192,143,194,245,40,92,143,246,63,92,143,194,245,40,92,18,64,20,174,71,225,122,20,20,192,195,245,40,92,143,194,197,63,184,30,133,235,81,184,206,63,133,235,81,184,222,107,199,192,174,71,225,122,84,51,201,64,123,20,174,71,225,58,64,64,154,153,153,153,153,89,66,64,164,112,61,10,215,7,114,64,10,215,163,112,61,194,112,64,205,204,204,204,204,204,22,64,61,10,215,163,112,61,28,192,143,194,245,40,92,143,12,64,215,163,112,61,10,215,9,192,184,30,133,235,81,184,174,191,123,20,174,71,225,122,164,191,154,153,153,153,121,196,192,192,143,194,245,40,92,188,194,192,174,71,225,122,20,174,17,64,102,102,102,102,102,102,42,192,0,0,0,0,0,208,106,192,82,184,30,133,235,1,104,64,31,133,235,81,184,222,55,64,20,174,71,225,122,212,61,64,82,184,30,133,235,81,4,64,51,51,51,51,51,51,3,64,51,51,51,51,51,51,227,63,184,30,133,235,81,184,222,191,0,0,0,0,128,231,179,64,31,133,235,81,56,6,187,192,195,245,40,92,143,194,28,64,92,143,194,245,40,92,15,64,133,235,81,184,30,93,99,192,92,143,194,245,40,124,92,192,225,122,20,174,71,225,6,64,164,112,61,10,215,163,240,191,82,184,30,133,235,81,248,191,174,71,225,122,20,174,251,63,236,81,184,30,133,235,177,191,154,153,153,153,153,153,185,191,72,225,122,20,238,46,179,192,123,20,174,71,33,211,180,192,82,184,30,133,235,81,232,63,154,153,153,153,153,153,217,63,61,10,215,163,112,205,93,192,164,112,61,10,215,115,91,64,72,225,122,20,174,71,1,64,154,153,153,153,153,153,9,64,92,143,194,245,40,92,247,63,72,225,122,20,174,71,245,63,123,20,174,71,225,122,164,63,123,20,174,71,225,122,148,191,236,81,184,30,5,101,184,192,31,133,235,81,184,222,94,192,184,30,133,235,81,184,26,192,102,102,102,102,102,102,32,192,20,174,71,225,122,20,6,192,20,174,71,225,122,116,97,64,174,71,225,122,20,174,5,64,51,51,51,51,51,51,195,63,195,245,40,92,143,194,253,63,51,51,51,51,179,159,163,64,225,122,20,174,199,247,169,192,31,133,235,81,184,30,241,63,205,204,204,204,204,204,236,191,133,235,81,184,30,149,82,192,246,40,92,143,194,21,76,192,143,194,245,40,92,143,242,63,123,20,174,71,225,122,132,191,0,0,0,0,0,0,232,191,143,194,245,40,92,143,234,63,123,20,174,71,225,122,148,191,123,20,174,71,225,122,164,191,92,143,194,245,40,7,162,64,41,92,143,194,245,143,168,64,20,174,71,225,122,20,30,192,0,0,0,0,0,0,30,64,164,112,61,10,215,147,81,64,205,204,204,204,204,204,73,192,92,143,194,245,40,92,247,63,123,20,174,71,225,122,196,63,20,174,71,225,122,20,230,191,72,225,122,20,174,71,233,191,123,20,174,71,225,122,148,63,154,153,153,153,153,153,169,191,92,143,194,245,40,137,162,64,236,81,184,30,5,245,163,64,184,30,133,235,81,184,23,64,102,102,102,102,102,102,26,192,143,194,245,40,92,143,76,64,102,102,102,102,102,134,74,192,184,30,133,235,81,184,238,191,215,163,112,61,10,215,243,191,184,30,133,235,81,184,230,191,123,20,174,71,225,122,228,191,123,20,174,71,225,122,132,191,184,30,133,235,81,10,160,192,246,40,92,143,66,152,164,64,133,235,81,184,30,133,20,64,51,51,51,51,51,51,31,64,184,30,133,235,81,120,77,64,20,174,71,225,122,244,70,64,225,122,20,174,71,225,218,191,184,30,133,235,81,184,190,191,133,235,81,184,30,133,227,63,31,133,235,81,184,30,229,191,123,20,174,71,225,122,148,63,184,30,133,235,81,184,158,63,41,92,143,194,245,133,156,192,72,225,122,20,46,239,162,192,174,71,225,122,20,174,243,63,0,0,0,0,0,0,0,192,184,30,133,235,81,24,75,192,41,92,143,194,245,104,68,64,31,133,235,81,184,30,241,191,82,184,30,133,235,81,240,191,72,225,122,20,174,71,225,63,133,235,81,184,30,133,227,63,123,20,174,71,225,122,164,191,123,20,174,71,225,122,164,63,113,61,10,215,35,178,163,64,82,184,30,133,235,145,94,192,225,122,20,174,71,225,23,192,51,51,51,51,51,51,7,64,215,163,112,61,10,215,5,192,143,194,245,40,92,47,76,192,61,10,215,163,112,61,234,191,164,112,61,10,215,163,192,63,0,0,0,0,0,0,232,191,143,194,245,40,92,248,151,192,215,163,112,61,10,180,153,64,41,92,143,194,245,40,25,64,51,51,51,51,51,51,27,64,164,112,61,10,215,99,66,64,102,102,102,102,102,38,65,64,113,61,10,215,163,112,237,63,0,0,0,0,0,0,244,191,113,61,10,215,163,112,221,63,61,10,215,163,112,61,218,191,123,20,174,71,225,122,148,191,123,20,174,71,225,122,132,191,174,71,225,122,20,169,157,64,154,153,153,153,153,217,71,64,10,215,163,112,61,10,231,191,0,0,0,0,0,0,4,64,31,133,235,81,184,30,241,63,154,153,153,153,153,57,69,192,20,174,71,225,122,20,238,191,123,20,174,71,225,122,148,63,236,81,184,30,133,235,225,191,174,71,225,122,20,48,148,192,0,0,0,0,0,172,149,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,195,245,40,92,143,2,63,192,164,112,61,10,215,227,60,64,195,245,40,92,143,194,229,63,0,0,0,0,0,0,0,0,82,184,30,133,235,81,216,63,102,102,102,102,102,102,214,63,123,20,174,71,225,122,132,191,123,20,174,71,225,122,132,191,164,112,61,10,215,75,147,192,10,215,163,112,61,175,148,64,215,163,112,61,10,215,20,64,154,153,153,153,153,153,23,64,154,153,153,153,153,153,61,64,92,143,194,245,40,156,59,64,174,71,225,122,20,174,231,63,133,235,81,184,30,133,243,191,174,71,225,122,20,174,215,63,31,133,235,81,184,30,213,191,123,20,174,71,225,122,148,191,123,20,174,71,225,122,132,191,82,184,30,133,235,197,145,64,195,245,40,92,143,71,147,192,123,20,174,71,225,122,164,191,51,51,51,51,51,51,211,191,215,163,112,61,10,151,59,192,174,71,225,122,20,110,57,192,133,235,81,184,30,133,227,191,0,0,0,0,0,0,240,63,195,245,40,92,143,194,213,191,215,163,112,61,10,215,211,63,123,20,174,71,225,122,132,63,123,20,174,71,225,122,132,63,215,163,112,61,10,105,137,192,102,102,102,102,102,206,144,192,154,153,153,153,153,153,217,63,51,51,51,51,51,51,211,63,205,204,204,204,204,12,56,192,174,71,225,122,20,46,50,64,154,153,153,153,153,153,217,191,123,20,174,71,225,122,132,191,184,30,133,235,81,184,206,63,72,225,122,20,174,71,209,63,123,20,174,71,225,122,132,191,123,20,174,71,225,122,132,63,123,20,174,71,225,44,146,64,51,51,51,51,51,115,78,192,133,235,81,184,30,133,7,192,205,204,204,204,204,204,244,63,195,245,40,92,143,194,245,191,195,245,40,92,143,2,58,192,143,194,245,40,92,143,226,191,236,81,184,30,133,235,177,63,102,102,102,102,102,102,214,191,205,204,204,204,204,22,144,64,102,102,102,102,102,198,75,192,10,215,163,112,61,10,5,192,154,153,153,153,153,153,241,63,0,0,0,0,0,0,244,191,133,235,81,184,30,5,55,192,164,112,61,10,215,163,224,191,184,30,133,235,81,184,174,63,215,163,112,61,10,215,211,191,174,71,225,122,20,98,129,192,205,204,204,204,204,166,138,64,72,225,122,20,174,71,9,64,236,81,184,30,133,235,17,192,143,194,245,40,92,15,51,64,225,122,20,174,71,225,40,64,236,81,184,30,133,235,233,191,72,225,122,20,174,71,209,191,195,245,40,92,143,194,197,63,225,122,20,174,71,225,202,191,0,0,0,0,0,0,0,0,123,20,174,71,225,122,148,63,92,143,194,245,40,220,130,192,31,133,235,81,184,2,137,192,41,92,143,194,245,40,220,63,154,153,153,153,153,153,185,63,102,102,102,102,102,230,49,192,123,20,174,71,225,250,42,64,123,20,174,71,225,122,180,191,123,20,174,71,225,122,132,191,10,215,163,112,61,10,199,63,154,153,153,153,153,153,201,63,123,20,174,71,225,122,132,191,123,20,174,71,225,122,132,63,82,184,30,133,235,161,131,192,82,184,30,133,235,103,133,64,123,20,174,71,225,122,228,191,0,0,0,0,0,0,224,191,164,112,61,10,215,163,46,64,154,153,153,153,153,25,44,64,113,61,10,215,163,112,9,64,195,245,40,92,143,194,16,192,82,184,30,133,235,81,200,63,195,245,40,92,143,194,197,191,10,215,163,112,61,10,183,191,236,81,184,30,133,235,177,191,164,112,61,10,215,19,139,192,195,245,40,92,143,66,48,192,164,112,61,10,215,163,224,63,205,204,204,204,204,204,244,191,10,215,163,112,61,10,215,191,31,133,235,81,184,94,51,64,133,235,81,184,30,133,219,63,123,20,174,71,225,122,132,191,164,112,61,10,215,163,208,63,41,92,143,194,245,2,128,192,184,30,133,235,81,188,133,64,133,235,81,184,30,133,247,191,102,102,102,102,102,102,246,191,154,153,153,153,153,25,47,64,236,81,184,30,133,235,38,64,123,20,174,71,225,122,196,191,184,30,133,235,81,184,158,63,51,51,51,51,51,51,195,63,195,245,40,92,143,194,197,191,123,20,174,71,225,122,132,63,123,20,174,71,225,122,132,63,102,102,102,102,102,170,127,64,0,0,0,0,0,30,132,64,82,184,30,133,235,81,4,64,246,40,92,143,194,245,4,192,205,204,204,204,204,204,44,64,41,92,143,194,245,168,38,192,164,112,61,10,215,163,232,191,184,30,133,235,81,184,174,191,51,51,51,51,51,51,195,191,123,20,174,71,225,122,196,191,0,0,0,0,0,0,0,0,123,20,174,71,225,122,132,63,195,245,40,92,143,196,132,64,143,194,245,40,92,207,48,64,154,153,153,153,153,153,217,191,0,0,0,0,0,0,240,63,82,184,30,133,235,81,216,63,184,30,133,235,81,184,45,192,174,71,225,122,20,174,13,192,10,215,163,112,61,10,183,191,154,153,153,153,153,153,201,191,195,245,40,92,143,94,121,64,123,20,174,71,225,80,128,64,174,71,225,122,20,174,239,63,0,0,0,0,0,0,248,191,215,163,112,61,10,87,39,64,41,92,143,194,245,40,34,192,0,0,0,0,0,0,208,191,123,20,174,71,225,122,148,191,184,30,133,235,81,184,190,191,164,112,61,10,215,163,192,191,20,174,71,225,122,28,115,192,154,153,153,153,153,105,116,64,0,0,0,0,0,0,252,63,102,102,102,102,102,102,254,63,51,51,51,51,51,51,29,64,92,143,194,245,40,92,27,64,154,153,153,153,153,153,201,63,123,20,174,71,225,122,164,191,164,112,61,10,215,207,114,64,20,174,71,225,122,80,116,192], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+133136);
/* memory initializer */ allocate([41,92,143,194,245,40,220,191,0,0,0,0,0,0,224,191,20,174,71,225,122,20,29,192,236,81,184,30,133,235,26,192,41,92,143,194,245,40,240,191,123,20,174,71,225,122,132,63,0,0,0,0,0,0,0,0,123,20,174,71,225,122,180,63,0,0,0,0,0,0,0,0,123,20,174,71,225,122,148,63,92,143,194,245,40,104,123,64,113,61,10,215,163,240,36,64,236,81,184,30,133,235,225,191,154,153,153,153,153,153,201,191,184,30,133,235,81,184,206,63,31,133,235,81,184,158,35,192,184,30,133,235,81,184,206,191,123,20,174,71,225,122,132,63,164,112,61,10,215,163,192,191,184,30,133,235,81,128,112,192,164,112,61,10,215,243,116,64,174,71,225,122,20,174,239,63,102,102,102,102,102,102,246,63,246,40,92,143,194,245,29,64,154,153,153,153,153,153,23,64,72,225,122,20,174,71,209,191,123,20,174,71,225,122,148,191,61,10,215,163,112,193,113,64,20,174,71,225,122,48,115,64,123,20,174,71,225,122,212,63,154,153,153,153,153,153,217,191,123,20,174,71,225,122,27,64,102,102,102,102,102,102,25,192,174,71,225,122,20,174,239,191,123,20,174,71,225,122,132,191,225,122,20,174,71,81,111,192,246,40,92,143,194,113,116,64,123,20,174,71,225,122,180,63,154,153,153,153,153,153,217,63,61,10,215,163,112,61,29,64,102,102,102,102,102,102,22,64,51,51,51,51,51,51,211,191,215,163,112,61,10,215,108,64,143,194,245,40,92,7,115,192,123,20,174,71,225,122,180,63,154,153,153,153,153,153,185,191,61,10,215,163,112,61,27,192,164,112,61,10,215,163,20,192,72,225,122,20,174,71,209,63,41,92,143,194,245,184,108,64,31,133,235,81,184,2,115,64,51,51,51,51,51,51,227,191,0,0,0,0,0,0,224,63,51,51,51,51,51,51,27,64,143,194,245,40,92,143,20,192,31,133,235,81,184,30,213,63,123,20,174,71,225,122,132,63,205,204,204,204,204,4,112,64,41,92,143,194,245,76,113,192,236,81,184,30,133,235,209,191,154,153,153,153,153,153,217,191,195,245,40,92,143,194,24,192,236,81,184,30,133,235,22,192,236,81,184,30,133,235,193,191,123,20,174,71,225,122,132,63,10,215,163,112,61,154,106,192,51,51,51,51,51,215,112,64,225,122,20,174,71,225,234,63,51,51,51,51,51,51,243,63,20,174,71,225,122,20,24,64,10,215,163,112,61,10,19,64,236,81,184,30,133,235,193,63,123,20,174,71,225,122,148,191,20,174,71,225,122,148,104,64,205,204,204,204,204,0,113,64,225,122,20,174,71,225,234,191,205,204,204,204,204,204,236,63,82,184,30,133,235,81,24,64,154,153,153,153,153,153,17,192,102,102,102,102,102,102,214,63,123,20,174,71,225,122,148,63,102,102,102,102,102,158,103,64,236,81,184,30,133,3,113,64,184,30,133,235,81,184,190,191,51,51,51,51,51,51,211,63,92,143,194,245,40,92,24,64,225,122,20,174,71,225,16,192,195,245,40,92,143,194,213,63,82,184,30,133,235,69,114,192,102,102,102,102,102,102,20,192,123,20,174,71,225,122,212,191,154,153,153,153,153,153,217,191,41,92,143,194,245,40,188,191,41,92,143,194,245,40,26,64,236,81,184,30,133,235,193,63,123,20,174,71,225,122,132,63,225,122,20,174,71,57,100,64,61,10,215,163,112,149,107,192,184,30,133,235,81,184,206,63,154,153,153,153,153,153,185,63,184,30,133,235,81,184,19,192,246,40,92,143,194,245,12,192,123,20,174,71,225,122,180,191,113,61,10,215,163,88,112,64,113,61,10,215,163,240,51,192,102,102,102,102,102,102,238,191,154,153,153,153,153,153,201,63,205,204,204,204,204,204,220,191,102,102,102,102,102,102,23,192,164,112,61,10,215,163,192,191,123,20,174,71,225,122,148,63,133,235,81,184,30,197,97,64,225,122,20,174,71,217,103,192,154,153,153,153,153,153,201,63,154,153,153,153,153,153,185,63,20,174,71,225,122,20,17,192,113,61,10,215,163,112,9,192,236,81,184,30,133,235,177,191,102,102,102,102,102,126,103,64,113,61,10,215,163,112,16,192,184,30,133,235,81,184,206,191,51,51,51,51,51,51,211,63,10,215,163,112,61,10,183,191,205,204,204,204,204,204,16,192,10,215,163,112,61,10,183,191,123,20,174,71,225,122,132,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,235,81,184,30,197,83,192,205,204,204,204,204,252,100,64,123,20,174,71,225,122,164,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,64,82,184,30,133,235,81,252,63,31,133,235,81,184,126,94,64,225,122,20,174,71,97,96,64,123,20,174,71,225,122,180,191,154,153,153,153,153,153,185,63,113,61,10,215,163,112,7,64,215,163,112,61,10,215,5,192,184,30,133,235,81,184,174,191,102,102,102,102,102,158,101,192,184,30,133,235,81,56,32,192,154,153,153,153,153,153,217,191,154,153,153,153,153,153,201,191,10,215,163,112,61,10,199,191,246,40,92,143,194,245,14,64,10,215,163,112,61,10,183,63,123,20,174,71,225,122,132,63,205,204,204,204,204,4,100,192,102,102,102,102,102,166,75,192,20,174,71,225,122,20,44,192,205,204,204,204,204,204,43,64,174,71,225,122,20,174,243,191,164,112,61,10,215,163,12,64,154,153,153,153,153,153,217,63,215,163,112,61,10,215,211,63,154,153,153,153,153,217,92,192,205,204,204,204,204,204,94,64,51,51,51,51,51,51,227,63,102,102,102,102,102,102,230,63,0,0,0,0,0,0,6,64,164,112,61,10,215,163,4,64,123,20,174,71,225,122,180,63,123,20,174,71,225,122,132,191,184,30,133,235,81,8,101,192,0,0,0,0,0,0,0,192,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,191,123,20,174,71,225,122,164,191,20,174,71,225,122,20,14,64,123,20,174,71,225,122,180,63,143,194,245,40,92,159,92,192,205,204,204,204,204,204,94,64,123,20,174,71,225,122,212,63,154,153,153,153,153,153,217,63,0,0,0,0,0,0,6,64,123,20,174,71,225,122,4,64,236,81,184,30,133,235,177,63,123,20,174,71,225,122,132,191,41,92,143,194,245,8,92,64,205,204,204,204,204,44,94,64,236,81,184,30,133,235,209,63,51,51,51,51,51,51,211,191,154,153,153,153,153,153,5,64,20,174,71,225,122,20,4,192,236,81,184,30,133,235,177,191,123,20,174,71,225,122,132,191,123,20,174,71,225,42,100,64,31,133,235,81,184,30,16,64,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,63,10,215,163,112,61,10,183,63,225,122,20,174,71,225,12,192,123,20,174,71,225,122,180,191,164,112,61,10,215,211,86,64,41,92,143,194,245,168,95,64,154,153,153,153,153,153,217,191,154,153,153,153,153,153,217,63,164,112,61,10,215,163,6,64,82,184,30,133,235,81,0,192,123,20,174,71,225,122,164,191,123,20,174,71,225,122,132,63,195,245,40,92,143,82,90,64,154,153,153,153,153,57,92,64,41,92,143,194,245,40,220,63,0,0,0,0,0,0,224,191,41,92,143,194,245,40,4,64,205,204,204,204,204,204,2,192,236,81,184,30,133,235,177,191,123,20,174,71,225,122,132,191,92,143,194,245,40,172,88,64,205,204,204,204,204,140,90,192,236,81,184,30,133,235,209,191,51,51,51,51,51,51,211,191,246,40,92,143,194,245,2,192,174,71,225,122,20,174,1,192,184,30,133,235,81,184,174,191,123,20,174,71,225,122,132,63,143,194,245,40,92,175,85,64,92,143,194,245,40,60,92,192,123,20,174,71,225,122,180,191,154,153,153,153,153,153,201,191,61,10,215,163,112,61,4,192,10,215,163,112,61,10,255,191,154,153,153,153,153,153,169,191,82,184,30,133,235,217,96,192,20,174,71,225,122,20,12,64,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,191,123,20,174,71,225,122,180,63,20,174,71,225,122,20,8,64,236,81,184,30,133,235,177,63,82,184,30,133,235,193,83,64,164,112,61,10,215,211,90,64,184,30,133,235,81,184,206,191,154,153,153,153,153,153,201,63,51,51,51,51,51,51,3,64,82,184,30,133,235,81,252,191,123,20,174,71,225,122,164,191,123,20,174,71,225,122,132,63,82,184,30,133,235,153,96,64,10,215,163,112,61,138,37,192,164,112,61,10,215,163,224,191,154,153,153,153,153,153,185,63,184,30,133,235,81,184,206,191,195,245,40,92,143,194,7,192,236,81,184,30,133,235,177,191,123,20,174,71,225,122,132,63,82,184,30,133,235,73,96,192,205,204,204,204,204,204,236,191,123,20,174,71,225,122,164,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,225,122,20,174,71,7,64,164,112,61,10,215,163,83,192,20,174,71,225,122,84,85,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,143,194,245,40,92,143,254,63,41,92,143,194,245,40,252,63,123,20,174,71,225,122,164,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,112,61,10,215,195,68,192,102,102,102,102,102,70,86,64,123,20,174,71,225,122,148,63,0,0,0,0,0,0,0,0,215,163,112,61,10,215,255,63,195,245,40,92,143,194,237,63,82,184,30,133,235,129,80,64,0,0,0,0,0,192,81,192,154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,191,113,61,10,215,163,112,249,191,174,71,225,122,20,174,247,191,123,20,174,71,225,122,164,191,0,0,0,0,0,64,78,64,205,204,204,204,204,44,80,64,10,215,163,112,61,10,215,63,154,153,153,153,153,153,217,191,51,51,51,51,51,51,247,63,154,153,153,153,153,153,245,191,123,20,174,71,225,122,164,191,123,20,174,71,225,122,132,191,195,245,40,92,143,34,74,192,113,61,10,215,163,128,81,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,133,235,81,184,30,249,191,184,30,133,235,81,184,242,63,184,30,133,235,81,184,158,63,154,153,153,153,153,121,74,192,195,245,40,92,143,146,80,64,123,20,174,71,225,122,212,63,154,153,153,153,153,153,217,63,174,71,225,122,20,174,247,63,225,122,20,174,71,225,242,63,123,20,174,71,225,122,164,63,123,20,174,71,225,122,132,191,195,245,40,92,143,130,73,64,0,0,0,0,0,208,80,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,63,61,10,215,163,112,61,242,191,184,30,133,235,81,184,158,191,20,174,71,225,122,212,75,192,246,40,92,143,194,117,78,192,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,191,195,245,40,92,143,194,245,191,215,163,112,61,10,215,243,63,184,30,133,235,81,184,158,63,72,225,122,20,174,103,75,192,154,153,153,153,153,153,77,192,123,20,174,71,225,122,180,191,154,153,153,153,153,153,201,63,31,133,235,81,184,30,245,191,174,71,225,122,20,174,243,63,184,30,133,235,81,184,158,63,41,92,143,194,245,168,73,64,205,204,204,204,204,204,75,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,215,163,112,61,10,215,243,191,102,102,102,102,102,102,242,191,184,30,133,235,81,184,158,191,133,235,81,184,30,37,72,64,102,102,102,102,102,230,73,64,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,191,143,194,245,40,92,143,242,63,72,225,122,20,174,71,241,191,184,30,133,235,81,184,158,191,236,81,184,30,133,203,70,192,0,0,0,0,0,128,72,192,184,30,133,235,81,184,190,191,154,153,153,153,153,153,185,63,154,153,153,153,153,153,241,191,82,184,30,133,235,81,240,63,184,30,133,235,81,184,158,63,133,235,81,184,30,69,68,64,184,30,133,235,81,88,74,192,123,20,174,71,225,122,164,191,154,153,153,153,153,153,185,191,225,122,20,174,71,225,242,191,31,133,235,81,184,30,237,191,123,20,174,71,225,122,148,191,10,215,163,112,61,74,68,192,225,122,20,174,71,193,72,192,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,63,195,245,40,92,143,194,241,191,31,133,235,81,184,30,237,63,123,20,174,71,225,122,164,63,123,20,174,71,225,122,148,63,225,122,20,174,71,225,69,192,0,0,0,0,0,64,71,64,10,215,163,112,61,10,215,63,154,153,153,153,153,153,217,63,164,112,61,10,215,163,240,63,92,143,194,245,40,92,239,63,184,30,133,235,81,184,158,63,123,20,174,71,225,122,132,191,51,51,51,51,51,83,79,64,0,0,0,0,0,0,20,192,184,30,133,235,81,184,206,191,0,0,0,0,0,0,0,0,41,92,143,194,245,40,188,191,102,102,102,102,102,102,246,191,184,30,133,235,81,184,158,191,123,20,174,71,225,122,132,63,41,92,143,194,245,72,67,192,236,81,184,30,133,203,72,64,123,20,174,71,225,122,180,63,154,153,153,153,153,153,185,63,195,245,40,92,143,194,241,63,133,235,81,184,30,133,235,63,123,20,174,71,225,122,148,63,92,143,194,245,40,156,64,192,133,235,81,184,30,5,70,192,123,20,174,71,225,122,180,63,154,153,153,153,153,153,185,191,92,143,194,245,40,92,239,191,174,71,225,122,20,174,231,63,123,20,174,71,225,122,148,63,51,51,51,51,51,147,66,64,51,51,51,51,51,243,67,192,184,30,133,235,81,184,190,191,154,153,153,153,153,153,185,191,123,20,174,71,225,122,236,191,143,194,245,40,92,143,234,191,123,20,174,71,225,122,148,191,215,163,112,61,10,87,66,64,0,0,0,0,0,192,67,192,123,20,174,71,225,122,164,191,154,153,153,153,153,153,185,191,41,92,143,194,245,40,236,191,61,10,215,163,112,61,234,191,123,20,174,71,225,122,148,191,92,143,194,245,40,156,74,192,72,225,122,20,174,71,15,192,154,153,153,153,153,153,201,191,0,0,0,0,0,0,0,0,10,215,163,112,61,10,183,191,10,215,163,112,61,10,243,63,184,30,133,235,81,184,158,63,215,163,112,61,10,55,64,64,184,30,133,235,81,24,69,192,123,20,174,71,225,122,164,191,154,153,153,153,153,153,185,191,20,174,71,225,122,20,238,191,92,143,194,245,40,92,231,191,123,20,174,71,225,122,148,191,0,0,0,0,0,128,73,192,102,102,102,102,102,102,2,192,184,30,133,235,81,184,190,191,154,153,153,153,153,153,185,191,0,0,0,0,0,0,0,0,61,10,215,163,112,61,242,63,72,225,122,20,174,135,61,192,174,71,225,122,20,142,67,192,123,20,174,71,225,122,164,63,0,0,0,0,0,0,0,0,215,163,112,61,10,215,235,191,31,133,235,81,184,30,229,63,123,20,174,71,225,122,148,63,0,0,0,0,0,128,60,64,246,40,92,143,194,117,67,192,123,20,174,71,225,122,180,191,154,153,153,153,153,153,185,191,215,163,112,61,10,215,235,191,123,20,174,71,225,122,228,191,123,20,174,71,225,122,148,191,10,215,163,112,61,138,58,64,154,153,153,153,153,121,66,64,184,30,133,235,81,184,190,191,154,153,153,153,153,153,185,63,143,194,245,40,92,143,234,63,225,122,20,174,71,225,226,191,123,20,174,71,225,122,132,191,10,215,163,112,61,138,58,64,236,81,184,30,133,75,65,64,123,20,174,71,225,122,164,63,154,153,153,153,153,153,185,191,164,112,61,10,215,163,232,63,225,122,20,174,71,225,226,191,123,20,174,71,225,122,148,191,154,153,153,153,153,89,60,64,102,102,102,102,102,70,64,192,123,20,174,71,225,122,196,191,154,153,153,153,153,153,201,63,92,143,194,245,40,92,231,191,41,92,143,194,245,40,228,191,123,20,174,71,225,122,132,191,0,0,0,0,0,0,60,192,102,102,102,102,102,102,62,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,195,245,40,92,143,194,229,63,41,92,143,194,245,40,228,63,123,20,174,71,225,122,132,63,92,143,194,245,40,156,59,192,102,102,102,102,102,102,61,64,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,63,31,133,235,81,184,30,229,63,215,163,112,61,10,215,227,63,123,20,174,71,225,122,148,63,10,215,163,112,61,42,68,64,154,153,153,153,153,153,217,63,123,20,174,71,225,122,164,191,154,153,153,153,153,153,185,63,0,0,0,0,0,0,0,0,205,204,204,204,204,204,236,191,72,225,122,20,174,71,55,192,92,143,194,245,40,156,63,64,123,20,174,71,225,122,180,191,154,153,153,153,153,153,185,191,184,30,133,235,81,184,230,63,164,112,61,10,215,163,224,63,123,20,174,71,225,122,132,63,0,0,0,0,0,224,66,64,154,153,153,153,153,153,233,63,123,20,174,71,225,122,164,63,154,153,153,153,153,153,185,63,0,0,0,0,0,0,0,0,225,122,20,174,71,225,234,191,41,92,143,194,245,168,55,64,205,204,204,204,204,204,57,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,143,194,245,40,92,143,226,63,246,40,92,143,194,245,224,191,123,20,174,71,225,122,132,191,195,245,40,92,143,2,53,64,41,92,143,194,245,232,59,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,215,163,112,61,10,215,227,191,20,174,71,225,122,20,222,191,123,20,174,71,225,122,132,191,72,225,122,20,174,103,65,192,31,133,235,81,184,30,7,64,123,20,174,71,225,122,164,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,40,92,143,194,245,232,63,61,10,215,163,112,125,55,192,143,194,245,40,92,79,57,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,10,215,163,112,61,226,191,246,40,92,143,194,245,224,63,123,20,174,71,225,122,132,63,184,30,133,235,81,120,55,192,51,51,51,51,51,51,57,64,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,63,236,81,184,30,133,235,225,63,164,112,61,10,215,163,224,63,123,20,174,71,225,122,148,63,20,174,71,225,122,148,51,64,0,0,0,0,0,128,59,64,184,30,133,235,81,184,190,191,154,153,153,153,153,153,185,63,215,163,112,61,10,215,227,63,41,92,143,194,245,40,220,191,123,20,174,71,225,122,132,191,236,81,184,30,133,171,54,192,102,102,102,102,102,102,56,192,123,20,174,71,225,122,180,191,154,153,153,153,153,153,185,63,154,153,153,153,153,153,225,191,82,184,30,133,235,81,224,63,123,20,174,71,225,122,132,63,184,30,133,235,81,248,51,192,0,0,0,0,0,0,57,64,184,30,133,235,81,184,190,63,154,153,153,153,153,153,201,63,236,81,184,30,133,235,225,63,205,204,204,204,204,204,220,63,123,20,174,71,225,122,132,63,72,225,122,20,174,71,53,64,205,204,204,204,204,204,54,192,123,20,174,71,225,122,180,191,154,153,153,153,153,153,185,191,82,184,30,133,235,81,224,191,184,30,133,235,81,184,222,191,123,20,174,71,225,122,132,191,184,30,133,235,81,120,62,192,31,133,235,81,184,30,237,63,123,20,174,71,225,122,164,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,195,245,40,92,143,194,229,63,20,174,71,225,122,148,50,64,0,0,0,0,0,0,56,64,123,20,174,71,225,122,164,63,154,153,153,153,153,153,185,191,72,225,122,20,174,71,225,63,225,122,20,174,71,225,218,191,123,20,174,71,225,122,132,191,133,235,81,184,30,5,50,192,102,102,102,102,102,102,56,64,123,20,174,71,225,122,164,191,154,153,153,153,153,153,185,191,154,153,153,153,153,153,225,63,154,153,153,153,153,153,217,63,123,20,174,71,225,122,132,63,61,10,215,163,112,189,49,64,0,0,0,0,0,128,54,64,123,20,174,71,225,122,180,63,154,153,153,153,153,153,185,191,0,0,0,0,0,0,224,63,154,153,153,153,153,153,217,191,123,20,174,71,225,122,132,191,41,92,143,194,245,104,51,192,51,51,51,51,51,179,52,64,123,20,174,71,225,122,180,63,154,153,153,153,153,153,185,63,113,61,10,215,163,112,221,63,133,235,81,184,30,133,219,63,123,20,174,71,225,122,132,63,164,112,61,10,215,163,50,192,92,143,194,245,40,28,52,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,204,204,204,204,204,220,63,225,122,20,174,71,225,218,63,123,20,174,71,225,122,132,63,0,0,0,0,0,192,48,192,154,153,153,153,153,153,53,64,123,20,174,71,225,122,164,63,154,153,153,153,153,153,185,63,184,30,133,235,81,184,222,63,174,71,225,122,20,174,215,63,123,20,174,71,225,122,132,63,236,81,184,30,133,107,50,192,0,0,0,0,0,0,52,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,204,204,204,204,204,220,191,61,10,215,163,112,61,218,63,123,20,174,71,225,122,132,63,133,235,81,184,30,197,58,192,143,194,245,40,92,143,246,63,123,20,174,71,225,122,180,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,51,51,51,51,51,227,63,236,81,184,30,133,43,58,192,82,184,30,133,235,81,200,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,225,122,20,174,71,225,226,63,10,215,163,112,61,10,47,192,195,245,40,92,143,130,52,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113,61,10,215,163,112,221,63,102,102,102,102,102,102,214,63,123,20,174,71,225,122,132,63,236,81,184,30,133,107,57,192,143,194,245,40,92,143,254,191,123,20,174,71,225,122,180,191,0,0,0,0,0,0,0,0,123,20,174,71,225,122,164,191,61,10,215,163,112,61,226,63,205,204,204,204,204,204,220,63,236,81,184,30,133,107,49,192,154,153,153,153,153,25,50,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,153,153,153,153,217,63,246,40,92,143,194,245,216,63,123,20,174,71,225,122,132,63,164,112,61,10,215,99,48,64,154,153,153,153,153,153,49,192,123,20,174,71,225,122,180,191,154,153,153,153,153,153,185,191,246,40,92,143,194,245,216,191,174,71,225,122,20,174,215,191,123,20,174,71,225,122,132,191,61,10,215,163,112,189,44,192,41,92,143,194,245,232,50,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,225,122,20,174,71,225,218,63,123,20,174,71,225,122,212,63,123,20,174,71,225,122,132,63,164,112,61,10,215,99,55,64,51,51,51,51,51,51,3,192,184,30,133,235,81,184,190,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,112,61,10,215,163,224,191,164,112,61,10,215,163,44,64,0,0,0,0,0,128,50,192,123,20,174,71,225,122,164,191,154,153,153,153,153,153,185,191,61,10,215,163,112,61,218,191,123,20,174,71,225,122,212,191,123,20,174,71,225,122,132,191,225,122,20,174,71,97,47,64,20,174,71,225,122,20,49,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,184,30,133,235,81,216,63,102,102,102,102,102,102,214,191,123,20,174,71,225,122,132,191,61,10,215,163,112,253,54,192,0,0,0,0,0,0,224,63,123,20,174,71,225,122,164,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,184,30,133,235,81,224,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113,61,10,215,163,240,44,64,154,153,153,153,153,153,49,192,123,20,174,71,225,122,132,191,0,0,0,0,0,0,0,0,246,40,92,143,194,245,216,191,123,20,174,71,225,122,212,191,41,92,143,194,245,168,42,192,102,102,102,102,102,102,50,64,123,20,174,71,225,122,164,191,154,153,153,153,153,153,185,191,61,10,215,163,112,61,218,63,51,51,51,51,51,51,211,63,184,30,133,235,81,120,54,64,51,51,51,51,51,51,227,191,123,20,174,71,225,122,164,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,191,143,194,245,40,92,143,41,192,41,92,143,194,245,104,49,192,123,20,174,71,225,122,164,63,0,0,0,0,0,0,0,0,246,40,92,143,194,245,216,191,143,194,245,40,92,143,210,63,123,20,174,71,225,122,132,63,51,51,51,51,51,51,44,192,31,133,235,81,184,158,46,192,123,20,174,71,225,122,164,63,0,0,0,0,0,0,0,0,195,245,40,92,143,194,213,191,123,20,174,71,225,122,212,63,123,20,174,71,225,122,132,63,246,40,92,143,194,245,39,64,246,40,92,143,194,53,48,64,123,20,174,71,225,122,164,191,0,0,0,0,0,0,0,0,10,215,163,112,61,10,215,63,72,225,122,20,174,71,209,191,123,20,174,71,225,122,132,191,102,102,102,102,102,166,51,64,102,102,102,102,102,102,254,191,123,20,174,71,225,122,180,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,92,143,194,245,40,220,191,92,143,194,245,40,156,51,64,0,0,0,0,0,0,248,191,123,20,174,71,225,122,180,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,92,143,194,245,40,220,191,82,184,30,133,235,209,42,64,154,153,153,153,153,153,44,192,123,20,174,71,225,122,164,191,154,153,153,153,153,153,185,191,123,20,174,71,225,122,212,191,51,51,51,51,51,51,211,191,123,20,174,71,225,122,132,191,20,174,71,225,122,148,42,192,205,204,204,204,204,204,44,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,20,174,71,225,122,212,63,51,51,51,51,51,51,211,63,123,20,174,71,225,122,132,63,72,225,122,20,174,71,38,64,205,204,204,204,204,204,44,192,123,20,174,71,225,122,164,191,0,0,0,0,0,0,0,0,123,20,174,71,225,122,212,191,0,0,0,0,0,0,208,191,123,20,174,71,225,122,132,191,123,20,174,71,225,122,40,64,195,245,40,92,143,194,42,192,123,20,174,71,225,122,164,63,0,0,0,0,0,0,0,0,51,51,51,51,51,51,211,191,72,225,122,20,174,71,209,191,123,20,174,71,225,122,132,191,164,112,61,10,215,35,36,64,31,133,235,81,184,158,43,192,123,20,174,71,225,122,164,63,0,0,0,0,0,0,0,0,215,163,112,61,10,215,211,191,113,61,10,215,163,112,205,191,123,20,174,71,225,122,132,191,236,81,184,30,133,235,36,64,51,51,51,51,51,51,42,64,123,20,174,71,225,122,180,63,154,153,153,153,153,153,185,191,143,194,245,40,92,143,210,63,113,61,10,215,163,112,205,191,123,20,174,71,225,122,132,191,205,204,204,204,204,140,48,64,92,143,194,245,40,92,251,191,123,20,174,71,225,122,180,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,174,71,225,122,20,174,215,191,0,0,0,0,0,128,35,64,154,153,153,153,153,153,41,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,143,194,245,40,92,143,210,191,41,92,143,194,245,40,204,191,123,20,174,71,225,122,132,191,184,30,133,235,81,56,34,64,154,153,153,153,153,153,41,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,143,194,245,40,92,143,210,63,154,153,153,153,153,153,201,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,195,245,40,92,143,194,25,192,154,153,153,153,153,153,43,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,215,163,112,61,10,215,211,191,236,81,184,30,133,235,193,63,225,122,20,174,71,97,34,192,0,0,0,0,0,0,40,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,225,122,20,174,71,209,191,225,122,20,174,71,225,202,63,154,153,153,153,153,153,36,192,205,204,204,204,204,204,37,64,123,20,174,71,225,122,180,63,154,153,153,153,153,153,185,63,184,30,133,235,81,184,206,63,113,61,10,215,163,112,205,63,123,20,174,71,225,122,132,63,215,163,112,61,10,215,45,64,154,153,153,153,153,153,233,191,123,20,174,71,225,122,164,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,133,235,81,184,30,213,191,10,215,163,112,61,10,36,64,154,153,153,153,153,153,37,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,206,191,41,92,143,194,245,40,204,191,123,20,174,71,225,122,132,191,0,0,0,0,0,128,35,192,205,204,204,204,204,204,36,64,123,20,174,71,225,122,164,63,0,0,0,0,0,0,0,0,113,61,10,215,163,112,205,63,41,92,143,194,245,40,204,63,123,20,174,71,225,122,132,63,215,163,112,61,10,87,35,64,205,204,204,204,204,204,36,192,123,20,174,71,225,122,164,191,0,0,0,0,0,0,0,0,113,61,10,215,163,112,205,191,41,92,143,194,245,40,204,191,123,20,174,71,225,122,132,191,143,194,245,40,92,143,32,192,102,102,102,102,102,102,38,192,123,20,174,71,225,122,164,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,191,82,184,30,133,235,81,200,63,164,112,61,10,215,163,42,64,143,194,245,40,92,143,246,191,123,20,174,71,225,122,180,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,51,51,51,51,51,211,191,10,215,163,112,61,138,32,64,0,0,0,0,0,0,37,64,123,20,174,71,225,122,164,63,0,0,0,0,0,0,0,0,113,61,10,215,163,112,205,63,82,184,30,133,235,81,200,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,195,245,40,92,143,66,42,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,143,194,245,40,92,143,210,191,92,143,194,245,40,220,41,192,102,102,102,102,102,102,230,63,123,20,174,71,225,122,164,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,143,194,245,40,92,143,210,63,164,112,61,10,215,163,31,64,102,102,102,102,102,102,36,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113,61,10,215,163,112,205,191,10,215,163,112,61,10,199,191,92,143,194,245,40,92,31,192,0,0,0,0,0,0,36,192,123,20,174,71,225,122,164,191,0,0,0,0,0,0,0,0,41,92,143,194,245,40,204,191,10,215,163,112,61,10,199,63,195,245,40,92,143,194,29,64,51,51,51,51,51,51,35,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,225,122,20,174,71,225,202,63,195,245,40,92,143,194,197,191,143,194,245,40,92,143,30,192,205,204,204,204,204,204,34,64,123,20,174,71,225,122,180,63,154,153,153,153,153,153,185,63,225,122,20,174,71,225,202,63,195,245,40,92,143,194,197,63,123,20,174,71,225,122,132,63,195,245,40,92,143,194,38,192,51,51,51,51,51,51,227,63,123,20,174,71,225,122,164,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,63,236,81,184,30,133,235,29,192,154,153,153,153,153,153,32,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,184,30,133,235,81,200,63,195,245,40,92,143,194,197,63,246,40,92,143,194,245,37,192,154,153,153,153,153,153,201,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,63,246,40,92,143,194,245,37,64,154,153,153,153,153,153,201,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,191,154,153,153,153,153,153,29,64,154,153,153,153,153,153,31,192,123,20,174,71,225,122,164,191,0,0,0,0,0,0,0,0,10,215,163,112,61,10,199,191,195,245,40,92,143,194,197,191,92,143,194,245,40,92,24,192,205,204,204,204,204,204,32,64,123,20,174,71,225,122,164,191,0,0,0,0,0,0,0,0,82,184,30,133,235,81,200,63,236,81,184,30,133,235,193,63,195,245,40,92,143,194,27,192,246,40,92,143,194,245,29,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,195,245,40,92,143,194,197,191,123,20,174,71,225,122,196,63,174,71,225,122,20,174,27,64,0,0,0,0,0,0,30,64,123,20,174,71,225,122,164,63,0,0,0,0,0,0,0,0,195,245,40,92,143,194,197,63,51,51,51,51,51,51,195,191,205,204,204,204,204,204,24,64,174,71,225,122,20,46,32,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,215,163,112,61,10,199,63,236,81,184,30,133,235,193,191,123,20,174,71,225,122,24,192,51,51,51,51,51,51,31,64,123,20,174,71,225,122,164,63,0,0,0,0,0,0,0,0,195,245,40,92,143,194,197,63,236,81,184,30,133,235,193,63,102,102,102,102,102,102,23,64,0,0,0,0,0,0,30,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,195,245,40,92,143,194,197,191,164,112,61,10,215,163,192,191,236,81,184,30,133,235,25,192,154,153,153,153,153,153,27,64,123,20,174,71,225,122,180,63,154,153,153,153,153,153,185,63,51,51,51,51,51,51,195,63,236,81,184,30,133,235,193,63,123,20,174,71,225,122,132,63,72,225,122,20,174,71,25,64,154,153,153,153,153,153,27,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,51,51,51,51,51,195,63,236,81,184,30,133,235,193,191,113,61,10,215,163,112,22,64,205,204,204,204,204,204,28,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,20,174,71,225,122,196,191,164,112,61,10,215,163,192,191,164,112,61,10,215,35,34,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,153,153,153,153,201,191,0,0,0,0,0,0,21,64,154,153,153,153,153,153,27,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,51,51,51,51,51,195,63,184,30,133,235,81,184,190,191,113,61,10,215,163,240,32,192,154,153,153,153,153,153,217,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,184,30,133,235,81,200,63,72,225,122,20,174,71,25,64,143,194,245,40,92,143,21,192,195,245,40,92,143,194,241,191,154,153,153,153,153,153,241,63,184,30,133,235,81,184,190,191,236,81,184,30,133,235,193,191,123,20,174,71,225,122,148,63,123,20,174,71,225,122,148,63,236,81,184,30,133,235,22,64,102,102,102,102,102,102,24,192,123,20,174,71,225,122,164,191,0,0,0,0,0,0,0,0,236,81,184,30,133,235,193,191,164,112,61,10,215,163,192,191,205,204,204,204,204,204,18,64,102,102,102,102,102,102,26,64,123,20,174,71,225,122,164,191,0,0,0,0,0,0,0,0,51,51,51,51,51,51,195,63,41,92,143,194,245,40,188,191,154,153,153,153,153,153,19,192,154,153,153,153,153,153,25,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,81,184,30,133,235,193,191,41,92,143,194,245,40,188,63,82,184,30,133,235,81,21,192,102,102,102,102,102,102,22,64,123,20,174,71,225,122,164,63,154,153,153,153,153,153,185,63,164,112,61,10,215,163,192,63,184,30,133,235,81,184,190,63,123,20,174,71,225,122,132,63,61,10,215,163,112,61,19,192,0,0,0,0,0,0,24,64,123,20,174,71,225,122,164,63,0,0,0,0,0,0,0,0,164,112,61,10,215,163,192,63,41,92,143,194,245,40,188,63,133,235,81,184,30,133,20,64,0,0,0,0,0,0,22,64,123,20,174,71,225,122,164,63,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,63,41,92,143,194,245,40,188,191,0,0,0,0,0,0,18,64,154,153,153,153,153,153,23,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,112,61,10,215,163,192,63,154,153,153,153,153,153,185,191,225,122,20,174,71,225,16,192,102,102,102,102,102,102,24,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,81,184,30,133,235,193,63,31,133,235,81,184,30,18,192,205,204,204,204,204,204,22,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,112,61,10,215,163,192,63,154,153,153,153,153,153,185,63,184,30,133,235,81,184,16,64,205,204,204,204,204,204,22,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,112,61,10,215,163,192,63,0,0,0,0,0,0,19,192,195,245,40,92,143,194,20,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,191,41,92,143,194,245,40,188,63,61,10,215,163,112,61,16,192,102,102,102,102,102,102,22,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,112,61,10,215,163,192,63,215,163,112,61,10,215,15,192,102,102,102,102,102,102,22,64,123,20,174,71,225,122,164,191,0,0,0,0,0,0,0,0,164,112,61,10,215,163,192,63,20,174,71,225,122,20,16,64,154,153,153,153,153,153,21,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,191,246,40,92,143,194,245,17,64,154,153,153,153,153,153,19,192,123,20,174,71,225,122,164,191,0,0,0,0,0,0,0,0,41,92,143,194,245,40,188,191,154,153,153,153,153,153,185,191,246,40,92,143,194,245,12,192,154,153,153,153,153,153,21,192,123,20,174,71,225,122,196,191,154,153,153,153,153,153,201,63,184,30,133,235,81,184,190,191,0,0,0,0,0,0,0,0,123,20,174,71,225,122,132,63,133,235,81,184,30,133,17,64,51,51,51,51,51,51,19,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,92,143,194,245,40,188,63,154,153,153,153,153,153,25,192,154,153,153,153,153,153,185,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,81,184,30,133,235,193,63,215,163,112,61,10,215,15,192,0,0,0,0,0,0,20,64,123,20,174,71,225,122,164,63,0,0,0,0,0,0,0,0,41,92,143,194,245,40,188,63,143,194,245,40,92,143,14,192,0,0,0,0,0,0,20,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,92,143,194,245,40,188,191,174,71,225,122,20,174,13,192,72,225,122,20,174,71,20,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,92,143,194,245,40,188,63,143,194,245,40,92,143,16,64,154,153,153,153,153,153,17,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,153,153,153,153,185,63,10,215,163,112,61,10,24,192,0,0,0,0,0,0,224,191,123,20,174,71,225,122,164,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,112,61,10,215,163,192,63,41,92,143,194,245,40,16,192,143,194,245,40,92,143,17,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,153,153,153,153,185,63,154,153,153,153,153,153,11,64,225,122,20,174,71,225,18,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,92,143,194,245,40,188,191,123,20,174,71,225,122,10,64,215,163,112,61,10,215,18,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,92,143,194,245,40,188,63,20,174,71,225,122,20,10,64,0,0,0,0,0,0,18,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,153,153,153,153,185,191,20,174,71,225,122,20,10,192,0,0,0,0,0,0,18,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,153,153,153,153,185,191,184,30,133,235,81,184,10,192,154,153,153,153,153,153,17,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,153,153,153,153,185,191,236,81,184,30,133,235,13,192,0,0,0,0,0,0,16,192,154,153,153,153,153,153,13,64,0,0,0,0,0,0,16,64,184,30,133,235,81,184,10,64,51,51,51,51,51,51,17,192,102,102,102,102,102,102,10,64,51,51,51,51,51,51,17,192,72,225,122,20,174,71,13,192,51,51,51,51,51,51,15,64,123,20,174,71,225,122,164,63,72,225,122,20,174,71,13,64,51,51,51,51,51,51,15,64,123,20,174,71,225,122,164,63,246,40,92,143,194,245,12,192,51,51,51,51,51,51,15,192,225,122,20,174,71,225,12,192,51,51,51,51,51,51,15,64,154,153,153,153,153,153,201,191,51,51,51,51,51,51,21,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,63,123,20,174,71,225,122,8,64,51,51,51,51,51,51,17,64,102,102,102,102,102,102,10,64,0,0,0,0,0,0,16,64,154,153,153,153,153,153,217,63,154,153,153,153,153,153,201,63,205,204,204,204,204,204,8,64,102,102,102,102,102,102,16,64,123,20,174,71,225,122,8,192,51,51,51,51,51,51,15,64,102,102,102,102,102,102,10,192,205,204,204,204,204,204,12,192,102,102,102,102,102,102,10,192,225,122,20,174,71,225,10,64,123,20,174,71,225,122,132,63,31,133,235,81,184,30,9,64,51,51,51,51,51,51,11,64,72,225,122,20,174,71,18,192,154,153,153,153,153,153,201,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,153,153,153,153,185,63,154,153,153,153,153,153,5,192,205,204,204,204,204,204,12,192,133,235,81,184,30,133,7,64,154,153,153,153,153,153,9,192,51,51,51,51,51,51,7,192,154,153,153,153,153,153,9,64,195,245,40,92,143,194,3,64,51,51,51,51,51,51,11,192,102,102,102,102,102,102,4,64,102,102,102,102,102,102,10,192,102,102,102,102,102,102,6,64,164,112,61,10,215,163,8,192,20,174,71,225,122,20,4,64,102,102,102,102,102,102,10,64,102,102,102,102,102,102,16,192,51,51,51,51,51,51,211,63,184,30,133,235,81,184,190,191,154,153,153,153,153,153,185,191,102,102,102,102,102,102,16,64,154,153,153,153,153,153,201,63,236,81,184,30,133,235,5,192,0,0,0,0,0,0,8,64,174,71,225,122,20,174,3,64,215,163,112,61,10,215,9,64,72,225,122,20,174,71,13,192,51,51,51,51,51,51,243,63,154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,63,236,81,184,30,133,235,13,64,154,153,153,153,153,153,217,191,20,174,71,225,122,20,4,192,102,102,102,102,102,102,6,192,236,81,184,30,133,235,13,192,41,92,143,194,245,40,2,64,51,51,51,51,51,51,7,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,192,154,153,153,153,153,153,5,64,20,174,71,225,122,20,4,192,205,204,204,204,204,204,4,64,0,0,0,0,0,0,12,192,154,153,153,153,153,153,201,63,10,215,163,112,61,10,11,64,195,245,40,92,143,194,1,192,0,0,0,0,0,0,4,192,20,174,71,225,122,20,10,64,154,153,153,153,153,153,217,191,51,51,51,51,51,51,255,63,205,204,204,204,204,204,4,192,195,245,40,92,143,194,9,64,154,153,153,153,153,153,217,191,123,20,174,71,225,122,164,191,164,112,61,10,215,163,252,191,205,204,204,204,204,204,4,192,143,194,245,40,92,143,254,63,0,0,0,0,0,0,4,64,174,71,225,122,20,174,231,63,102,102,102,102,102,102,8,64,123,20,174,71,225,122,164,191,123,20,174,71,225,122,180,63,225,122,20,174,71,225,0,64,102,102,102,102,102,102,2,192,225,122,20,174,71,225,0,192,154,153,153,153,153,153,1,64], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+143376);
/* memory initializer */ allocate([236,81,184,30,133,235,253,191,51,51,51,51,51,51,3,192,61,10,215,163,112,61,0,64,154,153,153,153,153,153,1,192,61,10,215,163,112,61,0,192,154,153,153,153,153,153,1,64,215,163,112,61,10,215,7,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,215,163,112,61,10,215,7,64,92,143,194,245,40,92,251,191,51,51,51,51,51,51,3,64,133,235,81,184,30,133,7,64,154,153,153,153,153,153,185,191,184,30,133,235,81,184,190,191,154,153,153,153,153,153,185,63,184,30,133,235,81,184,250,63,51,51,51,51,51,51,3,64,164,112,61,10,215,163,252,191,102,102,102,102,102,102,2,64,164,112,61,10,215,163,252,191,154,153,153,153,153,153,1,64,184,30,133,235,81,184,250,191,154,153,153,153,153,153,1,64,164,112,61,10,215,163,252,63,0,0,0,0,0,0,0,192,236,81,184,30,133,235,253,63,102,102,102,102,102,102,254,191,20,174,71,225,122,20,250,63,205,204,204,204,204,204,0,192,113,61,10,215,163,112,249,191,205,204,204,204,204,204,0,64,205,204,204,204,204,204,248,63,205,204,204,204,204,204,0,192,205,204,204,204,204,204,248,191,205,204,204,204,204,204,0,64,184,30,133,235,81,184,4,192,154,153,153,153,153,153,201,191,0,0,0,0,0,0,252,191,102,102,102,102,102,102,254,191,0,0,0,0,0,0,252,191,102,102,102,102,102,102,254,63,72,225,122,20,174,71,253,191,205,204,204,204,204,204,252,191,41,92,143,194,245,40,248,63,0,0,0,0,0,0,0,64,41,92,143,194,245,40,248,191,0,0,0,0,0,0,0,192,92,143,194,245,40,92,251,63,205,204,204,204,204,204,252,63,246,40,92,143,194,245,244,63,205,204,204,204,204,204,0,64,225,122,20,174,71,225,246,191,0,0,0,0,0,0,0,64,225,122,20,174,71,225,246,63,0,0,0,0,0,0,0,64,113,61,10,215,163,112,3,192,41,92,143,194,245,40,248,191,102,102,102,102,102,102,254,63,133,235,81,184,30,133,247,191,102,102,102,102,102,102,254,63,31,133,235,81,184,30,3,64,154,153,153,153,153,153,201,63,31,133,235,81,184,30,3,192,61,10,215,163,112,61,246,63,102,102,102,102,102,102,254,63,61,10,215,163,112,61,246,63,205,204,204,204,204,204,252,191,133,235,81,184,30,133,247,63,154,153,153,153,153,153,249,191,133,235,81,184,30,133,247,63,154,153,153,153,153,153,249,191,225,122,20,174,71,225,246,63,0,0,0,0,0,0,248,191,246,40,92,143,194,245,244,191,154,153,153,153,153,153,249,63,82,184,30,133,235,81,244,63,154,153,153,153,153,153,249,191,82,184,30,133,235,81,244,191,154,153,153,153,153,153,249,63,82,184,30,133,235,81,244,63,154,153,153,153,153,153,249,191,61,10,215,163,112,61,0,64,154,153,153,153,153,153,245,63,0,0,0,0,0,0,248,63,61,10,215,163,112,61,246,191,102,102,102,102,102,102,246,191,51,51,51,51,51,51,255,63,154,153,153,153,153,153,201,191,82,184,30,133,235,81,244,191,215,163,112,61,10,215,247,63,10,215,163,112,61,10,243,63,0,0,0,0,0,0,248,63,82,184,30,133,235,81,244,63,102,102,102,102,102,102,246,63,102,102,102,102,102,102,242,63,0,0,0,0,0,0,248,63,236,81,184,30,133,235,253,63,154,153,153,153,153,153,185,191,236,81,184,30,133,235,241,191,0,0,0,0,0,0,248,191,236,81,184,30,133,235,253,63,195,245,40,92,143,194,241,191,0,0,0,0,0,0,248,191,195,245,40,92,143,194,241,191,0,0,0,0,0,0,248,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,215,163,112,61,10,243,63,102,102,102,102,102,102,246,63,82,184,30,133,235,81,244,63,205,204,204,204,204,204,244,191,82,184,30,133,235,81,244,191,205,204,204,204,204,204,244,191,102,102,102,102,102,102,242,191,102,102,102,102,102,102,246,63,174,71,225,122,20,174,243,191,205,204,204,204,204,204,244,63,174,71,225,122,20,174,243,191,205,204,204,204,204,204,244,191,133,235,81,184,30,133,243,63,164,112,61,10,215,163,244,191,31,133,235,81,184,30,241,63,102,102,102,102,102,102,246,191,0,0,0,0,0,0,252,63,154,153,153,153,153,153,201,191,123,20,174,71,225,122,240,191,102,102,102,102,102,102,246,191,31,133,235,81,184,30,241,191,51,51,51,51,51,51,243,63,123,20,174,71,225,122,240,191,102,102,102,102,102,102,242,63,31,133,235,81,184,30,241,63,154,153,153,153,153,153,241,63,41,92,143,194,245,40,248,63,123,20,174,71,225,122,240,191,154,153,153,153,153,153,241,63,123,20,174,71,225,122,240,63,154,153,153,153,153,153,241,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,20,174,71,225,122,240,191,154,153,153,153,153,153,241,191,31,133,235,81,184,30,237,63,51,51,51,51,51,51,243,191,41,92,143,194,245,40,236,191,51,51,51,51,51,51,243,191,41,92,143,194,245,40,236,191,51,51,51,51,51,51,243,63,102,102,102,102,102,102,238,191,154,153,153,153,153,153,241,63,102,102,102,102,102,102,238,191,154,153,153,153,153,153,241,191,225,122,20,174,71,225,246,63,61,10,215,163,112,61,246,191,102,102,102,102,102,102,238,63,0,0,0,0,0,0,240,191,102,102,102,102,102,102,238,191,0,0,0,0,0,0,240,63,154,153,153,153,153,153,233,191,154,153,153,153,153,153,241,63,31,133,235,81,184,30,237,63,0,0,0,0,0,0,240,191,154,153,153,153,153,153,245,191,41,92,143,194,245,40,236,63,0,0,0,0,0,0,240,63,143,194,245,40,92,143,234,191,0,0,0,0,0,0,240,63,31,133,235,81,184,30,237,191,205,204,204,204,204,204,236,63,31,133,235,81,184,30,237,63,205,204,204,204,204,204,236,63,41,92,143,194,245,40,236,63,205,204,204,204,204,204,236,191,82,184,30,133,235,81,232,191,0,0,0,0,0,0,240,191,82,184,30,133,235,81,232,191,0,0,0,0,0,0,240,63,82,184,30,133,235,81,232,63,0,0,0,0,0,0,240,63,10,215,163,112,61,10,231,191,0,0,0,0,0,0,240,63,225,122,20,174,71,225,234,63,205,204,204,204,204,204,236,191,225,122,20,174,71,225,234,63,205,204,204,204,204,204,236,63,174,71,225,122,20,174,243,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,112,61,10,215,163,224,191,154,153,153,153,153,153,241,191,195,245,40,92,143,194,229,191,0,0,0,0,0,0,240,63,10,215,163,112,61,10,243,63,154,153,153,153,153,153,201,191,10,215,163,112,61,10,243,63,82,184,30,133,235,81,232,63,205,204,204,204,204,204,236,63,102,102,102,102,102,102,242,63,154,153,153,153,153,153,185,191,102,102,102,102,102,102,242,63,154,153,153,153,153,153,185,191,10,215,163,112,61,10,231,63,205,204,204,204,204,204,236,191,102,102,102,102,102,102,242,191,102,102,102,102,102,102,242,191,195,245,40,92,143,194,229,63,205,204,204,204,204,204,236,63,195,245,40,92,143,194,229,191,205,204,204,204,204,204,236,63,195,245,40,92,143,194,241,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,153,153,153,153,201,63,72,225,122,20,174,71,233,63,154,153,153,153,153,153,233,63,195,245,40,92,143,194,241,191,154,153,153,153,153,153,185,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,222,191,0,0,0,0,0,0,240,191,82,184,30,133,235,81,232,191,154,153,153,153,153,153,233,191,10,215,163,112,61,10,231,191,154,153,153,153,153,153,233,191,31,133,235,81,184,30,241,191,154,153,153,153,153,153,185,191,123,20,174,71,225,122,228,63,154,153,153,153,153,153,233,63,123,20,174,71,225,122,228,191,154,153,153,153,153,153,233,191,123,20,174,71,225,122,228,63,154,153,153,153,153,153,233,63,154,153,153,153,153,153,217,63,51,51,51,51,51,51,227,63,164,112,61,10,215,163,224,63,0,0,0,0,0,0,224,191,51,51,51,51,51,51,227,191,154,153,153,153,153,153,233,191,184,30,133,235,81,184,230,191,102,102,102,102,102,102,230,63,174,71,225,122,20,174,239,191,174,71,225,122,20,174,239,63,236,81,184,30,133,235,225,63,154,153,153,153,153,153,233,63,236,81,184,30,133,235,225,191,154,153,153,153,153,153,233,63,195,245,40,92,143,194,229,63,102,102,102,102,102,102,230,191,195,245,40,92,143,194,229,63,102,102,102,102,102,102,230,63,102,102,102,102,102,102,238,191,123,20,174,71,225,122,228,191,102,102,102,102,102,102,230,63,123,20,174,71,225,122,228,63,102,102,102,102,102,102,230,63,51,51,51,51,51,51,227,191,102,102,102,102,102,102,230,63,51,51,51,51,51,51,227,191,102,102,102,102,102,102,230,191,31,133,235,81,184,30,237,191,154,153,153,153,153,153,185,191,82,184,30,133,235,81,224,191,82,184,30,133,235,81,232,63,31,133,235,81,184,30,237,191,236,81,184,30,133,235,225,191,102,102,102,102,102,102,230,63,41,92,143,194,245,40,236,63,41,92,143,194,245,40,236,63,41,92,143,194,245,40,228,191,51,51,51,51,51,51,227,191,154,153,153,153,153,153,225,63,51,51,51,51,51,51,227,191,154,153,153,153,153,153,233,191,154,153,153,153,153,153,233,63,154,153,153,153,153,153,233,191,164,112,61,10,215,163,224,191,51,51,51,51,51,51,227,63,164,112,61,10,215,163,224,63,51,51,51,51,51,51,227,63,164,112,61,10,215,163,224,63,51,51,51,51,51,51,227,191,184,30,133,235,81,184,222,191,51,51,51,51,51,51,227,63,184,30,133,235,81,184,222,63,51,51,51,51,51,51,227,63,184,30,133,235,81,184,222,63,51,51,51,51,51,51,227,63,82,184,30,133,235,81,232,191,41,92,143,194,245,40,220,63,51,51,51,51,51,51,227,191,164,112,61,10,215,163,224,63,0,0,0,0,0,0,224,191,164,112,61,10,215,163,224,191,0,0,0,0,0,0,224,63,154,153,153,153,153,153,217,63,51,51,51,51,51,51,227,63,154,153,153,153,153,153,217,191,51,51,51,51,51,51,227,191,154,153,153,153,153,153,217,63,51,51,51,51,51,51,227,191,10,215,163,112,61,10,231,63,10,215,163,112,61,10,231,191,82,184,30,133,235,81,224,191,0,0,0,0,0,0,224,191,184,30,133,235,81,184,222,191,0,0,0,0,0,0,224,63,184,30,133,235,81,184,222,63,0,0,0,0,0,0,224,191,184,30,133,235,81,184,222,191,0,0,0,0,0,0,224,63,184,30,133,235,81,184,222,191,0,0,0,0,0,0,224,63,184,30,133,235,81,184,222,63,0,0,0,0,0,0,224,191,184,30,133,235,81,184,222,191,0,0,0,0,0,0,224,191,195,245,40,92,143,194,229,191,195,245,40,92,143,194,229,191,41,92,143,194,245,40,220,63,0,0,0,0,0,0,224,63,123,20,174,71,225,122,228,191,154,153,153,153,153,153,185,191,123,20,174,71,225,122,228,191,154,153,153,153,153,153,185,191,154,153,153,153,153,153,217,191,0,0,0,0,0,0,224,63,154,153,153,153,153,153,217,63,0,0,0,0,0,0,224,63,154,153,153,153,153,153,217,63,0,0,0,0,0,0,224,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,153,153,153,153,217,191,0,0,0,0,0,0,224,191,10,215,163,112,61,10,215,191,0,0,0,0,0,0,224,191,10,215,163,112,61,10,215,63,0,0,0,0,0,0,224,191,51,51,51,51,51,51,227,63,51,51,51,51,51,51,227,191,154,153,153,153,153,153,217,63,154,153,153,153,153,153,217,191,154,153,153,153,153,153,217,63,154,153,153,153,153,153,217,63,154,153,153,153,153,153,217,191,154,153,153,153,153,153,217,63,154,153,153,153,153,153,217,191,154,153,153,153,153,153,217,63,236,81,184,30,133,235,225,191,236,81,184,30,133,235,225,191,10,215,163,112,61,10,215,63,154,153,153,153,153,153,217,191,10,215,163,112,61,10,215,191,154,153,153,153,153,153,217,63,10,215,163,112,61,10,215,63,154,153,153,153,153,153,217,191,10,215,163,112,61,10,215,191,154,153,153,153,153,153,217,191,10,215,163,112,61,10,215,63,154,153,153,153,153,153,217,63,10,215,163,112,61,10,215,63,154,153,153,153,153,153,217,63,164,112,61,10,215,163,224,191,164,112,61,10,215,163,224,63,164,112,61,10,215,163,224,63,123,20,174,71,225,122,212,63,154,153,153,153,153,153,217,63,123,20,174,71,225,122,212,191,154,153,153,153,153,153,217,63,123,20,174,71,225,122,212,191,154,153,153,153,153,153,217,63,123,20,174,71,225,122,212,191,154,153,153,153,153,153,217,63,123,20,174,71,225,122,212,63,154,153,153,153,153,153,217,191,123,20,174,71,225,122,212,191,154,153,153,153,153,153,217,191,123,20,174,71,225,122,212,63,154,153,153,153,153,153,217,191,236,81,184,30,133,235,209,63,154,153,153,153,153,153,217,191,236,81,184,30,133,235,209,191,154,153,153,153,153,153,217,63,236,81,184,30,133,235,209,63,154,153,153,153,153,153,217,191,236,81,184,30,133,235,209,63,154,153,153,153,153,153,217,63,184,30,133,235,81,184,222,63,184,30,133,235,81,184,222,191,184,30,133,235,81,184,222,63,10,215,163,112,61,10,215,63,51,51,51,51,51,51,211,191,10,215,163,112,61,10,215,191,51,51,51,51,51,51,211,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,153,153,153,153,201,63,154,153,153,153,153,153,217,63,41,92,143,194,245,40,220,191,41,92,143,194,245,40,220,63,41,92,143,194,245,40,220,191,41,92,143,194,245,40,220,191,41,92,143,194,245,40,220,191,41,92,143,194,245,40,220,191,123,20,174,71,225,122,212,63,51,51,51,51,51,51,211,191,123,20,174,71,225,122,212,63,51,51,51,51,51,51,211,63,184,30,133,235,81,184,206,63,51,51,51,51,51,51,211,63,184,30,133,235,81,184,190,191,154,153,153,153,153,153,185,191,236,81,184,30,133,235,209,191,51,51,51,51,51,51,211,63,236,81,184,30,133,235,209,63,51,51,51,51,51,51,211,63,236,81,184,30,133,235,209,63,51,51,51,51,51,51,211,63,236,81,184,30,133,235,209,63,51,51,51,51,51,51,211,191,236,81,184,30,133,235,209,63,51,51,51,51,51,51,211,191,236,81,184,30,133,235,209,63,51,51,51,51,51,51,211,191,236,81,184,30,133,235,209,63,51,51,51,51,51,51,211,63,236,81,184,30,133,235,209,191,51,51,51,51,51,51,211,63,154,153,153,153,153,153,217,63,154,153,153,153,153,153,217,63,184,30,133,235,81,184,206,191,51,51,51,51,51,51,211,63,184,30,133,235,81,184,206,63,51,51,51,51,51,51,211,191,184,30,133,235,81,184,206,63,51,51,51,51,51,51,211,191,184,30,133,235,81,184,206,191,51,51,51,51,51,51,211,191,184,30,133,235,81,184,206,63,51,51,51,51,51,51,211,63,184,30,133,235,81,184,206,63,51,51,51,51,51,51,211,191,184,30,133,235,81,184,206,191,51,51,51,51,51,51,211,63,184,30,133,235,81,184,206,63,51,51,51,51,51,51,211,191,184,30,133,235,81,184,206,191,51,51,51,51,51,51,211,191,184,30,133,235,81,184,206,63,51,51,51,51,51,51,211,191,184,30,133,235,81,184,206,63,51,51,51,51,51,51,211,63,184,30,133,235,81,184,206,191,51,51,51,51,51,51,211,63,184,30,133,235,81,184,206,191,51,51,51,51,51,51,211,63,154,153,153,153,153,153,201,63,51,51,51,51,51,51,211,191,154,153,153,153,153,153,201,63,51,51,51,51,51,51,211,191,154,153,153,153,153,153,201,63,51,51,51,51,51,51,211,191,154,153,153,153,153,153,201,63,51,51,51,51,51,51,211,63,154,153,153,153,153,153,201,63,51,51,51,51,51,51,211,191,154,153,153,153,153,153,201,63,51,51,51,51,51,51,211,191,154,153,153,153,153,153,201,63,51,51,51,51,51,51,211,63,154,153,153,153,153,153,201,63,51,51,51,51,51,51,211,63,154,153,153,153,153,153,201,191,51,51,51,51,51,51,211,191,154,153,153,153,153,153,201,63,51,51,51,51,51,51,211,191,154,153,153,153,153,153,201,63,51,51,51,51,51,51,211,191,10,215,163,112,61,10,215,191,10,215,163,112,61,10,215,191,10,215,163,112,61,10,215,191,123,20,174,71,225,122,164,191,51,51,51,51,51,51,211,63,184,30,133,235,81,184,190,63,154,153,153,153,153,153,185,191,123,20,174,71,225,122,212,191,184,30,133,235,81,184,206,191,154,153,153,153,153,153,201,63,184,30,133,235,81,184,206,63,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,191,236,81,184,30,133,235,209,63,236,81,184,30,133,235,209,63,236,81,184,30,133,235,209,63,236,81,184,30,133,235,209,63,236,81,184,30,133,235,209,63,236,81,184,30,133,235,209,63,236,81,184,30,133,235,209,191,236,81,184,30,133,235,209,63,184,30,133,235,81,184,190,63,0,0,0,0,0,0,0,0,184,30,133,235,81,184,206,63,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,191,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,191,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,191,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,63,123,20,174,71,225,122,196,191,154,153,153,153,153,153,201,63,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,63,123,20,174,71,225,122,196,191,154,153,153,153,153,153,201,63,123,20,174,71,225,122,196,191,154,153,153,153,153,153,201,63,123,20,174,71,225,122,196,191,154,153,153,153,153,153,201,63,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,191,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,63,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,191,123,20,174,71,225,122,196,191,154,153,153,153,153,153,201,63,123,20,174,71,225,122,196,191,154,153,153,153,153,153,201,191,123,20,174,71,225,122,196,191,154,153,153,153,153,153,201,63,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,63,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,191,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,191,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,63,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,63,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,63,123,20,174,71,225,122,196,191,154,153,153,153,153,153,201,191,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,63,123,20,174,71,225,122,196,191,154,153,153,153,153,153,201,63,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,63,123,20,174,71,225,122,196,191,154,153,153,153,153,153,201,191,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,191,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,191,123,20,174,71,225,122,196,191,154,153,153,153,153,153,201,191,184,30,133,235,81,184,206,63,184,30,133,235,81,184,206,191,184,30,133,235,81,184,206,191,184,30,133,235,81,184,206,63,184,30,133,235,81,184,206,63,184,30,133,235,81,184,190,63,154,153,153,153,153,153,201,63,184,30,133,235,81,184,190,63,154,153,153,153,153,153,201,63,184,30,133,235,81,184,190,191,154,153,153,153,153,153,201,191,184,30,133,235,81,184,190,63,154,153,153,153,153,153,201,191,184,30,133,235,81,184,190,63,154,153,153,153,153,153,201,191,184,30,133,235,81,184,190,191,154,153,153,153,153,153,201,63,184,30,133,235,81,184,190,191,154,153,153,153,153,153,201,63,184,30,133,235,81,184,190,191,154,153,153,153,153,153,201,191,184,30,133,235,81,184,190,63,154,153,153,153,153,153,201,63,184,30,133,235,81,184,190,63,154,153,153,153,153,153,201,63,184,30,133,235,81,184,190,63,154,153,153,153,153,153,201,191,184,30,133,235,81,184,190,191,154,153,153,153,153,153,201,63,184,30,133,235,81,184,190,63,154,153,153,153,153,153,201,191,184,30,133,235,81,184,190,191,154,153,153,153,153,153,201,63,184,30,133,235,81,184,190,63,154,153,153,153,153,153,201,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,191,154,153,153,153,153,153,201,63,184,30,133,235,81,184,190,191,154,153,153,153,153,153,201,63,184,30,133,235,81,184,190,63,154,153,153,153,153,153,201,191,184,30,133,235,81,184,190,191,154,153,153,153,153,153,201,63,184,30,133,235,81,184,190,63,154,153,153,153,153,153,201,63,0,0,0,0,0,0,0,0,225,122,20,174,71,225,202,191,154,153,153,153,153,153,201,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,63,123,20,174,71,225,122,196,191,154,153,153,153,153,153,185,191,0,0,0,0,0,0,0,0,195,245,40,92,143,194,197,63,123,20,174,71,225,122,196,63,123,20,174,71,225,122,196,63,123,20,174,71,225,122,196,63,123,20,174,71,225,122,196,63,123,20,174,71,225,122,196,191,123,20,174,71,225,122,196,63,123,20,174,71,225,122,196,63,123,20,174,71,225,122,196,191,123,20,174,71,225,122,196,63,123,20,174,71,225,122,196,191,123,20,174,71,225,122,196,63,184,30,133,235,81,184,190,63,154,153,153,153,153,153,185,63,184,30,133,235,81,184,190,63,154,153,153,153,153,153,185,191,184,30,133,235,81,184,190,191,154,153,153,153,153,153,185,63,184,30,133,235,81,184,190,191,154,153,153,153,153,153,185,63,184,30,133,235,81,184,190,63,154,153,153,153,153,153,185,191,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,63,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,63,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,63,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,63,184,30,133,235,81,184,190,63,184,30,133,235,81,184,190,63,184,30,133,235,81,184,190,63,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,63,184,30,133,235,81,184,190,63,184,30,133,235,81,184,190,63,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,63,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,63,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,63,0,0,0,0,0,0,0,0,41,92,143,194,245,40,188,63,41,92,143,194,245,40,188,63,123,20,174,71,225,170,94,192,102,102,102,102,102,150,100,64,41,92,143,194,245,120,105,64,0,0,0,0,0,24,113,64,164,112,61,10,215,163,12,64,236,81,184,30,133,235,5,64,184,30,133,235,81,184,24,64,61,10,215,163,112,61,18,192,0,0,0,0,0,0,0,0,123,20,174,71,225,122,164,191,0,0,0,0,0,0,0,0,236,81,184,30,133,235,177,191,184,30,133,235,81,184,76,64,102,102,102,102,102,70,83,192,20,174,71,225,122,244,87,64,51,51,51,51,51,19,96,64,82,184,30,133,235,81,252,191,123,20,174,71,225,122,244,191,205,204,204,204,204,204,6,64,31,133,235,81,184,30,1,192,41,92,143,194,245,136,84,64,0,0,0,0,0,96,86,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,113,61,10,215,163,112,253,191,123,20,174,71,225,122,164,191,61,10,215,163,112,221,71,64,102,102,102,102,102,6,80,192,10,215,163,112,61,202,55,64,102,102,102,102,102,230,63,64,51,51,51,51,51,51,247,191,31,133,235,81,184,30,241,191,20,174,71,225,122,20,230,63,246,40,92,143,194,245,224,191,113,61,10,215,163,48,71,192,0,0,0,0,0,64,73,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,174,71,225,122,20,242,63,164,112,61,10,215,163,240,63,123,20,174,71,225,122,148,63,225,122,20,174,71,97,50,192,0,0,0,0,0,0,0,0,102,102,102,102,102,230,79,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,10,215,163,112,61,218,63,0,0,0,0,0,0,0,0,225,122,20,174,71,225,246,191,41,92,143,194,245,136,77,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,133,235,81,184,30,245,191,164,112,61,10,215,163,76,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,20,174,71,225,122,244,191,51,51,51,51,51,83,72,192,0,0,0,0,0,0,0,0,102,102,102,102,102,102,242,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113,61,10,215,163,112,241,63,0,0,0,0,0,0,0,0,184,30,133,235,81,184,158,63,205,204,204,204,204,76,50,192,154,153,153,153,153,153,56,64,205,204,204,204,204,76,49,192,51,51,51,51,51,51,55,192,236,81,184,30,133,235,225,63,61,10,215,163,112,61,218,63,82,184,30,133,235,81,224,191,246,40,92,143,194,245,216,63,41,92,143,194,245,232,48,192,102,102,102,102,102,230,58,64,92,143,194,245,40,220,32,64,154,153,153,153,153,153,42,64,51,51,51,51,51,51,227,63,82,184,30,133,235,81,216,63,215,163,112,61,10,215,211,63,82,184,30,133,235,81,200,191,174,71,225,122,20,174,243,63,51,51,51,51,51,51,251,191,225,122,20,174,71,33,51,192,51,51,51,51,51,179,57,192,184,30,133,235,81,184,158,191,184,30,133,235,81,184,158,191,143,194,245,40,92,143,226,191,133,235,81,184,30,133,219,63,10,215,163,112,61,10,231,191,205,204,204,204,204,204,236,63,215,163,112,61,10,87,49,192,205,204,204,204,204,76,55,192,184,30,133,235,81,184,158,63,123,20,174,71,225,122,148,63,164,112,61,10,215,163,224,191,246,40,92,143,194,245,216,63,61,10,215,163,112,125,51,192,205,204,204,204,204,76,53,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,222,191,41,92,143,194,245,40,220,63,123,20,174,71,225,122,132,63,82,184,30,133,235,145,52,64,154,153,153,153,153,25,52,192,123,20,174,71,225,122,228,63,102,102,102,102,102,102,230,63,205,204,204,204,204,204,220,191,113,61,10,215,163,112,221,191,0,0,0,0,0,0,0,0,123,20,174,71,225,122,132,191,143,194,245,40,92,143,19,64,154,153,153,153,153,153,23,64,205,204,204,204,204,140,48,192,102,102,102,102,102,230,51,64,236,81,184,30,133,235,193,63,41,92,143,194,245,40,188,191,41,92,143,194,245,40,220,63,174,71,225,122,20,174,215,63,184,30,133,235,81,56,50,64,205,204,204,204,204,204,51,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,92,143,194,245,40,220,63,61,10,215,163,112,61,218,191,123,20,174,71,225,122,132,191,143,194,245,40,92,143,19,64,51,51,51,51,51,51,21,192,195,245,40,92,143,130,48,192,0,0,0,0,0,0,50,192,41,92,143,194,245,40,188,191,41,92,143,194,245,40,188,191,61,10,215,163,112,61,218,191,174,71,225,122,20,174,215,63,92,143,194,245,40,220,49,192,0,0,0,0,0,0,0,0,154,153,153,153,153,25,49,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,153,153,153,153,217,63,0,0,0,0,0,0,0,0,82,184,30,133,235,81,216,191,123,20,174,71,225,122,212,63,0,0,0,0,0,0,0,0,236,81,184,30,133,107,56,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,20,174,71,225,122,132,191,0,0,0,0,0,0,0,0,154,153,153,153,153,153,225,191,10,215,163,112,61,202,55,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,40,92,143,194,245,224,63,113,61,10,215,163,112,45,64,0,0,0,0,0,0,48,192,123,20,174,71,225,122,212,191,0,0,0,0,0,0,0,0,10,215,163,112,61,10,215,191,31,133,235,81,184,30,213,191,123,20,174,71,225,122,132,191,123,20,174,71,225,122,132,63,184,30,133,235,81,184,10,64,0,0,0,0,0,0,18,192,184,30,133,235,81,184,39,64,205,204,204,204,204,204,47,64,41,92,143,194,245,40,188,191,236,81,184,30,133,235,177,191,102,102,102,102,102,102,214,63,72,225,122,20,174,71,209,191,20,174,71,225,122,20,10,192,154,153,153,153,153,153,17,64,61,10,215,163,112,61,39,64,51,51,51,51,51,51,47,64,10,215,163,112,61,10,183,63,236,81,184,30,133,235,177,63,102,102,102,102,102,102,214,63,164,112,61,10,215,163,208,191,72,225,122,20,174,135,51,192,0,0,0,0,0,0,0,0,92,143,194,245,40,92,20,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,92,143,194,245,40,220,63,0,0,0,0,0,0,0,0,41,92,143,194,245,40,188,191,246,40,92,143,194,245,42,192,102,102,102,102,102,102,45,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,133,235,81,184,30,213,63,51,51,51,51,51,51,211,63,123,20,174,71,225,122,132,63,184,30,133,235,81,184,37,64,51,51,51,51,51,51,45,192,113,61,10,215,163,112,9,64,51,51,51,51,51,51,17,64,31,133,235,81,184,30,213,191,184,30,133,235,81,184,206,191,10,215,163,112,61,10,183,63,236,81,184,30,133,235,177,191,154,153,153,153,153,153,38,192,51,51,51,51,51,51,46,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,195,245,40,92,143,194,213,191,0,0,0,0,0,0,208,63,123,20,174,71,225,122,132,63,61,10,215,163,112,61,0,64,154,153,153,153,153,153,5,192,164,112,61,10,215,163,37,64,0,0,0,0,0,0,45,64,236,81,184,30,133,235,177,191,154,153,153,153,153,153,169,191,123,20,174,71,225,122,212,63,184,30,133,235,81,184,206,191,246,40,92,143,194,117,49,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,40,92,143,194,245,216,191,174,71,225,122,20,110,48,64,0,0,0,0,0,0,0,0,164,112,61,10,215,163,224,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,174,71,225,122,20,174,215,191,0,0,0,0,0,0,0,0,123,20,174,71,225,122,132,191,51,51,51,51,51,179,34,64,0,0,0,0,0,0,0,0,20,174,71,225,122,148,42,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,225,122,20,174,71,225,202,191,0,0,0,0,0,0,0,0,51,51,51,51,51,51,211,191,215,163,112,61,10,215,36,192,205,204,204,204,204,204,38,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,63,113,61,10,215,163,112,205,63,123,20,174,71,225,122,132,63,41,92,143,194,245,40,220,63,0,0,0,0,0,0,224,63,195,245,40,92,143,194,36,192,154,153,153,153,153,153,38,64,123,20,174,71,225,122,148,63,123,20,174,71,225,122,132,191,0,0,0,0,0,0,208,63,113,61,10,215,163,112,205,63,72,225,122,20,174,71,45,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,133,235,81,184,30,213,63,236,81,184,30,133,235,225,63,154,153,153,153,153,153,233,63,215,163,112,61,10,87,33,192,102,102,102,102,102,102,39,64,123,20,174,71,225,122,148,63,123,20,174,71,225,122,132,191,164,112,61,10,215,163,208,63,82,184,30,133,235,81,200,63,195,245,40,92,143,194,43,64,0,0,0,0,0,0,0,0,195,245,40,92,143,194,3,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,215,163,112,61,10,215,211,191,0,0,0,0,0,0,0,0,184,30,133,235,81,184,174,63,215,163,112,61,10,215,255,191,154,153,153,153,153,153,5,64,225,122,20,174,71,225,30,64,154,153,153,153,153,153,36,64,184,30,133,235,81,184,174,63,123,20,174,71,225,122,164,63,113,61,10,215,163,112,205,63,195,245,40,92,143,194,197,191,154,153,153,153,153,153,201,191,0,0,0,0,0,0,0,0,154,153,153,153,153,25,42,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,143,194,245,40,92,143,210,191,174,71,225,122,20,174,27,64,154,153,153,153,153,153,34,192,184,30,133,235,81,184,10,64,0,0,0,0,0,0,18,64,225,122,20,174,71,225,202,191,51,51,51,51,51,51,195,191,154,153,153,153,153,153,185,63,236,81,184,30,133,235,177,191,102,102,102,102,102,102,26,192,0,0,0,0,0,0,0,0,102,102,102,102,102,102,37,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,51,51,51,51,51,195,63,0,0,0,0,0,0,0,0,184,30,133,235,81,184,206,191,20,174,71,225,122,20,32,192,102,102,102,102,102,102,33,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,184,30,133,235,81,200,191,10,215,163,112,61,10,199,63,41,92,143,194,245,40,37,192,0,0,0,0,0,0,0,0,205,204,204,204,204,204,8,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,206,63,0,0,0,0,0,0,0,0,236,81,184,30,133,235,177,63,72,225,122,20,174,71,29,192,0,0,0,0,0,0,32,64,184,30,133,235,81,184,190,191,154,153,153,153,153,153,185,191,10,215,163,112,61,10,199,63,123,20,174,71,225,122,196,63,20,174,71,225,122,20,250,63,51,51,51,51,51,51,251,63,215,163,112,61,10,215,27,64,102,102,102,102,102,102,30,192,184,30,133,235,81,184,158,63,123,20,174,71,225,122,164,191,195,245,40,92,143,194,197,191,123,20,174,71,225,122,196,191,246,40,92,143,194,245,12,192,0,0,0,0,0,0,0,0,184,30,133,235,81,184,35,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,20,174,71,225,122,180,63,0,0,0,0,0,0,0,0,41,92,143,194,245,40,204,191,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,191,133,235,81,184,30,133,27,192,0,0,0,0,0,0,30,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,195,245,40,92,143,194,197,191,51,51,51,51,51,51,195,63,123,20,174,71,225,250,33,192,0,0,0,0,0,0,0,0,20,174,71,225,122,20,16,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,153,153,153,153,201,63,0,0,0,0,0,0,0,0,10,215,163,112,61,10,183,191,31,133,235,81,184,30,241,191,102,102,102,102,102,102,246,63,195,245,40,92,143,194,22,192,205,204,204,204,204,204,30,192,184,30,133,235,81,184,158,63,123,20,174,71,225,122,148,63,195,245,40,92,143,194,197,191,164,112,61,10,215,163,192,63,236,81,184,30,133,235,25,64,205,204,204,204,204,204,28,192,184,30,133,235,81,184,222,191,0,0,0,0,0,0,224,191,123,20,174,71,225,122,196,191,236,81,184,30,133,235,193,191,123,20,174,71,225,122,132,191,123,20,174,71,225,122,132,63,72,225,122,20,174,71,22,64,0,0,0,0,0,0,30,192,31,133,235,81,184,30,241,63,102,102,102,102,102,102,246,63,195,245,40,92,143,194,197,191,184,30,133,235,81,184,190,191,184,30,133,235,81,184,158,63,123,20,174,71,225,122,148,191,236,81,184,30,133,107,33,64,0,0,0,0,0,0,0,0,82,184,30,133,235,81,12,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,184,30,133,235,81,200,191,0,0,0,0,0,0,0,0,123,20,174,71,225,122,180,191,154,153,153,153,153,153,217,63,0,0,0,0,0,0,0,0,10,215,163,112,61,138,34,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,20,174,71,225,122,132,191,0,0,0,0,0,0,0,0,225,122,20,174,71,225,202,191,133,235,81,184,30,133,24,192,205,204,204,204,204,204,26,64,10,215,163,112,61,10,243,191,205,204,204,204,204,204,244,191,51,51,51,51,51,51,195,63,236,81,184,30,133,235,193,63,184,30,133,235,81,184,158,191,184,30,133,235,81,184,158,63,215,163,112,61,10,215,20,64,205,204,204,204,204,204,22,192,20,174,71,225,122,20,4,192,205,204,204,204,204,204,4,192,164,112,61,10,215,163,192,191,184,30,133,235,81,184,190,191,184,30,133,235,81,184,174,191,184,30,133,235,81,184,174,63,195,245,40,92,143,194,22,64,205,204,204,204,204,204,24,192,184,30,133,235,81,184,190,191,154,153,153,153,153,153,185,191,236,81,184,30,133,235,193,191,164,112,61,10,215,163,192,191,123,20,174,71,225,122,132,191,61,10,215,163,112,61,0,64,154,153,153,153,153,153,5,192,31,133,235,81,184,30,18,64,102,102,102,102,102,102,24,64,184,30,133,235,81,184,174,191,154,153,153,153,153,153,169,191,236,81,184,30,133,235,193,63,154,153,153,153,153,153,185,191,10,215,163,112,61,10,20,64,0,0,0,0,0,0,22,64,20,174,71,225,122,20,4,192,154,153,153,153,153,153,5,64,184,30,133,235,81,184,190,63,41,92,143,194,245,40,188,191,184,30,133,235,81,184,174,63,184,30,133,235,81,184,174,63,143,194,245,40,92,143,254,191,205,204,204,204,204,204,4,64,133,235,81,184,30,133,17,192,154,153,153,153,153,153,23,192,184,30,133,235,81,184,174,63,123,20,174,71,225,122,164,63,164,112,61,10,215,163,192,191,154,153,153,153,153,153,185,63,154,153,153,153,153,153,18,64,51,51,51,51,51,51,25,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,81,184,30,133,235,193,191,154,153,153,153,153,153,185,191,41,92,143,194,245,40,21,192,205,204,204,204,204,204,22,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,112,61,10,215,163,192,63,184,30,133,235,81,184,190,63,215,163,112,61,10,215,1,192,0,0,0,0,0,0,16,192,154,153,153,153,153,153,18,192,205,204,204,204,204,204,16,64,10,215,163,112,61,10,183,191,154,153,153,153,153,153,169,63,154,153,153,153,153,153,185,63,154,153,153,153,153,153,185,63,31,133,235,81,184,30,18,192,102,102,102,102,102,102,24,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,81,184,30,133,235,193,63,154,153,153,153,153,153,185,63,195,245,40,92,143,194,3,64,154,153,153,153,153,153,5,64,215,163,112,61,10,215,17,192,154,153,153,153,153,153,19,64,184,30,133,235,81,184,174,63,184,30,133,235,81,184,174,191,41,92,143,194,245,40,188,63,154,153,153,153,153,153,185,63,51,51,51,51,51,51,20,192,0,0,0,0,0,0,22,64,225,122,20,174,71,225,234,63,205,204,204,204,204,204,236,63,184,30,133,235,81,184,190,63,41,92,143,194,245,40,188,63,123,20,174,71,225,122,148,63,123,20,174,71,225,122,148,191,225,122,20,174,71,225,19,64,154,153,153,153,153,153,21,192,92,143,194,245,40,92,251,191,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,191,41,92,143,194,245,40,188,191,0,0,0,0,0,0,0,0,123,20,174,71,225,122,164,63,174,71,225,122,20,174,239,191,205,204,204,204,204,204,244,191,225,122,20,174,71,225,16,64,205,204,204,204,204,204,22,192,184,30,133,235,81,184,158,191,123,20,174,71,225,122,148,63,164,112,61,10,215,163,192,191,10,215,163,112,61,10,183,191,174,71,225,122,20,174,239,63,102,102,102,102,102,102,246,63,225,122,20,174,71,225,16,64,102,102,102,102,102,102,22,192,184,30,133,235,81,184,158,63,123,20,174,71,225,122,148,191,164,112,61,10,215,163,192,191,10,215,163,112,61,10,183,191,195,245,40,92,143,194,18,192,205,204,204,204,204,204,20,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,191,154,153,153,153,153,153,185,63,92,143,194,245,40,92,11,192,0,0,0,0,0,0,0,0,92,143,194,245,40,92,24,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,20,174,71,225,122,180,63,0,0,0,0,0,0,0,0,236,81,184,30,133,235,193,191,154,153,153,153,153,153,18,192,102,102,102,102,102,102,20,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,92,143,194,245,40,188,191,154,153,153,153,153,153,185,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,133,235,81,184,30,18,192,0,0,0,0,0,0,20,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,92,143,194,245,40,188,191,154,153,153,153,153,153,185,63,113,61,10,215,163,112,3,192,154,153,153,153,153,153,5,192,143,194,245,40,92,143,14,192,205,204,204,204,204,204,16,64,184,30,133,235,81,184,174,191,154,153,153,153,153,153,169,63,154,153,153,153,153,153,185,63,10,215,163,112,61,10,183,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,133,235,81,184,30,18,192,154,153,153,153,153,153,19,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,92,143,194,245,40,188,63,154,153,153,153,153,153,185,63,246,40,92,143,194,245,17,192,154,153,153,153,153,153,19,192], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+153616);
/* memory initializer */ allocate([41,92,143,194,245,40,188,191,154,153,153,153,153,153,185,63,92,143,194,245,40,92,5,64,51,51,51,51,51,51,7,192,246,40,92,143,194,245,12,192,51,51,51,51,51,51,15,192,184,30,133,235,81,184,174,191,184,30,133,235,81,184,174,191,10,215,163,112,61,10,183,191,123,20,174,71,225,122,180,63,133,235,81,184,30,133,15,64,51,51,51,51,51,51,21,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,191,10,215,163,112,61,10,11,192,154,153,153,153,153,153,13,64,61,10,215,163,112,61,6,192,205,204,204,204,204,204,8,192,123,20,174,71,225,122,180,63,123,20,174,71,225,122,180,63,236,81,184,30,133,235,177,191,184,30,133,235,81,184,174,63,113,61,10,215,163,112,9,64,0,0,0,0,0,0,12,192,143,194,245,40,92,143,6,192,205,204,204,204,204,204,8,192,123,20,174,71,225,122,180,191,236,81,184,30,133,235,177,191,236,81,184,30,133,235,177,191,184,30,133,235,81,184,174,63,20,174,71,225,122,20,23,192,0,0,0,0,0,0,0,0,236,81,184,30,133,235,253,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,112,61,10,215,163,192,63,0,0,0,0,0,0,0,0,123,20,174,71,225,122,164,191,82,184,30,133,235,81,12,64,51,51,51,51,51,51,19,192,123,20,174,71,225,122,228,191,205,204,204,204,204,204,236,191,41,92,143,194,245,40,188,191,0,0,0,0,0,0,0,0,123,20,174,71,225,122,148,191,0,0,0,0,0,0,12,192,205,204,204,204,204,204,18,192,195,245,40,92,143,194,229,63,205,204,204,204,204,204,236,191,41,92,143,194,245,40,188,191,0,0,0,0,0,0,0,0,123,20,174,71,225,122,148,191,246,40,92,143,194,245,21,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,191,72,225,122,20,174,71,253,63,0,0,0,0,0,0,4,192,10,215,163,112,61,10,5,64,0,0,0,0,0,0,12,64,184,30,133,235,81,184,174,191,0,0,0,0,0,0,0,0,123,20,174,71,225,122,180,63,41,92,143,194,245,40,8,64,102,102,102,102,102,102,16,192,195,245,40,92,143,194,229,63,205,204,204,204,204,204,236,63,10,215,163,112,61,10,183,191,0,0,0,0,0,0,0,0,123,20,174,71,225,122,148,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,215,163,112,61,10,215,20,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,191,82,184,30,133,235,81,12,192,102,102,102,102,102,102,14,64,154,153,153,153,153,153,5,64,205,204,204,204,204,204,12,64,154,153,153,153,153,153,245,191,205,204,204,204,204,204,252,63,123,20,174,71,225,122,180,63,0,0,0,0,0,0,0,0,123,20,174,71,225,122,164,63,51,51,51,51,51,51,7,192,51,51,51,51,51,51,15,64,195,245,40,92,143,194,229,63,205,204,204,204,204,204,236,63,10,215,163,112,61,10,183,63,0,0,0,0,0,0,0,0,123,20,174,71,225,122,148,63,154,153,153,153,153,153,233,63,154,153,153,153,153,153,241,191,61,10,215,163,112,61,6,192,154,153,153,153,153,153,13,192,123,20,174,71,225,122,148,191,0,0,0,0,0,0,0,0,123,20,174,71,225,122,180,191,102,102,102,102,102,102,16,64,0,0,0,0,0,0,0,0,31,133,235,81,184,30,3,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,215,163,112,61,10,183,191,0,0,0,0,0,0,0,0,154,153,153,153,153,153,169,63,113,61,10,215,163,112,249,191,205,204,204,204,204,204,0,64,41,92,143,194,245,40,2,64,0,0,0,0,0,0,8,64,154,153,153,153,153,153,169,63,0,0,0,0,0,0,0,0,236,81,184,30,133,235,177,63,10,215,163,112,61,10,5,192,0,0,0,0,0,0,12,64,184,30,133,235,81,184,222,191,51,51,51,51,51,51,227,191,133,235,81,184,30,133,7,192,154,153,153,153,153,153,9,192,133,235,81,184,30,133,7,192,154,153,153,153,153,153,9,64,41,92,143,194,245,40,2,64,0,0,0,0,0,0,8,192,195,245,40,92,143,194,241,191,0,0,0,0,0,0,248,191,236,81,184,30,133,235,177,191,0,0,0,0,0,0,0,0,184,30,133,235,81,184,158,191,236,81,184,30,133,235,225,191,154,153,153,153,153,153,233,191,205,204,204,204,204,204,2,192,205,204,204,204,204,204,8,64,0,0,0,0,0,0,0,0,51,51,51,51,51,51,227,191,92,143,194,245,40,92,11,192,102,102,102,102,102,102,254,63,184,30,133,235,81,184,190,191,154,153,153,153,153,153,185,191,10,215,163,112,61,10,5,64,51,51,51,51,51,51,7,192,20,174,71,225,122,20,4,64,102,102,102,102,102,102,6,64,123,20,174,71,225,122,228,191,102,102,102,102,102,102,230,63,184,30,133,235,81,184,222,191,51,51,51,51,51,51,227,191,133,235,81,184,30,133,1,64,51,51,51,51,51,51,7,192,184,30,133,235,81,184,206,63,51,51,51,51,51,51,211,191,51,51,51,51,51,51,1,64,51,51,51,51,51,51,7,64,51,51,51,51,51,51,1,64,51,51,51,51,51,51,7,192,164,112,61,10,215,163,224,63,102,102,102,102,102,102,230,63,143,194,245,40,92,143,0,64,102,102,102,102,102,102,6,192,205,204,204,204,204,204,8,192,0,0,0,0,0,0,0,0,164,112,61,10,215,163,252,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,81,184,30,133,235,177,63,0,0,0,0,0,0,0,0,123,20,174,71,225,122,164,191,41,92,143,194,245,40,236,63,0,0,0,0,0,0,0,0,174,71,225,122,20,174,11,192,225,122,20,174,71,225,0,64,102,102,102,102,102,102,6,64,10,215,163,112,61,10,215,191,0,0,0,0,0,0,224,63,82,184,30,133,235,81,12,64,154,153,153,153,153,153,201,191,0,0,0,0,0,0,12,192,61,10,215,163,112,61,246,191,0,0,0,0,0,0,248,63,143,194,245,40,92,143,254,191,205,204,204,204,204,204,0,192,133,235,81,184,30,133,247,191,0,0,0,0,0,0,0,64,61,10,215,163,112,61,246,63,102,102,102,102,102,102,254,63,143,194,245,40,92,143,0,64,102,102,102,102,102,102,2,192,31,133,235,81,184,30,237,63,0,0,0,0,0,0,240,63,215,163,112,61,10,215,255,63,154,153,153,153,153,153,5,192,102,102,102,102,102,102,10,64,0,0,0,0,0,0,0,0,51,51,51,51,51,51,227,63,41,92,143,194,245,40,220,191,102,102,102,102,102,102,230,191,51,51,51,51,51,51,255,191,205,204,204,204,204,204,4,64,51,51,51,51,51,51,1,64,51,51,51,51,51,51,3,192,51,51,51,51,51,51,227,191,102,102,102,102,102,102,230,191,102,102,102,102,102,102,10,64,225,122,20,174,71,225,234,63,0,0,0,0,0,0,0,0,205,204,204,204,204,204,8,192,205,204,204,204,204,204,8,192,0,0,0,0,0,0,0,0,10,215,163,112,61,10,231,191,123,20,174,71,225,122,212,191,154,153,153,153,153,153,217,63,236,81,184,30,133,235,253,191,0,0,0,0,0,0,4,192,236,81,184,30,133,235,253,63,0,0,0,0,0,0,4,192,123,20,174,71,225,122,212,63,154,153,153,153,153,153,217,63,184,30,133,235,81,184,206,191,51,51,51,51,51,51,211,63,236,81,184,30,133,235,253,191,0,0,0,0,0,0,4,192,184,30,133,235,81,184,206,191,51,51,51,51,51,51,211,191,236,81,184,30,133,235,253,63,0,0,0,0,0,0,4,192,154,153,153,153,153,153,5,192,0,0,0,0,0,0,0,0,205,204,204,204,204,204,248,63,61,10,215,163,112,61,0,64,154,153,153,153,153,153,1,64,215,163,112,61,10,215,7,192,215,163,112,61,10,215,255,191,154,153,153,153,153,153,1,192,184,30,133,235,81,184,190,63,154,153,153,153,153,153,185,191,154,153,153,153,153,153,217,191,0,0,0,0,0,0,224,63,113,61,10,215,163,112,249,63,205,204,204,204,204,204,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,112,61,10,215,163,252,191,0,0,0,0,0,0,0,64,123,20,174,71,225,122,240,191,102,102,102,102,102,102,246,63,102,102,102,102,102,102,242,191,154,153,153,153,153,153,249,191,123,20,174,71,225,122,212,63,0,0,0,0,0,0,224,63,61,10,215,163,112,61,246,63,102,102,102,102,102,102,254,191,205,204,204,204,204,204,2,64,82,184,30,133,235,81,244,191,51,51,51,51,51,51,251,63,51,51,51,51,51,51,227,63,154,153,153,153,153,153,233,63,123,20,174,71,225,122,212,191,154,153,153,153,153,153,217,191,154,153,153,153,153,153,245,63,205,204,204,204,204,204,252,191,41,92,143,194,245,40,220,63,0,0,0,0,0,0,0,0,215,163,112,61,10,215,1,64,225,122,20,174,71,225,234,191,205,204,204,204,204,204,236,63,82,184,30,133,235,81,244,191,102,102,102,102,102,102,246,191,133,235,81,184,30,133,247,191,154,153,153,153,153,153,249,63,236,81,184,30,133,235,209,191,51,51,51,51,51,51,211,191,236,81,184,30,133,235,209,191,154,153,153,153,153,153,217,63,82,184,30,133,235,81,244,191,51,51,51,51,51,51,251,191,236,81,184,30,133,235,209,63,154,153,153,153,153,153,217,191,225,122,20,174,71,225,246,191,0,0,0,0,0,0,248,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,184,30,133,235,81,244,191,51,51,51,51,51,51,251,191,225,122,20,174,71,225,0,64,123,20,174,71,225,122,212,191,154,153,153,153,153,153,217,191,174,71,225,122,20,174,243,191,154,153,153,153,153,153,249,63,10,215,163,112,61,10,243,63,205,204,204,204,204,204,244,191,10,215,163,112,61,10,231,191,154,153,153,153,153,153,233,191,10,215,163,112,61,10,231,63,154,153,153,153,153,153,233,191,102,102,102,102,102,102,242,191,205,204,204,204,204,204,244,191,154,153,153,153,153,153,245,191,0,0,0,0,0,0,248,191,10,215,163,112,61,10,243,191,154,153,153,153,153,153,249,191,184,30,133,235,81,184,190,191,154,153,153,153,153,153,201,63,164,112,61,10,215,163,252,63,0,0,0,0,0,0,0,0,41,92,143,194,245,40,236,191,236,81,184,30,133,235,209,191,154,153,153,153,153,153,217,63,195,245,40,92,143,194,241,63,0,0,0,0,0,0,248,63,72,225,122,20,174,71,253,191,0,0,0,0,0,0,0,0,236,81,184,30,133,235,225,63,184,30,133,235,81,184,190,191,154,153,153,153,153,153,185,63,82,184,30,133,235,81,244,191,102,102,102,102,102,102,246,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,102,102,102,102,102,242,63,0,0,0,0,0,0,248,63,184,30,133,235,81,184,190,191,154,153,153,153,153,153,201,63,195,245,40,92,143,194,241,63,0,0,0,0,0,0,248,63,10,215,163,112,61,10,215,63,0,0,0,0,0,0,224,191,31,133,235,81,184,30,241,191,102,102,102,102,102,102,246,191,195,245,40,92,143,194,241,191,0,0,0,0,0,0,248,63,184,30,133,235,81,184,250,63,0,0,0,0,0,0,0,0,154,153,153,153,153,153,233,63,195,245,40,92,143,194,241,191,0,0,0,0,0,0,0,0,225,122,20,174,71,225,246,63,174,71,225,122,20,174,243,63,205,204,204,204,204,204,244,191,184,30,133,235,81,184,206,191,10,215,163,112,61,10,243,191,205,204,204,204,204,204,244,191,184,30,133,235,81,184,206,191,154,153,153,153,153,153,201,63,41,92,143,194,245,40,220,191,205,204,204,204,204,204,236,191,102,102,102,102,102,102,238,191,154,153,153,153,153,153,241,63,31,133,235,81,184,30,241,63,102,102,102,102,102,102,246,191,102,102,102,102,102,102,242,63,205,204,204,204,204,204,244,191,123,20,174,71,225,122,240,63,154,153,153,153,153,153,241,191,236,81,184,30,133,235,225,191,51,51,51,51,51,51,227,191,195,245,40,92,143,194,229,191,205,204,204,204,204,204,236,63,82,184,30,133,235,81,232,191,0,0,0,0,0,0,240,191,184,30,133,235,81,184,206,191,51,51,51,51,51,51,211,191,102,102,102,102,102,102,238,63,205,204,204,204,204,204,244,191,236,81,184,30,133,235,225,63,102,102,102,102,102,102,230,63,225,122,20,174,71,225,234,63,154,153,153,153,153,153,241,191,236,81,184,30,133,235,225,191,0,0,0,0,0,0,0,0,205,204,204,204,204,204,248,191,31,133,235,81,184,30,237,63,205,204,204,204,204,204,244,191,236,81,184,30,133,235,209,63,51,51,51,51,51,51,211,63,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,191,102,102,102,102,102,102,238,63,205,204,204,204,204,204,244,63,154,153,153,153,153,153,217,63,0,0,0,0,0,0,224,191,41,92,143,194,245,40,236,191,51,51,51,51,51,51,243,191,102,102,102,102,102,102,238,63,154,153,153,153,153,153,241,191,184,30,133,235,81,184,222,191,0,0,0,0,0,0,224,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,133,235,81,184,30,241,191,51,51,51,51,51,51,243,63,41,92,143,194,245,40,220,63,0,0,0,0,0,0,224,191,102,102,102,102,102,102,238,63,154,153,153,153,153,153,241,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113,61,10,215,163,112,237,63,205,204,204,204,204,204,244,191,102,102,102,102,102,102,238,63,0,0,0,0,0,0,240,63,164,112,61,10,215,163,224,191,51,51,51,51,51,51,227,63,113,61,10,215,163,112,249,63,184,30,133,235,81,184,206,63,154,153,153,153,153,153,217,191,31,133,235,81,184,30,237,63,51,51,51,51,51,51,243,63,225,122,20,174,71,225,234,63,154,153,153,153,153,153,241,191,41,92,143,194,245,40,220,191,51,51,51,51,51,51,227,191,225,122,20,174,71,225,234,63,154,153,153,153,153,153,241,63,41,92,143,194,245,40,220,191,51,51,51,51,51,51,227,63,41,92,143,194,245,40,220,191,51,51,51,51,51,51,227,63,225,122,20,174,71,225,234,191,154,153,153,153,153,153,241,191,154,153,153,153,153,153,233,191,0,0,0,0,0,0,0,0,154,153,153,153,153,153,245,63,82,184,30,133,235,81,232,63,154,153,153,153,153,153,201,63,31,133,235,81,184,30,237,191,0,0,0,0,0,0,240,191,154,153,153,153,153,153,201,63,51,51,51,51,51,51,211,191,31,133,235,81,184,30,237,191,51,51,51,51,51,51,243,191,102,102,102,102,102,102,238,191,0,0,0,0,0,0,240,63,184,30,133,235,81,184,222,191,0,0,0,0,0,0,224,191,41,92,143,194,245,40,236,63,0,0,0,0,0,0,240,63,184,30,133,235,81,184,222,63,0,0,0,0,0,0,224,191,102,102,102,102,102,102,238,191,154,153,153,153,153,153,241,191,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,191,174,71,225,122,20,174,239,191,154,153,153,153,153,153,241,63,225,122,20,174,71,225,234,191,154,153,153,153,153,153,241,63,184,30,133,235,81,184,206,191,51,51,51,51,51,51,211,191,154,153,153,153,153,153,201,63,51,51,51,51,51,51,211,191,225,122,20,174,71,225,234,63,154,153,153,153,153,153,241,63,61,10,215,163,112,61,246,191,0,0,0,0,0,0,0,0,236,81,184,30,133,235,209,191,123,20,174,71,225,122,196,191,154,153,153,153,153,153,201,63,225,122,20,174,71,225,234,63,154,153,153,153,153,153,241,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,10,215,163,112,61,246,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,102,102,102,102,102,238,191,0,0,0,0,0,0,240,63,154,153,153,153,153,153,245,63,174,71,225,122,20,174,239,191,0,0,0,0,0,0,0,0,41,92,143,194,245,40,236,63,164,112,61,10,215,163,224,191,0,0,0,0,0,0,0,0,10,215,163,112,61,10,243,191,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,63,82,184,30,133,235,81,232,63,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,184,30,133,235,81,232,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,184,30,133,235,81,232,63,0,0,0,0,0,0,240,63,82,184,30,133,235,81,232,191,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,174,71,225,122,20,174,243,63,82,184,30,133,235,81,232,63,154,153,153,153,153,153,233,63,123,20,174,71,225,122,212,191,154,153,153,153,153,153,217,63,10,215,163,112,61,10,231,191,154,153,153,153,153,153,233,63,154,153,153,153,153,153,217,191,154,153,153,153,153,153,217,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,153,153,153,153,233,191,205,204,204,204,204,204,236,191,195,245,40,92,143,194,229,191,205,204,204,204,204,204,236,63,123,20,174,71,225,122,196,191,154,153,153,153,153,153,201,191,123,20,174,71,225,122,196,191,154,153,153,153,153,153,201,191,195,245,40,92,143,194,229,63,205,204,204,204,204,204,236,191,10,215,163,112,61,10,215,191,0,0,0,0,0,0,224,63,236,81,184,30,133,235,225,191,154,153,153,153,153,153,233,191,10,215,163,112,61,10,231,63,205,204,204,204,204,204,236,191,41,92,143,194,245,40,220,63,51,51,51,51,51,51,227,191,184,30,133,235,81,184,222,191,102,102,102,102,102,102,230,191,123,20,174,71,225,122,196,191,0,0,0,0,0,0,0,0,195,245,40,92,143,194,241,191,123,20,174,71,225,122,212,63,0,0,0,0,0,0,0,0,31,133,235,81,184,30,241,191,51,51,51,51,51,51,227,63,154,153,153,153,153,153,233,191,236,81,184,30,133,235,209,191,154,153,153,153,153,153,217,191,123,20,174,71,225,122,228,191,0,0,0,0,0,0,0,0,31,133,235,81,184,30,237,63,195,245,40,92,143,194,241,63,123,20,174,71,225,122,228,63,205,204,204,204,204,204,236,191,82,184,30,133,235,81,232,63,154,153,153,153,153,153,233,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,184,30,133,235,81,232,191,154,153,153,153,153,153,233,191,123,20,174,71,225,122,240,63,0,0,0,0,0,0,0,0,10,215,163,112,61,10,215,191,123,20,174,71,225,122,228,191,102,102,102,102,102,102,230,191,10,215,163,112,61,10,215,63,154,153,153,153,153,153,217,191,31,133,235,81,184,30,241,63,10,215,163,112,61,10,215,63,0,0,0,0,0,0,224,191,164,112,61,10,215,163,224,191,102,102,102,102,102,102,230,191,51,51,51,51,51,51,227,63,0,0,0,0,0,0,0,0,41,92,143,194,245,40,236,63,102,102,102,102,102,102,238,63,0,0,0,0,0,0,0,0,184,30,133,235,81,184,222,63,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,191,51,51,51,51,51,51,227,63,154,153,153,153,153,153,233,63,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,191,51,51,51,51,51,51,227,191,154,153,153,153,153,153,233,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,184,30,133,235,81,184,190,63,154,153,153,153,153,153,201,63,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,191,195,245,40,92,143,194,229,63,102,102,102,102,102,102,230,63,225,122,20,174,71,225,226,63,154,153,153,153,153,153,233,191,174,71,225,122,20,174,239,191,236,81,184,30,133,235,225,191,51,51,51,51,51,51,227,191,10,215,163,112,61,10,215,63,154,153,153,153,153,153,217,191,195,245,40,92,143,194,229,191,102,102,102,102,102,102,230,191,195,245,40,92,143,194,229,191,102,102,102,102,102,102,230,191,10,215,163,112,61,10,215,191,0,0,0,0,0,0,224,191,41,92,143,194,245,40,220,191,51,51,51,51,51,51,227,63,123,20,174,71,225,122,228,63,102,102,102,102,102,102,230,63,184,30,133,235,81,184,190,191,154,153,153,153,153,153,185,63,164,112,61,10,215,163,224,191,51,51,51,51,51,51,227,63,10,215,163,112,61,10,215,63,154,153,153,153,153,153,217,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,102,102,102,102,102,238,63,225,122,20,174,71,225,234,191,0,0,0,0,0,0,0,0,41,92,143,194,245,40,220,63,236,81,184,30,133,235,225,63,51,51,51,51,51,51,227,63,123,20,174,71,225,122,212,63,51,51,51,51,51,51,211,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,51,51,51,51,51,227,63,102,102,102,102,102,102,230,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,51,51,51,51,51,227,63,102,102,102,102,102,102,230,63,184,30,133,235,81,184,190,191,154,153,153,153,153,153,201,191,164,112,61,10,215,163,224,63,102,102,102,102,102,102,230,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,81,184,30,133,235,225,63,102,102,102,102,102,102,230,63,184,30,133,235,81,184,190,191,154,153,153,153,153,153,185,63,164,112,61,10,215,163,224,191,102,102,102,102,102,102,230,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,92,143,194,245,40,236,63,82,184,30,133,235,81,232,191,0,0,0,0,0,0,0,0,41,92,143,194,245,40,220,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,112,61,10,215,163,224,191,102,102,102,102,102,102,230,191,164,112,61,10,215,163,224,63,102,102,102,102,102,102,230,191,10,215,163,112,61,10,215,63,154,153,153,153,153,153,217,191,41,92,143,194,245,40,220,191,0,0,0,0,0,0,224,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,51,51,51,51,51,227,63,51,51,51,51,51,51,227,63,225,122,20,174,71,225,234,63,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,63,184,30,133,235,81,184,206,191,0,0,0,0,0,0,0,0,154,153,153,153,153,153,233,63,236,81,184,30,133,235,225,191,51,51,51,51,51,51,227,63,123,20,174,71,225,122,212,191,51,51,51,51,51,51,211,191,184,30,133,235,81,184,222,63,0,0,0,0,0,0,224,191,236,81,184,30,133,235,209,63,51,51,51,51,51,51,211,191,184,30,133,235,81,184,222,191,0,0,0,0,0,0,224,191,184,30,133,235,81,184,190,63,154,153,153,153,153,153,201,63,184,30,133,235,81,184,222,63,51,51,51,51,51,51,227,191,184,30,133,235,81,184,222,63,51,51,51,51,51,51,227,63,184,30,133,235,81,184,190,191,154,153,153,153,153,153,201,63,184,30,133,235,81,184,206,63,0,0,0,0,0,0,0,0,82,184,30,133,235,81,232,63,164,112,61,10,215,163,224,191,51,51,51,51,51,51,227,191,164,112,61,10,215,163,224,191,51,51,51,51,51,51,227,63,184,30,133,235,81,184,222,63,0,0,0,0,0,0,224,191,184,30,133,235,81,184,206,191,51,51,51,51,51,51,211,191,184,30,133,235,81,184,190,63,154,153,153,153,153,153,185,191,184,30,133,235,81,184,222,63,51,51,51,51,51,51,227,63,164,112,61,10,215,163,224,63,154,153,153,153,153,153,201,191,10,215,163,112,61,10,215,63,154,153,153,153,153,153,217,63,41,92,143,194,245,40,220,191,0,0,0,0,0,0,224,63,184,30,133,235,81,184,206,191,51,51,51,51,51,51,211,191,184,30,133,235,81,184,222,191,51,51,51,51,51,51,227,191,41,92,143,194,245,40,220,191,51,51,51,51,51,51,227,191,184,30,133,235,81,184,190,191,154,153,153,153,153,153,185,63,82,184,30,133,235,81,232,63,82,184,30,133,235,81,232,63,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,191,184,30,133,235,81,184,222,63,0,0,0,0,0,0,224,63,154,153,153,153,153,153,217,63,0,0,0,0,0,0,224,191,184,30,133,235,81,184,206,191,51,51,51,51,51,51,211,191,41,92,143,194,245,40,220,63,51,51,51,51,51,51,227,191,41,92,143,194,245,40,220,63,51,51,51,51,51,51,227,191,10,215,163,112,61,10,215,63,0,0,0,0,0,0,0,0,123,20,174,71,225,122,228,191,10,215,163,112,61,10,231,63,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,191,0,0,0,0,0,0,0,0,154,153,153,153,153,153,185,191,154,153,153,153,153,153,217,191,51,51,51,51,51,51,227,191,154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,191,41,92,143,194,245,40,220,191,0,0,0,0,0,0,224,63,41,92,143,194,245,40,220,191,0,0,0,0,0,0,224,63,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,63,41,92,143,194,245,40,220,191,0,0,0,0,0,0,224,191,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,63,41,92,143,194,245,40,220,191,0,0,0,0,0,0,224,191,123,20,174,71,225,122,228,63,0,0,0,0,0,0,0,0,123,20,174,71,225,122,212,63,10,215,163,112,61,10,215,191,0,0,0,0,0,0,224,63,154,153,153,153,153,153,201,191,51,51,51,51,51,51,211,191,184,30,133,235,81,184,190,63,154,153,153,153,153,153,185,191,184,30,133,235,81,184,222,63,0,0,0,0,0,0,224,63,184,30,133,235,81,184,190,191,51,51,51,51,51,51,211,63,10,215,163,112,61,10,215,191,0,0,0,0,0,0,224,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,222,63,0,0,0,0,0,0,224,63,184,30,133,235,81,184,222,191,0,0,0,0,0,0,224,63,195,245,40,92,143,194,229,63,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,191,236,81,184,30,133,235,225,63,154,153,153,153,153,153,217,191,41,92,143,194,245,40,220,63,0,0,0,0,0,0,224,191,184,30,133,235,81,184,190,191,154,153,153,153,153,153,185,191,184,30,133,235,81,184,206,63,51,51,51,51,51,51,211,63,154,153,153,153,153,153,217,191,154,153,153,153,153,153,217,63,123,20,174,71,225,122,228,63,0,0,0,0,0,0,0,0,184,30,133,235,81,184,206,191,123,20,174,71,225,122,228,63,0,0,0,0,0,0,0,0,154,153,153,153,153,153,201,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,92,143,194,245,40,220,63,0,0,0,0,0,0,224,191,41,92,143,194,245,40,220,63,0,0,0,0,0,0,224,63,184,30,133,235,81,184,190,191,154,153,153,153,153,153,201,63,10,215,163,112,61,10,215,191,0,0,0,0,0,0,224,191,184,30,133,235,81,184,190,63,0,0,0,0,0,0,0,0,123,20,174,71,225,122,228,63,154,153,153,153,153,153,217,191,0,0,0,0,0,0,224,63,0,0,0,0,0,0,0,0,154,153,153,153,153,153,185,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,153,153,153,153,217,191,0,0,0,0,0,0,224,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,153,153,153,153,217,191,0,0,0,0,0,0,224,191,236,81,184,30,133,235,225,63,0,0,0,0,0,0,0,0,236,81,184,30,133,235,209,63,0,0,0,0,0,0,0,0,154,153,153,153,153,153,185,63,10,215,163,112,61,10,215,63,0,0,0,0,0,0,224,63,0,0,0,0,0,0,0,0,154,153,153,153,153,153,185,191,10,215,163,112,61,10,215,63,0,0,0,0,0,0,224,191,10,215,163,112,61,10,215,63,0,0,0,0,0,0,224,63,0,0,0,0,0,0,0,0,154,153,153,153,153,153,185,191,184,30,133,235,81,184,206,63,154,153,153,153,153,153,201,191,10,215,163,112,61,10,215,191,154,153,153,153,153,153,217,191,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,63,154,153,153,153,153,153,217,63,154,153,153,153,153,153,217,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,215,163,112,61,10,215,191,0,0,0,0,0,0,224,191,10,215,163,112,61,10,215,191,0,0,0,0,0,0,224,191,123,20,174,71,225,122,212,191,0,0,0,0,0,0,224,191,184,30,133,235,81,184,190,191,154,153,153,153,153,153,185,63,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,63,10,215,163,112,61,10,215,191,154,153,153,153,153,153,217,63,51,51,51,51,51,51,227,191,51,51,51,51,51,51,227,63,236,81,184,30,133,235,209,63,0,0,0,0,0,0,0,0,164,112,61,10,215,163,224,63,184,30,133,235,81,184,190,63,154,153,153,153,153,153,185,191,154,153,153,153,153,153,217,63,154,153,153,153,153,153,217,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,191,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,191,123,20,174,71,225,122,212,191,154,153,153,153,153,153,217,63,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,63,123,20,174,71,225,122,196,191,154,153,153,153,153,153,201,63,123,20,174,71,225,122,212,63,154,153,153,153,153,153,217,63,236,81,184,30,133,235,225,63,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,191,123,20,174,71,225,122,212,63,154,153,153,153,153,153,217,191,123,20,174,71,225,122,196,191,154,153,153,153,153,153,201,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,153,153,153,153,217,63,154,153,153,153,153,153,217,63,154,153,153,153,153,153,217,191,154,153,153,153,153,153,217,191,154,153,153,153,153,153,217,191,154,153,153,153,153,153,217,63,10,215,163,112,61,10,215,191,154,153,153,153,153,153,217,63,184,30,133,235,81,184,190,63,154,153,153,153,153,153,185,63,0,0,0,0,0,0,0,0,154,153,153,153,153,153,185,63,10,215,163,112,61,10,215,63,154,153,153,153,153,153,217,63,0,0,0,0,0,0,0,0,154,153,153,153,153,153,185,191,10,215,163,112,61,10,215,63,154,153,153,153,153,153,217,63,10,215,163,112,61,10,215,191,154,153,153,153,153,153,217,63,0,0,0,0,0,0,0,0,154,153,153,153,153,153,185,63,123,20,174,71,225,122,212,63,0,0,0,0,0,0,0,0,41,92,143,194,245,40,220,63,184,30,133,235,81,184,190,63,154,153,153,153,153,153,201,63,236,81,184,30,133,235,209,63,154,153,153,153,153,153,217,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,215,163,112,61,10,215,63,154,153,153,153,153,153,217,63,123,20,174,71,225,122,212,63,154,153,153,153,153,153,217,191,123,20,174,71,225,122,196,191,184,30,133,235,81,184,190,63,154,153,153,153,153,153,185,63,123,20,174,71,225,122,212,63,154,153,153,153,153,153,217,191,154,153,153,153,153,153,201,63,51,51,51,51,51,51,211,63,184,30,133,235,81,184,206,191,51,51,51,51,51,51,211,63,0,0,0,0,0,0,0,0,154,153,153,153,153,153,185,63,123,20,174,71,225,122,212,63,154,153,153,153,153,153,217,63,0,0,0,0,0,0,0,0,154,153,153,153,153,153,185,191,123,20,174,71,225,122,212,191,154,153,153,153,153,153,217,191,123,20,174,71,225,122,212,191,154,153,153,153,153,153,217,63,0,0,0,0,0,0,0,0,154,153,153,153,153,153,185,63,164,112,61,10,215,163,224,191,164,112,61,10,215,163,224,191,164,112,61,10,215,163,224,63,123,20,174,71,225,122,212,63,154,153,153,153,153,153,217,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,20,174,71,225,122,212,63,154,153,153,153,153,153,217,63,123,20,174,71,225,122,212,63,154,153,153,153,153,153,217,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,20,174,71,225,122,212,191,154,153,153,153,153,153,217,191,123,20,174,71,225,122,212,191,154,153,153,153,153,153,217,63,123,20,174,71,225,122,212,63,154,153,153,153,153,153,217,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,20,174,71,225,122,212,63,154,153,153,153,153,153,217,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,20,174,71,225,122,212,191,154,153,153,153,153,153,217,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,20,174,71,225,122,212,63,154,153,153,153,153,153,217,63,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,63,123,20,174,71,225,122,212,63,51,51,51,51,51,51,211,191,123,20,174,71,225,122,196,191,0,0,0,0,0,0,0,0,184,30,133,235,81,184,222,191,154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,63,236,81,184,30,133,235,209,191,51,51,51,51,51,51,211,191,236,81,184,30,133,235,209,63,154,153,153,153,153,153,217,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,81,184,30,133,235,209,63,154,153,153,153,153,153,217,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,81,184,30,133,235,209,63,154,153,153,153,153,153,217,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,81,184,30,133,235,209,191,154,153,153,153,153,153,217,191,236,81,184,30,133,235,209,63,154,153,153,153,153,153,217,63,236,81,184,30,133,235,209,191,154,153,153,153,153,153,217,191,184,30,133,235,81,184,222,191,154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,63,184,30,133,235,81,184,206,63,51,51,51,51,51,51,211,63,41,92,143,194,245,40,220,63,0,0,0,0,0,0,0,0,123,20,174,71,225,122,196,63,184,30,133,235,81,184,206,63,51,51,51,51,51,51,211,63,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,191,184,30,133,235,81,184,206,63,51,51,51,51,51,51,211,63,184,30,133,235,81,184,190,191,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,63,51,51,51,51,51,51,211,63,123,20,174,71,225,122,196,191,154,153,153,153,153,153,201,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,92,143,194,245,40,220,63,123,20,174,71,225,122,212,191,51,51,51,51,51,51,211,63,184,30,133,235,81,184,206,63,0,0,0,0,0,0,0,0,10,215,163,112,61,10,215,191,10,215,163,112,61,10,215,63,0,0,0,0,0,0,0,0,184,30,133,235,81,184,206,63,184,30,133,235,81,184,190,63,154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,63,51,51,51,51,51,51,211,63,184,30,133,235,81,184,190,191,0,0,0,0,0,0,0,0,236,81,184,30,133,235,209,191,51,51,51,51,51,51,211,63,184,30,133,235,81,184,206,191,51,51,51,51,51,51,211,63,184,30,133,235,81,184,190,63,154,153,153,153,153,153,185,63,236,81,184,30,133,235,209,191,51,51,51,51,51,51,211,191,236,81,184,30,133,235,209,191,51,51,51,51,51,51,211,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,81,184,30,133,235,209,191,51,51,51,51,51,51,211,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,81,184,30,133,235,209,191,51,51,51,51,51,51,211,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,81,184,30,133,235,209,63,51,51,51,51,51,51,211,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,81,184,30,133,235,209,191,51,51,51,51,51,51,211,191,236,81,184,30,133,235,209,191,51,51,51,51,51,51,211,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,81,184,30,133,235,209,191,51,51,51,51,51,51,211,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,81,184,30,133,235,209,63,51,51,51,51,51,51,211,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,81,184,30,133,235,209,191,51,51,51,51,51,51,211,63,236,81,184,30,133,235,209,63,51,51,51,51,51,51,211,191,236,81,184,30,133,235,209,191,51,51,51,51,51,51,211,63,154,153,153,153,153,153,217,63,154,153,153,153,153,153,217,63,184,30,133,235,81,184,206,191,51,51,51,51,51,51,211,63,0,0,0,0,0,0,0,0,154,153,153,153,153,153,185,191,123,20,174,71,225,122,196,63,0,0,0,0,0,0,0,0,10,215,163,112,61,10,215,63,154,153,153,153,153,153,201,191,51,51,51,51,51,51,211,63,184,30,133,235,81,184,190,191,154,153,153,153,153,153,185,191,184,30,133,235,81,184,206,191,51,51,51,51,51,51,211,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,206,191,51,51,51,51,51,51,211,63,184,30,133,235,81,184,206,191,51,51,51,51,51,51,211,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,206,191,51,51,51,51,51,51,211,63,184,30,133,235,81,184,206,191,51,51,51,51,51,51,211,63,184,30,133,235,81,184,206,63,51,51,51,51,51,51,211,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,206,63,51,51,51,51,51,51,211,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,206,63,51,51,51,51,51,51,211,63,184,30,133,235,81,184,206,63,51,51,51,51,51,51,211,191,184,30,133,235,81,184,206,63,51,51,51,51,51,51,211,63,184,30,133,235,81,184,206,191,51,51,51,51,51,51,211,63,184,30,133,235,81,184,206,191,51,51,51,51,51,51,211,63,154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,63,123,20,174,71,225,122,196,191,154,153,153,153,153,153,201,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,20,174,71,225,122,212,191,154,153,153,153,153,153,201,63,0,0,0,0,0,0,0,0,154,153,153,153,153,153,185,63,154,153,153,153,153,153,201,63,51,51,51,51,51,51,211,191,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,191,184,30,133,235,81,184,190,63,154,153,153,153,153,153,201,63,123,20,174,71,225,122,196,191,154,153,153,153,153,153,201,63,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,63,51,51,51,51,51,51,211,63,154,153,153,153,153,153,201,63,51,51,51,51,51,51,211,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,153,153,153,153,201,191,51,51,51,51,51,51,211,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,153,153,153,153,201,63,51,51,51,51,51,51,211,63,154,153,153,153,153,153,201,191,51,51,51,51,51,51,211,191,154,153,153,153,153,153,201,191,51,51,51,51,51,51,211,191,154,153,153,153,153,153,201,63,51,51,51,51,51,51,211,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,153,153,153,153,201,63,51,51,51,51,51,51,211,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,153,153,153,153,201,63,51,51,51,51,51,51,211,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,153,153,153,153,201,63,51,51,51,51,51,51,211,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,153,153,153,153,201,63,51,51,51,51,51,51,211,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,153,153,153,153,201,63,51,51,51,51,51,51,211,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,153,153,153,153,201,191,51,51,51,51,51,51,211,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,153,153,153,153,201,191,51,51,51,51,51,51,211,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,153,153,153,153,201,191,51,51,51,51,51,51,211,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,215,163,112,61,10,215,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,215,163,112,61,10,215,63,184,30,133,235,81,184,190,63,154,153,153,153,153,153,185,63,184,30,133,235,81,184,206,191,154,153,153,153,153,153,201,63,184,30,133,235,81,184,190,63,154,153,153,153,153,153,201,191,123,20,174,71,225,122,196,191,154,153,153,153,153,153,201,191,164,112,61,10,215,163,192,191,154,153,153,153,153,153,185,63,41,92,143,194,245,40,204,63,225,122,20,174,71,225,202,63,154,153,153,153,153,153,201,63,0,0,0,0,0,0,0,0,236,81,184,30,133,235,209,191,123,20,174,71,225,122,212,63,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,191,154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,191,184,30,133,235,81,184,190,63,154,153,153,153,153,153,185,191,184,30,133,235,81,184,190,63,154,153,153,153,153,153,185,63,154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,20,174,71,225,122,212,191,123,20,174,71,225,122,212,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,20,174,71,225,122,212,63,123,20,174,71,225,122,212,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,206,191,154,153,153,153,153,153,201,191,184,30,133,235,81,184,206,63,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,63,0,0,0,0,0,0,0,0,184,30,133,235,81,184,206,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,206,191,154,153,153,153,153,153,201,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,206,63,154,153,153,153,153,153,201,63,184,30,133,235,81,184,206,191,154,153,153,153,153,153,201,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,206,191,154,153,153,153,153,153,201,63,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,191,184,30,133,235,81,184,190,63,154,153,153,153,153,153,185,63,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,63,0,0,0,0,0,0,0,0,154,153,153,153,153,153,185,191,184,30,133,235,81,184,190,191,154,153,153,153,153,153,185,63,123,20,174,71,225,122,196,191,154,153,153,153,153,153,201,191,184,30,133,235,81,184,190,191,154,153,153,153,153,153,185,191,123,20,174,71,225,122,196,191,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,63], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+163864);
/* memory initializer */ allocate([154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,63,0,0,0,0,0,0,0,0,154,153,153,153,153,153,201,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,63,184,30,133,235,81,184,190,63,154,153,153,153,153,153,201,191,184,30,133,235,81,184,190,191,154,153,153,153,153,153,185,191,236,81,184,30,133,235,209,63,236,81,184,30,133,235,209,191,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,191,0,0,0,0,0,0,0,0,154,153,153,153,153,153,185,191,0,0,0,0,0,0,0,0,154,153,153,153,153,153,185,63,123,20,174,71,225,122,196,191,154,153,153,153,153,153,201,63,0,0,0,0,0,0,0,0,154,153,153,153,153,153,185,191,123,20,174,71,225,122,196,191,154,153,153,153,153,153,201,191,0,0,0,0,0,0,0,0,154,153,153,153,153,153,185,191,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,191,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,63,123,20,174,71,225,122,196,191,154,153,153,153,153,153,201,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,63,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,191,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,191,123,20,174,71,225,122,196,191,154,153,153,153,153,153,201,63,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,20,174,71,225,122,196,191,154,153,153,153,153,153,201,191,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,191,123,20,174,71,225,122,196,191,154,153,153,153,153,153,201,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,20,174,71,225,122,196,191,154,153,153,153,153,153,201,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,20,174,71,225,122,196,191,154,153,153,153,153,153,201,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,191,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,63,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,20,174,71,225,122,196,191,154,153,153,153,153,153,201,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,20,174,71,225,122,196,191,154,153,153,153,153,153,201,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,63,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,63,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,191,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,20,174,71,225,122,196,191,154,153,153,153,153,153,201,63,0,0,0,0,0,0,0,0,154,153,153,153,153,153,185,63,184,30,133,235,81,184,190,63,154,153,153,153,153,153,201,191,184,30,133,235,81,184,190,63,154,153,153,153,153,153,201,191,0,0,0,0,0,0,0,0,154,153,153,153,153,153,185,191,0,0,0,0,0,0,0,0,154,153,153,153,153,153,185,191,184,30,133,235,81,184,190,63,154,153,153,153,153,153,201,63,0,0,0,0,0,0,0,0,154,153,153,153,153,153,185,191,184,30,133,235,81,184,190,191,154,153,153,153,153,153,201,63,51,51,51,51,51,51,195,191,154,153,153,153,153,153,201,63,184,30,133,235,81,184,206,191,184,30,133,235,81,184,206,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,206,63,184,30,133,235,81,184,206,63,184,30,133,235,81,184,190,63,154,153,153,153,153,153,201,191,184,30,133,235,81,184,190,191,154,153,153,153,153,153,201,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,63,154,153,153,153,153,153,201,63,184,30,133,235,81,184,190,63,154,153,153,153,153,153,201,191,184,30,133,235,81,184,190,63,154,153,153,153,153,153,201,63,184,30,133,235,81,184,190,63,154,153,153,153,153,153,201,63,184,30,133,235,81,184,190,63,154,153,153,153,153,153,201,63,184,30,133,235,81,184,190,63,154,153,153,153,153,153,201,191,184,30,133,235,81,184,190,191,154,153,153,153,153,153,201,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,63,154,153,153,153,153,153,201,63,184,30,133,235,81,184,190,63,0,0,0,0,0,0,0,0,154,153,153,153,153,153,201,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,191,154,153,153,153,153,153,201,191,184,30,133,235,81,184,190,63,154,153,153,153,153,153,201,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,63,154,153,153,153,153,153,201,63,184,30,133,235,81,184,190,191,154,153,153,153,153,153,201,63,184,30,133,235,81,184,190,191,154,153,153,153,153,153,201,63,184,30,133,235,81,184,190,63,154,153,153,153,153,153,201,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,63,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,63,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,191,154,153,153,153,153,153,201,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,191,154,153,153,153,153,153,201,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,191,154,153,153,153,153,153,201,191,184,30,133,235,81,184,190,191,154,153,153,153,153,153,201,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,63,154,153,153,153,153,153,201,191,184,30,133,235,81,184,190,63,154,153,153,153,153,153,201,191,184,30,133,235,81,184,190,63,154,153,153,153,153,153,201,63,184,30,133,235,81,184,190,191,154,153,153,153,153,153,201,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,63,154,153,153,153,153,153,201,191,184,30,133,235,81,184,190,63,154,153,153,153,153,153,201,191,184,30,133,235,81,184,190,63,154,153,153,153,153,153,201,63,184,30,133,235,81,184,190,63,0,0,0,0,0,0,0,0,154,153,153,153,153,153,201,63,184,30,133,235,81,184,190,191,154,153,153,153,153,153,201,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,63,154,153,153,153,153,153,201,63,123,20,174,71,225,122,196,191,0,0,0,0,0,0,0,0,123,20,174,71,225,122,196,63,154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,153,153,153,153,201,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,153,153,153,153,201,191,154,153,153,153,153,153,201,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,153,153,153,153,201,191,184,30,133,235,81,184,190,63,0,0,0,0,0,0,0,0,123,20,174,71,225,122,196,191,154,153,153,153,153,153,201,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,153,153,153,153,201,63,184,30,133,235,81,184,190,63,154,153,153,153,153,153,185,191,0,0,0,0,0,0,0,0,154,153,153,153,153,153,185,63,123,20,174,71,225,122,196,63,123,20,174,71,225,122,196,191,123,20,174,71,225,122,196,191,123,20,174,71,225,122,196,191,123,20,174,71,225,122,196,191,123,20,174,71,225,122,196,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,20,174,71,225,122,196,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,20,174,71,225,122,196,191,123,20,174,71,225,122,196,191,123,20,174,71,225,122,196,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,20,174,71,225,122,196,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,20,174,71,225,122,196,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,20,174,71,225,122,196,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,20,174,71,225,122,196,63,123,20,174,71,225,122,196,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,20,174,71,225,122,196,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,20,174,71,225,122,196,191,123,20,174,71,225,122,196,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,20,174,71,225,122,196,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,20,174,71,225,122,196,191,123,20,174,71,225,122,196,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,20,174,71,225,122,196,191,123,20,174,71,225,122,196,191,184,30,133,235,81,184,190,63,154,153,153,153,153,153,185,63,184,30,133,235,81,184,190,63,154,153,153,153,153,153,185,191,184,30,133,235,81,184,190,63,154,153,153,153,153,153,185,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,63,154,153,153,153,153,153,185,63,184,30,133,235,81,184,190,191,154,153,153,153,153,153,185,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,63,154,153,153,153,153,153,185,63,184,30,133,235,81,184,190,63,154,153,153,153,153,153,185,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,191,154,153,153,153,153,153,185,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,63,154,153,153,153,153,153,185,63,184,30,133,235,81,184,190,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,63,184,30,133,235,81,184,190,63,184,30,133,235,81,184,190,63,184,30,133,235,81,184,190,63,184,30,133,235,81,184,190,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,63,184,30,133,235,81,184,190,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,63,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,63,184,30,133,235,81,184,190,63,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,63,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,63,184,30,133,235,81,184,190,63,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,63,184,30,133,235,81,184,190,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,63,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,63,184,30,133,235,81,184,190,63,184,30,133,235,81,184,190,63,184,30,133,235,81,184,190,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,63,184,30,133,235,81,184,190,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,63,184,30,133,235,81,184,190,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,63,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,63,184,30,133,235,81,184,190,63,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,191,184,30,133,235,81,184,190,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,63,184,30,133,235,81,184,190,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,133,235,81,184,190,63,184,30,133,235,81,184,190,63,123,20,174,71,225,122,180,63,0,0,0,0,0,0,0,0,123,20,174,71,225,122,164,63,31,0,0,0,28,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,192,159,0,0,184,206,0,0,176,253,0,0,245,1,0,0,245,1,0,0,137,0,0,0,184,143,0,0,32,151,0,0,160,158,0,0,79,0,0,0,80,0,0,0,12,0,0,0,128,142,0,0,248,142,0,0,112,143,0,0,5,0,0,0,5,0,0,0,3,0,0,0,48,96,0,0,16,116,0,0,8,136,0,0,212,0,0,0,213,0,0,0,69,0,0,0,128,85,0,0,48,90,0,0,224,94,0,0,50,0,0,0,50,0,0,0,14,0,0,0,160,83,0,0,120,84,0,0,80,85,0,0,9,0,0,0,9,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,240,255,255,255,4,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,255,255,255,16,0,0,0,252,255,255,255,251,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,56,0,0,0,139,255,255,255,214,255,255,255,216,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,240,255,255,255,4,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,125,0,0,0,213,255,255,255,0,0,0,0,202,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,2,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,8,0,0,0,255,255,255,255,251,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,249,255,255,255,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,248,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,248,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,142,255,255,255,0,0,0,0,0,0,0,0,61,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,255,255,255,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,6,0,0,0,253,255,255,255,0,0,0,0,2,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,248,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,254,255,255,68,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,8,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,203,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,8,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,248,255,255,255,1,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,6,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,6,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,244,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,14,0,0,0,38,255,255,255,117,0,0,0,8,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,31,254,255,255,255,254,255,255,239,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,21,254,255,255,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,254,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,243,255,255,3,20,0,0,175,10,0,0,111,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,92,250,255,255,105,9,0,0,250,250,255,255,253,252,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,11,0,0,0,232,255,255,255,245,255,255,255,247,255,255,255,2,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,0,247,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,19,0,0,0,235,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,0,0,0,196,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,2,0,0,0,252,255,255,255,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,243,255,255,255,249,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,255,255,255,227,255,255,255,240,255,255,255,14,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,252,255,255,255,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,229,255,255,255,242,255,255,255,251,255,255,255,254,255,255,255,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,249,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,1,0,0,0,0,0,0,0,0,0,0,105,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,240,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,226,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,255,255,255,254,255,255,255,0,0,0,0,255,255,255,255,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,18,0,0,0,239,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,255,255,255,253,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,255,255,255,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,215,255,255,255,175,0,0,0,76,0,0,0,17,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,248,255,255,255,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,255,255,255,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,169,1,0,0,212,0,0,0,123,255,255,255,13,1,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,248,255,255,255,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,4,0,0,86,2,0,0,63,1,0,0,127,253,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,243,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,0,0,0,78,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,8,0,0,0,242,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,244,255,255,255,249,255,255,255,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,243,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,5,0,0,0,250,255,255,255,3,0,0,0,3,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,252,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,3,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,253,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,251,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,249,255,255,255,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,252,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,255,255,255,247,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,1,0,0,178,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,254,255,255,77,254,255,255,24,255,255,255,246,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,7,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,131,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,239,255,255,255,237,255,255,255,246,255,255,255,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,247,255,255,255,245,255,255,255,6,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,3,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,255,255,255,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,24,0,0,0,11,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,247,255,255,255,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,252,255,255,255,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,253,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,255,255,255,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,17,0,0,0,240,255,255,255,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,255,255,255,4,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,243,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,24,0,0,0,13,0,0,0,254,255,255,255,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,255,255,255,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,255,255,255,233,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,1,0,0,0,0,0,0,0,5,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,248,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,238,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,253,255,255,255,1,0,0,0,0,0,0,0,250,255,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,254,255,255,255,1,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,255,255,255,252,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,251,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,255,255,255,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,242,255,255,255,8,0,0,0,3,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,255,255,255,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,8,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,247,255,255,255,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,241,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,0,0,234,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,241,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,251,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,250,255,255,255,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,5,0,0,0,3,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,0,0,0,240,255,255,255,247,255,255,255,208,255,255,255,254,255,255,255,1], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+174104);
/* memory initializer */ allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,7,0,0,0,4,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,163,254,255,255,194,255,255,255,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,248,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,241,255,255,255,22,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,255,255,255,255,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,203,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,236,255,255,255,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,20,0,0,0,235,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,241,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,249,255,255,255,252,255,255,255,248,255,255,255,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,246,255,255,255,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,255,255,255,178,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,186,255,255,255,219,255,255,255,245,255,255,255,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,254,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,3,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,250,255,255,255,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,239,255,255,255,252,255,255,255,254,255,255,255,9,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,1,0,0,0,0,0,0,0,5,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,32,0,0,0,15,0,0,0,248,255,255,255,17,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,174,0,0,0,84,0,0,0,45,0,0,0,163,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,190,255,255,255,244,255,255,255,250,255,255,255,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,47,0,0,0,8,0,0,0,4,0,0,0,231,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,8,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,247,255,255,255,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,234,255,255,255,244,255,255,255,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,243,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,255,255,255,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,239,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,247,255,255,255,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,1,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,253,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,252,255,255,255,254,255,255,255,2,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,253,255,255,255,255,255,255,255,251,255,255,255,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,251,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,253,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,254,255,255,255,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,8,0,0,0,243,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,0,0,66,0,0,0,35,0,0,0,231,255,255,255,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,244,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,242,255,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,248,255,255,255,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,18,0,0,0,240,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,188,255,255,255,222,255,255,255,238,255,255,255,36,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,249,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,250,255,255,255,253,255,255,255,251,255,255,255,254,255,255,255,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,252,255,255,255,254,255,255,255,3,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,254,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,5,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0,0,17,0,0,0,9,0,0,0,215,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,8,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,42,1,0,0,159,0,0,0,211,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,246,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,10,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,248,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,174,255,255,255,36,1,0,0,156,0,0,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,183,255,255,255,17,0,0,0,9,0,0,0,39,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,247,255,255,255,240,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,255,255,255,255,254,255,255,255,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,253,255,255,255,7,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,247,255,255,255,251,255,255,255,253,255,255,255,5,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,254,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,238,255,255,255,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,0,0,0,228,255,255,255,241,255,255,255,226,255,255,255,254,255,255,255,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,255,255,255,253,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,248,255,255,255,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,248,255,255,255,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,255,255,255,57,0,0,0,30,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,23,0,0,0,7,0,0,0,3,0,0,0,243,255,255,255,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,1,0,0,80,0,0,0,43,0,0,0,110,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,254,255,255,174,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,255,255,255,209,255,255,255,231,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,6,0,0,0,47,0,0,0,25,0,0,0,253,255,255,255,255,255,255,255,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,0,0,0,13,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,252,255,255,255,254,255,255,255,254,255,255,255,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,255,255,255,146,255,255,255,197,255,255,255,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,51,0,0,0,114,0,0,0,61,0,0,0,229,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,123,255,255,255,0,0,0,0,0,0,0,0,57,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,3,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,253,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,255,255,255,250,255,255,255,253,255,255,255,11,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,253,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,255,255,255,235,255,255,255,245,255,255,255,6,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,251,255,255,255,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,238,255,255,255,76,254,255,255,23,255,255,255,9,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,5,0,0,0,248,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,3,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,6,0,0,0,248,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,253,255,255,255,255,255,255,255,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,248,255,255,255,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,253,255,255,255,255,255,255,255,3,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,203,255,255,255,247,255,255,255,251,255,255,255,28,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,248,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,206,255,255,255,194,0,0,0,103,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,243,255,255,255,52,0,0,0,28,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,255,255,255,248,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,6,0,0,0,49,0,0,0,26,0,0,0,253,255,255,255,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,255,255,255,209,255,255,255,231,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,5,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,52,0,0,0,23,0,0,0,10,0,0,0,233,255,255,255,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,249,255,255,255,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,252,255,255,255,8,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,243,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,248,255,255,255,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,4,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,255,255,255,4,0,0,0,2,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,8,0,0,0,252,255,255,255,254,255,255,255,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,15,0,0,0,7,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,118,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,8,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,249,255,255,255,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,248,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,249,255,255,255,253,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,0,0,0,0,0,0,0,0,0,0,227,255,255,255,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,219,255,255,255,35,0,0,0,19,0,0,0,20,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,3,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,247,255,255,255,242,255,255,255,248,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,253,255,255,255,247,255,255,255,251,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,255,255,255,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,253,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,255,255,255,40,0,0,0,21,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,11,0,0,0,207,255,255,255,230,255,255,255,249,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,154,247,255,255,0,0,0,0,0,0,0,0,164,3,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,253,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,255,255,255,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,85,0,0,0,0,0,0,0,0,0,0,0,219,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,255,255,255,153,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,250,255,255,255,9,0,0,0,5,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,243,255,255,255,249,255,255,255,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,248,255,255,255,12,0,0,0,6,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,205,255,255,255,0,0,0,0,0,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,245,255,255,255,244,254,255,255,140,255,255,255,5,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,251,255,255,255,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,7,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,31,0,0,0,6,0,0,0,3,0,0,0,239,255,255,255,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,251,255,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,0,0,0,27,0,0,0,14,0,0,0,181,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,57,0,0,0,11,0,0,0,6,0,0,0,226,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,248,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,242,255,255,255,217,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,15,0,0,0,8,0,0,0,254,255,255,255,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,255,255,255,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,11,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,245,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,252,255,255,255,10,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,253,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,247,255,255,255,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,249,255,255,255,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,255,255,255,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,42,0,0,0,223,0,0,0,119,0,0,0,234,255,255,255,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+184344);
/* memory initializer */ allocate([229,255,255,255,113,255,255,255,179,255,255,255,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,9,0,0,0,49,0,0,0,26,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,114,251,255,255,0,0,0,0,0,0,0,0,249,1,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,255,255,255,0,0,0,0,1,0,0,0,4,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,253,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,0,0,0,0,0,0,0,0,0,0,0,193,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,8,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,251,255,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,251,255,255,255,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,232,255,255,255,243,255,255,255,250,255,255,255,10,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,255,255,255,239,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,8,0,0,0,12,0,0,0,5,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,247,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,229,255,255,255,254,255,255,255,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,253,255,255,255,0,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,255,255,255,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,5,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,255,255,255,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,24,0,0,0,5,0,0,0,2,0,0,0,245,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,245,255,255,255,251,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,30,0,0,0,253,255,255,255,254,255,255,255,240,255,255,255,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,247,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,102,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,253,255,255,255,255,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,6,0,0,0,17,0,0,0,9,0,0,0,253,255,255,255,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,247,255,255,255,251,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,6,0,0,0,3,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,129,255,255,255,21,0,0,0,9,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,248,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,250,255,255,255,246,255,255,255,252,255,255,255,3,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,16,0,0,0,9,0,0,0,4,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,251,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,247,255,255,255,3,0,0,0,1,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,253,255,255,255,254,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,255,255,255,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,246,255,255,255,0,0,0,0,1,0,0,0,5,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,1,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,0,0,0,169,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,253,255,255,255,250,255,255,255,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,249,255,255,255,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,240,255,255,255,253,255,255,255,255,255,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,249,255,255,255,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,253,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,188,255,255,255,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,252,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,242,255,255,255,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,244,255,255,255,253,255,255,255,254,255,255,255,6,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,252,255,255,255,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,66,0,0,0,29,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,234,1,0,0,0,0,0,0,0,0,0,0,43,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,234,255,255,255,93,0,0,0,49,0,0,0,12,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,252,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,249,255,255,255,28,0,0,0,15,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,253,255,255,255,13,0,0,0,7,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,210,255,255,255,14,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,255,255,255,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,245,255,255,255,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,249,255,255,255,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,25,0,0,0,106,0,0,0,57,0,0,0,243,255,255,255,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,21,0,0,0,11,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,249,255,255,255,224,255,255,255,239,255,255,255,4,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,250,255,255,255,253,255,255,255,254,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,30,0,0,0,250,255,255,255,254,255,255,255,243,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,255,255,255,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,255,255,255,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,255,255,255,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,253,255,255,255,255,255,255,255,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,3,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,248,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,118,0,0,0,0,0,0,0,0,0,0,0,204,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,251,255,255,255,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,255,255,255,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,14,0,0,0,197,255,255,255,225,255,255,255,248,255,255,255,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,254,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,5,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,54,254,255,255,0,0,0,0,0,0,0,0,198,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,255,255,255,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,211,255,255,255,236,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,255,255,255,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,247,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,254,255,255,255,255,255,255,255,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,255,255,255,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,255,255,255,13,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,248,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,178,255,255,255,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,251,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,72,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,252,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,251,255,255,230,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,7,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,253,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,253,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,250,255,255,255,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,254,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,181,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,255,255,255,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,243,255,255,255,226,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,248,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,248,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,229,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,248,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,255,255,255,245,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,8,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,5,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,255,255,255,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,255,255,255,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,242,255,255,255,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,182,255,255,255,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,253,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,251,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,11], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+194588);
/* memory initializer */ allocate([1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,250,254,255,255,0,0,0,0,0,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,229,255,255,255,244,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,237,255,255,255,248,255,255,255,252,255,255,255,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,202,0,0,0,0,0,0,0,0,0,0,0,169,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,248,255,255,255,35,0,0,0,19,0,0,0,5,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,251,255,255,255,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,221,255,255,255,208,255,255,255,235,255,255,255,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,253,255,255,255,251,255,255,255,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,255,255,255,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,247,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,12,0,0,0,55,0,0,0,29,0,0,0,250,255,255,255,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,253,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,253,255,255,255,243,255,255,255,249,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,251,255,255,255,249,255,255,255,253,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,8,0,0,0,225,255,255,255,240,255,255,255,252,255,255,255,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,113,0,0,0,0,0,0,0,0,0,0,0,207,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,249,255,255,255,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,232,255,255,255,246,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,249,255,255,255,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,252,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,243,255,255,255,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,238,255,255,255,246,255,255,255,252,255,255,255,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,228,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,251,255,255,255,6,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,247,255,255,255,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,251,255,255,255,247,255,255,255,252,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,250,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,142,255,255,255,207,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,255,255,255,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,117,0,0,0,0,0,0,0,0,0,0,0,205,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,255,255,255,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,251,255,255,255,19,0,0,0,10,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,248,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,253,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,250,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,252,255,255,255,21,0,0,0,11,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,250,255,255,255,0,0,0,0,255,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,253,255,255,255,8,0,0,0,4,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,18,0,0,0,227,255,255,255,243,255,255,255,248,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,8,0,0,0,34,0,0,0,18,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,12,0,0,0,6,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,54,0,0,0,241,255,255,255,249,255,255,255,232,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,102,255,255,255,226,255,255,255,243,255,255,255,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,80,0,0,0,185,255,255,255,225,255,255,255,221,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,236,255,255,255,247,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,255,255,255,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,11,0,0,0,5,0,0,0,2,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,255,255,255,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,61,0,0,0,160,255,255,255,214,255,255,255,229,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,9,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,14,0,0,0,9,0,0,0,4,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,245,255,255,255,250,255,255,255,253,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,8,0,0,0,255,255,255,255,251,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,253,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,248,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,123,0,0,0,97,254,255,255,76,255,255,255,203,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,221,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,7,0,0,0,224,255,255,255,239,255,255,255,252,255,255,255,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,247,255,255,255,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,252,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,167,255,255,255,0,0,0,0,0,0,0,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,255,255,255,16,0,0,0,252,255,255,255,251,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,170,255,255,255,237,255,255,255,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,8,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,237,255,255,255,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,8,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,133,255,255,255,96,254,255,255,76,255,255,255,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,248,255,255,255,1,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,253,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,12,0,0,0,250,255,255,255,253,255,255,255,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,251,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,243,255,255,255,9,0,0,0,4,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,255,255,255,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,241,255,255,255,249,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,255,255,255,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,255,255,255,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,194,255,255,255,159,255,255,255,214,255,255,255,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,245,255,255,255,5,0,0,0,2,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,237,255,255,255,248,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,253,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,248,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,8,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,171,255,255,255,186,255,255,255,225,255,255,255,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,163,0,0,0,244,255,255,255,251,255,255,255,184,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,193,255,255,255,240,255,255,255,249,255,255,255,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,235,255,255,255,224,255,255,255,242,255,255,255,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,253,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,10,0,0,0,4,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,249,255,255,255,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,247,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,252,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,83,255,255,255,181,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,249,255,255,255,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,7,0,0,0,244,255,255,255,251,255,255,255,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,252,255,255,255,254,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,249,255,255,255,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,74,0,0,0,0,0,0,0,0,0,0,0,224,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,249,255,255,255,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,253,255,255,255,12,0,0,0,6,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,26,0,0,0,242,255,255,255,250,255,255,255,245,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,19,0,0,0,0,0,0,0,0,0,0,0,248,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,6,0,0,0,24,0,0,0,13,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,246,255,255,255,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,11,0,0,0,253,255,255,255,255,255,255,255,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,5,0,0,0,233,255,255,255,244,255,255,255,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,173,254,255,255,0,0,0,0,0,0,0,0,147,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,247,255,255,255,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,246,255,255,255,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,248,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,252,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,9,0,0,0,245,255,255,255,251,255,255,255,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,248,255,255,255,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,255,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,6,0,0,0,247,255,255,255,252,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,244,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,67,0,0,0,165,255,255,255,217,255,255,255,227,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,30,0,0,0,238,255,255,255,248,255,255,255,243,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,142,255,255,255,206,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,5,2,0,0,16,0,0,0,7], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+204828);
/* memory initializer */ allocate([32,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,249,255,255,255,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,143,0,0,0,253,255,255,255,255,255,255,255,194,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,243,255,255,255,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,255,255,255,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,12,0,0,0,5,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,248,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,231,255,255,255,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,16,0,0,0,252,255,255,255,251,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,8,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,234,255,255,255,12,0,0,0,5,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,255,255,255,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,234,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,255,255,255,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,7,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,255,255,255,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,252,255,255,255,4,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,251,255,255,255,245,255,255,255,251,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,4,0,0,0,17,0,0,0,9,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,252,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,248,255,255,255,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,4,0,0,0,241,255,255,255,248,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,114,1,0,0,248,255,255,255,0,0,0,0,96,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,250,255,255,255,3,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,248,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,246,255,255,255,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,9,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,17,0,0,0,7,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,247,255,255,255,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,34,0,0,0,0,0,0,0,0,0,0,0,241,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,247,255,255,255,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,5,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,219,255,255,255,249,255,255,255,253,255,255,255,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,255,255,255,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,13,0,0,0,7,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,253,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,72,255,255,255,253,255,255,255,255,255,255,255,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,246,255,255,255,250,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,31,0,0,0,250,255,255,255,0,0,0,0,243,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,253,255,255,255,224,255,255,255,242,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,248,255,255,255,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,247,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,19,0,0,0,233,255,255,255,246,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,249,255,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,9,0,0,0,5,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,249,255,255,255,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,8,0,0,0,252,255,255,255,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,247,255,255,255,0,0,0,0,1,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,12,0,0,0,5,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,17,0,0,0,253,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,255,255,255,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,7,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,248,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,251,255,255,255,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,14,0,0,0,253,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,247,255,255,255,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,247,255,255,255,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,247,255,255,255,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,5,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,247,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,253,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,9,0,0,0,4,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,248,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,248,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,248,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,248,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,254,255,255,255,0,0,0,0,1,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,3,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,248,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,222,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,253,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,255,255,255,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,254,255,255,255,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,126,0,0,0,193,255,255,255,229,255,255,255,201,255,255,255,255,255,255,255,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,10,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,28,0,0,0,15,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,248,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,4,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,8,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,4,0,0,0,255,255,255,255,255,255,255,255,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,8,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,255,255,255,193,255,255,255,229,255,255,255,55,0,0,0,2,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,245,255,255,255,250,255,255,255,245,255,255,255,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,255,255,255,245,255,255,255,250,255,255,255,11,0,0,0,254,255,255,255,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,244,255,255,255,251,255,255,255,245,255,255,255,1,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,8,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,248,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,255,255,255,244,255,255,255,251,255,255,255,10,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,255,255,255,255,254,255,255,255,255,255,255,255,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,250,255,255,255,255,255,255,255,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,1,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,254,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,248,255,255,255,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,248,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+215068);
/* memory initializer */ allocate([8,0,0,0,240,255,255,255,4,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,243,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,251,255,255,255,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,248,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,248,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,8,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,248,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,243,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,248,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,243,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,238,255,255,255,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,251,255,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,251,255,255,255,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,4,0,0,0,248,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,253,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,240,255,255,255,4,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,248,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,245,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,240,255,255,255,4,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,248,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,241,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,8,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,248,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,253,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,8,0,0,0,243,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,253,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,238,255,255,255,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,19,0,0,0,235,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,248,255,255,255,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,247,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,238,255,255,255,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,240,255,255,255,4,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,250,255,255,255,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,246,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,253,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,247,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,245,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,241,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,252,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,253,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,252,255,255,255,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,252,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,248,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,247,255,255,255,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,253,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,248,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,246,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,248,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,253,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,251,255,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+225352);
/* memory initializer */ allocate([2,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,246,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,248,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,247,255,255,255,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,250,255,255,255,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,3,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,8,0,0,0,242,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,241,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,253,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,250,255,255,255,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,247,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,245,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,251,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,241,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,248,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,2,0,0,0,252,255,255,255,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,251,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,248,255,255,255,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,248,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,247,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,247,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,254,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,0,0,0,0,250,255,255,255,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,253,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,248,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,249,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,254,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,241,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,253,255,255,255,7,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,251,255,255,255,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,253,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,248,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,245,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,244,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,248,255,255,255,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,254,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,247,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,3,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,247,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,247,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,247,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,248,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,8,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,246,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,243,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,253,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,247,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,248,255,255,255,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,241,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,243,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,248,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,246,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,251,255,255,255,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,3,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,248,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,4,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,245,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,250,255,255,255,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,248,255,255,255,1,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,254,255,255,255,254,255,255,255,0,0,0,0,253,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,248,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,8,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,2], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+235600);
/* memory initializer */ allocate([1,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,251,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,243,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,248,255,255,255,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,254,255,255,255,0,0,0,0,253,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,255,255,255,255,0,0,0,0,238,255,255,255,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,255,255,255,255,0,0,0,0,251,255,255,255,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,240,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,246,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,254,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,4,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,0,0,0,0,253,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,20,0,0,0,236,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,5,0,0,0,248,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,245,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,254,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,248,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,20,0,0,0,235,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,244,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,244,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,239,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,248,255,255,255,1,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,254,255,255,255,0,0,0,0,246,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,247,255,255,255,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,254,255,255,255,254,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,251,255,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,246,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,249,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,246,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,248,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,8,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,251,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,1,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,251,255,255,255,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,246,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,248,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,247,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,248,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,248,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,250,255,255,255,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,249,255,255,255,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,248,255,255,255,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,248,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,251,255,255,255,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,3,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,253,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0,253,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,248,255,255,255,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,247,255,255,255,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,243,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,253,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,245,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,239,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,248,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,248,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,248,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,8,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,248,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,8,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,17,0,0,0,240,255,255,255,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,247,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,248,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,8,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,252,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,3,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+245848);
/* memory initializer */ allocate([255,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,252,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,253,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,247,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,254,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,246,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,246,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,253,255,255,255,1,0,0,0,0,0,0,0,250,255,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,5,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,1,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,252,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,5,0,0,0,247,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,248,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,8,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,253,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,254,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,241,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,246,255,255,255,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,253,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,252,255,255,255,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,251,255,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,253,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,243,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,242,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,245,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,247,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,248,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,250,255,255,255,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,248,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,253,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,244,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,247,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,248,255,255,255,1,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,246,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,247,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,248,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,240,255,255,255,4,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,243,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,247,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,249,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,248,255,255,255,1,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,253,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,250,255,255,255,3,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,21,0,0,0,37,0,0,0,51,0,0,0,65,0,0,0,79,0,0,0,91,0,0,0,103,0,0,0,115,0,0,0,127,0,0,0,139,0,0,0,151,0,0,0,163,0,0,0,172,0,0,0,184,0,0,0,196,0,0,0,207,0,0,0,219,0,0,0,231,0,0,0,240,0,0,0,252,0,0,0,5,1,0,0,17,1,0,0,29,1,0,0,41,1,0,0,53,1,0,0,62,1,0,0,71,1,0,0,83,1,0,0,95,1,0,0,107,1,0,0,116,1,0,0,128,1,0,0,140,1,0,0,149,1,0,0,159,1,0,0,167,1,0,0,179,1,0,0,188,1,0,0,196,1,0,0,204,1,0,0,211,1,0,0,218,1,0,0,226,1,0,0,234,1,0,0,242,1,0,0,250,1,0,0,1,2,0,0,9,2,0,0,16,2,0,0,24,2,0,0,31,2,0,0,39,2,0,0,47,2,0,0,54,2,0,0,62,2,0,0,70,2,0,0,78,2,0,0,85,2,0,0,93,2,0,0,101,2,0,0,108,2,0,0,116,2,0,0,124,2,0,0,132,2,0,0,139,2,0,0,146,2,0,0,154,2,0,0,162,2,0,0,168,2,0,0,175,2,0,0,183,2,0,0,190,2,0,0,198,2,0,0,205,2,0,0,213,2,0,0,220,2,0,0,227,2,0,0,234,2,0,0,241,2,0,0,248,2,0,0,255,2,0,0,6,3,0,0,14,3,0,0,22,3,0,0,30,3,0,0,37,3,0,0,44,3,0,0,51,3,0,0,58,3,0,0,65,3,0,0,72,3,0,0,78,3,0,0,85,3,0,0,92,3,0,0,99,3,0,0,106,3,0,0,113,3,0,0,120,3,0,0,127,3,0,0,133,3,0,0,140,3,0,0,146,3,0,0,153,3,0,0,160,3,0,0,166,3,0,0,173,3,0,0,180,3,0,0,187,3,0,0,194,3,0,0,201,3,0,0,208,3,0,0,214,3,0,0,221,3,0,0,228,3,0,0,235,3,0,0,242,3,0,0,249,3,0,0,0,4,0,0,7,4,0,0,13,4,0,0,19,4,0,0,26,4,0,0,33,4,0,0,40,4,0,0,47,4,0,0,54,4,0,0,60,4,0,0,67,4,0,0,74,4,0,0,80,4,0,0,88,4,0,0,94,4,0,0,100,4,0,0,107,4,0,0,114,4,0,0,121,4,0,0,127,4,0,0,133,4,0,0,140,4,0,0,147,4,0,0,154,4,0,0,161,4,0,0,168,4,0,0,175,4,0,0,181,4,0,0,188,4,0,0,194,4,0,0,202,4,0,0,208,4,0,0,215,4,0,0,221,4,0,0,228,4,0,0,235,4,0,0,242,4,0,0,248,4,0,0,254,4,0,0,4,5,0,0,12,5,0,0,18,5,0,0,24,5,0,0,30,5,0,0,36,5,0,0,43,5,0,0,49,5,0,0,55,5,0,0,61,5,0,0,67,5,0,0,73,5,0,0,79,5,0,0,85,5,0,0,91,5,0,0,97,5,0,0,103,5,0,0,109,5,0,0,116,5,0,0,122,5,0,0,128,5,0,0,134,5,0,0,140,5,0,0,146,5,0,0,154,5,0,0,160,5,0,0,166,5,0,0,172,5,0,0,179,5,0,0,185,5,0,0,191,5,0,0,197,5,0,0,202,5,0,0,208,5,0,0,213,5,0,0,219,5,0,0,224,5,0,0,229,5,0,0,234,5,0,0,240,5,0,0,247,5,0,0,252,5,0,0,2,6,0,0,7,6,0,0,12,6,0,0,17,6,0,0,22,6,0,0,28,6,0,0,33,6,0,0,38,6,0,0,43,6,0,0,48,6,0,0,53,6,0,0,58,6,0,0,60,6,0,0,62,6,0,0,64,6,0,0,66,6,0,0,69,6,0,0,72,6,0,0,74,6,0,0,76,6,0,0,81,6,0,0,83,6,0,0,87,6,0,0,89,6,0,0,91,6,0,0,93,6,0,0,96,6,0,0,98,6,0,0,104,6,0,0,106,6,0,0,108,6,0,0,110,6,0,0,112,6,0,0,114,6,0,0,116,6,0,0,118,6,0,0,122,6,0,0,124,6,0,0,126,6,0,0,128,6,0,0,132,6,0,0,134,6,0,0,136,6,0,0,137,6,0,0,139,6,0,0,143,6,0,0,145,6,0,0,147,6,0,0,148,6,0,0,150,6,0,0,152,6,0,0,154,6,0,0,157,6,0,0,159,6,0,0,161,6,0,0,165,6,0,0,167,6,0,0,169,6,0,0,171,6,0,0,173,6,0,0,175,6,0,0,176,6,0,0,179,6,0,0,181,6,0,0,185,6,0,0,187,6,0,0,189,6,0,0,191,6,0,0,193,6,0,0,195,6,0,0,197,6,0,0,199,6,0,0,201,6,0,0,203,6,0,0,205,6,0,0,207,6,0,0,209,6,0,0,211,6,0,0,213,6,0,0,215,6,0,0,217,6,0,0,219,6,0,0,221,6,0,0,223,6,0,0,225,6,0,0,226,6,0,0,228,6,0,0,230,6,0,0,232,6,0,0,233,6,0,0,235,6,0,0,237,6,0,0,239,6,0,0,241,6,0,0,243,6,0,0,245,6,0,0,247,6,0,0,249,6,0,0,251,6,0,0,252,6,0,0,254,6,0,0,0,7,0,0,2,7,0,0,4,7,0,0,6,7,0,0,8,7,0,0,10,7,0,0,12,7,0,0,14,7,0,0,15,7,0,0,17,7,0,0,19,7,0,0,23,7,0,0,25,7,0,0,27,7,0,0,29,7,0,0,31,7,0,0,33,7,0,0,35,7,0,0,37,7,0,0,39,7,0,0,41,7,0,0,43,7,0,0,45,7,0,0,47,7,0,0,48,7,0,0,50,7,0,0,52,7,0,0,56,7,0,0,58,7,0,0,60,7,0,0,62,7,0,0,64,7,0,0,66,7,0,0,67,7,0,0,68,7,0,0,70,7,0,0,72,7,0,0,74,7,0,0,76,7,0,0,77,7,0,0,79,7,0,0,81,7,0,0,83,7,0,0,85,7,0,0,87,7,0,0,89,7,0,0,91,7,0,0,93,7,0,0,95,7,0,0,97,7,0,0,99,7,0,0,100,7,0,0,104,7,0,0,106,7,0,0,108,7,0,0,109,7,0,0,111,7,0,0,113,7,0,0,115,7,0,0,117,7,0,0,118,7,0,0,119,7,0,0,121,7,0,0,123,7,0,0,127,7,0,0,129,7,0,0,131,7,0,0,135,7,0,0,137,7,0,0,139,7,0,0,141,7,0,0,143,7,0,0,145,7,0,0,147,7,0,0,151,7,0,0,153,7,0,0,155,7,0,0,156,7,0,0,157,7,0,0,159,7,0,0,161,7,0,0,163,7,0,0,165,7,0,0,166,7,0,0,168,7,0,0,170,7,0,0,172,7,0,0,174,7,0,0,176,7,0,0,178,7,0,0,179,7,0,0,181,7,0,0,182,7,0,0,183,7,0,0,185,7,0,0,187,7,0,0,188,7,0,0,189,7,0,0,190,7,0,0,192,7,0,0,194,7,0,0,196,7,0,0,198,7,0,0,200,7,0,0,202,7,0,0,203,7,0,0,205,7,0,0,207,7,0,0,209,7,0,0,211,7,0,0,213,7,0,0,215,7,0,0,216,7,0,0,217,7,0,0,219,7,0,0,221,7,0,0,223,7,0,0,225,7,0,0,227,7,0,0,229,7,0,0,231,7,0,0,232,7,0,0,233,7,0,0,235,7,0,0,237,7,0,0,239,7,0,0,241,7,0,0,243,7,0,0,245,7,0,0,249,7,0,0,251,7,0,0,253,7,0,0,254,7,0,0,255,7,0,0,1,8,0,0,3,8,0,0,5,8,0,0,7,8,0,0,8,8,0,0,9,8,0,0,11,8,0,0,13,8,0,0,15,8,0,0,17,8,0,0,19,8,0,0,21,8,0,0,22,8,0,0,23,8,0,0,24,8,0,0,26,8,0,0,28,8,0,0,30,8,0,0,32,8,0,0,34,8,0,0,36,8,0,0,38,8,0,0,40,8,0,0,42,8,0,0,44,8,0,0,46,8,0,0,47,8,0,0,48,8,0,0,49,8,0,0,51,8,0,0,53,8,0,0,57,8,0,0,58,8,0,0,59,8,0,0,60,8,0,0,61,8,0,0,62,8,0,0,63,8,0,0,65,8,0,0,67,8,0,0,71,8,0,0,73,8,0,0,75,8,0,0,77,8,0,0,79,8,0,0,81,8,0,0,83,8,0,0,85,8,0,0,87,8,0,0,88,8,0,0,89,8,0,0,91,8,0,0,93,8,0,0,95,8,0,0,97,8,0,0,99,8,0,0,101,8,0,0,103,8,0,0,105,8,0,0,107,8,0,0,109,8,0,0,111,8,0,0,113,8,0,0,115,8,0,0,117,8,0,0,119,8,0,0,121,8,0,0,123,8,0,0,125,8,0,0,127,8,0,0,129,8,0,0,131,8,0,0,133,8,0,0,135,8,0,0,137,8,0,0,138,8,0,0,139,8,0,0,140,8,0,0,144,8,0,0,145,8,0,0,147,8,0,0,149,8,0,0,151,8,0,0,153,8,0,0,155,8,0,0,157,8,0,0,159,8,0,0,161,8,0,0,163,8,0,0,165,8,0,0,169,8,0,0,171,8,0,0,173,8,0,0,175,8,0,0,177,8,0,0,179,8,0,0,181,8,0,0,183,8,0,0,185,8,0,0,186,8,0,0,187,8,0,0,188,8,0,0,189,8,0,0,190,8,0,0,191,8,0,0,192,8,0,0,193,8,0,0,196,8,0,0,198,8,0,0,200,8,0,0,202,8,0,0,204,8,0,0,206,8,0,0,208,8,0,0,210,8,0,0,212,8,0,0,214,8,0,0,216,8,0,0,218,8,0,0,220,8,0,0,222,8,0,0,224,8,0,0,226,8,0,0,228,8,0,0,230,8,0,0,232,8,0,0,234,8,0,0,236,8,0,0,238,8,0,0,240,8,0,0,242,8,0,0,244,8,0,0,246,8,0,0,248,8,0,0,250,8,0,0,252,8,0,0,254,8,0,0,255,8,0,0,0,9,0,0,1,9,0,0,2,9,0,0,3,9,0,0,5,9,0,0,7,9,0,0,9,9,0,0,11,9,0,0,13,9,0,0,15,9,0,0,17,9,0,0,19,9,0,0,21,9,0,0,23,9,0,0,25,9,0,0,27,9,0,0,29,9,0,0,31,9,0,0,33,9,0,0,37,9,0,0,39,9,0,0,41,9,0,0,43,9,0,0,45,9,0,0,47,9,0,0,48,9,0,0,51,9,0,0,52,9,0,0,53,9,0,0,54,9,0,0,55,9,0,0,57,9,0,0,59,9,0,0,60,9,0,0,61,9,0,0,62,9,0,0,63,9,0,0,64,9,0,0,65,9,0,0,66,9,0,0,67,9,0,0,68,9,0,0,69,9,0,0,70,9,0,0,72,9,0,0,74,9,0,0,76,9,0,0,78,9,0,0,80,9,0,0,81,9,0,0,82,9,0,0,83,9,0,0,84,9,0,0,85,9,0,0,86,9,0,0,87,9,0,0,88,9,0,0,89,9,0,0,90,9,0,0,91,9,0,0,92,9,0,0,93,9,0,0,94,9,0,0,95,9,0,0,96,9,0,0,97,9,0,0,98,9,0,0,99,9,0,0,100,9,0,0,101,9,0,0,102,9,0,0,103,9,0,0,104,9,0,0,105,9,0,0,106,9,0,0,107,9,0,0,108,9,0,0,109,9,0,0,110,9,0,0,111,9,0,0,113,9,0,0,114,9,0,0,126,9,0,0,134,9,0,0,141,9,0,0,149,9,0,0,156,9,0,0,164,9,0,0,170,9,0,0,176,9,0,0,184,9,0,0,192,9,0,0,200,9,0,0,208,9,0,0,216,9,0,0,223,9,0,0,231,9,0,0,239,9,0,0,246,9,0,0,254,9,0,0,6,10,0,0,14,10,0,0,20,10,0,0,28,10,0,0,36,10,0,0,44,10,0,0,52,10,0,0,59,10,0,0,67,10,0,0,74,10,0,0,82,10,0,0,88,10,0,0,96,10,0,0,104,10,0,0,111,10,0,0,119,10,0,0,125,10,0,0,133,10,0,0,141,10,0,0,149,10,0,0,157,10,0,0,165,10,0,0,173,10,0,0,179,10,0,0,187,10,0,0,193,10,0,0,201,10,0,0,209,10,0,0,217,10,0,0,225,10,0,0,233,10,0,0,241,10,0,0,249,10,0,0,1,11,0,0,9,11,0,0,17,11,0,0,25,11,0,0,32,11,0,0,40,11,0,0,48,11,0,0,56,11,0,0,62,11,0,0,68,11,0,0,76,11,0,0,82,11,0,0,90,11,0,0,98,11,0,0,106,11,0,0,114,11,0,0,122,11,0,0,128,11,0,0,136,11,0,0,142,11,0,0,150,11,0,0,158,11,0,0,166,11,0,0,172,11,0,0,180,11,0,0,185,11,0,0,193,11,0,0,201,11,0,0,209,11,0,0,216,11,0,0,223,11,0,0,229,11,0,0,236,11,0,0,243,11,0,0,251,11,0,0,253,11,0,0,4,12,0,0,11,12,0,0,18,12,0,0,26,12,0,0,33,12,0,0,37,12,0,0,39,12,0,0,41,12,0,0,48,12,0,0,52,12,0,0,56,12,0,0,60,12,0,0,64,12,0,0,68,12,0,0,72,12,0,0,74,12,0,0,78,12,0,0,86,12,0,0,89,12,0,0,93,12,0,0,94,12,0,0,96,12,0,0,100,12,0,0,104,12,0,0,108,12,0,0,110,12,0,0,113,12,0,0,117,12,0,0,121,12,0,0,122,12,0,0,125,12,0,0,128,12,0,0,132,12,0,0,136,12,0,0,140,12,0,0,144,12,0,0,147,12,0,0,149,12,0,0,150,12,0,0,154,12,0,0,158,12,0,0,162,12,0,0,166,12,0,0,170,12,0,0,171,12,0,0,175,12,0,0,179,12,0,0,182,12,0,0,186,12,0,0,190,12,0,0,194,12,0,0,198,12,0,0,202,12,0,0,203,12,0,0,207,12,0,0,211,12,0,0,215,12,0,0,217,12,0,0,221,12,0,0,224,12,0,0,228,12,0,0,231,12,0,0,235,12,0,0,239,12,0,0,243,12,0,0,247,12,0,0,249,12,0,0,252,12,0,0,255,12,0,0,2,13,0,0,6,13,0,0,10,13,0,0,12,13,0,0,14,13,0,0,18,13,0,0,22,13,0,0,26,13,0,0,30,13,0,0,33,13,0,0,37,13,0,0,41,13,0,0,45,13,0,0,49,13,0,0,53,13,0,0,57,13,0,0,61,13,0,0,65,13,0,0,66,13,0,0,70,13,0,0,74,13,0,0,78,13,0,0,82,13,0,0,85,13,0,0,89,13,0,0,93,13,0,0,97,13,0,0,101,13,0,0,105,13,0,0,107,13,0,0,111,13,0,0,115,13,0,0,118,13,0,0,122,13,0,0,125,13,0,0,129,13,0,0,130,13,0,0,133,13,0,0,136,13,0,0,140,13,0,0,144,13,0,0,148,13,0,0,150,13,0,0,153,13,0,0,157,13,0,0,161,13,0,0,165,13,0,0,169,13,0,0,173,13,0,0,177,13,0,0,179,13,0,0,183,13,0,0,186,13,0,0,189,13,0,0,193,13,0,0,196,13,0,0,197,13,0,0,199,13,0,0,201,13,0,0,205,13,0,0,208,13,0,0,212,13,0,0,213,13,0,0,217,13,0,0,220,13,0,0,223,13,0,0,227,13,0,0,231,13,0,0,235,13,0,0,239,13,0,0,241,13,0,0,242,13,0,0,246,13,0,0,248,13,0,0,250,13,0,0,254,13,0,0,2,14,0,0,6,14,0,0,9,14,0,0,12,14,0,0,16,14,0,0,20,14,0,0,24,14,0,0,28,14,0,0,32,14,0,0,36,14,0,0,39,14,0,0,42,14,0,0,46,14,0,0,48,14,0,0,52,14,0,0,56,14,0,0,59,14,0,0,62,14,0,0,64,14,0,0,68,14,0,0,72,14,0,0,76,14,0,0,80,14,0,0,83,14,0,0,85,14,0,0,87,14,0,0,91,14,0,0,95,14,0,0,99,14,0,0,103,14,0,0,105,14,0,0,109,14,0,0,110,14,0,0,111,14,0,0,115,14,0,0,119,14,0,0,121,14,0,0,123,14,0,0,126,14,0,0,129,14,0,0,133,14,0,0,137,14,0,0,141,14,0,0,145,14,0,0,149,14,0,0,152,14,0,0,156,14,0,0,160,14,0,0,164,14,0,0,168,14,0,0,170,14,0,0,173,14,0,0,175,14,0,0,179,14,0,0,183,14,0,0,186,14,0,0,189,14,0,0,193,14,0,0,195,14,0,0,199,14,0,0,202,14,0,0,206,14,0,0,210,14,0,0,214,14,0,0,217,14,0,0,221,14,0,0,225,14,0,0,229,14,0,0,233,14,0,0,237,14,0,0,241,14,0,0,243,14,0,0,247,14,0,0,251,14,0,0,252,14,0,0,253,14,0,0,0,15,0,0,4,15,0,0,8,15,0,0,12,15,0,0,16,15,0,0,19,15,0,0,23,15,0,0,27,15,0,0,29,15,0,0,31,15,0,0,35,15,0,0,39,15,0,0,43,15,0,0,47,15,0,0,50,15,0,0,54,15,0,0,58,15,0,0,61,15,0,0,65,15,0,0,69,15,0,0,73,15,0,0,77,15,0,0,81,15,0,0,82,15,0,0,83,15,0,0,84,15,0,0,86,15,0,0,90,15,0,0,92,15,0,0,96,15,0,0,98,15,0,0,100,15,0,0,104,15,0,0,108,15,0,0,112,15,0,0,116,15,0,0,119,15,0,0,123,15,0,0,125,15,0,0,129,15,0,0,133,15,0,0,137,15,0,0,139,15,0,0,141,15,0,0,142,15,0,0,146,15,0,0,149,15,0,0,153,15,0,0,157,15,0,0,161,15,0,0,164,15,0,0,166,15,0,0,169,15,0,0,172,15,0,0,176,15,0,0,180,15,0,0,184,15,0,0,186,15,0,0,188,15,0,0,192,15,0,0,196,15,0,0,200,15,0,0,204,15,0,0,206,15,0,0,210,15,0,0,214,15,0,0,218,15,0,0,220,15,0,0,222,15,0,0,223,15,0,0,224,15,0,0,228,15,0,0,231,15,0,0,235,15,0,0,237,15,0,0,241,15,0,0,243,15,0,0,247,15,0,0,249,15,0,0,251,15,0,0,255,15,0,0,3,16,0,0,5,16,0,0,7,16,0,0,9,16,0,0,11,16,0,0,15,16,0,0,19,16,0,0,23,16,0,0,27,16,0,0,31,16,0,0,33,16,0,0,35,16,0,0,39,16,0,0,43,16,0,0,45,16,0,0,47,16,0,0,49,16,0,0,53,16,0,0,57,16,0,0,61,16,0,0,65,16,0,0,69,16,0,0,73,16,0,0,77,16,0,0,81,16,0,0,84,16,0,0,87,16,0,0,91,16,0,0,95,16,0,0,99,16,0,0,102,16,0,0,105,16,0,0,109,16,0,0,113,16,0,0,116,16,0,0,117,16,0,0,120,16,0,0,121,16,0,0,125,16,0,0,127,16,0,0,130,16,0,0,134,16,0,0,138,16,0,0,140,16,0,0,144,16,0,0,148,16,0,0,152,16,0,0,156,16,0,0,160,16,0,0,162,16,0,0,166,16,0,0,168,16,0,0,170,16,0,0,172,16,0,0,174,16,0,0,176,16,0,0,180,16,0,0,183,16,0,0,187,16,0,0,189,16,0,0,191,16,0,0,193,16,0,0,197,16,0,0,199,16,0,0,203,16,0,0,204,16,0,0,205,16,0,0,209,16,0,0,213,16,0,0,217,16,0,0,221,16,0,0,223,16,0,0,227,16,0,0,229,16,0,0,233,16,0,0,235,16,0,0,237,16,0,0,239,16,0,0,241,16,0,0,245,16,0,0,249,16,0,0,253,16,0,0,255,16,0,0,1,17,0,0,5,17,0,0,9,17,0,0,13,17,0,0,15,17,0,0,17,17,0,0,21,17,0,0,25,17,0,0,29,17,0,0,31,17,0,0,35,17,0,0,37,17,0,0,39,17,0,0,43,17,0,0,47,17,0,0,51,17,0,0,55,17,0,0,59,17,0,0,61,17,0,0,62,17,0,0,63,17,0,0,66,17,0,0,67,17,0,0,69,17,0,0,71,17,0,0,75,17,0,0,77,17,0,0,79,17,0,0,81,17,0,0,83,17,0,0,85,17,0,0,87,17,0,0,91,17,0,0,94,17,0,0,98,17,0,0,100,17,0,0,104,17,0,0,106,17,0,0,108,17,0,0,110,17,0,0,114,17], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+256096);
/* memory initializer */ allocate([117,17,0,0,121,17,0,0,125,17,0,0,129,17,0,0,131,17,0,0,135,17,0,0,137,17,0,0,139,17,0,0,141,17,0,0,145,17,0,0,147,17,0,0,149,17,0,0,152,17,0,0,154,17,0,0,158,17,0,0,161,17,0,0,162,17,0,0,163,17,0,0,166,17,0,0,169,17,0,0,170,17,0,0,173,17,0,0,174,17,0,0,175,17,0,0,178,17,0,0,181,17,0,0,182,17,0,0,185,17,0,0,189,17,0,0,190,17,0,0,191,17,0,0,192,17,0,0,193,17,0,0,194,17,0,0,195,17,0,0,198,17,0,0,201,17,0,0,202,17,0,0,203,17,0,0,206,17,0,0,209,17,0,0,212,17,0,0,215,17,0,0,216,17,0,0,219,17,0,0,222,17,0,0,223,17,0,0,226,17,0,0,229,17,0,0,230,17,0,0,233,17,0,0,234,17,0,0,236,17,0,0,238,17,0,0,240,17,0,0,244,17,0,0,246,17,0,0,250,17,0,0,252,17,0,0,0,18,0,0,4,18,0,0,5,18,0,0,8,18,0,0,11,18,0,0,14,18,0,0,15,18,0,0,16,18,0,0,17,18,0,0,18,18,0,0,21,18,0,0,24,18,0,0,25,18,0,0,28,18,0,0,31,18,0,0,32,18,0,0,33,18,0,0,34,18,0,0,35,18,0,0,36,18,0,0,37,18,0,0,40,18,0,0,41,18,0,0,42,18,0,0,43,18,0,0,44,18,0,0,45,18,0,0,48,18,0,0,49,18,0,0,52,18,0,0,53,18,0,0,56,18,0,0,59,18,0,0,62,18,0,0,63,18,0,0,66,18,0,0,67,18,0,0,68,18,0,0,69,18,0,0,70,18,0,0,73,18,0,0,74,18,0,0,75,18,0,0,76,18,0,0,79,18,0,0,80,18,0,0,81,18,0,0,84,18,0,0,85,18,0,0,88,18,0,0,89,18,0,0,92,18,0,0,93,18,0,0,94,18,0,0,95,18,0,0,96,18,0,0,99,18,0,0,100,18,0,0,103,18,0,0,104,18,0,0,107,18,0,0,108,18,0,0,109,18,0,0,110,18,0,0,111,18,0,0,112,18,0,0,113,18,0,0,114,18,0,0,115,18,0,0,118,18,0,0,121,18,0,0,122,18,0,0,125,18,0,0,128,18,0,0,129,18,0,0,132,18,0,0,133,18,0,0,134,18,0,0,137,18,0,0,138,18,0,0,141,18,0,0,144,18,0,0,145,18,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,2,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,254,255,255,255,254,255,255,255,254,255,255,255,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,0,0,0,0,2,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,254,255,255,255,255,255,255,255,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,2,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,254,255,255,255,2,0,0,0,255,255,255,255,1,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,254,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,254,255,255,255,254,255,255,255,254,255,255,255,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,254,255,255,255,254,255,255,255,254,255,255,255,1,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,252,255,255,255,254,255,255,255,1,0,0,0,255,255,255,255,0,0,0,0,255,255,255,255,255,255,255,255,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,254,255,255,255,254,255,255,255,254,255,255,255,1,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,252,255,255,255,254,255,255,255,1,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,2,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,255,255,255,255,3,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,254,255,255,255,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,254,255,255,255,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,255,255,255,255,254,255,255,255,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,255,255,255,255,2,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,1,0,0,0,255,255,255,255,254,255,255,255,254,255,255,255,254,255,255,255,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,1,0,0,0,1,0,0,0,254,255,255,255,254,255,255,255,255,255,255,255,1,0,0,0,0,0,0,0,2,0,0,0,252,255,255,255,1,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,254,255,255,255,255,255,255,255,2,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,255,255,255,255,254,255,255,255,0,0,0,0,254,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,254,255,255,255,1,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,254,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,254,255,255,255,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,252,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,254,255,255,255,255,255,255,255,4,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,4,0,0,0,254,255,255,255,2,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,252,255,255,255,255,255,255,255,1,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,255,255,255,255,2,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,253,255,255,255,2,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,252,255,255,255,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,254,255,255,255,1,0,0,0,1,0,0,0,254,255,255,255,252,255,255,255,254,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,4,0,0,0,254,255,255,255,1,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,255,255,255,255,3,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,254,255,255,255,254,255,255,255,1,0,0,0,255,255,255,255,0,0,0,0,254,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,255,255,255,255,254,255,255,255,2,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,1,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,252,255,255,255,1,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,2,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,254,255,255,255,252,255,255,255,254,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,255,255,255,255,254,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,254,255,255,255,254,255,255,255,1,0,0,0,1,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,2,0,0,0,255,255,255,255,254,255,255,255,0,0,0,0,255,255,255,255,1,0,0,0,255,255,255,255,254,255,255,255,254,255,255,255,255,255,255,255,0,0,0,0,1,0,0,0,254,255,255,255,1,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,252,255,255,255,2,0,0,0,254,255,255,255,0,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,255,255,255,255,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,252,255,255,255,254,255,255,255,1,0,0,0,0,0,0,0,254,255,255,255,253,255,255,255,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,254,255,255,255,254,255,255,255,2,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,254,255,255,255,3,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,255,255,255,255,2,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,254,255,255,255,2,0,0,0,1,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,1,0,0,0,1,0,0,0,254,255,255,255,1,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,254,255,255,255,2,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,254,255,255,255,1,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,252,255,255,255,2,0,0,0,1,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,255,255,255,255,1,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,255,255,255,255,0,0,0,0,254,255,255,255,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,254,255,255,255,254,255,255,255,254,255,255,255,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,253,255,255,255,3,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,3,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,254,255,255,255,2,0,0,0,255,255,255,255,2,0,0,0,255,255,255,255,2,0,0,0,254,255,255,255,2,0,0,0,1,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,253,255,255,255,1,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,1,0,0,0,1,0,0,0,2,0,0,0,252,255,255,255,1,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,1,0,0,0,1,0,0,0,0,0,0,0,4,0,0,0,254,255,255,255,1,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,3,0,0,0,0,0,0,0,254,255,255,255,254,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,4,0,0,0,252,255,255,255,2,0,0,0,2,0,0,0,0,0,0,0,252,255,255,255,254,255,255,255,254,255,255,255,2,0,0,0,254,255,255,255,0,0,0,0,254,255,255,255,255,255,255,255,1,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,255,255,255,255,2,0,0,0,0,0,0,0,254,255,255,255,250,255,255,255,254,255,255,255,1,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,1,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,0,0,0,0,254,255,255,255,1,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,254,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,253,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,255,255,255,255,2,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,4,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,4,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,2,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,254,255,255,255,1,0,0,0,254,255,255,255,254,255,255,255,254,255,255,255,254,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,252,255,255,255,2,0,0,0,1,0,0,0,1,0,0,0,254,255,255,255,252,255,255,255,255,255,255,255,1,0,0,0,0,0,0,0,254,255,255,255,250,255,255,255,254,255,255,255,2,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,255,255,255,255,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,1,0,0,0,0,0,0,0,252,255,255,255,254,255,255,255,254,255,255,255,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,254,255,255,255,2,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,255,255,255,255,254,255,255,255,252,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,252,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,253,255,255,255,1,0,0,0,2,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,254,255,255,255,254,255,255,255,255,255,255,255,2,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,255,255,255,255,254,255,255,255,254,255,255,255,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0,252,255,255,255,2,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,255,255,255,255,254,255,255,255,2,0,0,0,254,255,255,255,1,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,255,255,255,255,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,254,255,255,255,255,255,255,255,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,5,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,254,255,255,255,250,255,255,255,254,255,255,255,1,0,0,0,255,255,255,255,2,0,0,0,255,255,255,255,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,252,255,255,255,2,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,2,0,0,0,252,255,255,255,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,254,255,255,255,252,255,255,255,255,255,255,255,3,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,4,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,254,255,255,255,254,255,255,255,1,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,252,255,255,255,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,254,255,255,255,1,0,0,0,1,0,0,0,254,255,255,255,254,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,1,0,0,0,2,0,0,0,255,255,255,255,254,255,255,255,252,255,255,255,254,255,255,255,3,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,254,255,255,255,0,0,0,0,1,0,0,0,254,255,255,255,254,255,255,255,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,1,0,0,0,0,0,0,0,254,255,255,255,253,255,255,255,255,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,252,255,255,255,255,255,255,255,1,0,0,0,254,255,255,255,2,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,1,0,0,0,255,255,255,255,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,254,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,4,0,0,0,252,255,255,255,1,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,252,255,255,255,2,0,0,0,254,255,255,255,3,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,252,255,255,255,255,255,255,255,4,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,253,255,255,255,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,250,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,1,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,252,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,254,255,255,255,1,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,252,255,255,255,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,252,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,255,255,255,255,1,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,252,255,255,255,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,6,0,0,0,2,0,0,0,4,0,0,0,0,0,0,0,254,255,255,255,254,255,255,255,255,255,255,255,2,0,0,0,1,0,0,0,0,0,0,0,252,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,1,0,0,0,255,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,3,0,0,0,255,255,255,255,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,255,255,255,255,2,0,0,0,254,255,255,255,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,254,255,255,255,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,255,255,255,255,254,255,255,255,1,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,3,0,0,0,255,255,255,255,254,255,255,255,255,255,255,255,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,250,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,252,255,255,255,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,252,255,255,255,1,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,254,255,255,255,254,255,255,255,255,255,255,255,1,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,255,255,255,255,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,252,255,255,255,254,255,255,255,1,0,0,0,0,0,0,0,4,0,0,0,252,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,255,255,255,255,2,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,250,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,1,0,0,0,1,0,0,0,254,255,255,255,254,255,255,255,0,0,0,0,254,255,255,255,1,0,0,0,255,255,255,255,254,255,255,255,253,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,254,255,255,255,2,0,0,0,0,0,0,0,254,255,255,255,252,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,3,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,2,0,0,0,3,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,254,255,255,255,255,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,2], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+266336);
/* memory initializer */ allocate([254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,255,255,255,255,4,0,0,0,0,0,0,0,2,0,0,0,252,255,255,255,2,0,0,0,2,0,0,0,0,0,0,0,252,255,255,255,2,0,0,0,254,255,255,255,2,0,0,0,255,255,255,255,254,255,255,255,0,0,0,0,254,255,255,255,1,0,0,0,1,0,0,0,4,0,0,0,254,255,255,255,2,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,252,255,255,255,2,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,252,255,255,255,1,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,252,255,255,255,254,255,255,255,255,255,255,255,2,0,0,0,0,0,0,0,254,255,255,255,250,255,255,255,255,255,255,255,2,0,0,0,255,255,255,255,2,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,254,255,255,255,1,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,252,255,255,255,255,255,255,255,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,252,255,255,255,254,255,255,255,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,252,255,255,255,1,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,2,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,4,0,0,0,254,255,255,255,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,255,255,255,255,2,0,0,0,254,255,255,255,0,0,0,0,254,255,255,255,1,0,0,0,2,0,0,0,255,255,255,255,2,0,0,0,254,255,255,255,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,250,255,255,255,255,255,255,255,1,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,254,255,255,255,254,255,255,255,254,255,255,255,255,255,255,255,0,0,0,0,1,0,0,0,4,0,0,0,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,255,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,254,255,255,255,0,0,0,0,4,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,254,255,255,255,252,255,255,255,254,255,255,255,4,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,255,255,255,255,254,255,255,255,254,255,255,255,254,255,255,255,2,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,254,255,255,255,2,0,0,0,1,0,0,0,254,255,255,255,250,255,255,255,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,2,0,0,0,255,255,255,255,254,255,255,255,2,0,0,0,255,255,255,255,1,0,0,0,1,0,0,0,254,255,255,255,2,0,0,0,254,255,255,255,1,0,0,0,1,0,0,0,254,255,255,255,253,255,255,255,254,255,255,255,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,255,255,255,255,252,255,255,255,2,0,0,0,254,255,255,255,0,0,0,0,3,0,0,0,254,255,255,255,254,255,255,255,254,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,254,255,255,255,254,255,255,255,0,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,252,255,255,255,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,253,255,255,255,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,254,255,255,255,2,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,254,255,255,255,2,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,4,0,0,0,252,255,255,255,2,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,253,255,255,255,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,1,0,0,0,2,0,0,0,0,0,0,0,252,255,255,255,2,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,254,255,255,255,254,255,255,255,1,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,254,255,255,255,254,255,255,255,2,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,255,255,255,255,1,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,1,0,0,0,254,255,255,255,250,255,255,255,254,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,255,255,255,255,1,0,0,0,0,0,0,0,252,255,255,255,254,255,255,255,255,255,255,255,1,0,0,0,0,0,0,0,254,255,255,255,250,255,255,255,255,255,255,255,1,0,0,0,254,255,255,255,2,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,254,255,255,255,254,255,255,255,2,0,0,0,255,255,255,255,1,0,0,0,255,255,255,255,254,255,255,255,252,255,255,255,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,252,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,4,0,0,0,255,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,255,255,255,255,3,0,0,0,0,0,0,0,254,255,255,255,250,255,255,255,255,255,255,255,3,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,255,255,255,255,2,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,250,255,255,255,1,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,254,255,255,255,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,250,255,255,255,255,255,255,255,2,0,0,0,255,255,255,255,254,255,255,255,254,255,255,255,255,255,255,255,1,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,250,255,255,255,1,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,252,255,255,255,255,255,255,255,1,0,0,0,0,0,0,0,255,255,255,255,254,255,255,255,255,255,255,255,1,0,0,0,255,255,255,255,2,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,253,255,255,255,1,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,255,255,255,255,254,255,255,255,1,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,1,0,0,0,254,255,255,255,2,0,0,0,253,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,3,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,250,255,255,255,0,0,0,0,2,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,254,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,253,255,255,255,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,2,0,0,0,255,255,255,255,254,255,255,255,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,252,255,255,255,1,0,0,0,0,0,0,0,1,0,0,0,4,0,0,0,252,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,5,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,4,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,2,0,0,0,4,0,0,0,0,0,0,0,254,255,255,255,254,255,255,255,0,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,3,0,0,0,1,0,0,0,254,255,255,255,250,255,255,255,254,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,3,0,0,0,0,0,0,0,254,255,255,255,252,255,255,255,254,255,255,255,3,0,0,0,255,255,255,255,0,0,0,0,253,255,255,255,0,0,0,0,3,0,0,0,255,255,255,255,0,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,252,255,255,255,2,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,254,255,255,255,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,253,255,255,255,0,0,0,0,2,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,254,255,255,255,2,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,254,255,255,255,2,0,0,0,0,0,0,0,254,255,255,255,251,255,255,255,254,255,255,255,2,0,0,0,255,255,255,255,2,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,255,255,255,255,0,0,0,0,254,255,255,255,2,0,0,0,1,0,0,0,3,0,0,0,254,255,255,255,254,255,255,255,254,255,255,255,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,1,0,0,0,1,0,0,0,0,0,0,0,250,255,255,255,0,0,0,0,1,0,0,0,1,0,0,0,254,255,255,255,1,0,0,0,254,255,255,255,1,0,0,0,1,0,0,0,254,255,255,255,255,255,255,255,254,255,255,255,1,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,2,0,0,0,1,0,0,0,0,0,0,0,254,255,255,255,4,0,0,0,254,255,255,255,1,0,0,0,254,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,252,255,255,255,2,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,254,255,255,255,0,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,4,0,0,0,252,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,72,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,52,73,4,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,84,67], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+276576);





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   
  Module["_i64Subtract"] = _i64Subtract;

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  function ___lock() {}

  function ___unlock() {}

   
  Module["_i64Add"] = _i64Add;

  var _fabs=Math_abs;

  var _floor=Math_floor;

  var _sqrt=Math_sqrt;

  var _abs=Math_abs;

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        // We also accept FileList here.
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(root, file.name, WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(root, obj["name"], WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        if (parent) {
          node.size = contents.size;
          node.contents = contents;
          parent.contents[name] = node;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  var _sin=Math_sin;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  var _atan=Math_atan;

  var _BDtoIHigh=true;

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  var _ceil=Math_ceil;

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  
  var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.buffer, addr, len);
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8, ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8, ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _cos=Math_cos;

  var _llvm_pow_f64=Math_pow;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

  var _BItoD=true;

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _atan2=Math_atan2;

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _pthread_self() {
      //FIXME: assumes only a single thread
      return 0;
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_ii": nullFunc_ii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_vi": nullFunc_vi, "invoke_ii": invoke_ii, "invoke_iiii": invoke_iiii, "invoke_vi": invoke_vi, "_fabs": _fabs, "_pthread_cleanup_pop": _pthread_cleanup_pop, "_sin": _sin, "_llvm_pow_f64": _llvm_pow_f64, "_abort": _abort, "_atan2": _atan2, "___setErrNo": ___setErrNo, "_floor": _floor, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_sbrk": _sbrk, "_atan": _atan, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_sysconf": _sysconf, "_ceil": _ceil, "_cos": _cos, "_pthread_self": _pthread_self, "_sqrt": _sqrt, "___syscall54": ___syscall54, "___unlock": ___unlock, "_emscripten_set_main_loop": _emscripten_set_main_loop, "___lock": ___lock, "___syscall6": ___syscall6, "_pthread_cleanup_push": _pthread_cleanup_push, "_time": _time, "_abs": _abs, "___syscall140": ___syscall140, "___syscall146": ___syscall146, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_vi=env.nullFunc_vi;
  var invoke_ii=env.invoke_ii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_vi=env.invoke_vi;
  var _fabs=env._fabs;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var _sin=env._sin;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _abort=env._abort;
  var _atan2=env._atan2;
  var ___setErrNo=env.___setErrNo;
  var _floor=env._floor;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _sbrk=env._sbrk;
  var _atan=env._atan;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _sysconf=env._sysconf;
  var _ceil=env._ceil;
  var _cos=env._cos;
  var _pthread_self=env._pthread_self;
  var _sqrt=env._sqrt;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var ___lock=env.___lock;
  var ___syscall6=env.___syscall6;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var _time=env._time;
  var _abs=env._abs;
  var ___syscall140=env.___syscall140;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _eraA2af($ndp,$angle,$sign,$idmsf) {
 $ndp = $ndp|0;
 $angle = +$angle;
 $sign = $sign|0;
 $idmsf = $idmsf|0;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $F = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ndp;
 $1 = $angle;
 $2 = $sign;
 $3 = $idmsf;
 $F = 2.3873241463784303;
 $4 = $0;
 $5 = $1;
 $6 = $5 * 2.3873241463784303;
 $7 = $2;
 $8 = $3;
 _eraD2tf($4,$6,$7,$8);
 STACKTOP = sp;return;
}
function _eraA2tf($ndp,$angle,$sign,$ihmsf) {
 $ndp = $ndp|0;
 $angle = +$angle;
 $sign = $sign|0;
 $ihmsf = $ihmsf|0;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ndp;
 $1 = $angle;
 $2 = $sign;
 $3 = $ihmsf;
 $4 = $0;
 $5 = $1;
 $6 = $5 / 6.2831853071795862;
 $7 = $2;
 $8 = $3;
 _eraD2tf($4,$6,$7,$8);
 STACKTOP = sp;return;
}
function _eraAb($pnat,$v,$s,$bm1,$ppr) {
 $pnat = $pnat|0;
 $v = $v|0;
 $s = +$s;
 $bm1 = +$bm1;
 $ppr = $ppr|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $i = 0, $p = 0, $pdv = 0.0, $r = 0.0, $r2 = 0.0, $w = 0.0, $w1 = 0.0, $w2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $p = sp + 8|0;
 $0 = $pnat;
 $1 = $v;
 $2 = $s;
 $3 = $bm1;
 $4 = $ppr;
 $5 = $0;
 $6 = $1;
 $7 = (+_eraPdp($5,$6));
 $pdv = $7;
 $8 = $pdv;
 $9 = $3;
 $10 = 1.0 + $9;
 $11 = $8 / $10;
 $12 = 1.0 + $11;
 $w1 = $12;
 $13 = $2;
 $14 = 1.9741257433600001E-8 / $13;
 $w2 = $14;
 $r2 = 0.0;
 $i = 0;
 while(1) {
  $15 = $i;
  $16 = ($15|0)<(3);
  if (!($16)) {
   break;
  }
  $17 = $i;
  $18 = $0;
  $19 = (($18) + ($17<<3)|0);
  $20 = +HEAPF64[$19>>3];
  $21 = $3;
  $22 = $20 * $21;
  $23 = $w1;
  $24 = $i;
  $25 = $1;
  $26 = (($25) + ($24<<3)|0);
  $27 = +HEAPF64[$26>>3];
  $28 = $23 * $27;
  $29 = $22 + $28;
  $30 = $w2;
  $31 = $i;
  $32 = $1;
  $33 = (($32) + ($31<<3)|0);
  $34 = +HEAPF64[$33>>3];
  $35 = $pdv;
  $36 = $i;
  $37 = $0;
  $38 = (($37) + ($36<<3)|0);
  $39 = +HEAPF64[$38>>3];
  $40 = $35 * $39;
  $41 = $34 - $40;
  $42 = $30 * $41;
  $43 = $29 + $42;
  $w = $43;
  $44 = $w;
  $45 = $i;
  $46 = (($p) + ($45<<3)|0);
  HEAPF64[$46>>3] = $44;
  $47 = $r2;
  $48 = $w;
  $49 = $w;
  $50 = $48 * $49;
  $51 = $47 + $50;
  $r2 = $51;
  $52 = $i;
  $53 = (($52) + 1)|0;
  $i = $53;
 }
 $54 = $r2;
 $55 = (+Math_sqrt((+$54)));
 $r = $55;
 $i = 0;
 while(1) {
  $56 = $i;
  $57 = ($56|0)<(3);
  if (!($57)) {
   break;
  }
  $58 = $i;
  $59 = (($p) + ($58<<3)|0);
  $60 = +HEAPF64[$59>>3];
  $61 = $r;
  $62 = $60 / $61;
  $63 = $i;
  $64 = $4;
  $65 = (($64) + ($63<<3)|0);
  HEAPF64[$65>>3] = $62;
  $66 = $i;
  $67 = (($66) + 1)|0;
  $i = $67;
 }
 STACKTOP = sp;return;
}
function _eraAf2a($s,$ideg,$iamin,$asec,$rad) {
 $s = $s|0;
 $ideg = $ideg|0;
 $iamin = $iamin|0;
 $asec = +$asec;
 $rad = $rad|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $or$cond = 0, $or$cond3 = 0;
 var $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $ideg;
 $3 = $iamin;
 $4 = $asec;
 $5 = $rad;
 $6 = $1;
 $7 = $6 << 24 >> 24;
 $8 = ($7|0)==(45);
 $9 = $8 ? -1.0 : 1.0;
 $10 = $2;
 $11 = (Math_abs(($10|0))|0);
 $12 = (+($11|0));
 $13 = 60.0 * $12;
 $14 = $3;
 $15 = (Math_abs(($14|0))|0);
 $16 = (+($15|0));
 $17 = $13 + $16;
 $18 = 60.0 * $17;
 $19 = $4;
 $20 = (+Math_abs((+$19)));
 $21 = $18 + $20;
 $22 = $9 * $21;
 $23 = $22 * 4.8481368110953598E-6;
 $24 = $5;
 HEAPF64[$24>>3] = $23;
 $25 = $2;
 $26 = ($25|0)<(0);
 $27 = $2;
 $28 = ($27|0)>(359);
 $or$cond = $26 | $28;
 if ($or$cond) {
  $0 = 1;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 $29 = $3;
 $30 = ($29|0)<(0);
 $31 = $3;
 $32 = ($31|0)>(59);
 $or$cond3 = $30 | $32;
 if ($or$cond3) {
  $0 = 2;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 $33 = $4;
 $34 = $33 < 0.0;
 $35 = $4;
 $36 = $35 >= 60.0;
 $or$cond5 = $34 | $36;
 if ($or$cond5) {
  $0 = 3;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 } else {
  $0 = 0;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 return (0)|0;
}
function _eraAnp($a) {
 $a = +$a;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $w = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $0;
 $2 = (+_fmod($1,6.2831853071795862));
 $w = $2;
 $3 = $w;
 $4 = $3 < 0.0;
 if ($4) {
  $5 = $w;
  $6 = $5 + 6.2831853071795862;
  $w = $6;
 }
 $7 = $w;
 STACKTOP = sp;return (+$7);
}
function _eraAnpm($a) {
 $a = +$a;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $w = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $0;
 $2 = (+_fmod($1,6.2831853071795862));
 $w = $2;
 $3 = $w;
 $4 = (+Math_abs((+$3)));
 $5 = $4 >= 3.1415926535897931;
 if (!($5)) {
  $13 = $w;
  STACKTOP = sp;return (+$13);
 }
 $6 = $0;
 $7 = $6 < 0.0;
 $8 = (+Math_abs(6.2831853071795862));
 $9 = -$8;
 $10 = $7 ? $9 : $8;
 $11 = $w;
 $12 = $11 - $10;
 $w = $12;
 $13 = $w;
 STACKTOP = sp;return (+$13);
}
function _eraApcg13($date1,$date2,$astrom) {
 $date1 = +$date1;
 $date2 = +$date2;
 $astrom = $astrom|0;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $ebpv = 0, $ehpv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ehpv = sp + 48|0;
 $ebpv = sp;
 $0 = $date1;
 $1 = $date2;
 $2 = $astrom;
 $3 = $0;
 $4 = $1;
 (_eraEpv00($3,$4,$ehpv,$ebpv)|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 _eraApcg($5,$6,$ebpv,$ehpv,$7);
 STACKTOP = sp;return;
}
function _eraApcg($date1,$date2,$ebpv,$ehp,$astrom) {
 $date1 = +$date1;
 $date2 = +$date2;
 $ebpv = $ebpv|0;
 $ehp = $ehp|0;
 $astrom = $astrom|0;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $pv = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pv = sp;
 $0 = $date1;
 $1 = $date2;
 $2 = $ebpv;
 $3 = $ehp;
 $4 = $astrom;
 dest=$pv; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 _eraApcs($5,$6,$pv,$7,$8,$9);
 STACKTOP = sp;return;
}
function _eraApci13($date1,$date2,$astrom,$eo) {
 $date1 = +$date1;
 $date2 = +$date2;
 $astrom = $astrom|0;
 $eo = $eo|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0;
 var $8 = 0.0, $9 = 0.0, $ebpv = 0, $ehpv = 0, $r = 0, $s = 0.0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ehpv = sp + 144|0;
 $ebpv = sp + 96|0;
 $r = sp + 24|0;
 $x = sp + 16|0;
 $y = sp + 8|0;
 $0 = $date1;
 $1 = $date2;
 $2 = $astrom;
 $3 = $eo;
 $4 = $0;
 $5 = $1;
 (_eraEpv00($4,$5,$ehpv,$ebpv)|0);
 $6 = $0;
 $7 = $1;
 _eraPnm06a($6,$7,$r);
 _eraBpn2xy($r,$x,$y);
 $8 = $0;
 $9 = $1;
 $10 = +HEAPF64[$x>>3];
 $11 = +HEAPF64[$y>>3];
 $12 = (+_eraS06($8,$9,$10,$11));
 $s = $12;
 $13 = $0;
 $14 = $1;
 $15 = +HEAPF64[$x>>3];
 $16 = +HEAPF64[$y>>3];
 $17 = $s;
 $18 = $2;
 _eraApci($13,$14,$ebpv,$ehpv,$15,$16,$17,$18);
 $19 = $s;
 $20 = (+_eraEors($r,$19));
 $21 = $3;
 HEAPF64[$21>>3] = $20;
 STACKTOP = sp;return;
}
function _eraApci($date1,$date2,$ebpv,$ehp,$x,$y,$s,$astrom) {
 $date1 = +$date1;
 $date2 = +$date2;
 $ebpv = $ebpv|0;
 $ehp = $ehp|0;
 $x = +$x;
 $y = +$y;
 $s = +$s;
 $astrom = $astrom|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $date1;
 $1 = $date2;
 $2 = $ebpv;
 $3 = $ehp;
 $4 = $x;
 $5 = $y;
 $6 = $s;
 $7 = $astrom;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $7;
 _eraApcg($8,$9,$10,$11,$12);
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = ((($16)) + 96|0);
 _eraC2ixys($13,$14,$15,$17);
 STACKTOP = sp;return;
}
function _eraApco13($utc1,$utc2,$dut1,$elong,$phi,$hm,$xp,$yp,$phpa,$tc,$rh,$wl,$astrom,$eo) {
 $utc1 = +$utc1;
 $utc2 = +$utc2;
 $dut1 = +$dut1;
 $elong = +$elong;
 $phi = +$phi;
 $hm = +$hm;
 $xp = +$xp;
 $yp = +$yp;
 $phpa = +$phpa;
 $tc = +$tc;
 $rh = +$rh;
 $wl = +$wl;
 $astrom = $astrom|0;
 $eo = $eo|0;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0;
 var $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $ebpv = 0, $ehpv = 0, $j = 0, $r = 0, $refa = 0, $refb = 0, $s = 0.0, $sp = 0.0, $tai1 = 0, $tai2 = 0, $theta = 0.0, $tt1 = 0;
 var $tt2 = 0, $ut11 = 0, $ut12 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tai1 = sp + 264|0;
 $tai2 = sp + 256|0;
 $tt1 = sp + 248|0;
 $tt2 = sp + 240|0;
 $ut11 = sp + 232|0;
 $ut12 = sp + 224|0;
 $ehpv = sp + 176|0;
 $ebpv = sp + 128|0;
 $r = sp + 56|0;
 $x = sp + 48|0;
 $y = sp + 40|0;
 $refa = sp + 8|0;
 $refb = sp;
 $1 = $utc1;
 $2 = $utc2;
 $3 = $dut1;
 $4 = $elong;
 $5 = $phi;
 $6 = $hm;
 $7 = $xp;
 $8 = $yp;
 $9 = $phpa;
 $10 = $tc;
 $11 = $rh;
 $12 = $wl;
 $13 = $astrom;
 $14 = $eo;
 $15 = $1;
 $16 = $2;
 $17 = (_eraUtctai($15,$16,$tai1,$tai2)|0);
 $j = $17;
 $18 = $j;
 $19 = ($18|0)<(0);
 if ($19) {
  $0 = -1;
  $67 = $0;
  STACKTOP = sp;return ($67|0);
 }
 $20 = +HEAPF64[$tai1>>3];
 $21 = +HEAPF64[$tai2>>3];
 $22 = (_eraTaitt($20,$21,$tt1,$tt2)|0);
 $j = $22;
 $23 = $1;
 $24 = $2;
 $25 = $3;
 $26 = (_eraUtcut1($23,$24,$25,$ut11,$ut12)|0);
 $j = $26;
 $27 = $j;
 $28 = ($27|0)<(0);
 if ($28) {
  $0 = -1;
  $67 = $0;
  STACKTOP = sp;return ($67|0);
 } else {
  $29 = +HEAPF64[$tt1>>3];
  $30 = +HEAPF64[$tt2>>3];
  (_eraEpv00($29,$30,$ehpv,$ebpv)|0);
  $31 = +HEAPF64[$tt1>>3];
  $32 = +HEAPF64[$tt2>>3];
  _eraPnm06a($31,$32,$r);
  _eraBpn2xy($r,$x,$y);
  $33 = +HEAPF64[$tt1>>3];
  $34 = +HEAPF64[$tt2>>3];
  $35 = +HEAPF64[$x>>3];
  $36 = +HEAPF64[$y>>3];
  $37 = (+_eraS06($33,$34,$35,$36));
  $s = $37;
  $38 = +HEAPF64[$ut11>>3];
  $39 = +HEAPF64[$ut12>>3];
  $40 = (+_eraEra00($38,$39));
  $theta = $40;
  $41 = +HEAPF64[$tt1>>3];
  $42 = +HEAPF64[$tt2>>3];
  $43 = (+_eraSp00($41,$42));
  $sp = $43;
  $44 = $9;
  $45 = $10;
  $46 = $11;
  $47 = $12;
  _eraRefco($44,$45,$46,$47,$refa,$refb);
  $48 = +HEAPF64[$tt1>>3];
  $49 = +HEAPF64[$tt2>>3];
  $50 = +HEAPF64[$x>>3];
  $51 = +HEAPF64[$y>>3];
  $52 = $s;
  $53 = $theta;
  $54 = $4;
  $55 = $5;
  $56 = $6;
  $57 = $7;
  $58 = $8;
  $59 = $sp;
  $60 = +HEAPF64[$refa>>3];
  $61 = +HEAPF64[$refb>>3];
  $62 = $13;
  _eraApco($48,$49,$ebpv,$ehpv,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$60,$61,$62);
  $63 = $s;
  $64 = (+_eraEors($r,$63));
  $65 = $14;
  HEAPF64[$65>>3] = $64;
  $66 = $j;
  $0 = $66;
  $67 = $0;
  STACKTOP = sp;return ($67|0);
 }
 return (0)|0;
}
function _eraApco($date1,$date2,$ebpv,$ehp,$x,$y,$s,$theta,$elong,$phi,$hm,$xp,$yp,$sp,$refa,$refb,$astrom) {
 $date1 = +$date1;
 $date2 = +$date2;
 $ebpv = $ebpv|0;
 $ehp = $ehp|0;
 $x = +$x;
 $y = +$y;
 $s = +$s;
 $theta = +$theta;
 $elong = +$elong;
 $phi = +$phi;
 $hm = +$hm;
 $xp = +$xp;
 $yp = +$yp;
 $sp = +$sp;
 $refa = +$refa;
 $refb = +$refb;
 $astrom = $astrom|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0.0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0;
 var $81 = 0, $82 = 0, $9 = 0.0, $cl = 0.0, $pv = 0, $pvc = 0, $r = 0, $sl = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $r = sp + 96|0;
 $pvc = sp + 48|0;
 $pv = sp;
 $0 = $date1;
 $1 = $date2;
 $2 = $ebpv;
 $3 = $ehp;
 $4 = $x;
 $5 = $y;
 $6 = $s;
 $7 = $theta;
 $8 = $elong;
 $9 = $phi;
 $10 = $hm;
 $11 = $xp;
 $12 = $yp;
 $13 = $sp;
 $14 = $refa;
 $15 = $refb;
 $16 = $astrom;
 $17 = $8;
 $18 = $13;
 $19 = $17 + $18;
 $20 = $16;
 $21 = ((($20)) + 168|0);
 HEAPF64[$21>>3] = $19;
 $22 = $16;
 $23 = ((($22)) + 168|0);
 $24 = +HEAPF64[$23>>3];
 $25 = (+Math_sin((+$24)));
 $sl = $25;
 $26 = $16;
 $27 = ((($26)) + 168|0);
 $28 = +HEAPF64[$27>>3];
 $29 = (+Math_cos((+$28)));
 $cl = $29;
 $30 = $11;
 $31 = $cl;
 $32 = $30 * $31;
 $33 = $12;
 $34 = $sl;
 $35 = $33 * $34;
 $36 = $32 - $35;
 $37 = $16;
 $38 = ((($37)) + 184|0);
 HEAPF64[$38>>3] = $36;
 $39 = $11;
 $40 = $sl;
 $41 = $39 * $40;
 $42 = $12;
 $43 = $cl;
 $44 = $42 * $43;
 $45 = $41 + $44;
 $46 = $16;
 $47 = ((($46)) + 192|0);
 HEAPF64[$47>>3] = $45;
 $48 = $9;
 $49 = (+Math_sin((+$48)));
 $50 = $16;
 $51 = ((($50)) + 200|0);
 HEAPF64[$51>>3] = $49;
 $52 = $9;
 $53 = (+Math_cos((+$52)));
 $54 = $16;
 $55 = ((($54)) + 208|0);
 HEAPF64[$55>>3] = $53;
 $56 = $14;
 $57 = $16;
 $58 = ((($57)) + 232|0);
 HEAPF64[$58>>3] = $56;
 $59 = $15;
 $60 = $16;
 $61 = ((($60)) + 240|0);
 HEAPF64[$61>>3] = $59;
 $62 = $7;
 $63 = $16;
 _eraAper($62,$63);
 $64 = $16;
 $65 = ((($64)) + 216|0);
 HEAPF64[$65>>3] = 0.0;
 $66 = $4;
 $67 = $5;
 $68 = $6;
 _eraC2ixys($66,$67,$68,$r);
 $69 = $8;
 $70 = $9;
 $71 = $10;
 $72 = $11;
 $73 = $12;
 $74 = $13;
 $75 = $7;
 _eraPvtob($69,$70,$71,$72,$73,$74,$75,$pvc);
 _eraTrxpv($r,$pvc,$pv);
 $76 = $0;
 $77 = $1;
 $78 = $2;
 $79 = $3;
 $80 = $16;
 _eraApcs($76,$77,$pv,$78,$79,$80);
 $81 = $16;
 $82 = ((($81)) + 96|0);
 _eraCr($r,$82);
 STACKTOP = sp;return;
}
function _eraApcs13($date1,$date2,$pv,$astrom) {
 $date1 = +$date1;
 $date2 = +$date2;
 $pv = $pv|0;
 $astrom = $astrom|0;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $ebpv = 0, $ehpv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ehpv = sp + 48|0;
 $ebpv = sp;
 $0 = $date1;
 $1 = $date2;
 $2 = $pv;
 $3 = $astrom;
 $4 = $0;
 $5 = $1;
 (_eraEpv00($4,$5,$ehpv,$ebpv)|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 _eraApcs($6,$7,$8,$ebpv,$ehpv,$9);
 STACKTOP = sp;return;
}
function _eraApcs($date1,$date2,$pv,$ebpv,$ehp,$astrom) {
 $date1 = +$date1;
 $date2 = +$date2;
 $pv = $pv|0;
 $ebpv = $ebpv|0;
 $ehp = $ehp|0;
 $astrom = $astrom|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0;
 var $81 = 0, $82 = 0, $9 = 0.0, $AUDMS = 0.0, $CR = 0.0, $dp = 0.0, $dv = 0.0, $i = 0, $pb = 0, $ph = 0, $v2 = 0.0, $vb = 0, $w = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pb = sp + 64|0;
 $vb = sp + 40|0;
 $ph = sp + 16|0;
 $0 = $date1;
 $1 = $date2;
 $2 = $pv;
 $3 = $ebpv;
 $4 = $ehp;
 $5 = $astrom;
 $AUDMS = 1731456.8287037036;
 $CR = 0.0057755183101851851;
 $6 = $0;
 $7 = $6 - 2451545.0;
 $8 = $1;
 $9 = $7 + $8;
 $10 = $9 / 365.25;
 $11 = $5;
 HEAPF64[$11>>3] = $10;
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = ($12|0)<(3);
  if (!($13)) {
   break;
  }
  $14 = $i;
  $15 = $2;
  $16 = (($15) + ($14<<3)|0);
  $17 = +HEAPF64[$16>>3];
  $18 = $17 / 1.4959787E+11;
  $dp = $18;
  $19 = $i;
  $20 = $2;
  $21 = ((($20)) + 24|0);
  $22 = (($21) + ($19<<3)|0);
  $23 = +HEAPF64[$22>>3];
  $24 = $23 / 1731456.8287037036;
  $dv = $24;
  $25 = $i;
  $26 = $3;
  $27 = (($26) + ($25<<3)|0);
  $28 = +HEAPF64[$27>>3];
  $29 = $dp;
  $30 = $28 + $29;
  $31 = $i;
  $32 = (($pb) + ($31<<3)|0);
  HEAPF64[$32>>3] = $30;
  $33 = $i;
  $34 = $3;
  $35 = ((($34)) + 24|0);
  $36 = (($35) + ($33<<3)|0);
  $37 = +HEAPF64[$36>>3];
  $38 = $dv;
  $39 = $37 + $38;
  $40 = $i;
  $41 = (($vb) + ($40<<3)|0);
  HEAPF64[$41>>3] = $39;
  $42 = $i;
  $43 = $4;
  $44 = (($43) + ($42<<3)|0);
  $45 = +HEAPF64[$44>>3];
  $46 = $dp;
  $47 = $45 + $46;
  $48 = $i;
  $49 = (($ph) + ($48<<3)|0);
  HEAPF64[$49>>3] = $47;
  $50 = $i;
  $51 = (($50) + 1)|0;
  $i = $51;
 }
 $52 = $5;
 $53 = ((($52)) + 8|0);
 _eraCp($pb,$53);
 $54 = $5;
 $55 = ((($54)) + 56|0);
 $56 = $5;
 $57 = ((($56)) + 32|0);
 _eraPn($ph,$55,$57);
 $v2 = 0.0;
 $i = 0;
 while(1) {
  $58 = $i;
  $59 = ($58|0)<(3);
  if (!($59)) {
   break;
  }
  $60 = $i;
  $61 = (($vb) + ($60<<3)|0);
  $62 = +HEAPF64[$61>>3];
  $63 = $62 * 0.0057755183101851851;
  $w = $63;
  $64 = $w;
  $65 = $i;
  $66 = $5;
  $67 = ((($66)) + 64|0);
  $68 = (($67) + ($65<<3)|0);
  HEAPF64[$68>>3] = $64;
  $69 = $w;
  $70 = $w;
  $71 = $69 * $70;
  $72 = $v2;
  $73 = $72 + $71;
  $v2 = $73;
  $74 = $i;
  $75 = (($74) + 1)|0;
  $i = $75;
 }
 $76 = $v2;
 $77 = 1.0 - $76;
 $78 = (+Math_sqrt((+$77)));
 $79 = $5;
 $80 = ((($79)) + 88|0);
 HEAPF64[$80>>3] = $78;
 $81 = $5;
 $82 = ((($81)) + 96|0);
 _eraIr($82);
 STACKTOP = sp;return;
}
function _eraAper13($ut11,$ut12,$astrom) {
 $ut11 = +$ut11;
 $ut12 = +$ut12;
 $astrom = $astrom|0;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ut11;
 $1 = $ut12;
 $2 = $astrom;
 $3 = $0;
 $4 = $1;
 $5 = (+_eraEra00($3,$4));
 $6 = $2;
 _eraAper($5,$6);
 STACKTOP = sp;return;
}
function _eraAper($theta,$astrom) {
 $theta = +$theta;
 $astrom = $astrom|0;
 var $0 = 0.0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $theta;
 $1 = $astrom;
 $2 = $0;
 $3 = $1;
 $4 = ((($3)) + 168|0);
 $5 = +HEAPF64[$4>>3];
 $6 = $2 + $5;
 $7 = $1;
 $8 = ((($7)) + 224|0);
 HEAPF64[$8>>3] = $6;
 STACKTOP = sp;return;
}
function _eraApio13($utc1,$utc2,$dut1,$elong,$phi,$hm,$xp,$yp,$phpa,$tc,$rh,$wl,$astrom) {
 $utc1 = +$utc1;
 $utc2 = +$utc2;
 $dut1 = +$dut1;
 $elong = +$elong;
 $phi = +$phi;
 $hm = +$hm;
 $xp = +$xp;
 $yp = +$yp;
 $phpa = +$phpa;
 $tc = +$tc;
 $rh = +$rh;
 $wl = +$wl;
 $astrom = $astrom|0;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $j = 0, $refa = 0, $refb = 0, $sp = 0.0, $tai1 = 0, $tai2 = 0, $theta = 0.0, $tt1 = 0, $tt2 = 0, $ut11 = 0;
 var $ut12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tai1 = sp + 72|0;
 $tai2 = sp + 64|0;
 $tt1 = sp + 56|0;
 $tt2 = sp + 48|0;
 $ut11 = sp + 40|0;
 $ut12 = sp + 32|0;
 $refa = sp + 8|0;
 $refb = sp;
 $1 = $utc1;
 $2 = $utc2;
 $3 = $dut1;
 $4 = $elong;
 $5 = $phi;
 $6 = $hm;
 $7 = $xp;
 $8 = $yp;
 $9 = $phpa;
 $10 = $tc;
 $11 = $rh;
 $12 = $wl;
 $13 = $astrom;
 $14 = $1;
 $15 = $2;
 $16 = (_eraUtctai($14,$15,$tai1,$tai2)|0);
 $j = $16;
 $17 = $j;
 $18 = ($17|0)<(0);
 if ($18) {
  $0 = -1;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 $19 = +HEAPF64[$tai1>>3];
 $20 = +HEAPF64[$tai2>>3];
 $21 = (_eraTaitt($19,$20,$tt1,$tt2)|0);
 $j = $21;
 $22 = $1;
 $23 = $2;
 $24 = $3;
 $25 = (_eraUtcut1($22,$23,$24,$ut11,$ut12)|0);
 $j = $25;
 $26 = $j;
 $27 = ($26|0)<(0);
 if ($27) {
  $0 = -1;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 } else {
  $28 = +HEAPF64[$tt1>>3];
  $29 = +HEAPF64[$tt2>>3];
  $30 = (+_eraSp00($28,$29));
  $sp = $30;
  $31 = +HEAPF64[$ut11>>3];
  $32 = +HEAPF64[$ut12>>3];
  $33 = (+_eraEra00($31,$32));
  $theta = $33;
  $34 = $9;
  $35 = $10;
  $36 = $11;
  $37 = $12;
  _eraRefco($34,$35,$36,$37,$refa,$refb);
  $38 = $sp;
  $39 = $theta;
  $40 = $4;
  $41 = $5;
  $42 = $6;
  $43 = $7;
  $44 = $8;
  $45 = +HEAPF64[$refa>>3];
  $46 = +HEAPF64[$refb>>3];
  $47 = $13;
  _eraApio($38,$39,$40,$41,$42,$43,$44,$45,$46,$47);
  $48 = $j;
  $0 = $48;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 return (0)|0;
}
function _eraApio($sp,$theta,$elong,$phi,$hm,$xp,$yp,$refa,$refb,$astrom) {
 $sp = +$sp;
 $theta = +$theta;
 $elong = +$elong;
 $phi = +$phi;
 $hm = +$hm;
 $xp = +$xp;
 $yp = +$yp;
 $refa = +$refa;
 $refb = +$refb;
 $astrom = $astrom|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0;
 var $63 = 0.0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0;
 var $9 = 0, $cl = 0.0, $pv = 0, $sl = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pv = sp;
 $0 = $sp;
 $1 = $theta;
 $2 = $elong;
 $3 = $phi;
 $4 = $hm;
 $5 = $xp;
 $6 = $yp;
 $7 = $refa;
 $8 = $refb;
 $9 = $astrom;
 $10 = $2;
 $11 = $0;
 $12 = $10 + $11;
 $13 = $9;
 $14 = ((($13)) + 168|0);
 HEAPF64[$14>>3] = $12;
 $15 = $9;
 $16 = ((($15)) + 168|0);
 $17 = +HEAPF64[$16>>3];
 $18 = (+Math_sin((+$17)));
 $sl = $18;
 $19 = $9;
 $20 = ((($19)) + 168|0);
 $21 = +HEAPF64[$20>>3];
 $22 = (+Math_cos((+$21)));
 $cl = $22;
 $23 = $5;
 $24 = $cl;
 $25 = $23 * $24;
 $26 = $6;
 $27 = $sl;
 $28 = $26 * $27;
 $29 = $25 - $28;
 $30 = $9;
 $31 = ((($30)) + 184|0);
 HEAPF64[$31>>3] = $29;
 $32 = $5;
 $33 = $sl;
 $34 = $32 * $33;
 $35 = $6;
 $36 = $cl;
 $37 = $35 * $36;
 $38 = $34 + $37;
 $39 = $9;
 $40 = ((($39)) + 192|0);
 HEAPF64[$40>>3] = $38;
 $41 = $3;
 $42 = (+Math_sin((+$41)));
 $43 = $9;
 $44 = ((($43)) + 200|0);
 HEAPF64[$44>>3] = $42;
 $45 = $3;
 $46 = (+Math_cos((+$45)));
 $47 = $9;
 $48 = ((($47)) + 208|0);
 HEAPF64[$48>>3] = $46;
 $49 = $2;
 $50 = $3;
 $51 = $4;
 $52 = $5;
 $53 = $6;
 $54 = $0;
 $55 = $1;
 _eraPvtob($49,$50,$51,$52,$53,$54,$55,$pv);
 $56 = ((($pv)) + 24|0);
 $57 = +HEAPF64[$56>>3];
 $58 = ((($pv)) + 24|0);
 $59 = +HEAPF64[$58>>3];
 $60 = $57 * $59;
 $61 = ((($pv)) + 24|0);
 $62 = ((($61)) + 8|0);
 $63 = +HEAPF64[$62>>3];
 $64 = ((($pv)) + 24|0);
 $65 = ((($64)) + 8|0);
 $66 = +HEAPF64[$65>>3];
 $67 = $63 * $66;
 $68 = $60 + $67;
 $69 = (+Math_sqrt((+$68)));
 $70 = $69 / 299792458.0;
 $71 = $9;
 $72 = ((($71)) + 216|0);
 HEAPF64[$72>>3] = $70;
 $73 = $7;
 $74 = $9;
 $75 = ((($74)) + 232|0);
 HEAPF64[$75>>3] = $73;
 $76 = $8;
 $77 = $9;
 $78 = ((($77)) + 240|0);
 HEAPF64[$78>>3] = $76;
 $79 = $1;
 $80 = $9;
 _eraAper($79,$80);
 STACKTOP = sp;return;
}
function _eraAtci13($rc,$dc,$pr,$pd,$px,$rv,$date1,$date2,$ri,$di,$eo) {
 $rc = +$rc;
 $dc = +$dc;
 $pr = +$pr;
 $pd = +$pd;
 $px = +$px;
 $rv = +$rv;
 $date1 = +$date1;
 $date2 = +$date2;
 $ri = $ri|0;
 $di = $di|0;
 $eo = $eo|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0;
 var $8 = 0, $9 = 0, $astrom = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $astrom = sp;
 $0 = $rc;
 $1 = $dc;
 $2 = $pr;
 $3 = $pd;
 $4 = $px;
 $5 = $rv;
 $6 = $date1;
 $7 = $date2;
 $8 = $ri;
 $9 = $di;
 $10 = $eo;
 $11 = $6;
 $12 = $7;
 $13 = $10;
 _eraApci13($11,$12,$astrom,$13);
 $14 = $0;
 $15 = $1;
 $16 = $2;
 $17 = $3;
 $18 = $4;
 $19 = $5;
 $20 = $8;
 $21 = $9;
 _eraAtciq($14,$15,$16,$17,$18,$19,$astrom,$20,$21);
 STACKTOP = sp;return;
}
function _eraAtciq($rc,$dc,$pr,$pd,$px,$rv,$astrom,$ri,$di) {
 $rc = +$rc;
 $dc = +$dc;
 $pr = +$pr;
 $pd = +$pd;
 $px = +$px;
 $rv = +$rv;
 $astrom = $astrom|0;
 $ri = $ri|0;
 $di = $di|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $pco = 0, $pi = 0;
 var $pnat = 0, $ppr = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pco = sp + 80|0;
 $pnat = sp + 56|0;
 $ppr = sp + 32|0;
 $pi = sp + 8|0;
 $w = sp;
 $0 = $rc;
 $1 = $dc;
 $2 = $pr;
 $3 = $pd;
 $4 = $px;
 $5 = $rv;
 $6 = $astrom;
 $7 = $ri;
 $8 = $di;
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = +HEAPF64[$15>>3];
 $17 = $6;
 $18 = ((($17)) + 8|0);
 _eraPmpx($9,$10,$11,$12,$13,$14,$16,$18,$pco);
 $19 = $6;
 $20 = ((($19)) + 32|0);
 $21 = $6;
 $22 = ((($21)) + 56|0);
 $23 = +HEAPF64[$22>>3];
 _eraLdsun($pco,$20,$23,$pnat);
 $24 = $6;
 $25 = ((($24)) + 64|0);
 $26 = $6;
 $27 = ((($26)) + 56|0);
 $28 = +HEAPF64[$27>>3];
 $29 = $6;
 $30 = ((($29)) + 88|0);
 $31 = +HEAPF64[$30>>3];
 _eraAb($pnat,$25,$28,$31,$ppr);
 $32 = $6;
 $33 = ((($32)) + 96|0);
 _eraRxp($33,$ppr,$pi);
 $34 = $8;
 _eraC2s($pi,$w,$34);
 $35 = +HEAPF64[$w>>3];
 $36 = (+_eraAnp($35));
 $37 = $7;
 HEAPF64[$37>>3] = $36;
 STACKTOP = sp;return;
}
function _eraAtciqn($rc,$dc,$pr,$pd,$px,$rv,$astrom,$n,$b,$ri,$di) {
 $rc = +$rc;
 $dc = +$dc;
 $pr = +$pr;
 $pd = +$pd;
 $px = +$px;
 $rv = +$rv;
 $astrom = $astrom|0;
 $n = $n|0;
 $b = $b|0;
 $ri = $ri|0;
 $di = $di|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pco = 0;
 var $pi = 0, $pnat = 0, $ppr = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pco = sp + 80|0;
 $pnat = sp + 56|0;
 $ppr = sp + 32|0;
 $pi = sp + 8|0;
 $w = sp;
 $0 = $rc;
 $1 = $dc;
 $2 = $pr;
 $3 = $pd;
 $4 = $px;
 $5 = $rv;
 $6 = $astrom;
 $7 = $n;
 $8 = $b;
 $9 = $ri;
 $10 = $di;
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = +HEAPF64[$17>>3];
 $19 = $6;
 $20 = ((($19)) + 8|0);
 _eraPmpx($11,$12,$13,$14,$15,$16,$18,$20,$pco);
 $21 = $7;
 $22 = $8;
 $23 = $6;
 $24 = ((($23)) + 8|0);
 _eraLdn($21,$22,$24,$pco,$pnat);
 $25 = $6;
 $26 = ((($25)) + 64|0);
 $27 = $6;
 $28 = ((($27)) + 56|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $6;
 $31 = ((($30)) + 88|0);
 $32 = +HEAPF64[$31>>3];
 _eraAb($pnat,$26,$29,$32,$ppr);
 $33 = $6;
 $34 = ((($33)) + 96|0);
 _eraRxp($34,$ppr,$pi);
 $35 = $10;
 _eraC2s($pi,$w,$35);
 $36 = +HEAPF64[$w>>3];
 $37 = (+_eraAnp($36));
 $38 = $9;
 HEAPF64[$38>>3] = $37;
 STACKTOP = sp;return;
}
function _eraAtciqz($rc,$dc,$astrom,$ri,$di) {
 $rc = +$rc;
 $dc = +$dc;
 $astrom = $astrom|0;
 $ri = $ri|0;
 $di = $di|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $pco = 0, $pi = 0, $pnat = 0, $ppr = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pco = sp + 80|0;
 $pnat = sp + 56|0;
 $ppr = sp + 32|0;
 $pi = sp + 8|0;
 $w = sp;
 $0 = $rc;
 $1 = $dc;
 $2 = $astrom;
 $3 = $ri;
 $4 = $di;
 $5 = $0;
 $6 = $1;
 _eraS2c($5,$6,$pco);
 $7 = $2;
 $8 = ((($7)) + 32|0);
 $9 = $2;
 $10 = ((($9)) + 56|0);
 $11 = +HEAPF64[$10>>3];
 _eraLdsun($pco,$8,$11,$pnat);
 $12 = $2;
 $13 = ((($12)) + 64|0);
 $14 = $2;
 $15 = ((($14)) + 56|0);
 $16 = +HEAPF64[$15>>3];
 $17 = $2;
 $18 = ((($17)) + 88|0);
 $19 = +HEAPF64[$18>>3];
 _eraAb($pnat,$13,$16,$19,$ppr);
 $20 = $2;
 $21 = ((($20)) + 96|0);
 _eraRxp($21,$ppr,$pi);
 $22 = $4;
 _eraC2s($pi,$w,$22);
 $23 = +HEAPF64[$w>>3];
 $24 = (+_eraAnp($23));
 $25 = $3;
 HEAPF64[$25>>3] = $24;
 STACKTOP = sp;return;
}
function _eraAtco13($rc,$dc,$pr,$pd,$px,$rv,$utc1,$utc2,$dut1,$elong,$phi,$hm,$xp,$yp,$phpa,$tc,$rh,$wl,$aob,$zob,$hob,$dob,$rob,$eo) {
 $rc = +$rc;
 $dc = +$dc;
 $pr = +$pr;
 $pd = +$pd;
 $px = +$px;
 $rv = +$rv;
 $utc1 = +$utc1;
 $utc2 = +$utc2;
 $dut1 = +$dut1;
 $elong = +$elong;
 $phi = +$phi;
 $hm = +$hm;
 $xp = +$xp;
 $yp = +$yp;
 $phpa = +$phpa;
 $tc = +$tc;
 $rh = +$rh;
 $wl = +$wl;
 $aob = $aob|0;
 $zob = $zob|0;
 $hob = $hob|0;
 $dob = $dob|0;
 $rob = $rob|0;
 $eo = $eo|0;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $astrom = 0, $di = 0, $j = 0;
 var $ri = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $astrom = sp + 16|0;
 $ri = sp + 8|0;
 $di = sp;
 $1 = $rc;
 $2 = $dc;
 $3 = $pr;
 $4 = $pd;
 $5 = $px;
 $6 = $rv;
 $7 = $utc1;
 $8 = $utc2;
 $9 = $dut1;
 $10 = $elong;
 $11 = $phi;
 $12 = $hm;
 $13 = $xp;
 $14 = $yp;
 $15 = $phpa;
 $16 = $tc;
 $17 = $rh;
 $18 = $wl;
 $19 = $aob;
 $20 = $zob;
 $21 = $hob;
 $22 = $dob;
 $23 = $rob;
 $24 = $eo;
 $25 = $7;
 $26 = $8;
 $27 = $9;
 $28 = $10;
 $29 = $11;
 $30 = $12;
 $31 = $13;
 $32 = $14;
 $33 = $15;
 $34 = $16;
 $35 = $17;
 $36 = $18;
 $37 = $24;
 $38 = (_eraApco13($25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$astrom,$37)|0);
 $j = $38;
 $39 = $j;
 $40 = ($39|0)<(0);
 if ($40) {
  $41 = $j;
  $0 = $41;
  $56 = $0;
  STACKTOP = sp;return ($56|0);
 } else {
  $42 = $1;
  $43 = $2;
  $44 = $3;
  $45 = $4;
  $46 = $5;
  $47 = $6;
  _eraAtciq($42,$43,$44,$45,$46,$47,$astrom,$ri,$di);
  $48 = +HEAPF64[$ri>>3];
  $49 = +HEAPF64[$di>>3];
  $50 = $19;
  $51 = $20;
  $52 = $21;
  $53 = $22;
  $54 = $23;
  _eraAtioq($48,$49,$astrom,$50,$51,$52,$53,$54);
  $55 = $j;
  $0 = $55;
  $56 = $0;
  STACKTOP = sp;return ($56|0);
 }
 return (0)|0;
}
function _eraAtic13($ri,$di,$date1,$date2,$rc,$dc,$eo) {
 $ri = +$ri;
 $di = +$di;
 $date1 = +$date1;
 $date2 = +$date2;
 $rc = $rc|0;
 $dc = $dc|0;
 $eo = $eo|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $astrom = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $astrom = sp;
 $0 = $ri;
 $1 = $di;
 $2 = $date1;
 $3 = $date2;
 $4 = $rc;
 $5 = $dc;
 $6 = $eo;
 $7 = $2;
 $8 = $3;
 $9 = $6;
 _eraApci13($7,$8,$astrom,$9);
 $10 = $0;
 $11 = $1;
 $12 = $4;
 $13 = $5;
 _eraAticq($10,$11,$astrom,$12,$13);
 STACKTOP = sp;return;
}
function _eraAticq($ri,$di,$astrom,$rc,$dc) {
 $ri = +$ri;
 $di = +$di;
 $astrom = $astrom|0;
 $rc = $rc|0;
 $dc = $dc|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0;
 var $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0;
 var $152 = 0.0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0;
 var $170 = 0.0, $171 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0;
 var $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0.0, $after = 0, $before = 0, $d = 0, $i = 0, $j = 0, $pco = 0, $pi = 0, $pnat = 0;
 var $ppr = 0, $r = 0.0, $r2 = 0.0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pi = sp + 168|0;
 $ppr = sp + 144|0;
 $pnat = sp + 120|0;
 $pco = sp + 96|0;
 $w = sp + 88|0;
 $d = sp + 64|0;
 $before = sp + 40|0;
 $after = sp;
 $0 = $ri;
 $1 = $di;
 $2 = $astrom;
 $3 = $rc;
 $4 = $dc;
 $5 = $0;
 $6 = $1;
 _eraS2c($5,$6,$pi);
 $7 = $2;
 $8 = ((($7)) + 96|0);
 _eraTrxp($8,$pi,$ppr);
 _eraZp($d);
 $j = 0;
 while(1) {
  $9 = $j;
  $10 = ($9|0)<(2);
  if (!($10)) {
   break;
  }
  $r2 = 0.0;
  $i = 0;
  while(1) {
   $11 = $i;
   $12 = ($11|0)<(3);
   if (!($12)) {
    break;
   }
   $13 = $i;
   $14 = (($ppr) + ($13<<3)|0);
   $15 = +HEAPF64[$14>>3];
   $16 = $i;
   $17 = (($d) + ($16<<3)|0);
   $18 = +HEAPF64[$17>>3];
   $19 = $15 - $18;
   HEAPF64[$w>>3] = $19;
   $20 = +HEAPF64[$w>>3];
   $21 = $i;
   $22 = (($before) + ($21<<3)|0);
   HEAPF64[$22>>3] = $20;
   $23 = +HEAPF64[$w>>3];
   $24 = +HEAPF64[$w>>3];
   $25 = $23 * $24;
   $26 = $r2;
   $27 = $26 + $25;
   $r2 = $27;
   $28 = $i;
   $29 = (($28) + 1)|0;
   $i = $29;
  }
  $30 = $r2;
  $31 = (+Math_sqrt((+$30)));
  $r = $31;
  $i = 0;
  while(1) {
   $32 = $i;
   $33 = ($32|0)<(3);
   if (!($33)) {
    break;
   }
   $34 = $r;
   $35 = $i;
   $36 = (($before) + ($35<<3)|0);
   $37 = +HEAPF64[$36>>3];
   $38 = $37 / $34;
   HEAPF64[$36>>3] = $38;
   $39 = $i;
   $40 = (($39) + 1)|0;
   $i = $40;
  }
  $41 = $2;
  $42 = ((($41)) + 64|0);
  $43 = $2;
  $44 = ((($43)) + 56|0);
  $45 = +HEAPF64[$44>>3];
  $46 = $2;
  $47 = ((($46)) + 88|0);
  $48 = +HEAPF64[$47>>3];
  _eraAb($before,$42,$45,$48,$after);
  $r2 = 0.0;
  $i = 0;
  while(1) {
   $49 = $i;
   $50 = ($49|0)<(3);
   if (!($50)) {
    break;
   }
   $51 = $i;
   $52 = (($after) + ($51<<3)|0);
   $53 = +HEAPF64[$52>>3];
   $54 = $i;
   $55 = (($before) + ($54<<3)|0);
   $56 = +HEAPF64[$55>>3];
   $57 = $53 - $56;
   $58 = $i;
   $59 = (($d) + ($58<<3)|0);
   HEAPF64[$59>>3] = $57;
   $60 = $i;
   $61 = (($ppr) + ($60<<3)|0);
   $62 = +HEAPF64[$61>>3];
   $63 = $i;
   $64 = (($d) + ($63<<3)|0);
   $65 = +HEAPF64[$64>>3];
   $66 = $62 - $65;
   HEAPF64[$w>>3] = $66;
   $67 = +HEAPF64[$w>>3];
   $68 = $i;
   $69 = (($pnat) + ($68<<3)|0);
   HEAPF64[$69>>3] = $67;
   $70 = +HEAPF64[$w>>3];
   $71 = +HEAPF64[$w>>3];
   $72 = $70 * $71;
   $73 = $r2;
   $74 = $73 + $72;
   $r2 = $74;
   $75 = $i;
   $76 = (($75) + 1)|0;
   $i = $76;
  }
  $77 = $r2;
  $78 = (+Math_sqrt((+$77)));
  $r = $78;
  $i = 0;
  while(1) {
   $79 = $i;
   $80 = ($79|0)<(3);
   if (!($80)) {
    break;
   }
   $81 = $r;
   $82 = $i;
   $83 = (($pnat) + ($82<<3)|0);
   $84 = +HEAPF64[$83>>3];
   $85 = $84 / $81;
   HEAPF64[$83>>3] = $85;
   $86 = $i;
   $87 = (($86) + 1)|0;
   $i = $87;
  }
  $88 = $j;
  $89 = (($88) + 1)|0;
  $j = $89;
 }
 _eraZp($d);
 $j = 0;
 while(1) {
  $90 = $j;
  $91 = ($90|0)<(5);
  if (!($91)) {
   break;
  }
  $r2 = 0.0;
  $i = 0;
  while(1) {
   $92 = $i;
   $93 = ($92|0)<(3);
   if (!($93)) {
    break;
   }
   $94 = $i;
   $95 = (($pnat) + ($94<<3)|0);
   $96 = +HEAPF64[$95>>3];
   $97 = $i;
   $98 = (($d) + ($97<<3)|0);
   $99 = +HEAPF64[$98>>3];
   $100 = $96 - $99;
   HEAPF64[$w>>3] = $100;
   $101 = +HEAPF64[$w>>3];
   $102 = $i;
   $103 = (($before) + ($102<<3)|0);
   HEAPF64[$103>>3] = $101;
   $104 = +HEAPF64[$w>>3];
   $105 = +HEAPF64[$w>>3];
   $106 = $104 * $105;
   $107 = $r2;
   $108 = $107 + $106;
   $r2 = $108;
   $109 = $i;
   $110 = (($109) + 1)|0;
   $i = $110;
  }
  $111 = $r2;
  $112 = (+Math_sqrt((+$111)));
  $r = $112;
  $i = 0;
  while(1) {
   $113 = $i;
   $114 = ($113|0)<(3);
   if (!($114)) {
    break;
   }
   $115 = $r;
   $116 = $i;
   $117 = (($before) + ($116<<3)|0);
   $118 = +HEAPF64[$117>>3];
   $119 = $118 / $115;
   HEAPF64[$117>>3] = $119;
   $120 = $i;
   $121 = (($120) + 1)|0;
   $i = $121;
  }
  $122 = $2;
  $123 = ((($122)) + 32|0);
  $124 = $2;
  $125 = ((($124)) + 56|0);
  $126 = +HEAPF64[$125>>3];
  _eraLdsun($before,$123,$126,$after);
  $r2 = 0.0;
  $i = 0;
  while(1) {
   $127 = $i;
   $128 = ($127|0)<(3);
   if (!($128)) {
    break;
   }
   $129 = $i;
   $130 = (($after) + ($129<<3)|0);
   $131 = +HEAPF64[$130>>3];
   $132 = $i;
   $133 = (($before) + ($132<<3)|0);
   $134 = +HEAPF64[$133>>3];
   $135 = $131 - $134;
   $136 = $i;
   $137 = (($d) + ($136<<3)|0);
   HEAPF64[$137>>3] = $135;
   $138 = $i;
   $139 = (($pnat) + ($138<<3)|0);
   $140 = +HEAPF64[$139>>3];
   $141 = $i;
   $142 = (($d) + ($141<<3)|0);
   $143 = +HEAPF64[$142>>3];
   $144 = $140 - $143;
   HEAPF64[$w>>3] = $144;
   $145 = +HEAPF64[$w>>3];
   $146 = $i;
   $147 = (($pco) + ($146<<3)|0);
   HEAPF64[$147>>3] = $145;
   $148 = +HEAPF64[$w>>3];
   $149 = +HEAPF64[$w>>3];
   $150 = $148 * $149;
   $151 = $r2;
   $152 = $151 + $150;
   $r2 = $152;
   $153 = $i;
   $154 = (($153) + 1)|0;
   $i = $154;
  }
  $155 = $r2;
  $156 = (+Math_sqrt((+$155)));
  $r = $156;
  $i = 0;
  while(1) {
   $157 = $i;
   $158 = ($157|0)<(3);
   if (!($158)) {
    break;
   }
   $159 = $r;
   $160 = $i;
   $161 = (($pco) + ($160<<3)|0);
   $162 = +HEAPF64[$161>>3];
   $163 = $162 / $159;
   HEAPF64[$161>>3] = $163;
   $164 = $i;
   $165 = (($164) + 1)|0;
   $i = $165;
  }
  $166 = $j;
  $167 = (($166) + 1)|0;
  $j = $167;
 }
 $168 = $4;
 _eraC2s($pco,$w,$168);
 $169 = +HEAPF64[$w>>3];
 $170 = (+_eraAnp($169));
 $171 = $3;
 HEAPF64[$171>>3] = $170;
 STACKTOP = sp;return;
}
function _eraAticqn($ri,$di,$astrom,$n,$b,$rc,$dc) {
 $ri = +$ri;
 $di = +$di;
 $astrom = $astrom|0;
 $n = $n|0;
 $b = $b|0;
 $rc = $rc|0;
 $dc = $dc|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0;
 var $134 = 0, $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0.0;
 var $170 = 0.0, $171 = 0.0, $172 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0;
 var $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0;
 var $7 = 0.0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $after = 0, $before = 0, $d = 0, $i = 0, $j = 0, $pco = 0, $pi = 0;
 var $pnat = 0, $ppr = 0, $r = 0.0, $r2 = 0.0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pi = sp + 168|0;
 $ppr = sp + 144|0;
 $pnat = sp + 120|0;
 $pco = sp + 96|0;
 $w = sp + 88|0;
 $d = sp + 64|0;
 $before = sp + 40|0;
 $after = sp;
 $0 = $ri;
 $1 = $di;
 $2 = $astrom;
 $3 = $n;
 $4 = $b;
 $5 = $rc;
 $6 = $dc;
 $7 = $0;
 $8 = $1;
 _eraS2c($7,$8,$pi);
 $9 = $2;
 $10 = ((($9)) + 96|0);
 _eraTrxp($10,$pi,$ppr);
 _eraZp($d);
 $j = 0;
 while(1) {
  $11 = $j;
  $12 = ($11|0)<(2);
  if (!($12)) {
   break;
  }
  $r2 = 0.0;
  $i = 0;
  while(1) {
   $13 = $i;
   $14 = ($13|0)<(3);
   if (!($14)) {
    break;
   }
   $15 = $i;
   $16 = (($ppr) + ($15<<3)|0);
   $17 = +HEAPF64[$16>>3];
   $18 = $i;
   $19 = (($d) + ($18<<3)|0);
   $20 = +HEAPF64[$19>>3];
   $21 = $17 - $20;
   HEAPF64[$w>>3] = $21;
   $22 = +HEAPF64[$w>>3];
   $23 = $i;
   $24 = (($before) + ($23<<3)|0);
   HEAPF64[$24>>3] = $22;
   $25 = +HEAPF64[$w>>3];
   $26 = +HEAPF64[$w>>3];
   $27 = $25 * $26;
   $28 = $r2;
   $29 = $28 + $27;
   $r2 = $29;
   $30 = $i;
   $31 = (($30) + 1)|0;
   $i = $31;
  }
  $32 = $r2;
  $33 = (+Math_sqrt((+$32)));
  $r = $33;
  $i = 0;
  while(1) {
   $34 = $i;
   $35 = ($34|0)<(3);
   if (!($35)) {
    break;
   }
   $36 = $r;
   $37 = $i;
   $38 = (($before) + ($37<<3)|0);
   $39 = +HEAPF64[$38>>3];
   $40 = $39 / $36;
   HEAPF64[$38>>3] = $40;
   $41 = $i;
   $42 = (($41) + 1)|0;
   $i = $42;
  }
  $43 = $2;
  $44 = ((($43)) + 64|0);
  $45 = $2;
  $46 = ((($45)) + 56|0);
  $47 = +HEAPF64[$46>>3];
  $48 = $2;
  $49 = ((($48)) + 88|0);
  $50 = +HEAPF64[$49>>3];
  _eraAb($before,$44,$47,$50,$after);
  $r2 = 0.0;
  $i = 0;
  while(1) {
   $51 = $i;
   $52 = ($51|0)<(3);
   if (!($52)) {
    break;
   }
   $53 = $i;
   $54 = (($after) + ($53<<3)|0);
   $55 = +HEAPF64[$54>>3];
   $56 = $i;
   $57 = (($before) + ($56<<3)|0);
   $58 = +HEAPF64[$57>>3];
   $59 = $55 - $58;
   $60 = $i;
   $61 = (($d) + ($60<<3)|0);
   HEAPF64[$61>>3] = $59;
   $62 = $i;
   $63 = (($ppr) + ($62<<3)|0);
   $64 = +HEAPF64[$63>>3];
   $65 = $i;
   $66 = (($d) + ($65<<3)|0);
   $67 = +HEAPF64[$66>>3];
   $68 = $64 - $67;
   HEAPF64[$w>>3] = $68;
   $69 = +HEAPF64[$w>>3];
   $70 = $i;
   $71 = (($pnat) + ($70<<3)|0);
   HEAPF64[$71>>3] = $69;
   $72 = +HEAPF64[$w>>3];
   $73 = +HEAPF64[$w>>3];
   $74 = $72 * $73;
   $75 = $r2;
   $76 = $75 + $74;
   $r2 = $76;
   $77 = $i;
   $78 = (($77) + 1)|0;
   $i = $78;
  }
  $79 = $r2;
  $80 = (+Math_sqrt((+$79)));
  $r = $80;
  $i = 0;
  while(1) {
   $81 = $i;
   $82 = ($81|0)<(3);
   if (!($82)) {
    break;
   }
   $83 = $r;
   $84 = $i;
   $85 = (($pnat) + ($84<<3)|0);
   $86 = +HEAPF64[$85>>3];
   $87 = $86 / $83;
   HEAPF64[$85>>3] = $87;
   $88 = $i;
   $89 = (($88) + 1)|0;
   $i = $89;
  }
  $90 = $j;
  $91 = (($90) + 1)|0;
  $j = $91;
 }
 _eraZp($d);
 $j = 0;
 while(1) {
  $92 = $j;
  $93 = ($92|0)<(5);
  if (!($93)) {
   break;
  }
  $r2 = 0.0;
  $i = 0;
  while(1) {
   $94 = $i;
   $95 = ($94|0)<(3);
   if (!($95)) {
    break;
   }
   $96 = $i;
   $97 = (($pnat) + ($96<<3)|0);
   $98 = +HEAPF64[$97>>3];
   $99 = $i;
   $100 = (($d) + ($99<<3)|0);
   $101 = +HEAPF64[$100>>3];
   $102 = $98 - $101;
   HEAPF64[$w>>3] = $102;
   $103 = +HEAPF64[$w>>3];
   $104 = $i;
   $105 = (($before) + ($104<<3)|0);
   HEAPF64[$105>>3] = $103;
   $106 = +HEAPF64[$w>>3];
   $107 = +HEAPF64[$w>>3];
   $108 = $106 * $107;
   $109 = $r2;
   $110 = $109 + $108;
   $r2 = $110;
   $111 = $i;
   $112 = (($111) + 1)|0;
   $i = $112;
  }
  $113 = $r2;
  $114 = (+Math_sqrt((+$113)));
  $r = $114;
  $i = 0;
  while(1) {
   $115 = $i;
   $116 = ($115|0)<(3);
   if (!($116)) {
    break;
   }
   $117 = $r;
   $118 = $i;
   $119 = (($before) + ($118<<3)|0);
   $120 = +HEAPF64[$119>>3];
   $121 = $120 / $117;
   HEAPF64[$119>>3] = $121;
   $122 = $i;
   $123 = (($122) + 1)|0;
   $i = $123;
  }
  $124 = $3;
  $125 = $4;
  $126 = $2;
  $127 = ((($126)) + 8|0);
  _eraLdn($124,$125,$127,$before,$after);
  $r2 = 0.0;
  $i = 0;
  while(1) {
   $128 = $i;
   $129 = ($128|0)<(3);
   if (!($129)) {
    break;
   }
   $130 = $i;
   $131 = (($after) + ($130<<3)|0);
   $132 = +HEAPF64[$131>>3];
   $133 = $i;
   $134 = (($before) + ($133<<3)|0);
   $135 = +HEAPF64[$134>>3];
   $136 = $132 - $135;
   $137 = $i;
   $138 = (($d) + ($137<<3)|0);
   HEAPF64[$138>>3] = $136;
   $139 = $i;
   $140 = (($pnat) + ($139<<3)|0);
   $141 = +HEAPF64[$140>>3];
   $142 = $i;
   $143 = (($d) + ($142<<3)|0);
   $144 = +HEAPF64[$143>>3];
   $145 = $141 - $144;
   HEAPF64[$w>>3] = $145;
   $146 = +HEAPF64[$w>>3];
   $147 = $i;
   $148 = (($pco) + ($147<<3)|0);
   HEAPF64[$148>>3] = $146;
   $149 = +HEAPF64[$w>>3];
   $150 = +HEAPF64[$w>>3];
   $151 = $149 * $150;
   $152 = $r2;
   $153 = $152 + $151;
   $r2 = $153;
   $154 = $i;
   $155 = (($154) + 1)|0;
   $i = $155;
  }
  $156 = $r2;
  $157 = (+Math_sqrt((+$156)));
  $r = $157;
  $i = 0;
  while(1) {
   $158 = $i;
   $159 = ($158|0)<(3);
   if (!($159)) {
    break;
   }
   $160 = $r;
   $161 = $i;
   $162 = (($pco) + ($161<<3)|0);
   $163 = +HEAPF64[$162>>3];
   $164 = $163 / $160;
   HEAPF64[$162>>3] = $164;
   $165 = $i;
   $166 = (($165) + 1)|0;
   $i = $166;
  }
  $167 = $j;
  $168 = (($167) + 1)|0;
  $j = $168;
 }
 $169 = $6;
 _eraC2s($pco,$w,$169);
 $170 = +HEAPF64[$w>>3];
 $171 = (+_eraAnp($170));
 $172 = $5;
 HEAPF64[$172>>3] = $171;
 STACKTOP = sp;return;
}
function _eraAtio13($ri,$di,$utc1,$utc2,$dut1,$elong,$phi,$hm,$xp,$yp,$phpa,$tc,$rh,$wl,$aob,$zob,$hob,$dob,$rob) {
 $ri = +$ri;
 $di = +$di;
 $utc1 = +$utc1;
 $utc2 = +$utc2;
 $dut1 = +$dut1;
 $elong = +$elong;
 $phi = +$phi;
 $hm = +$hm;
 $xp = +$xp;
 $yp = +$yp;
 $phpa = +$phpa;
 $tc = +$tc;
 $rh = +$rh;
 $wl = +$wl;
 $aob = $aob|0;
 $zob = $zob|0;
 $hob = $hob|0;
 $dob = $dob|0;
 $rob = $rob|0;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $astrom = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $astrom = sp;
 $1 = $ri;
 $2 = $di;
 $3 = $utc1;
 $4 = $utc2;
 $5 = $dut1;
 $6 = $elong;
 $7 = $phi;
 $8 = $hm;
 $9 = $xp;
 $10 = $yp;
 $11 = $phpa;
 $12 = $tc;
 $13 = $rh;
 $14 = $wl;
 $15 = $aob;
 $16 = $zob;
 $17 = $hob;
 $18 = $dob;
 $19 = $rob;
 $20 = $3;
 $21 = $4;
 $22 = $5;
 $23 = $6;
 $24 = $7;
 $25 = $8;
 $26 = $9;
 $27 = $10;
 $28 = $11;
 $29 = $12;
 $30 = $13;
 $31 = $14;
 $32 = (_eraApio13($20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$astrom)|0);
 $j = $32;
 $33 = $j;
 $34 = ($33|0)<(0);
 if ($34) {
  $35 = $j;
  $0 = $35;
  $44 = $0;
  STACKTOP = sp;return ($44|0);
 } else {
  $36 = $1;
  $37 = $2;
  $38 = $15;
  $39 = $16;
  $40 = $17;
  $41 = $18;
  $42 = $19;
  _eraAtioq($36,$37,$astrom,$38,$39,$40,$41,$42);
  $43 = $j;
  $0 = $43;
  $44 = $0;
  STACKTOP = sp;return ($44|0);
 }
 return (0)|0;
}
function _eraAtioq($ri,$di,$astrom,$aob,$zob,$hob,$dob,$rob) {
 $ri = +$ri;
 $di = +$di;
 $astrom = $astrom|0;
 $aob = $aob|0;
 $zob = $zob|0;
 $hob = $hob|0;
 $dob = $dob|0;
 $rob = $rob|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0;
 var $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0;
 var $189 = 0, $19 = 0.0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0, $203 = 0, $204 = 0, $205 = 0.0;
 var $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0.0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0;
 var $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0;
 var $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0.0;
 var $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0;
 var $99 = 0.0, $CELMIN = 0.0, $SELMIN = 0.0, $azobs = 0.0, $cosdel = 0.0, $dcobs = 0, $del = 0.0, $f = 0.0, $hmobs = 0, $or$cond = 0, $r = 0.0, $raobs = 0.0, $tz = 0.0, $v = 0, $w = 0.0, $x = 0.0, $xaeo = 0.0, $xaet = 0.0, $xhd = 0.0, $xhdt = 0.0;
 var $y = 0.0, $yaeo = 0.0, $yaet = 0.0, $yhd = 0.0, $yhdt = 0.0, $z = 0.0, $zaeo = 0.0, $zaet = 0.0, $zdobs = 0.0, $zhd = 0.0, $zhdt = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp + 208|0;
 $hmobs = sp + 16|0;
 $dcobs = sp + 8|0;
 $0 = $ri;
 $1 = $di;
 $2 = $astrom;
 $3 = $aob;
 $4 = $zob;
 $5 = $hob;
 $6 = $dob;
 $7 = $rob;
 $CELMIN = 9.9999999999999995E-7;
 $SELMIN = 0.050000000000000003;
 $8 = $0;
 $9 = $2;
 $10 = ((($9)) + 224|0);
 $11 = +HEAPF64[$10>>3];
 $12 = $8 - $11;
 $13 = $1;
 _eraS2c($12,$13,$v);
 $14 = +HEAPF64[$v>>3];
 $x = $14;
 $15 = ((($v)) + 8|0);
 $16 = +HEAPF64[$15>>3];
 $y = $16;
 $17 = ((($v)) + 16|0);
 $18 = +HEAPF64[$17>>3];
 $z = $18;
 $19 = $x;
 $20 = $2;
 $21 = ((($20)) + 184|0);
 $22 = +HEAPF64[$21>>3];
 $23 = $z;
 $24 = $22 * $23;
 $25 = $19 + $24;
 $xhd = $25;
 $26 = $y;
 $27 = $2;
 $28 = ((($27)) + 192|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $z;
 $31 = $29 * $30;
 $32 = $26 - $31;
 $yhd = $32;
 $33 = $z;
 $34 = $2;
 $35 = ((($34)) + 184|0);
 $36 = +HEAPF64[$35>>3];
 $37 = $x;
 $38 = $36 * $37;
 $39 = $33 - $38;
 $40 = $2;
 $41 = ((($40)) + 192|0);
 $42 = +HEAPF64[$41>>3];
 $43 = $y;
 $44 = $42 * $43;
 $45 = $39 + $44;
 $zhd = $45;
 $46 = $2;
 $47 = ((($46)) + 216|0);
 $48 = +HEAPF64[$47>>3];
 $49 = $yhd;
 $50 = $48 * $49;
 $51 = 1.0 - $50;
 $f = $51;
 $52 = $f;
 $53 = $xhd;
 $54 = $52 * $53;
 $xhdt = $54;
 $55 = $f;
 $56 = $yhd;
 $57 = $2;
 $58 = ((($57)) + 216|0);
 $59 = +HEAPF64[$58>>3];
 $60 = $56 + $59;
 $61 = $55 * $60;
 $yhdt = $61;
 $62 = $f;
 $63 = $zhd;
 $64 = $62 * $63;
 $zhdt = $64;
 $65 = $2;
 $66 = ((($65)) + 200|0);
 $67 = +HEAPF64[$66>>3];
 $68 = $xhdt;
 $69 = $67 * $68;
 $70 = $2;
 $71 = ((($70)) + 208|0);
 $72 = +HEAPF64[$71>>3];
 $73 = $zhdt;
 $74 = $72 * $73;
 $75 = $69 - $74;
 $xaet = $75;
 $76 = $yhdt;
 $yaet = $76;
 $77 = $2;
 $78 = ((($77)) + 208|0);
 $79 = +HEAPF64[$78>>3];
 $80 = $xhdt;
 $81 = $79 * $80;
 $82 = $2;
 $83 = ((($82)) + 200|0);
 $84 = +HEAPF64[$83>>3];
 $85 = $zhdt;
 $86 = $84 * $85;
 $87 = $81 + $86;
 $zaet = $87;
 $88 = $xaet;
 $89 = $88 != 0.0;
 $90 = $yaet;
 $91 = $90 != 0.0;
 $or$cond = $89 | $91;
 if ($or$cond) {
  $92 = $yaet;
  $93 = $xaet;
  $94 = -$93;
  $95 = (+Math_atan2((+$92),(+$94)));
  $96 = $95;
 } else {
  $96 = 0.0;
 }
 $azobs = $96;
 $97 = $xaet;
 $98 = $xaet;
 $99 = $97 * $98;
 $100 = $yaet;
 $101 = $yaet;
 $102 = $100 * $101;
 $103 = $99 + $102;
 $104 = (+Math_sqrt((+$103)));
 $r = $104;
 $105 = $r;
 $106 = $105 > 9.9999999999999995E-7;
 $107 = $r;
 $108 = $106 ? $107 : 9.9999999999999995E-7;
 $r = $108;
 $109 = $zaet;
 $110 = $109 > 0.050000000000000003;
 $111 = $zaet;
 $112 = $110 ? $111 : 0.050000000000000003;
 $z = $112;
 $113 = $r;
 $114 = $z;
 $115 = $113 / $114;
 $tz = $115;
 $116 = $2;
 $117 = ((($116)) + 240|0);
 $118 = +HEAPF64[$117>>3];
 $119 = $tz;
 $120 = $118 * $119;
 $121 = $tz;
 $122 = $120 * $121;
 $w = $122;
 $123 = $2;
 $124 = ((($123)) + 232|0);
 $125 = +HEAPF64[$124>>3];
 $126 = $w;
 $127 = $125 + $126;
 $128 = $tz;
 $129 = $127 * $128;
 $130 = $2;
 $131 = ((($130)) + 232|0);
 $132 = +HEAPF64[$131>>3];
 $133 = $w;
 $134 = 3.0 * $133;
 $135 = $132 + $134;
 $136 = $z;
 $137 = $z;
 $138 = $136 * $137;
 $139 = $135 / $138;
 $140 = 1.0 + $139;
 $141 = $129 / $140;
 $del = $141;
 $142 = $del;
 $143 = $del;
 $144 = $142 * $143;
 $145 = $144 / 2.0;
 $146 = 1.0 - $145;
 $cosdel = $146;
 $147 = $cosdel;
 $148 = $del;
 $149 = $z;
 $150 = $148 * $149;
 $151 = $r;
 $152 = $150 / $151;
 $153 = $147 - $152;
 $f = $153;
 $154 = $xaet;
 $155 = $f;
 $156 = $154 * $155;
 $xaeo = $156;
 $157 = $yaet;
 $158 = $f;
 $159 = $157 * $158;
 $yaeo = $159;
 $160 = $cosdel;
 $161 = $zaet;
 $162 = $160 * $161;
 $163 = $del;
 $164 = $r;
 $165 = $163 * $164;
 $166 = $162 + $165;
 $zaeo = $166;
 $167 = $xaeo;
 $168 = $xaeo;
 $169 = $167 * $168;
 $170 = $yaeo;
 $171 = $yaeo;
 $172 = $170 * $171;
 $173 = $169 + $172;
 $174 = (+Math_sqrt((+$173)));
 $175 = $zaeo;
 $176 = (+Math_atan2((+$174),(+$175)));
 $zdobs = $176;
 $177 = $2;
 $178 = ((($177)) + 200|0);
 $179 = +HEAPF64[$178>>3];
 $180 = $xaeo;
 $181 = $179 * $180;
 $182 = $2;
 $183 = ((($182)) + 208|0);
 $184 = +HEAPF64[$183>>3];
 $185 = $zaeo;
 $186 = $184 * $185;
 $187 = $181 + $186;
 HEAPF64[$v>>3] = $187;
 $188 = $yaeo;
 $189 = ((($v)) + 8|0);
 HEAPF64[$189>>3] = $188;
 $190 = $2;
 $191 = ((($190)) + 208|0);
 $192 = +HEAPF64[$191>>3];
 $193 = -$192;
 $194 = $xaeo;
 $195 = $193 * $194;
 $196 = $2;
 $197 = ((($196)) + 200|0);
 $198 = +HEAPF64[$197>>3];
 $199 = $zaeo;
 $200 = $198 * $199;
 $201 = $195 + $200;
 $202 = ((($v)) + 16|0);
 HEAPF64[$202>>3] = $201;
 _eraC2s($v,$hmobs,$dcobs);
 $203 = $2;
 $204 = ((($203)) + 224|0);
 $205 = +HEAPF64[$204>>3];
 $206 = +HEAPF64[$hmobs>>3];
 $207 = $205 + $206;
 $raobs = $207;
 $208 = $azobs;
 $209 = (+_eraAnp($208));
 $210 = $3;
 HEAPF64[$210>>3] = $209;
 $211 = $zdobs;
 $212 = $4;
 HEAPF64[$212>>3] = $211;
 $213 = +HEAPF64[$hmobs>>3];
 $214 = -$213;
 $215 = $5;
 HEAPF64[$215>>3] = $214;
 $216 = +HEAPF64[$dcobs>>3];
 $217 = $6;
 HEAPF64[$217>>3] = $216;
 $218 = $raobs;
 $219 = (+_eraAnp($218));
 $220 = $7;
 HEAPF64[$220>>3] = $219;
 STACKTOP = sp;return;
}
function _eraAtoc13($type,$ob1,$ob2,$utc1,$utc2,$dut1,$elong,$phi,$hm,$xp,$yp,$phpa,$tc,$rh,$wl,$rc,$dc) {
 $type = $type|0;
 $ob1 = +$ob1;
 $ob2 = +$ob2;
 $utc1 = +$utc1;
 $utc2 = +$utc2;
 $dut1 = +$dut1;
 $elong = +$elong;
 $phi = +$phi;
 $hm = +$hm;
 $xp = +$xp;
 $yp = +$yp;
 $phpa = +$phpa;
 $tc = +$tc;
 $rh = +$rh;
 $wl = +$wl;
 $rc = $rc|0;
 $dc = $dc|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $5 = 0.0, $6 = 0.0;
 var $7 = 0.0, $8 = 0.0, $9 = 0.0, $astrom = 0, $di = 0, $eo = 0, $j = 0, $ri = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $astrom = sp + 24|0;
 $eo = sp + 16|0;
 $ri = sp + 8|0;
 $di = sp;
 $1 = $type;
 $2 = $ob1;
 $3 = $ob2;
 $4 = $utc1;
 $5 = $utc2;
 $6 = $dut1;
 $7 = $elong;
 $8 = $phi;
 $9 = $hm;
 $10 = $xp;
 $11 = $yp;
 $12 = $phpa;
 $13 = $tc;
 $14 = $rh;
 $15 = $wl;
 $16 = $rc;
 $17 = $dc;
 $18 = $4;
 $19 = $5;
 $20 = $6;
 $21 = $7;
 $22 = $8;
 $23 = $9;
 $24 = $10;
 $25 = $11;
 $26 = $12;
 $27 = $13;
 $28 = $14;
 $29 = $15;
 $30 = (_eraApco13($18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$astrom,$eo)|0);
 $j = $30;
 $31 = $j;
 $32 = ($31|0)<(0);
 if ($32) {
  $33 = $j;
  $0 = $33;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 } else {
  $34 = $1;
  $35 = $2;
  $36 = $3;
  _eraAtoiq($34,$35,$36,$astrom,$ri,$di);
  $37 = +HEAPF64[$ri>>3];
  $38 = +HEAPF64[$di>>3];
  $39 = $16;
  $40 = $17;
  _eraAticq($37,$38,$astrom,$39,$40);
  $41 = $j;
  $0 = $41;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 return (0)|0;
}
function _eraAtoi13($type,$ob1,$ob2,$utc1,$utc2,$dut1,$elong,$phi,$hm,$xp,$yp,$phpa,$tc,$rh,$wl,$ri,$di) {
 $type = $type|0;
 $ob1 = +$ob1;
 $ob2 = +$ob2;
 $utc1 = +$utc1;
 $utc2 = +$utc2;
 $dut1 = +$dut1;
 $elong = +$elong;
 $phi = +$phi;
 $hm = +$hm;
 $xp = +$xp;
 $yp = +$yp;
 $phpa = +$phpa;
 $tc = +$tc;
 $rh = +$rh;
 $wl = +$wl;
 $ri = $ri|0;
 $di = $di|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0;
 var $9 = 0.0, $astrom = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $astrom = sp;
 $1 = $type;
 $2 = $ob1;
 $3 = $ob2;
 $4 = $utc1;
 $5 = $utc2;
 $6 = $dut1;
 $7 = $elong;
 $8 = $phi;
 $9 = $hm;
 $10 = $xp;
 $11 = $yp;
 $12 = $phpa;
 $13 = $tc;
 $14 = $rh;
 $15 = $wl;
 $16 = $ri;
 $17 = $di;
 $18 = $4;
 $19 = $5;
 $20 = $6;
 $21 = $7;
 $22 = $8;
 $23 = $9;
 $24 = $10;
 $25 = $11;
 $26 = $12;
 $27 = $13;
 $28 = $14;
 $29 = $15;
 $30 = (_eraApio13($18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$astrom)|0);
 $j = $30;
 $31 = $j;
 $32 = ($31|0)<(0);
 if ($32) {
  $33 = $j;
  $0 = $33;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 } else {
  $34 = $1;
  $35 = $2;
  $36 = $3;
  $37 = $16;
  $38 = $17;
  _eraAtoiq($34,$35,$36,$astrom,$37,$38);
  $39 = $j;
  $0 = $39;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function _eraAtoiq($type,$ob1,$ob2,$astrom,$ri,$di) {
 $type = $type|0;
 $ob1 = +$ob1;
 $ob2 = +$ob2;
 $astrom = $astrom|0;
 $ri = $ri|0;
 $di = $di|0;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0;
 var $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0;
 var $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0;
 var $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0.0, $2 = 0.0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0;
 var $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0;
 var $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0;
 var $97 = 0.0, $98 = 0.0, $99 = 0.0, $az = 0.0, $c = 0, $c1 = 0.0, $c2 = 0.0, $ce = 0.0, $cphi = 0.0, $dref = 0.0, $f = 0.0, $hma = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $refa = 0.0, $refb = 0.0, $sphi = 0.0, $sz = 0.0, $tz = 0.0;
 var $v = 0, $w = 0.0, $xaeo = 0.0, $xaet = 0.0, $xhd = 0.0, $xmhda = 0.0, $xmhdo = 0.0, $xpl = 0.0, $yaeo = 0.0, $yaet = 0.0, $yhd = 0.0, $ymhda = 0.0, $ymhdo = 0.0, $ypl = 0.0, $zaeo = 0.0, $zaet = 0.0, $zdo = 0.0, $zdt = 0.0, $zhd = 0.0, $zmhda = 0.0;
 var $zmhdo = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp + 200|0;
 $hma = sp;
 $0 = $type;
 $1 = $ob1;
 $2 = $ob2;
 $3 = $astrom;
 $4 = $ri;
 $5 = $di;
 $6 = $0;
 $7 = HEAP8[$6>>0]|0;
 $8 = $7 << 24 >> 24;
 $c = $8;
 $9 = $1;
 $c1 = $9;
 $10 = $2;
 $c2 = $10;
 $11 = $3;
 $12 = ((($11)) + 200|0);
 $13 = +HEAPF64[$12>>3];
 $sphi = $13;
 $14 = $3;
 $15 = ((($14)) + 208|0);
 $16 = +HEAPF64[$15>>3];
 $cphi = $16;
 $17 = $c;
 $18 = ($17|0)==(114);
 $19 = $c;
 $20 = ($19|0)==(82);
 $or$cond = $18 | $20;
 do {
  if ($or$cond) {
   $c = 82;
  } else {
   $21 = $c;
   $22 = ($21|0)==(104);
   $23 = $c;
   $24 = ($23|0)==(72);
   $or$cond3 = $22 | $24;
   if ($or$cond3) {
    $c = 72;
    break;
   } else {
    $c = 65;
    break;
   }
  }
 } while(0);
 $25 = $c;
 $26 = ($25|0)==(65);
 if ($26) {
  $27 = $c2;
  $28 = (+Math_sin((+$27)));
  $ce = $28;
  $29 = $c1;
  $30 = (+Math_cos((+$29)));
  $31 = -$30;
  $32 = $ce;
  $33 = $31 * $32;
  $xaeo = $33;
  $34 = $c1;
  $35 = (+Math_sin((+$34)));
  $36 = $ce;
  $37 = $35 * $36;
  $yaeo = $37;
  $38 = $c2;
  $39 = (+Math_cos((+$38)));
  $zaeo = $39;
 } else {
  $40 = $c;
  $41 = ($40|0)==(82);
  if ($41) {
   $42 = $3;
   $43 = ((($42)) + 224|0);
   $44 = +HEAPF64[$43>>3];
   $45 = $c1;
   $46 = $44 - $45;
   $c1 = $46;
  }
  $47 = $c1;
  $48 = -$47;
  $49 = $c2;
  _eraS2c($48,$49,$v);
  $50 = +HEAPF64[$v>>3];
  $xmhdo = $50;
  $51 = ((($v)) + 8|0);
  $52 = +HEAPF64[$51>>3];
  $ymhdo = $52;
  $53 = ((($v)) + 16|0);
  $54 = +HEAPF64[$53>>3];
  $zmhdo = $54;
  $55 = $sphi;
  $56 = $xmhdo;
  $57 = $55 * $56;
  $58 = $cphi;
  $59 = $zmhdo;
  $60 = $58 * $59;
  $61 = $57 - $60;
  $xaeo = $61;
  $62 = $ymhdo;
  $yaeo = $62;
  $63 = $cphi;
  $64 = $xmhdo;
  $65 = $63 * $64;
  $66 = $sphi;
  $67 = $zmhdo;
  $68 = $66 * $67;
  $69 = $65 + $68;
  $zaeo = $69;
 }
 $70 = $xaeo;
 $71 = $70 != 0.0;
 $72 = $yaeo;
 $73 = $72 != 0.0;
 $or$cond5 = $71 | $73;
 if ($or$cond5) {
  $74 = $yaeo;
  $75 = $xaeo;
  $76 = (+Math_atan2((+$74),(+$75)));
  $77 = $76;
 } else {
  $77 = 0.0;
 }
 $az = $77;
 $78 = $xaeo;
 $79 = $xaeo;
 $80 = $78 * $79;
 $81 = $yaeo;
 $82 = $yaeo;
 $83 = $81 * $82;
 $84 = $80 + $83;
 $85 = (+Math_sqrt((+$84)));
 $sz = $85;
 $86 = $sz;
 $87 = $zaeo;
 $88 = (+Math_atan2((+$86),(+$87)));
 $zdo = $88;
 $89 = $3;
 $90 = ((($89)) + 232|0);
 $91 = +HEAPF64[$90>>3];
 $refa = $91;
 $92 = $3;
 $93 = ((($92)) + 240|0);
 $94 = +HEAPF64[$93>>3];
 $refb = $94;
 $95 = $sz;
 $96 = $zaeo;
 $97 = $95 / $96;
 $tz = $97;
 $98 = $refa;
 $99 = $refb;
 $100 = $tz;
 $101 = $99 * $100;
 $102 = $tz;
 $103 = $101 * $102;
 $104 = $98 + $103;
 $105 = $tz;
 $106 = $104 * $105;
 $dref = $106;
 $107 = $zdo;
 $108 = $dref;
 $109 = $107 + $108;
 $zdt = $109;
 $110 = $zdt;
 $111 = (+Math_sin((+$110)));
 $ce = $111;
 $112 = $az;
 $113 = (+Math_cos((+$112)));
 $114 = $ce;
 $115 = $113 * $114;
 $xaet = $115;
 $116 = $az;
 $117 = (+Math_sin((+$116)));
 $118 = $ce;
 $119 = $117 * $118;
 $yaet = $119;
 $120 = $zdt;
 $121 = (+Math_cos((+$120)));
 $zaet = $121;
 $122 = $sphi;
 $123 = $xaet;
 $124 = $122 * $123;
 $125 = $cphi;
 $126 = $zaet;
 $127 = $125 * $126;
 $128 = $124 + $127;
 $xmhda = $128;
 $129 = $yaet;
 $ymhda = $129;
 $130 = $cphi;
 $131 = -$130;
 $132 = $xaet;
 $133 = $131 * $132;
 $134 = $sphi;
 $135 = $zaet;
 $136 = $134 * $135;
 $137 = $133 + $136;
 $zmhda = $137;
 $138 = $3;
 $139 = ((($138)) + 216|0);
 $140 = +HEAPF64[$139>>3];
 $141 = $ymhda;
 $142 = $140 * $141;
 $143 = 1.0 + $142;
 $f = $143;
 $144 = $f;
 $145 = $xmhda;
 $146 = $144 * $145;
 $xhd = $146;
 $147 = $f;
 $148 = $ymhda;
 $149 = $3;
 $150 = ((($149)) + 216|0);
 $151 = +HEAPF64[$150>>3];
 $152 = $148 - $151;
 $153 = $147 * $152;
 $yhd = $153;
 $154 = $f;
 $155 = $zmhda;
 $156 = $154 * $155;
 $zhd = $156;
 $157 = $3;
 $158 = ((($157)) + 184|0);
 $159 = +HEAPF64[$158>>3];
 $xpl = $159;
 $160 = $3;
 $161 = ((($160)) + 192|0);
 $162 = +HEAPF64[$161>>3];
 $ypl = $162;
 $163 = $xpl;
 $164 = $xhd;
 $165 = $163 * $164;
 $166 = $ypl;
 $167 = $yhd;
 $168 = $166 * $167;
 $169 = $165 - $168;
 $170 = $zhd;
 $171 = $169 + $170;
 $w = $171;
 $172 = $xhd;
 $173 = $xpl;
 $174 = $w;
 $175 = $173 * $174;
 $176 = $172 - $175;
 HEAPF64[$v>>3] = $176;
 $177 = $yhd;
 $178 = $ypl;
 $179 = $w;
 $180 = $178 * $179;
 $181 = $177 + $180;
 $182 = ((($v)) + 8|0);
 HEAPF64[$182>>3] = $181;
 $183 = $w;
 $184 = $xpl;
 $185 = $xpl;
 $186 = $184 * $185;
 $187 = $ypl;
 $188 = $ypl;
 $189 = $187 * $188;
 $190 = $186 + $189;
 $191 = $zhd;
 $192 = $190 * $191;
 $193 = $183 - $192;
 $194 = ((($v)) + 16|0);
 HEAPF64[$194>>3] = $193;
 $195 = $5;
 _eraC2s($v,$hma,$195);
 $196 = $3;
 $197 = ((($196)) + 224|0);
 $198 = +HEAPF64[$197>>3];
 $199 = +HEAPF64[$hma>>3];
 $200 = $198 + $199;
 $201 = (+_eraAnp($200));
 $202 = $4;
 HEAPF64[$202>>3] = $201;
 STACKTOP = sp;return;
}
function _eraBi00($dpsibi,$depsbi,$dra) {
 $dpsibi = $dpsibi|0;
 $depsbi = $depsbi|0;
 $dra = $dra|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $DEBIAS = 0.0, $DPBIAS = 0.0, $DRA0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dpsibi;
 $1 = $depsbi;
 $2 = $dra;
 $DPBIAS = -2.0253091528350866E-7;
 $DEBIAS = -3.3060414542221477E-8;
 $DRA0 = -7.0782797441992258E-8;
 $3 = $0;
 HEAPF64[$3>>3] = -2.0253091528350866E-7;
 $4 = $1;
 HEAPF64[$4>>3] = -3.3060414542221477E-8;
 $5 = $2;
 HEAPF64[$5>>3] = -7.0782797441992258E-8;
 STACKTOP = sp;return;
}
function _eraBp00($date1,$date2,$rb,$rp,$rbp) {
 $date1 = +$date1;
 $date2 = +$date2;
 $rb = $rb|0;
 $rp = $rp|0;
 $rbp = $rbp|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $EPS0 = 0.0, $chia = 0.0, $depsbi = 0, $depspr = 0, $dpsibi = 0, $dpsipr = 0, $dra0 = 0, $oma = 0.0, $oma77 = 0.0, $psia = 0.0, $psia77 = 0.0, $rbw = 0, $t = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dpsibi = sp + 144|0;
 $depsbi = sp + 136|0;
 $dra0 = sp + 128|0;
 $dpsipr = sp + 96|0;
 $depspr = sp + 88|0;
 $rbw = sp;
 $0 = $date1;
 $1 = $date2;
 $2 = $rb;
 $3 = $rp;
 $4 = $rbp;
 $EPS0 = 0.40909280422232897;
 $5 = $0;
 $6 = $5 - 2451545.0;
 $7 = $1;
 $8 = $6 + $7;
 $9 = $8 / 36525.0;
 $t = $9;
 _eraBi00($dpsibi,$depsbi,$dra0);
 $10 = $t;
 $11 = -0.001147 * $10;
 $12 = -1.0725899999999999 + $11;
 $13 = $t;
 $14 = $12 * $13;
 $15 = 5038.7784000000001 + $14;
 $16 = $t;
 $17 = $15 * $16;
 $18 = $17 * 4.8481368110953598E-6;
 $psia77 = $18;
 $19 = $t;
 $20 = -0.0077260000000000002 * $19;
 $21 = 0.051270000000000003 + $20;
 $22 = $t;
 $23 = $21 * $22;
 $24 = $t;
 $25 = $23 * $24;
 $26 = $25 * 4.8481368110953598E-6;
 $27 = 0.40909280422232897 + $26;
 $oma77 = $27;
 $28 = $t;
 $29 = -0.0011249999999999999 * $28;
 $30 = -2.3806400000000001 + $29;
 $31 = $t;
 $32 = $30 * $31;
 $33 = 10.5526 + $32;
 $34 = $t;
 $35 = $33 * $34;
 $36 = $35 * 4.8481368110953598E-6;
 $chia = $36;
 $37 = $0;
 $38 = $1;
 _eraPr00($37,$38,$dpsipr,$depspr);
 $39 = $psia77;
 $40 = +HEAPF64[$dpsipr>>3];
 $41 = $39 + $40;
 $psia = $41;
 $42 = $oma77;
 $43 = +HEAPF64[$depspr>>3];
 $44 = $42 + $43;
 $oma = $44;
 _eraIr($rbw);
 $45 = +HEAPF64[$dra0>>3];
 _eraRz($45,$rbw);
 $46 = +HEAPF64[$dpsibi>>3];
 $47 = (+Math_sin(0.40909280422232897));
 $48 = $46 * $47;
 _eraRy($48,$rbw);
 $49 = +HEAPF64[$depsbi>>3];
 $50 = -$49;
 _eraRx($50,$rbw);
 $51 = $2;
 _eraCr($rbw,$51);
 $52 = $3;
 _eraIr($52);
 $53 = $3;
 _eraRx(0.40909280422232897,$53);
 $54 = $psia;
 $55 = -$54;
 $56 = $3;
 _eraRz($55,$56);
 $57 = $oma;
 $58 = -$57;
 $59 = $3;
 _eraRx($58,$59);
 $60 = $chia;
 $61 = $3;
 _eraRz($60,$61);
 $62 = $3;
 $63 = $4;
 _eraRxr($62,$rbw,$63);
 STACKTOP = sp;return;
}
function _eraBp06($date1,$date2,$rb,$rp,$rbp) {
 $date1 = +$date1;
 $date2 = +$date2;
 $rb = $rb|0;
 $rp = $rp|0;
 $rbp = $rbp|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $epsa = 0, $gamb = 0, $phib = 0, $psib = 0, $rbpw = 0;
 var $rbt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $gamb = sp + 168|0;
 $phib = sp + 160|0;
 $psib = sp + 152|0;
 $epsa = sp + 144|0;
 $rbpw = sp + 72|0;
 $rbt = sp;
 $0 = $date1;
 $1 = $date2;
 $2 = $rb;
 $3 = $rp;
 $4 = $rbp;
 _eraPfw06(2400000.5,51544.5,$gamb,$phib,$psib,$epsa);
 $5 = +HEAPF64[$gamb>>3];
 $6 = +HEAPF64[$phib>>3];
 $7 = +HEAPF64[$psib>>3];
 $8 = +HEAPF64[$epsa>>3];
 $9 = $2;
 _eraFw2m($5,$6,$7,$8,$9);
 $10 = $0;
 $11 = $1;
 _eraPmat06($10,$11,$rbpw);
 $12 = $2;
 _eraTr($12,$rbt);
 $13 = $3;
 _eraRxr($rbpw,$rbt,$13);
 $14 = $4;
 _eraCr($rbpw,$14);
 STACKTOP = sp;return;
}
function _eraBpn2xy($rbpn,$x,$y) {
 $rbpn = $rbpn|0;
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $rbpn;
 $1 = $x;
 $2 = $y;
 $3 = $0;
 $4 = ((($3)) + 48|0);
 $5 = +HEAPF64[$4>>3];
 $6 = $1;
 HEAPF64[$6>>3] = $5;
 $7 = $0;
 $8 = ((($7)) + 48|0);
 $9 = ((($8)) + 8|0);
 $10 = +HEAPF64[$9>>3];
 $11 = $2;
 HEAPF64[$11>>3] = $10;
 STACKTOP = sp;return;
}
function _eraC2i00a($date1,$date2,$rc2i) {
 $date1 = +$date1;
 $date2 = +$date2;
 $rc2i = $rc2i|0;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $rbpn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $rbpn = sp;
 $0 = $date1;
 $1 = $date2;
 $2 = $rc2i;
 $3 = $0;
 $4 = $1;
 _eraPnm00a($3,$4,$rbpn);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 _eraC2ibpn($5,$6,$rbpn,$7);
 STACKTOP = sp;return;
}
function _eraC2i00b($date1,$date2,$rc2i) {
 $date1 = +$date1;
 $date2 = +$date2;
 $rc2i = $rc2i|0;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $rbpn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $rbpn = sp;
 $0 = $date1;
 $1 = $date2;
 $2 = $rc2i;
 $3 = $0;
 $4 = $1;
 _eraPnm00b($3,$4,$rbpn);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 _eraC2ibpn($5,$6,$rbpn,$7);
 STACKTOP = sp;return;
}
function _eraC2i06a($date1,$date2,$rc2i) {
 $date1 = +$date1;
 $date2 = +$date2;
 $rc2i = $rc2i|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $rbpn = 0, $s = 0.0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $rbpn = sp + 24|0;
 $x = sp + 16|0;
 $y = sp + 8|0;
 $0 = $date1;
 $1 = $date2;
 $2 = $rc2i;
 $3 = $0;
 $4 = $1;
 _eraPnm06a($3,$4,$rbpn);
 _eraBpn2xy($rbpn,$x,$y);
 $5 = $0;
 $6 = $1;
 $7 = +HEAPF64[$x>>3];
 $8 = +HEAPF64[$y>>3];
 $9 = (+_eraS06($5,$6,$7,$8));
 $s = $9;
 $10 = +HEAPF64[$x>>3];
 $11 = +HEAPF64[$y>>3];
 $12 = $s;
 $13 = $2;
 _eraC2ixys($10,$11,$12,$13);
 STACKTOP = sp;return;
}
function _eraC2ibpn($date1,$date2,$rbpn,$rc2i) {
 $date1 = +$date1;
 $date2 = +$date2;
 $rbpn = $rbpn|0;
 $rc2i = $rc2i|0;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x = sp + 8|0;
 $y = sp;
 $0 = $date1;
 $1 = $date2;
 $2 = $rbpn;
 $3 = $rc2i;
 $4 = $2;
 _eraBpn2xy($4,$x,$y);
 $5 = $0;
 $6 = $1;
 $7 = +HEAPF64[$x>>3];
 $8 = +HEAPF64[$y>>3];
 $9 = $3;
 _eraC2ixy($5,$6,$7,$8,$9);
 STACKTOP = sp;return;
}
function _eraC2ixy($date1,$date2,$x,$y,$rc2i) {
 $date1 = +$date1;
 $date2 = +$date2;
 $x = +$x;
 $y = +$y;
 $rc2i = $rc2i|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $date1;
 $1 = $date2;
 $2 = $x;
 $3 = $y;
 $4 = $rc2i;
 $5 = $2;
 $6 = $3;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = (+_eraS00($7,$8,$9,$10));
 $12 = $4;
 _eraC2ixys($5,$6,$11,$12);
 STACKTOP = sp;return;
}
function _eraC2ixys($x,$y,$s,$rc2i) {
 $x = +$x;
 $y = +$y;
 $s = +$s;
 $rc2i = $rc2i|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $d = 0.0, $e = 0.0, $r2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $x;
 $1 = $y;
 $2 = $s;
 $3 = $rc2i;
 $4 = $0;
 $5 = $0;
 $6 = $4 * $5;
 $7 = $1;
 $8 = $1;
 $9 = $7 * $8;
 $10 = $6 + $9;
 $r2 = $10;
 $11 = $r2;
 $12 = $11 > 0.0;
 if ($12) {
  $13 = $1;
  $14 = $0;
  $15 = (+Math_atan2((+$13),(+$14)));
  $16 = $15;
 } else {
  $16 = 0.0;
 }
 $e = $16;
 $17 = $r2;
 $18 = $r2;
 $19 = 1.0 - $18;
 $20 = $17 / $19;
 $21 = (+Math_sqrt((+$20)));
 $22 = (+Math_atan((+$21)));
 $d = $22;
 $23 = $3;
 _eraIr($23);
 $24 = $e;
 $25 = $3;
 _eraRz($24,$25);
 $26 = $d;
 $27 = $3;
 _eraRy($26,$27);
 $28 = $e;
 $29 = $2;
 $30 = $28 + $29;
 $31 = -$30;
 $32 = $3;
 _eraRz($31,$32);
 STACKTOP = sp;return;
}
function _eraC2s($p,$theta,$phi) {
 $p = $p|0;
 $theta = $theta|0;
 $phi = $phi|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $d2 = 0.0, $x = 0.0, $y = 0.0, $z = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $theta;
 $2 = $phi;
 $3 = $0;
 $4 = +HEAPF64[$3>>3];
 $x = $4;
 $5 = $0;
 $6 = ((($5)) + 8|0);
 $7 = +HEAPF64[$6>>3];
 $y = $7;
 $8 = $0;
 $9 = ((($8)) + 16|0);
 $10 = +HEAPF64[$9>>3];
 $z = $10;
 $11 = $x;
 $12 = $x;
 $13 = $11 * $12;
 $14 = $y;
 $15 = $y;
 $16 = $14 * $15;
 $17 = $13 + $16;
 $d2 = $17;
 $18 = $d2;
 $19 = $18 == 0.0;
 if ($19) {
  $24 = 0.0;
 } else {
  $20 = $y;
  $21 = $x;
  $22 = (+Math_atan2((+$20),(+$21)));
  $24 = $22;
 }
 $23 = $1;
 HEAPF64[$23>>3] = $24;
 $25 = $z;
 $26 = $25 == 0.0;
 if ($26) {
  $32 = 0.0;
  $31 = $2;
  HEAPF64[$31>>3] = $32;
  STACKTOP = sp;return;
 }
 $27 = $z;
 $28 = $d2;
 $29 = (+Math_sqrt((+$28)));
 $30 = (+Math_atan2((+$27),(+$29)));
 $32 = $30;
 $31 = $2;
 HEAPF64[$31>>3] = $32;
 STACKTOP = sp;return;
}
function _eraC2t00a($tta,$ttb,$uta,$utb,$xp,$yp,$rc2t) {
 $tta = +$tta;
 $ttb = +$ttb;
 $uta = +$uta;
 $utb = +$utb;
 $xp = +$xp;
 $yp = +$yp;
 $rc2t = $rc2t|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0;
 var $era = 0.0, $rc2i = 0, $rpom = 0, $sp = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $rc2i = sp + 88|0;
 $rpom = sp;
 $0 = $tta;
 $1 = $ttb;
 $2 = $uta;
 $3 = $utb;
 $4 = $xp;
 $5 = $yp;
 $6 = $rc2t;
 $7 = $0;
 $8 = $1;
 _eraC2i00a($7,$8,$rc2i);
 $9 = $2;
 $10 = $3;
 $11 = (+_eraEra00($9,$10));
 $era = $11;
 $12 = $0;
 $13 = $1;
 $14 = (+_eraSp00($12,$13));
 $sp = $14;
 $15 = $4;
 $16 = $5;
 $17 = $sp;
 _eraPom00($15,$16,$17,$rpom);
 $18 = $era;
 $19 = $6;
 _eraC2tcio($rc2i,$18,$rpom,$19);
 STACKTOP = sp;return;
}
function _eraC2t00b($tta,$ttb,$uta,$utb,$xp,$yp,$rc2t) {
 $tta = +$tta;
 $ttb = +$ttb;
 $uta = +$uta;
 $utb = +$utb;
 $xp = +$xp;
 $yp = +$yp;
 $rc2t = $rc2t|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $era = 0.0, $rc2i = 0, $rpom = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $rc2i = sp + 80|0;
 $rpom = sp;
 $0 = $tta;
 $1 = $ttb;
 $2 = $uta;
 $3 = $utb;
 $4 = $xp;
 $5 = $yp;
 $6 = $rc2t;
 $7 = $0;
 $8 = $1;
 _eraC2i00b($7,$8,$rc2i);
 $9 = $2;
 $10 = $3;
 $11 = (+_eraEra00($9,$10));
 $era = $11;
 $12 = $4;
 $13 = $5;
 _eraPom00($12,$13,0.0,$rpom);
 $14 = $era;
 $15 = $6;
 _eraC2tcio($rc2i,$14,$rpom,$15);
 STACKTOP = sp;return;
}
function _eraC2t06a($tta,$ttb,$uta,$utb,$xp,$yp,$rc2t) {
 $tta = +$tta;
 $ttb = +$ttb;
 $uta = +$uta;
 $utb = +$utb;
 $xp = +$xp;
 $yp = +$yp;
 $rc2t = $rc2t|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0;
 var $era = 0.0, $rc2i = 0, $rpom = 0, $sp = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $rc2i = sp + 88|0;
 $rpom = sp;
 $0 = $tta;
 $1 = $ttb;
 $2 = $uta;
 $3 = $utb;
 $4 = $xp;
 $5 = $yp;
 $6 = $rc2t;
 $7 = $0;
 $8 = $1;
 _eraC2i06a($7,$8,$rc2i);
 $9 = $2;
 $10 = $3;
 $11 = (+_eraEra00($9,$10));
 $era = $11;
 $12 = $0;
 $13 = $1;
 $14 = (+_eraSp00($12,$13));
 $sp = $14;
 $15 = $4;
 $16 = $5;
 $17 = $sp;
 _eraPom00($15,$16,$17,$rpom);
 $18 = $era;
 $19 = $6;
 _eraC2tcio($rc2i,$18,$rpom,$19);
 STACKTOP = sp;return;
}
function _eraC2tcio($rc2i,$era,$rpom,$rc2t) {
 $rc2i = $rc2i|0;
 $era = +$era;
 $rpom = $rpom|0;
 $rc2t = $rc2t|0;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $r = sp;
 $0 = $rc2i;
 $1 = $era;
 $2 = $rpom;
 $3 = $rc2t;
 $4 = $0;
 _eraCr($4,$r);
 $5 = $1;
 _eraRz($5,$r);
 $6 = $2;
 $7 = $3;
 _eraRxr($6,$r,$7);
 STACKTOP = sp;return;
}
function _eraC2teqx($rbpn,$gst,$rpom,$rc2t) {
 $rbpn = $rbpn|0;
 $gst = +$gst;
 $rpom = $rpom|0;
 $rc2t = $rc2t|0;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $r = sp;
 $0 = $rbpn;
 $1 = $gst;
 $2 = $rpom;
 $3 = $rc2t;
 $4 = $0;
 _eraCr($4,$r);
 $5 = $1;
 _eraRz($5,$r);
 $6 = $2;
 $7 = $3;
 _eraRxr($6,$r,$7);
 STACKTOP = sp;return;
}
function _eraC2tpe($tta,$ttb,$uta,$utb,$dpsi,$deps,$xp,$yp,$rc2t) {
 $tta = +$tta;
 $ttb = +$ttb;
 $uta = +$uta;
 $utb = +$utb;
 $dpsi = +$dpsi;
 $deps = +$deps;
 $xp = +$xp;
 $yp = +$yp;
 $rc2t = $rc2t|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $ee = 0.0, $epsa = 0, $gmst = 0.0, $rb = 0, $rbp = 0, $rbpn = 0, $rn = 0;
 var $rp = 0, $rpom = 0, $sp = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $epsa = sp + 456|0;
 $rb = sp + 384|0;
 $rp = sp + 312|0;
 $rbp = sp + 240|0;
 $rn = sp + 168|0;
 $rbpn = sp + 96|0;
 $rpom = sp;
 $0 = $tta;
 $1 = $ttb;
 $2 = $uta;
 $3 = $utb;
 $4 = $dpsi;
 $5 = $deps;
 $6 = $xp;
 $7 = $yp;
 $8 = $rc2t;
 $9 = $0;
 $10 = $1;
 $11 = $4;
 $12 = $5;
 _eraPn00($9,$10,$11,$12,$epsa,$rb,$rp,$rbp,$rn,$rbpn);
 $13 = $2;
 $14 = $3;
 $15 = $0;
 $16 = $1;
 $17 = (+_eraGmst00($13,$14,$15,$16));
 $gmst = $17;
 $18 = $0;
 $19 = $1;
 $20 = +HEAPF64[$epsa>>3];
 $21 = $4;
 $22 = (+_eraEe00($18,$19,$20,$21));
 $ee = $22;
 $23 = $0;
 $24 = $1;
 $25 = (+_eraSp00($23,$24));
 $sp = $25;
 $26 = $6;
 $27 = $7;
 $28 = $sp;
 _eraPom00($26,$27,$28,$rpom);
 $29 = $gmst;
 $30 = $ee;
 $31 = $29 + $30;
 $32 = $8;
 _eraC2teqx($rbpn,$31,$rpom,$32);
 STACKTOP = sp;return;
}
function _eraC2txy($tta,$ttb,$uta,$utb,$x,$y,$xp,$yp,$rc2t) {
 $tta = +$tta;
 $ttb = +$ttb;
 $uta = +$uta;
 $utb = +$utb;
 $x = +$x;
 $y = +$y;
 $xp = +$xp;
 $yp = +$yp;
 $rc2t = $rc2t|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0;
 var $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $era = 0.0, $rc2i = 0, $rpom = 0, $sp = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $rc2i = sp + 88|0;
 $rpom = sp;
 $0 = $tta;
 $1 = $ttb;
 $2 = $uta;
 $3 = $utb;
 $4 = $x;
 $5 = $y;
 $6 = $xp;
 $7 = $yp;
 $8 = $rc2t;
 $9 = $0;
 $10 = $1;
 $11 = $4;
 $12 = $5;
 _eraC2ixy($9,$10,$11,$12,$rc2i);
 $13 = $2;
 $14 = $3;
 $15 = (+_eraEra00($13,$14));
 $era = $15;
 $16 = $0;
 $17 = $1;
 $18 = (+_eraSp00($16,$17));
 $sp = $18;
 $19 = $6;
 $20 = $7;
 $21 = $sp;
 _eraPom00($19,$20,$21,$rpom);
 $22 = $era;
 $23 = $8;
 _eraC2tcio($rc2i,$22,$rpom,$23);
 STACKTOP = sp;return;
}
function _eraCal2jd($iy,$im,$id,$djm0,$djm) {
 $iy = $iy|0;
 $im = $im|0;
 $id = $id|0;
 $djm0 = $djm0|0;
 $djm = $djm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $IYMIN = 0, $iypmy = 0, $j = 0, $ly = 0, $my = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $iy;
 $2 = $im;
 $3 = $id;
 $4 = $djm0;
 $5 = $djm;
 $IYMIN = -4799;
 $j = 0;
 $6 = $1;
 $7 = ($6|0)<(-4799);
 if ($7) {
  $0 = -1;
  $67 = $0;
  STACKTOP = sp;return ($67|0);
 }
 $8 = $2;
 $9 = ($8|0)<(1);
 $10 = $2;
 $11 = ($10|0)>(12);
 $or$cond = $9 | $11;
 if ($or$cond) {
  $0 = -2;
  $67 = $0;
  STACKTOP = sp;return ($67|0);
 }
 $12 = $2;
 $13 = ($12|0)==(2);
 if ($13) {
  $14 = $1;
  $15 = (($14|0) % 4)&-1;
  $16 = ($15|0)!=(0);
  if ($16) {
   $25 = 0;
  } else {
   $17 = $1;
   $18 = (($17|0) % 100)&-1;
   $19 = ($18|0)!=(0);
   if ($19) {
    $25 = 1;
   } else {
    $20 = $1;
    $21 = (($20|0) % 400)&-1;
    $22 = ($21|0)!=(0);
    $23 = $22 ^ 1;
    $25 = $23;
   }
  }
 } else {
  $25 = 0;
 }
 $24 = $25&1;
 $ly = $24;
 $26 = $3;
 $27 = ($26|0)<(1);
 if ($27) {
  label = 11;
 } else {
  $28 = $3;
  $29 = $2;
  $30 = (($29) - 1)|0;
  $31 = (178032 + ($30<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $ly;
  $34 = (($32) + ($33))|0;
  $35 = ($28|0)>($34|0);
  if ($35) {
   label = 11;
  }
 }
 if ((label|0) == 11) {
  $j = -3;
 }
 $36 = $2;
 $37 = (($36) - 14)|0;
 $38 = (($37|0) / 12)&-1;
 $my = $38;
 $39 = $1;
 $40 = $my;
 $41 = (($39) + ($40))|0;
 $iypmy = $41;
 $42 = $4;
 HEAPF64[$42>>3] = 2400000.5;
 $43 = $iypmy;
 $44 = (($43) + 4800)|0;
 $45 = ($44*1461)|0;
 $46 = (($45|0) / 4)&-1;
 $47 = $2;
 $48 = (($47) - 2)|0;
 $49 = $my;
 $50 = ($49*12)|0;
 $51 = (($48) - ($50))|0;
 $52 = ($51*367)|0;
 $53 = (($52|0) / 12)&-1;
 $54 = (($46) + ($53))|0;
 $55 = $iypmy;
 $56 = (($55) + 4900)|0;
 $57 = (($56|0) / 100)&-1;
 $58 = ($57*3)|0;
 $59 = (($58|0) / 4)&-1;
 $60 = (($54) - ($59))|0;
 $61 = $3;
 $62 = (($60) + ($61))|0;
 $63 = (($62) - 2432076)|0;
 $64 = (+($63|0));
 $65 = $5;
 HEAPF64[$65>>3] = $64;
 $66 = $j;
 $0 = $66;
 $67 = $0;
 STACKTOP = sp;return ($67|0);
}
function _eraCp($p,$c) {
 $p = $p|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $c;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = $1;
 HEAPF64[$4>>3] = $3;
 $5 = $0;
 $6 = ((($5)) + 8|0);
 $7 = +HEAPF64[$6>>3];
 $8 = $1;
 $9 = ((($8)) + 8|0);
 HEAPF64[$9>>3] = $7;
 $10 = $0;
 $11 = ((($10)) + 16|0);
 $12 = +HEAPF64[$11>>3];
 $13 = $1;
 $14 = ((($13)) + 16|0);
 HEAPF64[$14>>3] = $12;
 STACKTOP = sp;return;
}
function _eraCpv($pv,$c) {
 $pv = $pv|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pv;
 $1 = $c;
 $2 = $0;
 $3 = $1;
 _eraCp($2,$3);
 $4 = $0;
 $5 = ((($4)) + 24|0);
 $6 = $1;
 $7 = ((($6)) + 24|0);
 _eraCp($5,$7);
 STACKTOP = sp;return;
}
function _eraCr($r,$c) {
 $r = $r|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $r;
 $1 = $c;
 $2 = $0;
 $3 = $1;
 _eraCp($2,$3);
 $4 = $0;
 $5 = ((($4)) + 24|0);
 $6 = $1;
 $7 = ((($6)) + 24|0);
 _eraCp($5,$7);
 $8 = $0;
 $9 = ((($8)) + 48|0);
 $10 = $1;
 $11 = ((($10)) + 48|0);
 _eraCp($9,$11);
 STACKTOP = sp;return;
}
function _eraD2dtf($scale,$ndp,$d1,$d2,$iy,$im,$id,$ihmsf) {
 $scale = $scale|0;
 $ndp = $ndp|0;
 $d1 = +$d1;
 $d2 = +$d2;
 $iy = $iy|0;
 $im = $im|0;
 $id = $id|0;
 $ihmsf = $ihmsf|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0;
 var $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0.0;
 var $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a1 = 0.0;
 var $b1 = 0.0, $dat0 = 0, $dat12 = 0, $dat24 = 0, $dleap = 0.0, $fd = 0, $i = 0, $id1 = 0, $id2 = 0, $ihmsf1 = 0, $im1 = 0, $im2 = 0, $iy1 = 0, $iy2 = 0, $js = 0, $leap = 0, $s = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $s = sp + 164|0;
 $iy1 = sp + 128|0;
 $im1 = sp + 124|0;
 $id1 = sp + 120|0;
 $iy2 = sp + 112|0;
 $im2 = sp + 108|0;
 $id2 = sp + 104|0;
 $ihmsf1 = sp + 88|0;
 $fd = sp + 40|0;
 $dat0 = sp + 32|0;
 $dat12 = sp + 24|0;
 $w = sp + 16|0;
 $dat24 = sp + 8|0;
 $1 = $scale;
 $2 = $ndp;
 $3 = $d1;
 $4 = $d2;
 $5 = $iy;
 $6 = $im;
 $7 = $id;
 $8 = $ihmsf;
 $9 = $3;
 $a1 = $9;
 $10 = $4;
 $b1 = $10;
 $11 = $a1;
 $12 = $b1;
 $13 = (_eraJd2cal($11,$12,$iy1,$im1,$id1,$fd)|0);
 $js = $13;
 $14 = $js;
 $15 = ($14|0)!=(0);
 if ($15) {
  $0 = -1;
  $118 = $0;
  STACKTOP = sp;return ($118|0);
 }
 $leap = 0;
 $16 = $1;
 $17 = (_strcmp($16,280872)|0);
 $18 = ($17|0)!=(0);
 do {
  if (!($18)) {
   $19 = HEAP32[$iy1>>2]|0;
   $20 = HEAP32[$im1>>2]|0;
   $21 = HEAP32[$id1>>2]|0;
   $22 = (_eraDat($19,$20,$21,0.0,$dat0)|0);
   $js = $22;
   $23 = $js;
   $24 = ($23|0)<(0);
   if ($24) {
    $0 = -1;
    $118 = $0;
    STACKTOP = sp;return ($118|0);
   }
   $25 = HEAP32[$iy1>>2]|0;
   $26 = HEAP32[$im1>>2]|0;
   $27 = HEAP32[$id1>>2]|0;
   $28 = (_eraDat($25,$26,$27,0.5,$dat12)|0);
   $js = $28;
   $29 = $js;
   $30 = ($29|0)<(0);
   if ($30) {
    $0 = -1;
    $118 = $0;
    STACKTOP = sp;return ($118|0);
   }
   $31 = $a1;
   $32 = $31 + 1.5;
   $33 = $b1;
   $34 = +HEAPF64[$fd>>3];
   $35 = $33 - $34;
   $36 = (_eraJd2cal($32,$35,$iy2,$im2,$id2,$w)|0);
   $js = $36;
   $37 = $js;
   $38 = ($37|0)!=(0);
   if ($38) {
    $0 = -1;
    $118 = $0;
    STACKTOP = sp;return ($118|0);
   }
   $39 = HEAP32[$iy2>>2]|0;
   $40 = HEAP32[$im2>>2]|0;
   $41 = HEAP32[$id2>>2]|0;
   $42 = (_eraDat($39,$40,$41,0.0,$dat24)|0);
   $js = $42;
   $43 = $js;
   $44 = ($43|0)<(0);
   if ($44) {
    $0 = -1;
    $118 = $0;
    STACKTOP = sp;return ($118|0);
   } else {
    $45 = +HEAPF64[$dat24>>3];
    $46 = +HEAPF64[$dat12>>3];
    $47 = 2.0 * $46;
    $48 = +HEAPF64[$dat0>>3];
    $49 = $47 - $48;
    $50 = $45 - $49;
    $dleap = $50;
    $51 = $dleap;
    $52 = $51 != 0.0;
    $53 = $52&1;
    $leap = $53;
    $54 = $leap;
    $55 = ($54|0)!=(0);
    if (!($55)) {
     break;
    }
    $56 = +HEAPF64[$fd>>3];
    $57 = $dleap;
    $58 = $56 * $57;
    $59 = $58 / 86400.0;
    $60 = +HEAPF64[$fd>>3];
    $61 = $60 + $59;
    HEAPF64[$fd>>3] = $61;
    break;
   }
  }
 } while(0);
 $62 = $2;
 $63 = +HEAPF64[$fd>>3];
 _eraD2tf($62,$63,$s,$ihmsf1);
 $64 = HEAP32[$ihmsf1>>2]|0;
 $65 = ($64|0)>(23);
 do {
  if ($65) {
   $66 = $a1;
   $67 = $66 + 1.5;
   $68 = $b1;
   $69 = +HEAPF64[$fd>>3];
   $70 = $68 - $69;
   $71 = (_eraJd2cal($67,$70,$iy2,$im2,$id2,$w)|0);
   $js = $71;
   $72 = $js;
   $73 = ($72|0)!=(0);
   if ($73) {
    $0 = -1;
    $118 = $0;
    STACKTOP = sp;return ($118|0);
   }
   $74 = $leap;
   $75 = ($74|0)!=(0);
   if (!($75)) {
    $76 = HEAP32[$iy2>>2]|0;
    HEAP32[$iy1>>2] = $76;
    $77 = HEAP32[$im2>>2]|0;
    HEAP32[$im1>>2] = $77;
    $78 = HEAP32[$id2>>2]|0;
    HEAP32[$id1>>2] = $78;
    HEAP32[$ihmsf1>>2] = 0;
    $79 = ((($ihmsf1)) + 4|0);
    HEAP32[$79>>2] = 0;
    $80 = ((($ihmsf1)) + 8|0);
    HEAP32[$80>>2] = 0;
    break;
   }
   $81 = ((($ihmsf1)) + 8|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ($82|0)>(0);
   if ($83) {
    $84 = HEAP32[$iy2>>2]|0;
    HEAP32[$iy1>>2] = $84;
    $85 = HEAP32[$im2>>2]|0;
    HEAP32[$im1>>2] = $85;
    $86 = HEAP32[$id2>>2]|0;
    HEAP32[$id1>>2] = $86;
    HEAP32[$ihmsf1>>2] = 0;
    $87 = ((($ihmsf1)) + 4|0);
    HEAP32[$87>>2] = 0;
    $88 = ((($ihmsf1)) + 8|0);
    HEAP32[$88>>2] = 0;
   } else {
    HEAP32[$ihmsf1>>2] = 23;
    $89 = ((($ihmsf1)) + 4|0);
    HEAP32[$89>>2] = 59;
    $90 = ((($ihmsf1)) + 8|0);
    HEAP32[$90>>2] = 60;
   }
   $91 = $2;
   $92 = ($91|0)<(0);
   if ($92) {
    $93 = ((($ihmsf1)) + 8|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==(60);
    if ($95) {
     $96 = HEAP32[$iy2>>2]|0;
     HEAP32[$iy1>>2] = $96;
     $97 = HEAP32[$im2>>2]|0;
     HEAP32[$im1>>2] = $97;
     $98 = HEAP32[$id2>>2]|0;
     HEAP32[$id1>>2] = $98;
     HEAP32[$ihmsf1>>2] = 0;
     $99 = ((($ihmsf1)) + 4|0);
     HEAP32[$99>>2] = 0;
     $100 = ((($ihmsf1)) + 8|0);
     HEAP32[$100>>2] = 0;
    }
   }
  }
 } while(0);
 $101 = HEAP32[$iy1>>2]|0;
 $102 = $5;
 HEAP32[$102>>2] = $101;
 $103 = HEAP32[$im1>>2]|0;
 $104 = $6;
 HEAP32[$104>>2] = $103;
 $105 = HEAP32[$id1>>2]|0;
 $106 = $7;
 HEAP32[$106>>2] = $105;
 $i = 0;
 while(1) {
  $107 = $i;
  $108 = ($107|0)<(4);
  if (!($108)) {
   break;
  }
  $109 = $i;
  $110 = (($ihmsf1) + ($109<<2)|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = $i;
  $113 = $8;
  $114 = (($113) + ($112<<2)|0);
  HEAP32[$114>>2] = $111;
  $115 = $i;
  $116 = (($115) + 1)|0;
  $i = $116;
 }
 $117 = $js;
 $0 = $117;
 $118 = $0;
 STACKTOP = sp;return ($118|0);
}
function _eraD2tf($ndp,$days,$sign,$ihmsf) {
 $ndp = $ndp|0;
 $days = +$days;
 $sign = $sign|0;
 $ihmsf = $ihmsf|0;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0;
 var $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0.0;
 var $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0;
 var $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0;
 var $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, $a = 0.0, $af = 0.0, $ah = 0.0, $am = 0.0, $as = 0.0, $n = 0, $nrs = 0, $rh = 0.0, $rm = 0.0, $rs = 0.0, $w = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ndp;
 $1 = $days;
 $2 = $sign;
 $3 = $ihmsf;
 $4 = $1;
 $5 = $4 >= 0.0;
 $6 = $5 ? 43 : 45;
 $7 = $6&255;
 $8 = $2;
 HEAP8[$8>>0] = $7;
 $9 = $1;
 $10 = (+Math_abs((+$9)));
 $11 = 86400.0 * $10;
 $a = $11;
 $12 = $0;
 $13 = ($12|0)<(0);
 if ($13) {
  $nrs = 1;
  $n = 1;
  while(1) {
   $14 = $n;
   $15 = $0;
   $16 = (0 - ($15))|0;
   $17 = ($14|0)<=($16|0);
   if (!($17)) {
    break;
   }
   $18 = $n;
   $19 = ($18|0)==(2);
   $20 = $n;
   $21 = ($20|0)==(4);
   $22 = $19 ? 1 : $21;
   $23 = $22 ? 6 : 10;
   $24 = $nrs;
   $25 = Math_imul($24, $23)|0;
   $nrs = $25;
   $26 = $n;
   $27 = (($26) + 1)|0;
   $n = $27;
  }
  $28 = $nrs;
  $29 = (+($28|0));
  $rs = $29;
  $30 = $a;
  $31 = $rs;
  $32 = $30 / $31;
  $w = $32;
  $33 = $rs;
  $34 = $w;
  $35 = $34 < 0.0;
  $36 = $w;
  if ($35) {
   $37 = $36 - 0.5;
   $38 = (+Math_ceil((+$37)));
   $42 = $38;
  } else {
   $39 = $36 + 0.5;
   $40 = (+Math_floor((+$39)));
   $42 = $40;
  }
  $41 = $33 * $42;
  $a = $41;
 }
 $nrs = 1;
 $n = 1;
 while(1) {
  $43 = $n;
  $44 = $0;
  $45 = ($43|0)<=($44|0);
  $46 = $nrs;
  if (!($45)) {
   break;
  }
  $47 = ($46*10)|0;
  $nrs = $47;
  $48 = $n;
  $49 = (($48) + 1)|0;
  $n = $49;
 }
 $50 = (+($46|0));
 $rs = $50;
 $51 = $rs;
 $52 = $51 * 60.0;
 $rm = $52;
 $53 = $rm;
 $54 = $53 * 60.0;
 $rh = $54;
 $55 = $rs;
 $56 = $a;
 $57 = $55 * $56;
 $58 = $57 < 0.0;
 $59 = $rs;
 $60 = $a;
 $61 = $59 * $60;
 if ($58) {
  $62 = $61 - 0.5;
  $63 = (+Math_ceil((+$62)));
  $66 = $63;
 } else {
  $64 = $61 + 0.5;
  $65 = (+Math_floor((+$64)));
  $66 = $65;
 }
 $a = $66;
 $67 = $a;
 $68 = $rh;
 $69 = $67 / $68;
 $ah = $69;
 $70 = $ah;
 $71 = $70 < 0.0;
 $72 = $ah;
 if ($71) {
  $73 = (+Math_ceil((+$72)));
  $75 = $73;
 } else {
  $74 = (+Math_floor((+$72)));
  $75 = $74;
 }
 $ah = $75;
 $76 = $ah;
 $77 = $rh;
 $78 = $76 * $77;
 $79 = $a;
 $80 = $79 - $78;
 $a = $80;
 $81 = $a;
 $82 = $rm;
 $83 = $81 / $82;
 $am = $83;
 $84 = $am;
 $85 = $84 < 0.0;
 $86 = $am;
 if ($85) {
  $87 = (+Math_ceil((+$86)));
  $89 = $87;
 } else {
  $88 = (+Math_floor((+$86)));
  $89 = $88;
 }
 $am = $89;
 $90 = $am;
 $91 = $rm;
 $92 = $90 * $91;
 $93 = $a;
 $94 = $93 - $92;
 $a = $94;
 $95 = $a;
 $96 = $rs;
 $97 = $95 / $96;
 $as = $97;
 $98 = $as;
 $99 = $98 < 0.0;
 $100 = $as;
 if ($99) {
  $101 = (+Math_ceil((+$100)));
  $103 = $101;
 } else {
  $102 = (+Math_floor((+$100)));
  $103 = $102;
 }
 $as = $103;
 $104 = $a;
 $105 = $as;
 $106 = $rs;
 $107 = $105 * $106;
 $108 = $104 - $107;
 $af = $108;
 $109 = $ah;
 $110 = (~~(($109)));
 $111 = $3;
 HEAP32[$111>>2] = $110;
 $112 = $am;
 $113 = (~~(($112)));
 $114 = $3;
 $115 = ((($114)) + 4|0);
 HEAP32[$115>>2] = $113;
 $116 = $as;
 $117 = (~~(($116)));
 $118 = $3;
 $119 = ((($118)) + 8|0);
 HEAP32[$119>>2] = $117;
 $120 = $af;
 $121 = (~~(($120)));
 $122 = $3;
 $123 = ((($122)) + 12|0);
 HEAP32[$123>>2] = $121;
 STACKTOP = sp;return;
}
function _eraDat($iy,$im,$id,$fd,$deltat) {
 $iy = $iy|0;
 $im = $im|0;
 $id = $id|0;
 $fd = +$fd;
 $deltat = $deltat|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $da = 0.0, $djm = 0, $djm0 = 0, $i = 0, $j = 0, $m = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $djm0 = sp + 8|0;
 $djm = sp;
 $1 = $iy;
 $2 = $im;
 $3 = $id;
 $4 = $fd;
 $5 = $deltat;
 $da = 0.0;
 $6 = $5;
 HEAPF64[$6>>3] = 0.0;
 $7 = $4;
 $8 = $7 < 0.0;
 $9 = $4;
 $10 = $9 > 1.0;
 $or$cond = $8 | $10;
 if ($or$cond) {
  $0 = -4;
  $67 = $0;
  STACKTOP = sp;return ($67|0);
 }
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = (_eraCal2jd($11,$12,$13,$djm0,$djm)|0);
 $j = $14;
 $15 = $j;
 $16 = ($15|0)<(0);
 if ($16) {
  $17 = $j;
  $0 = $17;
  $67 = $0;
  STACKTOP = sp;return ($67|0);
 }
 $18 = $1;
 $19 = HEAP32[8>>2]|0;
 $20 = ($18|0)<($19|0);
 if ($20) {
  $0 = 1;
  $67 = $0;
  STACKTOP = sp;return ($67|0);
 }
 $21 = $1;
 $22 = ($21|0)>(2020);
 if ($22) {
  $j = 1;
 }
 $23 = $1;
 $24 = ($23*12)|0;
 $25 = $2;
 $26 = (($24) + ($25))|0;
 $m = $26;
 $i = 40;
 while(1) {
  $27 = $i;
  $28 = ($27|0)>=(0);
  if (!($28)) {
   break;
  }
  $29 = $m;
  $30 = $i;
  $31 = (8 + ($30<<4)|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32*12)|0;
  $34 = $i;
  $35 = (8 + ($34<<4)|0);
  $36 = ((($35)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($33) + ($37))|0;
  $39 = ($29|0)>=($38|0);
  if ($39) {
   break;
  }
  $40 = $i;
  $41 = (($40) + -1)|0;
  $i = $41;
 }
 $42 = $i;
 $43 = ($42|0)<(0);
 if ($43) {
  $0 = -5;
  $67 = $0;
  STACKTOP = sp;return ($67|0);
 }
 $44 = $i;
 $45 = (8 + ($44<<4)|0);
 $46 = ((($45)) + 8|0);
 $47 = +HEAPF64[$46>>3];
 $da = $47;
 $48 = $i;
 $49 = ($48|0)<(14);
 if ($49) {
  $50 = +HEAPF64[$djm>>3];
  $51 = $4;
  $52 = $50 + $51;
  $53 = $i;
  $54 = (664 + ($53<<4)|0);
  $55 = +HEAPF64[$54>>3];
  $56 = $52 - $55;
  $57 = $i;
  $58 = (664 + ($57<<4)|0);
  $59 = ((($58)) + 8|0);
  $60 = +HEAPF64[$59>>3];
  $61 = $56 * $60;
  $62 = $da;
  $63 = $62 + $61;
  $da = $63;
 }
 $64 = $da;
 $65 = $5;
 HEAPF64[$65>>3] = $64;
 $66 = $j;
 $0 = $66;
 $67 = $0;
 STACKTOP = sp;return ($67|0);
}
function _eraDtdb($date1,$date2,$ut,$elong,$u,$v) {
 $date1 = +$date1;
 $date2 = +$date2;
 $ut = +$ut;
 $elong = +$elong;
 $u = +$u;
 $v = +$v;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0.0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0;
 var $189 = 0.0, $19 = 0.0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0, $199 = 0, $2 = 0.0, $20 = 0.0, $200 = 0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0.0, $22 = 0.0, $220 = 0, $221 = 0, $222 = 0, $223 = 0.0;
 var $224 = 0.0, $225 = 0.0, $226 = 0, $227 = 0, $228 = 0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0.0, $240 = 0.0, $241 = 0.0;
 var $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0.0;
 var $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0;
 var $279 = 0.0, $28 = 0.0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0;
 var $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0;
 var $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0;
 var $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0;
 var $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $d = 0.0, $elj = 0.0, $els = 0.0, $elsun = 0.0, $emsun = 0.0, $j = 0, $t = 0.0, $tsol = 0.0, $w = 0.0, $w0 = 0.0, $w1 = 0.0, $w2 = 0.0;
 var $w3 = 0.0, $w4 = 0.0, $wf = 0.0, $wj = 0.0, $wt = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $date1;
 $1 = $date2;
 $2 = $ut;
 $3 = $elong;
 $4 = $u;
 $5 = $v;
 $6 = $0;
 $7 = $6 - 2451545.0;
 $8 = $1;
 $9 = $7 + $8;
 $10 = $9 / 365250.0;
 $t = $10;
 $11 = $2;
 $12 = (+_fmod($11,1.0));
 $13 = $12 * 6.2831853071795862;
 $14 = $3;
 $15 = $13 + $14;
 $tsol = $15;
 $16 = $t;
 $17 = $16 / 3600.0;
 $w = $17;
 $18 = $w;
 $19 = 1296027711.0342901 * $18;
 $20 = 280.46645683000003 + $19;
 $21 = (+_fmod($20,360.0));
 $22 = $21 * 0.017453292519943295;
 $elsun = $22;
 $23 = $w;
 $24 = 1295965810.4809999 * $23;
 $25 = 357.52910917999998 + $24;
 $26 = (+_fmod($25,360.0));
 $27 = $26 * 0.017453292519943295;
 $emsun = $27;
 $28 = $w;
 $29 = 16029616012.09 * $28;
 $30 = 297.85019547000002 + $29;
 $31 = (+_fmod($30,360.0));
 $32 = $31 * 0.017453292519943295;
 $d = $32;
 $33 = $w;
 $34 = 109306899.89453 * $33;
 $35 = 34.351518740000003 + $34;
 $36 = (+_fmod($35,360.0));
 $37 = $36 * 0.017453292519943295;
 $elj = $37;
 $38 = $w;
 $39 = 44046398.470380001 * $38;
 $40 = 50.077444300000003 + $39;
 $41 = (+_fmod($40,360.0));
 $42 = $41 * 0.017453292519943295;
 $els = $42;
 $43 = $4;
 $44 = 2.9000000000000003E-14 * $43;
 $45 = $tsol;
 $46 = $elsun;
 $47 = $45 + $46;
 $48 = $els;
 $49 = $47 - $48;
 $50 = (+Math_sin((+$49)));
 $51 = $44 * $50;
 $52 = $4;
 $53 = 1.0E-13 * $52;
 $54 = $tsol;
 $55 = $emsun;
 $56 = 2.0 * $55;
 $57 = $54 - $56;
 $58 = (+Math_sin((+$57)));
 $59 = $53 * $58;
 $60 = $51 + $59;
 $61 = $4;
 $62 = 1.3299999999999999E-13 * $61;
 $63 = $tsol;
 $64 = $d;
 $65 = $63 - $64;
 $66 = (+Math_sin((+$65)));
 $67 = $62 * $66;
 $68 = $60 + $67;
 $69 = $4;
 $70 = 1.3299999999999999E-13 * $69;
 $71 = $tsol;
 $72 = $elsun;
 $73 = $71 + $72;
 $74 = $elj;
 $75 = $73 - $74;
 $76 = (+Math_sin((+$75)));
 $77 = $70 * $76;
 $78 = $68 + $77;
 $79 = $4;
 $80 = 2.2899999999999998E-13 * $79;
 $81 = $tsol;
 $82 = $elsun;
 $83 = 2.0 * $82;
 $84 = $81 + $83;
 $85 = $emsun;
 $86 = $84 + $85;
 $87 = (+Math_sin((+$86)));
 $88 = $80 * $87;
 $89 = $78 - $88;
 $90 = $5;
 $91 = 2.1999999999999999E-12 * $90;
 $92 = $elsun;
 $93 = $emsun;
 $94 = $92 + $93;
 $95 = (+Math_cos((+$94)));
 $96 = $91 * $95;
 $97 = $89 - $96;
 $98 = $4;
 $99 = 5.312E-12 * $98;
 $100 = $tsol;
 $101 = $emsun;
 $102 = $100 - $101;
 $103 = (+Math_sin((+$102)));
 $104 = $99 * $103;
 $105 = $97 + $104;
 $106 = $4;
 $107 = 1.3677E-11 * $106;
 $108 = $tsol;
 $109 = $elsun;
 $110 = 2.0 * $109;
 $111 = $108 + $110;
 $112 = (+Math_sin((+$111)));
 $113 = $107 * $112;
 $114 = $105 - $113;
 $115 = $5;
 $116 = 1.3184000000000001E-10 * $115;
 $117 = $elsun;
 $118 = (+Math_cos((+$117)));
 $119 = $116 * $118;
 $120 = $114 - $119;
 $121 = $4;
 $122 = 3.1767900000000003E-10 * $121;
 $123 = $tsol;
 $124 = (+Math_sin((+$123)));
 $125 = $122 * $124;
 $126 = $120 + $125;
 $wt = $126;
 $w0 = 0.0;
 $j = 473;
 while(1) {
  $127 = $j;
  $128 = ($127|0)>=(0);
  if (!($128)) {
   break;
  }
  $129 = $j;
  $130 = (888 + (($129*24)|0)|0);
  $131 = +HEAPF64[$130>>3];
  $132 = $j;
  $133 = (888 + (($132*24)|0)|0);
  $134 = ((($133)) + 8|0);
  $135 = +HEAPF64[$134>>3];
  $136 = $t;
  $137 = $135 * $136;
  $138 = $j;
  $139 = (888 + (($138*24)|0)|0);
  $140 = ((($139)) + 16|0);
  $141 = +HEAPF64[$140>>3];
  $142 = $137 + $141;
  $143 = (+Math_sin((+$142)));
  $144 = $131 * $143;
  $145 = $w0;
  $146 = $145 + $144;
  $w0 = $146;
  $147 = $j;
  $148 = (($147) + -1)|0;
  $j = $148;
 }
 $w1 = 0.0;
 $j = 678;
 while(1) {
  $149 = $j;
  $150 = ($149|0)>=(474);
  if (!($150)) {
   break;
  }
  $151 = $j;
  $152 = (888 + (($151*24)|0)|0);
  $153 = +HEAPF64[$152>>3];
  $154 = $j;
  $155 = (888 + (($154*24)|0)|0);
  $156 = ((($155)) + 8|0);
  $157 = +HEAPF64[$156>>3];
  $158 = $t;
  $159 = $157 * $158;
  $160 = $j;
  $161 = (888 + (($160*24)|0)|0);
  $162 = ((($161)) + 16|0);
  $163 = +HEAPF64[$162>>3];
  $164 = $159 + $163;
  $165 = (+Math_sin((+$164)));
  $166 = $153 * $165;
  $167 = $w1;
  $168 = $167 + $166;
  $w1 = $168;
  $169 = $j;
  $170 = (($169) + -1)|0;
  $j = $170;
 }
 $w2 = 0.0;
 $j = 763;
 while(1) {
  $171 = $j;
  $172 = ($171|0)>=(679);
  if (!($172)) {
   break;
  }
  $173 = $j;
  $174 = (888 + (($173*24)|0)|0);
  $175 = +HEAPF64[$174>>3];
  $176 = $j;
  $177 = (888 + (($176*24)|0)|0);
  $178 = ((($177)) + 8|0);
  $179 = +HEAPF64[$178>>3];
  $180 = $t;
  $181 = $179 * $180;
  $182 = $j;
  $183 = (888 + (($182*24)|0)|0);
  $184 = ((($183)) + 16|0);
  $185 = +HEAPF64[$184>>3];
  $186 = $181 + $185;
  $187 = (+Math_sin((+$186)));
  $188 = $175 * $187;
  $189 = $w2;
  $190 = $189 + $188;
  $w2 = $190;
  $191 = $j;
  $192 = (($191) + -1)|0;
  $j = $192;
 }
 $w3 = 0.0;
 $j = 783;
 while(1) {
  $193 = $j;
  $194 = ($193|0)>=(764);
  if (!($194)) {
   break;
  }
  $195 = $j;
  $196 = (888 + (($195*24)|0)|0);
  $197 = +HEAPF64[$196>>3];
  $198 = $j;
  $199 = (888 + (($198*24)|0)|0);
  $200 = ((($199)) + 8|0);
  $201 = +HEAPF64[$200>>3];
  $202 = $t;
  $203 = $201 * $202;
  $204 = $j;
  $205 = (888 + (($204*24)|0)|0);
  $206 = ((($205)) + 16|0);
  $207 = +HEAPF64[$206>>3];
  $208 = $203 + $207;
  $209 = (+Math_sin((+$208)));
  $210 = $197 * $209;
  $211 = $w3;
  $212 = $211 + $210;
  $w3 = $212;
  $213 = $j;
  $214 = (($213) + -1)|0;
  $j = $214;
 }
 $w4 = 0.0;
 $j = 786;
 while(1) {
  $215 = $j;
  $216 = ($215|0)>=(784);
  if (!($216)) {
   break;
  }
  $217 = $j;
  $218 = (888 + (($217*24)|0)|0);
  $219 = +HEAPF64[$218>>3];
  $220 = $j;
  $221 = (888 + (($220*24)|0)|0);
  $222 = ((($221)) + 8|0);
  $223 = +HEAPF64[$222>>3];
  $224 = $t;
  $225 = $223 * $224;
  $226 = $j;
  $227 = (888 + (($226*24)|0)|0);
  $228 = ((($227)) + 16|0);
  $229 = +HEAPF64[$228>>3];
  $230 = $225 + $229;
  $231 = (+Math_sin((+$230)));
  $232 = $219 * $231;
  $233 = $w4;
  $234 = $233 + $232;
  $w4 = $234;
  $235 = $j;
  $236 = (($235) + -1)|0;
  $j = $236;
 }
 $237 = $t;
 $238 = $t;
 $239 = $t;
 $240 = $t;
 $241 = $w4;
 $242 = $240 * $241;
 $243 = $w3;
 $244 = $242 + $243;
 $245 = $239 * $244;
 $246 = $w2;
 $247 = $245 + $246;
 $248 = $238 * $247;
 $249 = $w1;
 $250 = $248 + $249;
 $251 = $237 * $250;
 $252 = $w0;
 $253 = $251 + $252;
 $wf = $253;
 $254 = $t;
 $255 = 6069.7767540000004 * $254;
 $256 = $255 + 4.0211940000000004;
 $257 = (+Math_sin((+$256)));
 $258 = 6.5000000000000003E-10 * $257;
 $259 = $t;
 $260 = 213.29909499999999 * $259;
 $261 = $260 + 5.5431319999999999;
 $262 = (+Math_sin((+$261)));
 $263 = 3.3E-10 * $262;
 $264 = $258 + $263;
 $265 = $t;
 $266 = 6208.2942510000003 * $265;
 $267 = $266 + 5.696701;
 $268 = (+Math_sin((+$267)));
 $269 = -1.9599999999999998E-9 * $268;
 $270 = $264 + $269;
 $271 = $t;
 $272 = 74.781599 * $271;
 $273 = $272 + 2.4359000000000002;
 $274 = (+Math_sin((+$273)));
 $275 = -1.73E-9 * $274;
 $276 = $270 + $275;
 $277 = $t;
 $278 = 3.6379999999999999E-8 * $277;
 $279 = $t;
 $280 = $278 * $279;
 $281 = $276 + $280;
 $wj = $281;
 $282 = $wt;
 $283 = $wf;
 $284 = $282 + $283;
 $285 = $wj;
 $286 = $284 + $285;
 $w = $286;
 $287 = $w;
 STACKTOP = sp;return (+$287);
}
function _eraDtf2d($scale,$iy,$im,$id,$ihr,$imn,$sec,$d1,$d2) {
 $scale = $scale|0;
 $iy = $iy|0;
 $im = $im|0;
 $id = $id|0;
 $ihr = $ihr|0;
 $imn = $imn|0;
 $sec = +$sec;
 $d1 = $d1|0;
 $d2 = $d2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $dat0 = 0;
 var $dat12 = 0, $dat24 = 0, $day = 0.0, $dj = 0, $dleap = 0.0, $id2 = 0, $im2 = 0, $iy2 = 0, $js = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $seclim = 0.0, $time = 0.0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $iy2 = sp + 88|0;
 $im2 = sp + 84|0;
 $id2 = sp + 80|0;
 $dj = sp + 64|0;
 $w = sp + 56|0;
 $dat0 = sp + 32|0;
 $dat12 = sp + 24|0;
 $dat24 = sp + 16|0;
 $1 = $scale;
 $2 = $iy;
 $3 = $im;
 $4 = $id;
 $5 = $ihr;
 $6 = $imn;
 $7 = $sec;
 $8 = $d1;
 $9 = $d2;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = (_eraCal2jd($10,$11,$12,$dj,$w)|0);
 $js = $13;
 $14 = $js;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = $js;
  $0 = $16;
  $98 = $0;
  STACKTOP = sp;return ($98|0);
 }
 $17 = +HEAPF64[$w>>3];
 $18 = +HEAPF64[$dj>>3];
 $19 = $18 + $17;
 HEAPF64[$dj>>3] = $19;
 $day = 86400.0;
 $seclim = 60.0;
 $20 = $1;
 $21 = (_strcmp($20,280872)|0);
 $22 = ($21|0)!=(0);
 do {
  if (!($22)) {
   $23 = $2;
   $24 = $3;
   $25 = $4;
   $26 = (_eraDat($23,$24,$25,0.0,$dat0)|0);
   $js = $26;
   $27 = $js;
   $28 = ($27|0)<(0);
   if ($28) {
    $29 = $js;
    $0 = $29;
    $98 = $0;
    STACKTOP = sp;return ($98|0);
   }
   $30 = $2;
   $31 = $3;
   $32 = $4;
   $33 = (_eraDat($30,$31,$32,0.5,$dat12)|0);
   $js = $33;
   $34 = $js;
   $35 = ($34|0)<(0);
   if ($35) {
    $36 = $js;
    $0 = $36;
    $98 = $0;
    STACKTOP = sp;return ($98|0);
   }
   $37 = +HEAPF64[$dj>>3];
   $38 = (_eraJd2cal($37,1.5,$iy2,$im2,$id2,$w)|0);
   $js = $38;
   $39 = $js;
   $40 = ($39|0)!=(0);
   if ($40) {
    $41 = $js;
    $0 = $41;
    $98 = $0;
    STACKTOP = sp;return ($98|0);
   }
   $42 = HEAP32[$iy2>>2]|0;
   $43 = HEAP32[$im2>>2]|0;
   $44 = HEAP32[$id2>>2]|0;
   $45 = (_eraDat($42,$43,$44,0.0,$dat24)|0);
   $js = $45;
   $46 = $js;
   $47 = ($46|0)<(0);
   if ($47) {
    $48 = $js;
    $0 = $48;
    $98 = $0;
    STACKTOP = sp;return ($98|0);
   } else {
    $49 = +HEAPF64[$dat24>>3];
    $50 = +HEAPF64[$dat12>>3];
    $51 = 2.0 * $50;
    $52 = +HEAPF64[$dat0>>3];
    $53 = $51 - $52;
    $54 = $49 - $53;
    $dleap = $54;
    $55 = $dleap;
    $56 = $day;
    $57 = $56 + $55;
    $day = $57;
    $58 = $5;
    $59 = ($58|0)==(23);
    $60 = $6;
    $61 = ($60|0)==(59);
    $or$cond = $59 & $61;
    if (!($or$cond)) {
     break;
    }
    $62 = $dleap;
    $63 = $seclim;
    $64 = $63 + $62;
    $seclim = $64;
    break;
   }
  }
 } while(0);
 $65 = $5;
 $66 = ($65|0)>=(0);
 $67 = $5;
 $68 = ($67|0)<=(23);
 $or$cond3 = $66 & $68;
 do {
  if ($or$cond3) {
   $69 = $6;
   $70 = ($69|0)>=(0);
   $71 = $6;
   $72 = ($71|0)<=(59);
   $or$cond5 = $70 & $72;
   if (!($or$cond5)) {
    $js = -5;
    break;
   }
   $73 = $7;
   $74 = $73 >= 0.0;
   if (!($74)) {
    $js = -6;
    break;
   }
   $75 = $7;
   $76 = $seclim;
   $77 = $75 >= $76;
   if ($77) {
    $78 = $js;
    $79 = (($78) + 2)|0;
    $js = $79;
   }
  } else {
   $js = -4;
  }
 } while(0);
 $80 = $js;
 $81 = ($80|0)<(0);
 if ($81) {
  $82 = $js;
  $0 = $82;
  $98 = $0;
  STACKTOP = sp;return ($98|0);
 } else {
  $83 = $5;
  $84 = ($83*60)|0;
  $85 = $6;
  $86 = (($84) + ($85))|0;
  $87 = (+($86|0));
  $88 = 60.0 * $87;
  $89 = $7;
  $90 = $88 + $89;
  $91 = $day;
  $92 = $90 / $91;
  $time = $92;
  $93 = +HEAPF64[$dj>>3];
  $94 = $8;
  HEAPF64[$94>>3] = $93;
  $95 = $time;
  $96 = $9;
  HEAPF64[$96>>3] = $95;
  $97 = $js;
  $0 = $97;
  $98 = $0;
  STACKTOP = sp;return ($98|0);
 }
 return (0)|0;
}
function _eraEe00a($date1,$date2) {
 $date1 = +$date1;
 $date2 = +$date2;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $deps = 0, $depspr = 0, $dpsi = 0;
 var $dpsipr = 0, $ee = 0.0, $epsa = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dpsipr = sp + 40|0;
 $depspr = sp + 32|0;
 $dpsi = sp + 16|0;
 $deps = sp + 8|0;
 $0 = $date1;
 $1 = $date2;
 $2 = $0;
 $3 = $1;
 _eraPr00($2,$3,$dpsipr,$depspr);
 $4 = $0;
 $5 = $1;
 $6 = (+_eraObl80($4,$5));
 $7 = +HEAPF64[$depspr>>3];
 $8 = $6 + $7;
 $epsa = $8;
 $9 = $0;
 $10 = $1;
 _eraNut00a($9,$10,$dpsi,$deps);
 $11 = $0;
 $12 = $1;
 $13 = $epsa;
 $14 = +HEAPF64[$dpsi>>3];
 $15 = (+_eraEe00($11,$12,$13,$14));
 $ee = $15;
 $16 = $ee;
 STACKTOP = sp;return (+$16);
}
function _eraEe00b($date1,$date2) {
 $date1 = +$date1;
 $date2 = +$date2;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $deps = 0, $depspr = 0, $dpsi = 0;
 var $dpsipr = 0, $ee = 0.0, $epsa = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dpsipr = sp + 40|0;
 $depspr = sp + 32|0;
 $dpsi = sp + 16|0;
 $deps = sp + 8|0;
 $0 = $date1;
 $1 = $date2;
 $2 = $0;
 $3 = $1;
 _eraPr00($2,$3,$dpsipr,$depspr);
 $4 = $0;
 $5 = $1;
 $6 = (+_eraObl80($4,$5));
 $7 = +HEAPF64[$depspr>>3];
 $8 = $6 + $7;
 $epsa = $8;
 $9 = $0;
 $10 = $1;
 _eraNut00b($9,$10,$dpsi,$deps);
 $11 = $0;
 $12 = $1;
 $13 = $epsa;
 $14 = +HEAPF64[$dpsi>>3];
 $15 = (+_eraEe00($11,$12,$13,$14));
 $ee = $15;
 $16 = $ee;
 STACKTOP = sp;return (+$16);
}
function _eraEe00($date1,$date2,$epsa,$dpsi) {
 $date1 = +$date1;
 $date2 = +$date2;
 $epsa = +$epsa;
 $dpsi = +$dpsi;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $ee = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $date1;
 $1 = $date2;
 $2 = $epsa;
 $3 = $dpsi;
 $4 = $3;
 $5 = $2;
 $6 = (+Math_cos((+$5)));
 $7 = $4 * $6;
 $8 = $0;
 $9 = $1;
 $10 = (+_eraEect00($8,$9));
 $11 = $7 + $10;
 $ee = $11;
 $12 = $ee;
 STACKTOP = sp;return (+$12);
}
function _eraEe06a($date1,$date2) {
 $date1 = +$date1;
 $date2 = +$date2;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $ee = 0.0, $gmst06 = 0.0, $gst06a = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $date1;
 $1 = $date2;
 $2 = $0;
 $3 = $1;
 $4 = (+_eraGst06a(0.0,0.0,$2,$3));
 $gst06a = $4;
 $5 = $0;
 $6 = $1;
 $7 = (+_eraGmst06(0.0,0.0,$5,$6));
 $gmst06 = $7;
 $8 = $gst06a;
 $9 = $gmst06;
 $10 = $8 - $9;
 $11 = (+_eraAnpm($10));
 $ee = $11;
 $12 = $ee;
 STACKTOP = sp;return (+$12);
}
function _eraEect00($date1,$date2) {
 $date1 = +$date1;
 $date2 = +$date2;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0;
 var $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0.0;
 var $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0;
 var $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $NE0 = 0, $NE1 = 0, $a = 0.0, $eect = 0.0, $fa = 0, $i = 0, $j = 0, $s0 = 0.0, $s1 = 0.0;
 var $t = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $fa = sp + 8|0;
 $0 = $date1;
 $1 = $date2;
 $NE0 = 33;
 $NE1 = 1;
 $2 = $0;
 $3 = $2 - 2451545.0;
 $4 = $1;
 $5 = $3 + $4;
 $6 = $5 / 36525.0;
 $t = $6;
 $7 = $t;
 $8 = (+_eraFal03($7));
 HEAPF64[$fa>>3] = $8;
 $9 = $t;
 $10 = (+_eraFalp03($9));
 $11 = ((($fa)) + 8|0);
 HEAPF64[$11>>3] = $10;
 $12 = $t;
 $13 = (+_eraFaf03($12));
 $14 = ((($fa)) + 16|0);
 HEAPF64[$14>>3] = $13;
 $15 = $t;
 $16 = (+_eraFad03($15));
 $17 = ((($fa)) + 24|0);
 HEAPF64[$17>>3] = $16;
 $18 = $t;
 $19 = (+_eraFaom03($18));
 $20 = ((($fa)) + 32|0);
 HEAPF64[$20>>3] = $19;
 $21 = $t;
 $22 = (+_eraFave03($21));
 $23 = ((($fa)) + 40|0);
 HEAPF64[$23>>3] = $22;
 $24 = $t;
 $25 = (+_eraFae03($24));
 $26 = ((($fa)) + 48|0);
 HEAPF64[$26>>3] = $25;
 $27 = $t;
 $28 = (+_eraFapa03($27));
 $29 = ((($fa)) + 56|0);
 HEAPF64[$29>>3] = $28;
 $s0 = 0.0;
 $s1 = 0.0;
 $i = 32;
 while(1) {
  $30 = $i;
  $31 = ($30|0)>=(0);
  if (!($31)) {
   break;
  }
  $a = 0.0;
  $j = 0;
  while(1) {
   $32 = $j;
   $33 = ($32|0)<(8);
   if (!($33)) {
    break;
   }
   $34 = $j;
   $35 = $i;
   $36 = (19776 + (($35*48)|0)|0);
   $37 = (($36) + ($34<<2)|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (+($38|0));
   $40 = $j;
   $41 = (($fa) + ($40<<3)|0);
   $42 = +HEAPF64[$41>>3];
   $43 = $39 * $42;
   $44 = $a;
   $45 = $44 + $43;
   $a = $45;
   $46 = $j;
   $47 = (($46) + 1)|0;
   $j = $47;
  }
  $48 = $i;
  $49 = (19776 + (($48*48)|0)|0);
  $50 = ((($49)) + 32|0);
  $51 = +HEAPF64[$50>>3];
  $52 = $a;
  $53 = (+Math_sin((+$52)));
  $54 = $51 * $53;
  $55 = $i;
  $56 = (19776 + (($55*48)|0)|0);
  $57 = ((($56)) + 40|0);
  $58 = +HEAPF64[$57>>3];
  $59 = $a;
  $60 = (+Math_cos((+$59)));
  $61 = $58 * $60;
  $62 = $54 + $61;
  $63 = $s0;
  $64 = $63 + $62;
  $s0 = $64;
  $65 = $i;
  $66 = (($65) + -1)|0;
  $i = $66;
 }
 $i = 0;
 while(1) {
  $67 = $i;
  $68 = ($67|0)>=(0);
  if (!($68)) {
   break;
  }
  $a = 0.0;
  $j = 0;
  while(1) {
   $69 = $j;
   $70 = ($69|0)<(8);
   if (!($70)) {
    break;
   }
   $71 = $j;
   $72 = $i;
   $73 = (21360 + (($72*48)|0)|0);
   $74 = (($73) + ($71<<2)|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (+($75|0));
   $77 = $j;
   $78 = (($fa) + ($77<<3)|0);
   $79 = +HEAPF64[$78>>3];
   $80 = $76 * $79;
   $81 = $a;
   $82 = $81 + $80;
   $a = $82;
   $83 = $j;
   $84 = (($83) + 1)|0;
   $j = $84;
  }
  $85 = $i;
  $86 = (21360 + (($85*48)|0)|0);
  $87 = ((($86)) + 32|0);
  $88 = +HEAPF64[$87>>3];
  $89 = $a;
  $90 = (+Math_sin((+$89)));
  $91 = $88 * $90;
  $92 = $i;
  $93 = (21360 + (($92*48)|0)|0);
  $94 = ((($93)) + 40|0);
  $95 = +HEAPF64[$94>>3];
  $96 = $a;
  $97 = (+Math_cos((+$96)));
  $98 = $95 * $97;
  $99 = $91 + $98;
  $100 = $s1;
  $101 = $100 + $99;
  $s1 = $101;
  $102 = $i;
  $103 = (($102) + -1)|0;
  $i = $103;
 }
 $104 = $s0;
 $105 = $s1;
 $106 = $t;
 $107 = $105 * $106;
 $108 = $104 + $107;
 $109 = $108 * 4.8481368110953598E-6;
 $eect = $109;
 $110 = $eect;
 STACKTOP = sp;return (+$110);
}
function _eraEform($n,$a,$f) {
 $n = $n|0;
 $a = $a|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $n;
 $2 = $a;
 $3 = $f;
 $4 = $1;
 switch ($4|0) {
 case 1:  {
  $5 = $2;
  HEAPF64[$5>>3] = 6378137.0;
  $6 = $3;
  HEAPF64[$6>>3] = 0.0033528106647474805;
  break;
 }
 case 2:  {
  $7 = $2;
  HEAPF64[$7>>3] = 6378137.0;
  $8 = $3;
  HEAPF64[$8>>3] = 0.0033528106811823188;
  break;
 }
 case 3:  {
  $9 = $2;
  HEAPF64[$9>>3] = 6378135.0;
  $10 = $3;
  HEAPF64[$10>>3] = 0.003352779454167505;
  break;
 }
 default: {
  $11 = $2;
  HEAPF64[$11>>3] = 0.0;
  $12 = $3;
  HEAPF64[$12>>3] = 0.0;
  $0 = -1;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 }
 }
 $0 = 0;
 $13 = $0;
 STACKTOP = sp;return ($13|0);
}
function _eraEo06a($date1,$date2) {
 $date1 = +$date1;
 $date2 = +$date2;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $eo = 0.0, $r = 0, $s = 0.0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $r = sp + 32|0;
 $x = sp + 24|0;
 $y = sp + 16|0;
 $0 = $date1;
 $1 = $date2;
 $2 = $0;
 $3 = $1;
 _eraPnm06a($2,$3,$r);
 _eraBpn2xy($r,$x,$y);
 $4 = $0;
 $5 = $1;
 $6 = +HEAPF64[$x>>3];
 $7 = +HEAPF64[$y>>3];
 $8 = (+_eraS06($4,$5,$6,$7));
 $s = $8;
 $9 = $s;
 $10 = (+_eraEors($r,$9));
 $eo = $10;
 $11 = $eo;
 STACKTOP = sp;return (+$11);
}
function _eraEors($rnpb,$s) {
 $rnpb = $rnpb|0;
 $s = +$s;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0;
 var $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $8 = 0, $9 = 0.0, $ax = 0.0, $eo = 0.0, $or$cond = 0, $p = 0.0, $q = 0.0, $x = 0.0, $xs = 0.0, $ys = 0.0, $zs = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $rnpb;
 $1 = $s;
 $2 = $0;
 $3 = ((($2)) + 48|0);
 $4 = +HEAPF64[$3>>3];
 $x = $4;
 $5 = $x;
 $6 = $0;
 $7 = ((($6)) + 48|0);
 $8 = ((($7)) + 16|0);
 $9 = +HEAPF64[$8>>3];
 $10 = 1.0 + $9;
 $11 = $5 / $10;
 $ax = $11;
 $12 = $ax;
 $13 = $x;
 $14 = $12 * $13;
 $15 = 1.0 - $14;
 $xs = $15;
 $16 = $ax;
 $17 = -$16;
 $18 = $0;
 $19 = ((($18)) + 48|0);
 $20 = ((($19)) + 8|0);
 $21 = +HEAPF64[$20>>3];
 $22 = $17 * $21;
 $ys = $22;
 $23 = $x;
 $24 = -$23;
 $zs = $24;
 $25 = $0;
 $26 = +HEAPF64[$25>>3];
 $27 = $xs;
 $28 = $26 * $27;
 $29 = $0;
 $30 = ((($29)) + 8|0);
 $31 = +HEAPF64[$30>>3];
 $32 = $ys;
 $33 = $31 * $32;
 $34 = $28 + $33;
 $35 = $0;
 $36 = ((($35)) + 16|0);
 $37 = +HEAPF64[$36>>3];
 $38 = $zs;
 $39 = $37 * $38;
 $40 = $34 + $39;
 $p = $40;
 $41 = $0;
 $42 = ((($41)) + 24|0);
 $43 = +HEAPF64[$42>>3];
 $44 = $xs;
 $45 = $43 * $44;
 $46 = $0;
 $47 = ((($46)) + 24|0);
 $48 = ((($47)) + 8|0);
 $49 = +HEAPF64[$48>>3];
 $50 = $ys;
 $51 = $49 * $50;
 $52 = $45 + $51;
 $53 = $0;
 $54 = ((($53)) + 24|0);
 $55 = ((($54)) + 16|0);
 $56 = +HEAPF64[$55>>3];
 $57 = $zs;
 $58 = $56 * $57;
 $59 = $52 + $58;
 $q = $59;
 $60 = $p;
 $61 = $60 != 0.0;
 $62 = $q;
 $63 = $62 != 0.0;
 $or$cond = $61 | $63;
 $64 = $1;
 if (!($or$cond)) {
  $69 = $64;
  $eo = $69;
  $70 = $eo;
  STACKTOP = sp;return (+$70);
 }
 $65 = $q;
 $66 = $p;
 $67 = (+Math_atan2((+$65),(+$66)));
 $68 = $64 - $67;
 $69 = $68;
 $eo = $69;
 $70 = $eo;
 STACKTOP = sp;return (+$70);
}
function _eraEpb2jd($epb,$djm0,$djm) {
 $epb = +$epb;
 $djm0 = $djm0|0;
 $djm = $djm|0;
 var $0 = 0.0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $epb;
 $1 = $djm0;
 $2 = $djm;
 $3 = $1;
 HEAPF64[$3>>3] = 2400000.5;
 $4 = $0;
 $5 = $4 - 1900.0;
 $6 = $5 * 365.24219878100001;
 $7 = 15019.81352 + $6;
 $8 = $2;
 HEAPF64[$8>>3] = $7;
 STACKTOP = sp;return;
}
function _eraEpb($dj1,$dj2) {
 $dj1 = +$dj1;
 $dj2 = +$dj2;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $D1900 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dj1;
 $1 = $dj2;
 $D1900 = 36524.686479999997;
 $2 = $0;
 $3 = $2 - 2451545.0;
 $4 = $1;
 $5 = $4 + 36524.686479999997;
 $6 = $3 + $5;
 $7 = $6 / 365.24219878100001;
 $8 = 1900.0 + $7;
 STACKTOP = sp;return (+$8);
}
function _eraEpj2jd($epj,$djm0,$djm) {
 $epj = +$epj;
 $djm0 = $djm0|0;
 $djm = $djm|0;
 var $0 = 0.0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $epj;
 $1 = $djm0;
 $2 = $djm;
 $3 = $1;
 HEAPF64[$3>>3] = 2400000.5;
 $4 = $0;
 $5 = $4 - 2000.0;
 $6 = $5 * 365.25;
 $7 = 51544.5 + $6;
 $8 = $2;
 HEAPF64[$8>>3] = $7;
 STACKTOP = sp;return;
}
function _eraEpj($dj1,$dj2) {
 $dj1 = +$dj1;
 $dj2 = +$dj2;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $epj = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dj1;
 $1 = $dj2;
 $2 = $0;
 $3 = $2 - 2451545.0;
 $4 = $1;
 $5 = $3 + $4;
 $6 = $5 / 365.25;
 $7 = 2000.0 + $6;
 $epj = $7;
 $8 = $epj;
 STACKTOP = sp;return (+$8);
}
function _eraEpv00($date1,$date2,$pvh,$pvb) {
 $date1 = +$date1;
 $date2 = +$date2;
 $pvh = $pvh|0;
 $pvb = $pvb|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0;
 var $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0;
 var $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0.0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0;
 var $224 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0.0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0;
 var $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0;
 var $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0, $288 = 0, $289 = 0.0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0.0, $293 = 0.0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0.0, $299 = 0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0, $311 = 0.0, $312 = 0.0, $313 = 0.0;
 var $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0, $32 = 0.0, $320 = 0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0.0, $329 = 0, $33 = 0, $330 = 0.0, $331 = 0;
 var $332 = 0.0, $333 = 0.0, $334 = 0.0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0, $340 = 0, $341 = 0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0.0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0.0, $354 = 0.0, $355 = 0.0, $356 = 0.0, $357 = 0.0, $358 = 0, $359 = 0, $36 = 0.0, $360 = 0, $361 = 0.0, $362 = 0, $363 = 0.0, $364 = 0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0.0;
 var $369 = 0.0, $37 = 0.0, $370 = 0.0, $371 = 0.0, $372 = 0.0, $373 = 0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0.0, $379 = 0.0, $38 = 0.0, $380 = 0.0, $381 = 0.0, $382 = 0, $383 = 0, $384 = 0.0, $385 = 0.0, $386 = 0.0;
 var $387 = 0.0, $388 = 0.0, $389 = 0, $39 = 0.0, $390 = 0, $391 = 0.0, $392 = 0, $393 = 0.0, $394 = 0, $395 = 0.0, $396 = 0.0, $397 = 0.0, $398 = 0.0, $399 = 0.0, $4 = 0.0, $40 = 0.0, $400 = 0.0, $401 = 0.0, $402 = 0.0, $403 = 0;
 var $404 = 0, $405 = 0.0, $406 = 0.0, $407 = 0.0, $408 = 0.0, $409 = 0.0, $41 = 0.0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0, $414 = 0, $415 = 0, $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0.0, $42 = 0.0, $420 = 0.0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0;
 var $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0;
 var $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $a = 0.0, $b = 0.0, $c = 0.0, $coeffs = 0, $cp = 0.0, $ct = 0.0, $i = 0, $j = 0, $jstat = 0, $nterms = 0, $p = 0.0, $pb = 0, $ph = 0, $t = 0.0, $t2 = 0.0;
 var $vb = 0, $vh = 0, $x = 0.0, $xyz = 0.0, $xyzd = 0.0, $y = 0.0, $z = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ph = sp + 96|0;
 $vh = sp + 72|0;
 $pb = sp + 48|0;
 $vb = sp + 24|0;
 $0 = $date1;
 $1 = $date2;
 $2 = $pvh;
 $3 = $pvb;
 $4 = $0;
 $5 = $4 - 2451545.0;
 $6 = $1;
 $7 = $5 + $6;
 $8 = $7 / 365.25;
 $t = $8;
 $9 = $t;
 $10 = $t;
 $11 = $9 * $10;
 $t2 = $11;
 $12 = $t;
 $13 = (+Math_abs((+$12)));
 $14 = $13 <= 100.0;
 $15 = $14 ? 0 : 1;
 $jstat = $15;
 $i = 0;
 while(1) {
  $16 = $i;
  $17 = ($16|0)<(3);
  if (!($17)) {
   break;
  }
  $xyz = 0.0;
  $xyzd = 0.0;
  $18 = $i;
  $19 = (178080 + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $coeffs = $20;
  $21 = $i;
  $22 = (178092 + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $nterms = $23;
  $j = 0;
  while(1) {
   $24 = $j;
   $25 = $nterms;
   $26 = ($24|0)<($25|0);
   if (!($26)) {
    break;
   }
   $27 = $coeffs;
   $28 = ((($27)) + 8|0);
   $coeffs = $28;
   $29 = +HEAPF64[$27>>3];
   $a = $29;
   $30 = $coeffs;
   $31 = ((($30)) + 8|0);
   $coeffs = $31;
   $32 = +HEAPF64[$30>>3];
   $b = $32;
   $33 = $coeffs;
   $34 = ((($33)) + 8|0);
   $coeffs = $34;
   $35 = +HEAPF64[$33>>3];
   $c = $35;
   $36 = $b;
   $37 = $c;
   $38 = $t;
   $39 = $37 * $38;
   $40 = $36 + $39;
   $p = $40;
   $41 = $a;
   $42 = $p;
   $43 = (+Math_cos((+$42)));
   $44 = $41 * $43;
   $45 = $xyz;
   $46 = $45 + $44;
   $xyz = $46;
   $47 = $a;
   $48 = $c;
   $49 = $47 * $48;
   $50 = $p;
   $51 = (+Math_sin((+$50)));
   $52 = $49 * $51;
   $53 = $xyzd;
   $54 = $53 - $52;
   $xyzd = $54;
   $55 = $j;
   $56 = (($55) + 1)|0;
   $j = $56;
  }
  $57 = $i;
  $58 = (178104 + ($57<<2)|0);
  $59 = HEAP32[$58>>2]|0;
  $coeffs = $59;
  $60 = $i;
  $61 = (178116 + ($60<<2)|0);
  $62 = HEAP32[$61>>2]|0;
  $nterms = $62;
  $j = 0;
  while(1) {
   $63 = $j;
   $64 = $nterms;
   $65 = ($63|0)<($64|0);
   if (!($65)) {
    break;
   }
   $66 = $coeffs;
   $67 = ((($66)) + 8|0);
   $coeffs = $67;
   $68 = +HEAPF64[$66>>3];
   $a = $68;
   $69 = $coeffs;
   $70 = ((($69)) + 8|0);
   $coeffs = $70;
   $71 = +HEAPF64[$69>>3];
   $b = $71;
   $72 = $coeffs;
   $73 = ((($72)) + 8|0);
   $coeffs = $73;
   $74 = +HEAPF64[$72>>3];
   $c = $74;
   $75 = $c;
   $76 = $t;
   $77 = $75 * $76;
   $ct = $77;
   $78 = $b;
   $79 = $ct;
   $80 = $78 + $79;
   $p = $80;
   $81 = $p;
   $82 = (+Math_cos((+$81)));
   $cp = $82;
   $83 = $a;
   $84 = $t;
   $85 = $83 * $84;
   $86 = $cp;
   $87 = $85 * $86;
   $88 = $xyz;
   $89 = $88 + $87;
   $xyz = $89;
   $90 = $a;
   $91 = $cp;
   $92 = $ct;
   $93 = $p;
   $94 = (+Math_sin((+$93)));
   $95 = $92 * $94;
   $96 = $91 - $95;
   $97 = $90 * $96;
   $98 = $xyzd;
   $99 = $98 + $97;
   $xyzd = $99;
   $100 = $j;
   $101 = (($100) + 1)|0;
   $j = $101;
  }
  $102 = $i;
  $103 = (178128 + ($102<<2)|0);
  $104 = HEAP32[$103>>2]|0;
  $coeffs = $104;
  $105 = $i;
  $106 = (178140 + ($105<<2)|0);
  $107 = HEAP32[$106>>2]|0;
  $nterms = $107;
  $j = 0;
  while(1) {
   $108 = $j;
   $109 = $nterms;
   $110 = ($108|0)<($109|0);
   if (!($110)) {
    break;
   }
   $111 = $coeffs;
   $112 = ((($111)) + 8|0);
   $coeffs = $112;
   $113 = +HEAPF64[$111>>3];
   $a = $113;
   $114 = $coeffs;
   $115 = ((($114)) + 8|0);
   $coeffs = $115;
   $116 = +HEAPF64[$114>>3];
   $b = $116;
   $117 = $coeffs;
   $118 = ((($117)) + 8|0);
   $coeffs = $118;
   $119 = +HEAPF64[$117>>3];
   $c = $119;
   $120 = $c;
   $121 = $t;
   $122 = $120 * $121;
   $ct = $122;
   $123 = $b;
   $124 = $ct;
   $125 = $123 + $124;
   $p = $125;
   $126 = $p;
   $127 = (+Math_cos((+$126)));
   $cp = $127;
   $128 = $a;
   $129 = $t2;
   $130 = $128 * $129;
   $131 = $cp;
   $132 = $130 * $131;
   $133 = $xyz;
   $134 = $133 + $132;
   $xyz = $134;
   $135 = $a;
   $136 = $t;
   $137 = $135 * $136;
   $138 = $cp;
   $139 = 2.0 * $138;
   $140 = $ct;
   $141 = $p;
   $142 = (+Math_sin((+$141)));
   $143 = $140 * $142;
   $144 = $139 - $143;
   $145 = $137 * $144;
   $146 = $xyzd;
   $147 = $146 + $145;
   $xyzd = $147;
   $148 = $j;
   $149 = (($148) + 1)|0;
   $j = $149;
  }
  $150 = $xyz;
  $151 = $i;
  $152 = (($ph) + ($151<<3)|0);
  HEAPF64[$152>>3] = $150;
  $153 = $xyzd;
  $154 = $153 / 365.25;
  $155 = $i;
  $156 = (($vh) + ($155<<3)|0);
  HEAPF64[$156>>3] = $154;
  $157 = $i;
  $158 = (178152 + ($157<<2)|0);
  $159 = HEAP32[$158>>2]|0;
  $coeffs = $159;
  $160 = $i;
  $161 = (178164 + ($160<<2)|0);
  $162 = HEAP32[$161>>2]|0;
  $nterms = $162;
  $j = 0;
  while(1) {
   $163 = $j;
   $164 = $nterms;
   $165 = ($163|0)<($164|0);
   if (!($165)) {
    break;
   }
   $166 = $coeffs;
   $167 = ((($166)) + 8|0);
   $coeffs = $167;
   $168 = +HEAPF64[$166>>3];
   $a = $168;
   $169 = $coeffs;
   $170 = ((($169)) + 8|0);
   $coeffs = $170;
   $171 = +HEAPF64[$169>>3];
   $b = $171;
   $172 = $coeffs;
   $173 = ((($172)) + 8|0);
   $coeffs = $173;
   $174 = +HEAPF64[$172>>3];
   $c = $174;
   $175 = $b;
   $176 = $c;
   $177 = $t;
   $178 = $176 * $177;
   $179 = $175 + $178;
   $p = $179;
   $180 = $a;
   $181 = $p;
   $182 = (+Math_cos((+$181)));
   $183 = $180 * $182;
   $184 = $xyz;
   $185 = $184 + $183;
   $xyz = $185;
   $186 = $a;
   $187 = $c;
   $188 = $186 * $187;
   $189 = $p;
   $190 = (+Math_sin((+$189)));
   $191 = $188 * $190;
   $192 = $xyzd;
   $193 = $192 - $191;
   $xyzd = $193;
   $194 = $j;
   $195 = (($194) + 1)|0;
   $j = $195;
  }
  $196 = $i;
  $197 = (178176 + ($196<<2)|0);
  $198 = HEAP32[$197>>2]|0;
  $coeffs = $198;
  $199 = $i;
  $200 = (178188 + ($199<<2)|0);
  $201 = HEAP32[$200>>2]|0;
  $nterms = $201;
  $j = 0;
  while(1) {
   $202 = $j;
   $203 = $nterms;
   $204 = ($202|0)<($203|0);
   if (!($204)) {
    break;
   }
   $205 = $coeffs;
   $206 = ((($205)) + 8|0);
   $coeffs = $206;
   $207 = +HEAPF64[$205>>3];
   $a = $207;
   $208 = $coeffs;
   $209 = ((($208)) + 8|0);
   $coeffs = $209;
   $210 = +HEAPF64[$208>>3];
   $b = $210;
   $211 = $coeffs;
   $212 = ((($211)) + 8|0);
   $coeffs = $212;
   $213 = +HEAPF64[$211>>3];
   $c = $213;
   $214 = $c;
   $215 = $t;
   $216 = $214 * $215;
   $ct = $216;
   $217 = $b;
   $218 = $ct;
   $219 = $217 + $218;
   $p = $219;
   $220 = $p;
   $221 = (+Math_cos((+$220)));
   $cp = $221;
   $222 = $a;
   $223 = $t;
   $224 = $222 * $223;
   $225 = $cp;
   $226 = $224 * $225;
   $227 = $xyz;
   $228 = $227 + $226;
   $xyz = $228;
   $229 = $a;
   $230 = $cp;
   $231 = $ct;
   $232 = $p;
   $233 = (+Math_sin((+$232)));
   $234 = $231 * $233;
   $235 = $230 - $234;
   $236 = $229 * $235;
   $237 = $xyzd;
   $238 = $237 + $236;
   $xyzd = $238;
   $239 = $j;
   $240 = (($239) + 1)|0;
   $j = $240;
  }
  $241 = $i;
  $242 = (178200 + ($241<<2)|0);
  $243 = HEAP32[$242>>2]|0;
  $coeffs = $243;
  $244 = $i;
  $245 = (178212 + ($244<<2)|0);
  $246 = HEAP32[$245>>2]|0;
  $nterms = $246;
  $j = 0;
  while(1) {
   $247 = $j;
   $248 = $nterms;
   $249 = ($247|0)<($248|0);
   if (!($249)) {
    break;
   }
   $250 = $coeffs;
   $251 = ((($250)) + 8|0);
   $coeffs = $251;
   $252 = +HEAPF64[$250>>3];
   $a = $252;
   $253 = $coeffs;
   $254 = ((($253)) + 8|0);
   $coeffs = $254;
   $255 = +HEAPF64[$253>>3];
   $b = $255;
   $256 = $coeffs;
   $257 = ((($256)) + 8|0);
   $coeffs = $257;
   $258 = +HEAPF64[$256>>3];
   $c = $258;
   $259 = $c;
   $260 = $t;
   $261 = $259 * $260;
   $ct = $261;
   $262 = $b;
   $263 = $ct;
   $264 = $262 + $263;
   $p = $264;
   $265 = $p;
   $266 = (+Math_cos((+$265)));
   $cp = $266;
   $267 = $a;
   $268 = $t2;
   $269 = $267 * $268;
   $270 = $cp;
   $271 = $269 * $270;
   $272 = $xyz;
   $273 = $272 + $271;
   $xyz = $273;
   $274 = $a;
   $275 = $t;
   $276 = $274 * $275;
   $277 = $cp;
   $278 = 2.0 * $277;
   $279 = $ct;
   $280 = $p;
   $281 = (+Math_sin((+$280)));
   $282 = $279 * $281;
   $283 = $278 - $282;
   $284 = $276 * $283;
   $285 = $xyzd;
   $286 = $285 + $284;
   $xyzd = $286;
   $287 = $j;
   $288 = (($287) + 1)|0;
   $j = $288;
  }
  $289 = $xyz;
  $290 = $i;
  $291 = (($pb) + ($290<<3)|0);
  HEAPF64[$291>>3] = $289;
  $292 = $xyzd;
  $293 = $292 / 365.25;
  $294 = $i;
  $295 = (($vb) + ($294<<3)|0);
  HEAPF64[$295>>3] = $293;
  $296 = $i;
  $297 = (($296) + 1)|0;
  $i = $297;
 }
 $298 = +HEAPF64[$ph>>3];
 $x = $298;
 $299 = ((($ph)) + 8|0);
 $300 = +HEAPF64[$299>>3];
 $y = $300;
 $301 = ((($ph)) + 16|0);
 $302 = +HEAPF64[$301>>3];
 $z = $302;
 $303 = $x;
 $304 = $y;
 $305 = 2.11284E-7 * $304;
 $306 = $303 + $305;
 $307 = $z;
 $308 = -9.1603000000000003E-8 * $307;
 $309 = $306 + $308;
 $310 = $2;
 HEAPF64[$310>>3] = $309;
 $311 = $x;
 $312 = -2.30286E-7 * $311;
 $313 = $y;
 $314 = 0.91748213708699999 * $313;
 $315 = $312 + $314;
 $316 = $z;
 $317 = -0.39777698290199998 * $316;
 $318 = $315 + $317;
 $319 = $2;
 $320 = ((($319)) + 8|0);
 HEAPF64[$320>>3] = $318;
 $321 = $y;
 $322 = 0.39777698290199998 * $321;
 $323 = $z;
 $324 = 0.91748213708699999 * $323;
 $325 = $322 + $324;
 $326 = $2;
 $327 = ((($326)) + 16|0);
 HEAPF64[$327>>3] = $325;
 $328 = +HEAPF64[$vh>>3];
 $x = $328;
 $329 = ((($vh)) + 8|0);
 $330 = +HEAPF64[$329>>3];
 $y = $330;
 $331 = ((($vh)) + 16|0);
 $332 = +HEAPF64[$331>>3];
 $z = $332;
 $333 = $x;
 $334 = $y;
 $335 = 2.11284E-7 * $334;
 $336 = $333 + $335;
 $337 = $z;
 $338 = -9.1603000000000003E-8 * $337;
 $339 = $336 + $338;
 $340 = $2;
 $341 = ((($340)) + 24|0);
 HEAPF64[$341>>3] = $339;
 $342 = $x;
 $343 = -2.30286E-7 * $342;
 $344 = $y;
 $345 = 0.91748213708699999 * $344;
 $346 = $343 + $345;
 $347 = $z;
 $348 = -0.39777698290199998 * $347;
 $349 = $346 + $348;
 $350 = $2;
 $351 = ((($350)) + 24|0);
 $352 = ((($351)) + 8|0);
 HEAPF64[$352>>3] = $349;
 $353 = $y;
 $354 = 0.39777698290199998 * $353;
 $355 = $z;
 $356 = 0.91748213708699999 * $355;
 $357 = $354 + $356;
 $358 = $2;
 $359 = ((($358)) + 24|0);
 $360 = ((($359)) + 16|0);
 HEAPF64[$360>>3] = $357;
 $361 = +HEAPF64[$pb>>3];
 $x = $361;
 $362 = ((($pb)) + 8|0);
 $363 = +HEAPF64[$362>>3];
 $y = $363;
 $364 = ((($pb)) + 16|0);
 $365 = +HEAPF64[$364>>3];
 $z = $365;
 $366 = $x;
 $367 = $y;
 $368 = 2.11284E-7 * $367;
 $369 = $366 + $368;
 $370 = $z;
 $371 = -9.1603000000000003E-8 * $370;
 $372 = $369 + $371;
 $373 = $3;
 HEAPF64[$373>>3] = $372;
 $374 = $x;
 $375 = -2.30286E-7 * $374;
 $376 = $y;
 $377 = 0.91748213708699999 * $376;
 $378 = $375 + $377;
 $379 = $z;
 $380 = -0.39777698290199998 * $379;
 $381 = $378 + $380;
 $382 = $3;
 $383 = ((($382)) + 8|0);
 HEAPF64[$383>>3] = $381;
 $384 = $y;
 $385 = 0.39777698290199998 * $384;
 $386 = $z;
 $387 = 0.91748213708699999 * $386;
 $388 = $385 + $387;
 $389 = $3;
 $390 = ((($389)) + 16|0);
 HEAPF64[$390>>3] = $388;
 $391 = +HEAPF64[$vb>>3];
 $x = $391;
 $392 = ((($vb)) + 8|0);
 $393 = +HEAPF64[$392>>3];
 $y = $393;
 $394 = ((($vb)) + 16|0);
 $395 = +HEAPF64[$394>>3];
 $z = $395;
 $396 = $x;
 $397 = $y;
 $398 = 2.11284E-7 * $397;
 $399 = $396 + $398;
 $400 = $z;
 $401 = -9.1603000000000003E-8 * $400;
 $402 = $399 + $401;
 $403 = $3;
 $404 = ((($403)) + 24|0);
 HEAPF64[$404>>3] = $402;
 $405 = $x;
 $406 = -2.30286E-7 * $405;
 $407 = $y;
 $408 = 0.91748213708699999 * $407;
 $409 = $406 + $408;
 $410 = $z;
 $411 = -0.39777698290199998 * $410;
 $412 = $409 + $411;
 $413 = $3;
 $414 = ((($413)) + 24|0);
 $415 = ((($414)) + 8|0);
 HEAPF64[$415>>3] = $412;
 $416 = $y;
 $417 = 0.39777698290199998 * $416;
 $418 = $z;
 $419 = 0.91748213708699999 * $418;
 $420 = $417 + $419;
 $421 = $3;
 $422 = ((($421)) + 24|0);
 $423 = ((($422)) + 16|0);
 HEAPF64[$423>>3] = $420;
 $424 = $jstat;
 STACKTOP = sp;return ($424|0);
}
function _eraEqeq94($date1,$date2) {
 $date1 = +$date1;
 $date2 = +$date2;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $5 = 0.0;
 var $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $deps = 0, $dpsi = 0, $ee = 0.0, $eps0 = 0.0, $om = 0.0, $t = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dpsi = sp + 24|0;
 $deps = sp + 16|0;
 $0 = $date1;
 $1 = $date2;
 $2 = $0;
 $3 = $2 - 2451545.0;
 $4 = $1;
 $5 = $3 + $4;
 $6 = $5 / 36525.0;
 $t = $6;
 $7 = $t;
 $8 = 0.0080000000000000002 * $7;
 $9 = 7.4550000000000001 + $8;
 $10 = $t;
 $11 = $9 * $10;
 $12 = -482890.53899999999 + $11;
 $13 = $t;
 $14 = $12 * $13;
 $15 = 450160.28000000003 + $14;
 $16 = $15 * 4.8481368110953598E-6;
 $17 = $t;
 $18 = -5.0 * $17;
 $19 = (+_fmod($18,1.0));
 $20 = $19 * 6.2831853071795862;
 $21 = $16 + $20;
 $22 = (+_eraAnpm($21));
 $om = $22;
 $23 = $0;
 $24 = $1;
 _eraNut80($23,$24,$dpsi,$deps);
 $25 = $0;
 $26 = $1;
 $27 = (+_eraObl80($25,$26));
 $eps0 = $27;
 $28 = +HEAPF64[$dpsi>>3];
 $29 = $eps0;
 $30 = (+Math_cos((+$29)));
 $31 = $28 * $30;
 $32 = $om;
 $33 = (+Math_sin((+$32)));
 $34 = 0.00264 * $33;
 $35 = $om;
 $36 = $om;
 $37 = $35 + $36;
 $38 = (+Math_sin((+$37)));
 $39 = 6.3E-5 * $38;
 $40 = $34 + $39;
 $41 = 4.8481368110953598E-6 * $40;
 $42 = $31 + $41;
 $ee = $42;
 $43 = $ee;
 STACKTOP = sp;return (+$43);
}
function _eraEra00($dj1,$dj2) {
 $dj1 = +$dj1;
 $dj2 = +$dj2;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $3 = 0.0;
 var $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $d1 = 0.0, $d2 = 0.0, $f = 0.0, $t = 0.0, $theta = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dj1;
 $1 = $dj2;
 $2 = $0;
 $3 = $1;
 $4 = $2 < $3;
 if ($4) {
  $5 = $0;
  $d1 = $5;
  $6 = $1;
  $d2 = $6;
 } else {
  $7 = $1;
  $d1 = $7;
  $8 = $0;
  $d2 = $8;
 }
 $9 = $d1;
 $10 = $d2;
 $11 = $10 - 2451545.0;
 $12 = $9 + $11;
 $t = $12;
 $13 = $d1;
 $14 = (+_fmod($13,1.0));
 $15 = $d2;
 $16 = (+_fmod($15,1.0));
 $17 = $14 + $16;
 $f = $17;
 $18 = $f;
 $19 = $18 + 0.77905727326399998;
 $20 = $t;
 $21 = 0.0027378119113544799 * $20;
 $22 = $19 + $21;
 $23 = 6.2831853071795862 * $22;
 $24 = (+_eraAnp($23));
 $theta = $24;
 $25 = $theta;
 STACKTOP = sp;return (+$25);
}
function _eraFad03($t) {
 $t = +$t;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $a = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = $0;
 $2 = $0;
 $3 = $0;
 $4 = $0;
 $5 = $4 * -3.1690000000000003E-5;
 $6 = 0.0065929999999999999 + $5;
 $7 = $3 * $6;
 $8 = -6.3705999999999996 + $7;
 $9 = $2 * $8;
 $10 = 1602961601.2090001 + $9;
 $11 = $1 * $10;
 $12 = 1072260.7036919999 + $11;
 $13 = (+_fmod($12,1296000.0));
 $14 = $13 * 4.8481368110953598E-6;
 $a = $14;
 $15 = $a;
 STACKTOP = sp;return (+$15);
}
function _eraFae03($t) {
 $t = +$t;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $a = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = $0;
 $2 = 628.30758499909996 * $1;
 $3 = 1.7534703140000001 + $2;
 $4 = (+_fmod($3,6.2831853071795862));
 $a = $4;
 $5 = $a;
 STACKTOP = sp;return (+$5);
}
function _eraFaf03($t) {
 $t = +$t;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $a = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = $0;
 $2 = $0;
 $3 = $0;
 $4 = $0;
 $5 = $4 * 4.1699999999999999E-6;
 $6 = -0.0010369999999999999 + $5;
 $7 = $3 * $6;
 $8 = -12.751200000000001 + $7;
 $9 = $2 * $8;
 $10 = 1739527262.8478 + $9;
 $11 = $1 * $10;
 $12 = 335779.52623199997 + $11;
 $13 = (+_fmod($12,1296000.0));
 $14 = $13 * 4.8481368110953598E-6;
 $a = $14;
 $15 = $a;
 STACKTOP = sp;return (+$15);
}
function _eraFaju03($t) {
 $t = +$t;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $a = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = $0;
 $2 = 52.969096264100003 * $1;
 $3 = 0.59954649699999996 + $2;
 $4 = (+_fmod($3,6.2831853071795862));
 $a = $4;
 $5 = $a;
 STACKTOP = sp;return (+$5);
}
function _eraFal03($t) {
 $t = +$t;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $a = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = $0;
 $2 = $0;
 $3 = $0;
 $4 = $0;
 $5 = $4 * -2.4469999999999998E-4;
 $6 = 0.051635 + $5;
 $7 = $3 * $6;
 $8 = 31.879200000000001 + $7;
 $9 = $2 * $8;
 $10 = 1717915923.2177999 + $9;
 $11 = $1 * $10;
 $12 = 485868.24903599999 + $11;
 $13 = (+_fmod($12,1296000.0));
 $14 = $13 * 4.8481368110953598E-6;
 $a = $14;
 $15 = $a;
 STACKTOP = sp;return (+$15);
}
function _eraFalp03($t) {
 $t = +$t;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $a = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = $0;
 $2 = $0;
 $3 = $0;
 $4 = $0;
 $5 = $4 * -1.149E-5;
 $6 = 1.36E-4 + $5;
 $7 = $3 * $6;
 $8 = -0.55320000000000003 + $7;
 $9 = $2 * $8;
 $10 = 129596581.04809999 + $9;
 $11 = $1 * $10;
 $12 = 1287104.793048 + $11;
 $13 = (+_fmod($12,1296000.0));
 $14 = $13 * 4.8481368110953598E-6;
 $a = $14;
 $15 = $a;
 STACKTOP = sp;return (+$15);
}
function _eraFama03($t) {
 $t = +$t;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $a = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = $0;
 $2 = 334.06124267000001 * $1;
 $3 = 6.2034809129999999 + $2;
 $4 = (+_fmod($3,6.2831853071795862));
 $a = $4;
 $5 = $a;
 STACKTOP = sp;return (+$5);
}
function _eraFame03($t) {
 $t = +$t;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $a = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = $0;
 $2 = 2608.7903141574002 * $1;
 $3 = 4.4026088420000002 + $2;
 $4 = (+_fmod($3,6.2831853071795862));
 $a = $4;
 $5 = $a;
 STACKTOP = sp;return (+$5);
}
function _eraFane03($t) {
 $t = +$t;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $a = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = $0;
 $2 = 3.8133035637999999 * $1;
 $3 = 5.3118862870000001 + $2;
 $4 = (+_fmod($3,6.2831853071795862));
 $a = $4;
 $5 = $a;
 STACKTOP = sp;return (+$5);
}
function _eraFaom03($t) {
 $t = +$t;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $a = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = $0;
 $2 = $0;
 $3 = $0;
 $4 = $0;
 $5 = $4 * -5.9389999999999999E-5;
 $6 = 0.0077019999999999996 + $5;
 $7 = $3 * $6;
 $8 = 7.4722 + $7;
 $9 = $2 * $8;
 $10 = -6962890.5431000004 + $9;
 $11 = $1 * $10;
 $12 = 450160.39803600003 + $11;
 $13 = (+_fmod($12,1296000.0));
 $14 = $13 * 4.8481368110953598E-6;
 $a = $14;
 $15 = $a;
 STACKTOP = sp;return (+$15);
}
function _eraFapa03($t) {
 $t = +$t;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $a = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = $0;
 $2 = 5.3869099999999999E-6 * $1;
 $3 = 0.024381750000000001 + $2;
 $4 = $0;
 $5 = $3 * $4;
 $a = $5;
 $6 = $a;
 STACKTOP = sp;return (+$6);
}
function _eraFasa03($t) {
 $t = +$t;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $a = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = $0;
 $2 = 21.329910496 * $1;
 $3 = 0.87401675700000003 + $2;
 $4 = (+_fmod($3,6.2831853071795862));
 $a = $4;
 $5 = $a;
 STACKTOP = sp;return (+$5);
}
function _eraFaur03($t) {
 $t = +$t;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $a = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = $0;
 $2 = 7.4781598566999996 * $1;
 $3 = 5.4812938720000002 + $2;
 $4 = (+_fmod($3,6.2831853071795862));
 $a = $4;
 $5 = $a;
 STACKTOP = sp;return (+$5);
}
function _eraFave03($t) {
 $t = +$t;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $a = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = $0;
 $2 = 1021.3285546211 * $1;
 $3 = 3.1761466970000001 + $2;
 $4 = (+_fmod($3,6.2831853071795862));
 $a = $4;
 $5 = $a;
 STACKTOP = sp;return (+$5);
}
function _eraFk52h($r5,$d5,$dr5,$dd5,$px5,$rv5,$rh,$dh,$drh,$ddh,$pxh,$rvh) {
 $r5 = +$r5;
 $d5 = +$d5;
 $dr5 = +$dr5;
 $dd5 = +$dd5;
 $px5 = +$px5;
 $rv5 = +$rv5;
 $rh = $rh|0;
 $dh = $dh|0;
 $drh = $drh|0;
 $ddh = $ddh|0;
 $pxh = $pxh|0;
 $rvh = $rvh|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $pv5 = 0, $pvh = 0, $r5h = 0, $s5h = 0, $vv = 0, $wxp = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pv5 = sp + 192|0;
 $r5h = sp + 120|0;
 $s5h = sp + 96|0;
 $wxp = sp + 72|0;
 $vv = sp + 48|0;
 $pvh = sp;
 $0 = $r5;
 $1 = $d5;
 $2 = $dr5;
 $3 = $dd5;
 $4 = $px5;
 $5 = $rv5;
 $6 = $rh;
 $7 = $dh;
 $8 = $drh;
 $9 = $ddh;
 $10 = $pxh;
 $11 = $rvh;
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 $16 = $4;
 $17 = $5;
 (_eraStarpv($12,$13,$14,$15,$16,$17,$pv5)|0);
 _eraFk5hip($r5h,$s5h);
 $i = 0;
 while(1) {
  $18 = $i;
  $19 = ($18|0)<(3);
  if (!($19)) {
   break;
  }
  $20 = $i;
  $21 = (($20) + 1)|0;
  $i = $21;
  $22 = (($s5h) + ($20<<3)|0);
  $23 = +HEAPF64[$22>>3];
  $24 = $23 / 365.25;
  HEAPF64[$22>>3] = $24;
 }
 _eraRxp($r5h,$pv5,$pvh);
 _eraPxp($pv5,$s5h,$wxp);
 $25 = ((($pv5)) + 24|0);
 _eraPpp($wxp,$25,$vv);
 $26 = ((($pvh)) + 24|0);
 _eraRxp($r5h,$vv,$26);
 $27 = $6;
 $28 = $7;
 $29 = $8;
 $30 = $9;
 $31 = $10;
 $32 = $11;
 (_eraPvstar($pvh,$27,$28,$29,$30,$31,$32)|0);
 STACKTOP = sp;return;
}
function _eraFk5hip($r5h,$s5h) {
 $r5h = $r5h|0;
 $s5h = $s5h|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $epx = 0.0, $epy = 0.0, $epz = 0.0, $omx = 0.0;
 var $omy = 0.0, $omz = 0.0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp + 48|0;
 $0 = $r5h;
 $1 = $s5h;
 $epx = -9.6477922540797668E-8;
 $epy = -4.4118044980967775E-8;
 $epz = 1.1102233297408375E-7;
 $omx = -1.4544410433286077E-9;
 $omy = 2.9088820866572155E-9;
 $omz = 3.3936957677667517E-9;
 $2 = $epx;
 HEAPF64[$v>>3] = $2;
 $3 = $epy;
 $4 = ((($v)) + 8|0);
 HEAPF64[$4>>3] = $3;
 $5 = $epz;
 $6 = ((($v)) + 16|0);
 HEAPF64[$6>>3] = $5;
 $7 = $0;
 _eraRv2m($v,$7);
 $8 = $omx;
 $9 = $1;
 HEAPF64[$9>>3] = $8;
 $10 = $omy;
 $11 = $1;
 $12 = ((($11)) + 8|0);
 HEAPF64[$12>>3] = $10;
 $13 = $omz;
 $14 = $1;
 $15 = ((($14)) + 16|0);
 HEAPF64[$15>>3] = $13;
 STACKTOP = sp;return;
}
function _eraFk5hz($r5,$d5,$date1,$date2,$rh,$dh) {
 $r5 = +$r5;
 $d5 = +$d5;
 $date1 = +$date1;
 $date2 = +$date2;
 $rh = $rh|0;
 $dh = $dh|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $p5 = 0;
 var $p5e = 0, $ph = 0, $r5h = 0, $rst = 0, $s5h = 0, $t = 0.0, $vst = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $p5e = sp + 248|0;
 $r5h = sp + 176|0;
 $s5h = sp + 152|0;
 $vst = sp + 128|0;
 $rst = sp + 56|0;
 $p5 = sp + 32|0;
 $ph = sp + 8|0;
 $w = sp;
 $0 = $r5;
 $1 = $d5;
 $2 = $date1;
 $3 = $date2;
 $4 = $rh;
 $5 = $dh;
 $6 = $2;
 $7 = $6 - 2451545.0;
 $8 = $3;
 $9 = $7 + $8;
 $10 = -$9;
 $11 = $10 / 365.25;
 $t = $11;
 $12 = $0;
 $13 = $1;
 _eraS2c($12,$13,$p5e);
 _eraFk5hip($r5h,$s5h);
 $14 = $t;
 _eraSxp($14,$s5h,$vst);
 _eraRv2m($vst,$rst);
 _eraTrxp($rst,$p5e,$p5);
 _eraRxp($r5h,$p5,$ph);
 $15 = $5;
 _eraC2s($ph,$w,$15);
 $16 = +HEAPF64[$w>>3];
 $17 = (+_eraAnp($16));
 $18 = $4;
 HEAPF64[$18>>3] = $17;
 STACKTOP = sp;return;
}
function _eraFw2m($gamb,$phib,$psi,$eps,$r) {
 $gamb = +$gamb;
 $phib = +$phib;
 $psi = +$psi;
 $eps = +$eps;
 $r = $r|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $gamb;
 $1 = $phib;
 $2 = $psi;
 $3 = $eps;
 $4 = $r;
 $5 = $4;
 _eraIr($5);
 $6 = $0;
 $7 = $4;
 _eraRz($6,$7);
 $8 = $1;
 $9 = $4;
 _eraRx($8,$9);
 $10 = $2;
 $11 = -$10;
 $12 = $4;
 _eraRz($11,$12);
 $13 = $3;
 $14 = -$13;
 $15 = $4;
 _eraRx($14,$15);
 STACKTOP = sp;return;
}
function _eraFw2xy($gamb,$phib,$psi,$eps,$x,$y) {
 $gamb = +$gamb;
 $phib = +$phib;
 $psi = +$psi;
 $eps = +$eps;
 $x = $x|0;
 $y = $y|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $r = sp;
 $0 = $gamb;
 $1 = $phib;
 $2 = $psi;
 $3 = $eps;
 $4 = $x;
 $5 = $y;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 _eraFw2m($6,$7,$8,$9,$r);
 $10 = $4;
 $11 = $5;
 _eraBpn2xy($r,$10,$11);
 STACKTOP = sp;return;
}
function _eraG2icrs($dl,$db,$dr,$dd) {
 $dl = +$dl;
 $db = +$db;
 $dr = $dr|0;
 $dd = $dd|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $r = 0, $v1 = 0, $v2 = 0, dest = 0;
 var label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v1 = sp + 96|0;
 $v2 = sp + 72|0;
 $r = sp;
 $0 = $dl;
 $1 = $db;
 $2 = $dr;
 $3 = $dd;
 dest=$r; src=68232; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $4 = $0;
 $5 = $1;
 _eraS2c($4,$5,$v1);
 _eraTrxp($r,$v1,$v2);
 $6 = $2;
 $7 = $3;
 _eraC2s($v2,$6,$7);
 $8 = $2;
 $9 = +HEAPF64[$8>>3];
 $10 = (+_eraAnp($9));
 $11 = $2;
 HEAPF64[$11>>3] = $10;
 $12 = $3;
 $13 = +HEAPF64[$12>>3];
 $14 = (+_eraAnpm($13));
 $15 = $3;
 HEAPF64[$15>>3] = $14;
 STACKTOP = sp;return;
}
function _eraGc2gd($n,$xyz,$elong,$phi,$height) {
 $n = $n|0;
 $xyz = $xyz|0;
 $elong = $elong|0;
 $phi = $phi|0;
 $height = $height|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $a = 0, $f = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $a = sp + 8|0;
 $f = sp;
 $0 = $n;
 $1 = $xyz;
 $2 = $elong;
 $3 = $phi;
 $4 = $height;
 $5 = $0;
 $6 = (_eraEform($5,$a,$f)|0);
 $j = $6;
 $7 = $j;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = +HEAPF64[$a>>3];
  $10 = +HEAPF64[$f>>3];
  $11 = $1;
  $12 = $2;
  $13 = $3;
  $14 = $4;
  $15 = (_eraGc2gde($9,$10,$11,$12,$13,$14)|0);
  $j = $15;
  $16 = $j;
  $17 = ($16|0)<(0);
  $$ = $17 ? -2 : $15;
  $j = $$;
 }
 $18 = $j;
 $19 = ($18|0)<(0);
 if (!($19)) {
  $23 = $j;
  STACKTOP = sp;return ($23|0);
 }
 $20 = $2;
 HEAPF64[$20>>3] = -1.0E+9;
 $21 = $3;
 HEAPF64[$21>>3] = -1.0E+9;
 $22 = $4;
 HEAPF64[$22>>3] = -1.0E+9;
 $23 = $j;
 STACKTOP = sp;return ($23|0);
}
function _eraGc2gde($a,$f,$xyz,$elong,$phi,$height) {
 $a = +$a;
 $f = +$f;
 $xyz = $xyz|0;
 $elong = $elong|0;
 $phi = $phi|0;
 $height = $height|0;
 var $0 = 0, $1 = 0.0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0;
 var $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0.0;
 var $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0.0, $180 = 0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0;
 var $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0;
 var $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0;
 var $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0;
 var $99 = 0.0, $a0 = 0.0, $a02 = 0.0, $a03 = 0.0, $absz = 0.0, $aeps2 = 0.0, $b = 0.0, $b0 = 0.0, $c0 = 0.0, $c02 = 0.0, $c03 = 0.0, $cc = 0.0, $cc2 = 0.0, $d0 = 0.0, $e2 = 0.0, $e4t = 0.0, $ec = 0.0, $ec2 = 0.0, $f0 = 0.0, $or$cond = 0;
 var $p = 0.0, $p2 = 0.0, $pn = 0.0, $s0 = 0.0, $s02 = 0.0, $s03 = 0.0, $s1 = 0.0, $s12 = 0.0, $x = 0.0, $y = 0.0, $z = 0.0, $zc = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $a;
 $2 = $f;
 $3 = $xyz;
 $4 = $elong;
 $5 = $phi;
 $6 = $height;
 $7 = $2;
 $8 = $7 < 0.0;
 $9 = $2;
 $10 = $9 >= 1.0;
 $or$cond = $8 | $10;
 if ($or$cond) {
  $0 = -1;
  $180 = $0;
  STACKTOP = sp;return ($180|0);
 }
 $11 = $1;
 $12 = $11 <= 0.0;
 if ($12) {
  $0 = -2;
  $180 = $0;
  STACKTOP = sp;return ($180|0);
 }
 $13 = $1;
 $14 = $1;
 $15 = $13 * $14;
 $16 = $15 * 1.0000000000000001E-32;
 $aeps2 = $16;
 $17 = $2;
 $18 = 2.0 - $17;
 $19 = $2;
 $20 = $18 * $19;
 $e2 = $20;
 $21 = $e2;
 $22 = $e2;
 $23 = $21 * $22;
 $24 = $23 * 1.5;
 $e4t = $24;
 $25 = $e2;
 $26 = 1.0 - $25;
 $ec2 = $26;
 $27 = $ec2;
 $28 = $27 <= 0.0;
 if ($28) {
  $0 = -1;
  $180 = $0;
  STACKTOP = sp;return ($180|0);
 }
 $29 = $ec2;
 $30 = (+Math_sqrt((+$29)));
 $ec = $30;
 $31 = $1;
 $32 = $ec;
 $33 = $31 * $32;
 $b = $33;
 $34 = $3;
 $35 = +HEAPF64[$34>>3];
 $x = $35;
 $36 = $3;
 $37 = ((($36)) + 8|0);
 $38 = +HEAPF64[$37>>3];
 $y = $38;
 $39 = $3;
 $40 = ((($39)) + 16|0);
 $41 = +HEAPF64[$40>>3];
 $z = $41;
 $42 = $x;
 $43 = $x;
 $44 = $42 * $43;
 $45 = $y;
 $46 = $y;
 $47 = $45 * $46;
 $48 = $44 + $47;
 $p2 = $48;
 $49 = $p2;
 $50 = $49 > 0.0;
 if ($50) {
  $51 = $y;
  $52 = $x;
  $53 = (+Math_atan2((+$51),(+$52)));
  $55 = $53;
 } else {
  $55 = 0.0;
 }
 $54 = $4;
 HEAPF64[$54>>3] = $55;
 $56 = $z;
 $57 = (+Math_abs((+$56)));
 $absz = $57;
 $58 = $p2;
 $59 = $aeps2;
 $60 = $58 > $59;
 if ($60) {
  $61 = $p2;
  $62 = (+Math_sqrt((+$61)));
  $p = $62;
  $63 = $absz;
  $64 = $1;
  $65 = $63 / $64;
  $s0 = $65;
  $66 = $p;
  $67 = $1;
  $68 = $66 / $67;
  $pn = $68;
  $69 = $ec;
  $70 = $s0;
  $71 = $69 * $70;
  $zc = $71;
  $72 = $ec;
  $73 = $pn;
  $74 = $72 * $73;
  $c0 = $74;
  $75 = $c0;
  $76 = $c0;
  $77 = $75 * $76;
  $c02 = $77;
  $78 = $c02;
  $79 = $c0;
  $80 = $78 * $79;
  $c03 = $80;
  $81 = $s0;
  $82 = $s0;
  $83 = $81 * $82;
  $s02 = $83;
  $84 = $s02;
  $85 = $s0;
  $86 = $84 * $85;
  $s03 = $86;
  $87 = $c02;
  $88 = $s02;
  $89 = $87 + $88;
  $a02 = $89;
  $90 = $a02;
  $91 = (+Math_sqrt((+$90)));
  $a0 = $91;
  $92 = $a02;
  $93 = $a0;
  $94 = $92 * $93;
  $a03 = $94;
  $95 = $zc;
  $96 = $a03;
  $97 = $95 * $96;
  $98 = $e2;
  $99 = $s03;
  $100 = $98 * $99;
  $101 = $97 + $100;
  $d0 = $101;
  $102 = $pn;
  $103 = $a03;
  $104 = $102 * $103;
  $105 = $e2;
  $106 = $c03;
  $107 = $105 * $106;
  $108 = $104 - $107;
  $f0 = $108;
  $109 = $e4t;
  $110 = $s02;
  $111 = $109 * $110;
  $112 = $c02;
  $113 = $111 * $112;
  $114 = $pn;
  $115 = $113 * $114;
  $116 = $a0;
  $117 = $ec;
  $118 = $116 - $117;
  $119 = $115 * $118;
  $b0 = $119;
  $120 = $d0;
  $121 = $f0;
  $122 = $120 * $121;
  $123 = $b0;
  $124 = $s0;
  $125 = $123 * $124;
  $126 = $122 - $125;
  $s1 = $126;
  $127 = $ec;
  $128 = $f0;
  $129 = $f0;
  $130 = $128 * $129;
  $131 = $b0;
  $132 = $c0;
  $133 = $131 * $132;
  $134 = $130 - $133;
  $135 = $127 * $134;
  $cc = $135;
  $136 = $s1;
  $137 = $cc;
  $138 = $136 / $137;
  $139 = (+Math_atan((+$138)));
  $140 = $5;
  HEAPF64[$140>>3] = $139;
  $141 = $s1;
  $142 = $s1;
  $143 = $141 * $142;
  $s12 = $143;
  $144 = $cc;
  $145 = $cc;
  $146 = $144 * $145;
  $cc2 = $146;
  $147 = $p;
  $148 = $cc;
  $149 = $147 * $148;
  $150 = $absz;
  $151 = $s1;
  $152 = $150 * $151;
  $153 = $149 + $152;
  $154 = $1;
  $155 = $ec2;
  $156 = $s12;
  $157 = $155 * $156;
  $158 = $cc2;
  $159 = $157 + $158;
  $160 = (+Math_sqrt((+$159)));
  $161 = $154 * $160;
  $162 = $153 - $161;
  $163 = $s12;
  $164 = $cc2;
  $165 = $163 + $164;
  $166 = (+Math_sqrt((+$165)));
  $167 = $162 / $166;
  $168 = $6;
  HEAPF64[$168>>3] = $167;
 } else {
  $169 = $5;
  HEAPF64[$169>>3] = 1.5707963267948966;
  $170 = $absz;
  $171 = $b;
  $172 = $170 - $171;
  $173 = $6;
  HEAPF64[$173>>3] = $172;
 }
 $174 = $z;
 $175 = $174 < 0.0;
 if ($175) {
  $176 = $5;
  $177 = +HEAPF64[$176>>3];
  $178 = -$177;
  $179 = $5;
  HEAPF64[$179>>3] = $178;
 }
 $0 = 0;
 $180 = $0;
 STACKTOP = sp;return ($180|0);
}
function _eraGd2gc($n,$elong,$phi,$height,$xyz) {
 $n = $n|0;
 $elong = +$elong;
 $phi = +$phi;
 $height = +$height;
 $xyz = $xyz|0;
 var $$ = 0, $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0.0, $a = 0, $f = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $a = sp + 8|0;
 $f = sp;
 $0 = $n;
 $1 = $elong;
 $2 = $phi;
 $3 = $height;
 $4 = $xyz;
 $5 = $0;
 $6 = (_eraEform($5,$a,$f)|0);
 $j = $6;
 $7 = $j;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = +HEAPF64[$a>>3];
  $10 = +HEAPF64[$f>>3];
  $11 = $1;
  $12 = $2;
  $13 = $3;
  $14 = $4;
  $15 = (_eraGd2gce($9,$10,$11,$12,$13,$14)|0);
  $j = $15;
  $16 = $j;
  $17 = ($16|0)!=(0);
  $$ = $17 ? -2 : $15;
  $j = $$;
 }
 $18 = $j;
 $19 = ($18|0)!=(0);
 if (!($19)) {
  $21 = $j;
  STACKTOP = sp;return ($21|0);
 }
 $20 = $4;
 _eraZp($20);
 $21 = $j;
 STACKTOP = sp;return ($21|0);
}
function _eraGd2gce($a,$f,$elong,$phi,$height,$xyz) {
 $a = +$a;
 $f = +$f;
 $elong = +$elong;
 $phi = +$phi;
 $height = +$height;
 $xyz = $xyz|0;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $ac = 0.0, $as = 0.0;
 var $cp = 0.0, $d = 0.0, $r = 0.0, $sp = 0.0, $w = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $a;
 $2 = $f;
 $3 = $elong;
 $4 = $phi;
 $5 = $height;
 $6 = $xyz;
 $7 = $4;
 $8 = (+Math_sin((+$7)));
 $sp = $8;
 $9 = $4;
 $10 = (+Math_cos((+$9)));
 $cp = $10;
 $11 = $2;
 $12 = 1.0 - $11;
 $w = $12;
 $13 = $w;
 $14 = $w;
 $15 = $13 * $14;
 $w = $15;
 $16 = $cp;
 $17 = $cp;
 $18 = $16 * $17;
 $19 = $w;
 $20 = $sp;
 $21 = $19 * $20;
 $22 = $sp;
 $23 = $21 * $22;
 $24 = $18 + $23;
 $d = $24;
 $25 = $d;
 $26 = $25 <= 0.0;
 if ($26) {
  $0 = -1;
  $57 = $0;
  STACKTOP = sp;return ($57|0);
 } else {
  $27 = $1;
  $28 = $d;
  $29 = (+Math_sqrt((+$28)));
  $30 = $27 / $29;
  $ac = $30;
  $31 = $w;
  $32 = $ac;
  $33 = $31 * $32;
  $as = $33;
  $34 = $ac;
  $35 = $5;
  $36 = $34 + $35;
  $37 = $cp;
  $38 = $36 * $37;
  $r = $38;
  $39 = $r;
  $40 = $3;
  $41 = (+Math_cos((+$40)));
  $42 = $39 * $41;
  $43 = $6;
  HEAPF64[$43>>3] = $42;
  $44 = $r;
  $45 = $3;
  $46 = (+Math_sin((+$45)));
  $47 = $44 * $46;
  $48 = $6;
  $49 = ((($48)) + 8|0);
  HEAPF64[$49>>3] = $47;
  $50 = $as;
  $51 = $5;
  $52 = $50 + $51;
  $53 = $sp;
  $54 = $52 * $53;
  $55 = $6;
  $56 = ((($55)) + 16|0);
  HEAPF64[$56>>3] = $54;
  $0 = 0;
  $57 = $0;
  STACKTOP = sp;return ($57|0);
 }
 return (0)|0;
}
function _eraGmst00($uta,$utb,$tta,$ttb) {
 $uta = +$uta;
 $utb = +$utb;
 $tta = +$tta;
 $ttb = +$ttb;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $gmst = 0.0, $t = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $uta;
 $1 = $utb;
 $2 = $tta;
 $3 = $ttb;
 $4 = $2;
 $5 = $4 - 2451545.0;
 $6 = $3;
 $7 = $5 + $6;
 $8 = $7 / 36525.0;
 $t = $8;
 $9 = $0;
 $10 = $1;
 $11 = (+_eraEra00($9,$10));
 $12 = $t;
 $13 = 1.8819999999999999E-5 * $12;
 $14 = -9.344E-5 + $13;
 $15 = $t;
 $16 = $14 * $15;
 $17 = 1.39667721 + $16;
 $18 = $t;
 $19 = $17 * $18;
 $20 = 4612.15739966 + $19;
 $21 = $t;
 $22 = $20 * $21;
 $23 = 0.014506 + $22;
 $24 = $23 * 4.8481368110953598E-6;
 $25 = $11 + $24;
 $26 = (+_eraAnp($25));
 $gmst = $26;
 $27 = $gmst;
 STACKTOP = sp;return (+$27);
}
function _eraGmst06($uta,$utb,$tta,$ttb) {
 $uta = +$uta;
 $utb = +$utb;
 $tta = +$tta;
 $ttb = +$ttb;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $gmst = 0.0, $t = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $uta;
 $1 = $utb;
 $2 = $tta;
 $3 = $ttb;
 $4 = $2;
 $5 = $4 - 2451545.0;
 $6 = $3;
 $7 = $5 + $6;
 $8 = $7 / 36525.0;
 $t = $8;
 $9 = $0;
 $10 = $1;
 $11 = (+_eraEra00($9,$10));
 $12 = $t;
 $13 = -3.6799999999999999E-8 * $12;
 $14 = -2.9955999999999999E-5 + $13;
 $15 = $t;
 $16 = $14 * $15;
 $17 = -4.4000000000000002E-7 + $16;
 $18 = $t;
 $19 = $17 * $18;
 $20 = 1.3915816999999999 + $19;
 $21 = $t;
 $22 = $20 * $21;
 $23 = 4612.1565339999997 + $22;
 $24 = $t;
 $25 = $23 * $24;
 $26 = 0.014506 + $25;
 $27 = $26 * 4.8481368110953598E-6;
 $28 = $11 + $27;
 $29 = (+_eraAnp($28));
 $gmst = $29;
 $30 = $gmst;
 STACKTOP = sp;return (+$30);
}
function _eraGmst82($dj1,$dj2) {
 $dj1 = +$dj1;
 $dj2 = +$dj2;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $A = 0.0, $B = 0.0;
 var $C = 0.0, $D = 0.0, $d1 = 0.0, $d2 = 0.0, $f = 0.0, $gmst = 0.0, $t = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dj1;
 $1 = $dj2;
 $A = -19089.451590000001;
 $B = 8640184.8128660005;
 $C = 0.093104000000000006;
 $D = -6.1999999999999999E-6;
 $2 = $0;
 $3 = $1;
 $4 = $2 < $3;
 if ($4) {
  $5 = $0;
  $d1 = $5;
  $6 = $1;
  $d2 = $6;
 } else {
  $7 = $1;
  $d1 = $7;
  $8 = $0;
  $d2 = $8;
 }
 $9 = $d1;
 $10 = $d2;
 $11 = $10 - 2451545.0;
 $12 = $9 + $11;
 $13 = $12 / 36525.0;
 $t = $13;
 $14 = $d1;
 $15 = (+_fmod($14,1.0));
 $16 = $d2;
 $17 = (+_fmod($16,1.0));
 $18 = $15 + $17;
 $19 = 86400.0 * $18;
 $f = $19;
 $20 = $A;
 $21 = $B;
 $22 = $C;
 $23 = $D;
 $24 = $t;
 $25 = $23 * $24;
 $26 = $22 + $25;
 $27 = $t;
 $28 = $26 * $27;
 $29 = $21 + $28;
 $30 = $t;
 $31 = $29 * $30;
 $32 = $20 + $31;
 $33 = $f;
 $34 = $32 + $33;
 $35 = 7.2722052166430395E-5 * $34;
 $36 = (+_eraAnp($35));
 $gmst = $36;
 $37 = $gmst;
 STACKTOP = sp;return (+$37);
}
function _eraGst00a($uta,$utb,$tta,$ttb) {
 $uta = +$uta;
 $utb = +$utb;
 $tta = +$tta;
 $ttb = +$ttb;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $ee00a = 0.0, $gmst00 = 0.0, $gst = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $uta;
 $1 = $utb;
 $2 = $tta;
 $3 = $ttb;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = (+_eraGmst00($4,$5,$6,$7));
 $gmst00 = $8;
 $9 = $2;
 $10 = $3;
 $11 = (+_eraEe00a($9,$10));
 $ee00a = $11;
 $12 = $gmst00;
 $13 = $ee00a;
 $14 = $12 + $13;
 $15 = (+_eraAnp($14));
 $gst = $15;
 $16 = $gst;
 STACKTOP = sp;return (+$16);
}
function _eraGst00b($uta,$utb) {
 $uta = +$uta;
 $utb = +$utb;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $ee00b = 0.0, $gmst00 = 0.0, $gst = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $uta;
 $1 = $utb;
 $2 = $0;
 $3 = $1;
 $4 = $0;
 $5 = $1;
 $6 = (+_eraGmst00($2,$3,$4,$5));
 $gmst00 = $6;
 $7 = $0;
 $8 = $1;
 $9 = (+_eraEe00b($7,$8));
 $ee00b = $9;
 $10 = $gmst00;
 $11 = $ee00b;
 $12 = $10 + $11;
 $13 = (+_eraAnp($12));
 $gst = $13;
 $14 = $gst;
 STACKTOP = sp;return (+$14);
}
function _eraGst06a($uta,$utb,$tta,$ttb) {
 $uta = +$uta;
 $utb = +$utb;
 $tta = +$tta;
 $ttb = +$ttb;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $gst = 0.0, $rnpb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $rnpb = sp + 8|0;
 $0 = $uta;
 $1 = $utb;
 $2 = $tta;
 $3 = $ttb;
 $4 = $2;
 $5 = $3;
 _eraPnm06a($4,$5,$rnpb);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = (+_eraGst06($6,$7,$8,$9,$rnpb));
 $gst = $10;
 $11 = $gst;
 STACKTOP = sp;return (+$11);
}
function _eraGst06($uta,$utb,$tta,$ttb,$rnpb) {
 $uta = +$uta;
 $utb = +$utb;
 $tta = +$tta;
 $ttb = +$ttb;
 $rnpb = $rnpb|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0;
 var $8 = 0.0, $9 = 0.0, $eors = 0.0, $era = 0.0, $gst = 0.0, $s = 0.0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x = sp + 40|0;
 $y = sp + 32|0;
 $0 = $uta;
 $1 = $utb;
 $2 = $tta;
 $3 = $ttb;
 $4 = $rnpb;
 $5 = $4;
 _eraBpn2xy($5,$x,$y);
 $6 = $2;
 $7 = $3;
 $8 = +HEAPF64[$x>>3];
 $9 = +HEAPF64[$y>>3];
 $10 = (+_eraS06($6,$7,$8,$9));
 $s = $10;
 $11 = $0;
 $12 = $1;
 $13 = (+_eraEra00($11,$12));
 $era = $13;
 $14 = $4;
 $15 = $s;
 $16 = (+_eraEors($14,$15));
 $eors = $16;
 $17 = $era;
 $18 = $eors;
 $19 = $17 - $18;
 $20 = (+_eraAnp($19));
 $gst = $20;
 $21 = $gst;
 STACKTOP = sp;return (+$21);
}
function _eraGst94($uta,$utb) {
 $uta = +$uta;
 $utb = +$utb;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $eqeq94 = 0.0, $gmst82 = 0.0, $gst = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $uta;
 $1 = $utb;
 $2 = $0;
 $3 = $1;
 $4 = (+_eraGmst82($2,$3));
 $gmst82 = $4;
 $5 = $0;
 $6 = $1;
 $7 = (+_eraEqeq94($5,$6));
 $eqeq94 = $7;
 $8 = $gmst82;
 $9 = $eqeq94;
 $10 = $8 + $9;
 $11 = (+_eraAnp($10));
 $gst = $11;
 $12 = $gst;
 STACKTOP = sp;return (+$12);
}
function _eraH2fk5($rh,$dh,$drh,$ddh,$pxh,$rvh,$r5,$d5,$dr5,$dd5,$px5,$rv5) {
 $rh = +$rh;
 $dh = +$dh;
 $drh = +$drh;
 $ddh = +$ddh;
 $pxh = +$pxh;
 $rvh = +$rvh;
 $r5 = $r5|0;
 $d5 = $d5|0;
 $dr5 = $dr5|0;
 $dd5 = $dd5|0;
 $px5 = $px5|0;
 $rv5 = $rv5|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $pv5 = 0, $pvh = 0, $r5h = 0, $s5h = 0, $sh = 0, $vv = 0;
 var $wxp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pvh = sp + 216|0;
 $r5h = sp + 144|0;
 $s5h = sp + 120|0;
 $sh = sp + 96|0;
 $wxp = sp + 72|0;
 $vv = sp + 48|0;
 $pv5 = sp;
 $0 = $rh;
 $1 = $dh;
 $2 = $drh;
 $3 = $ddh;
 $4 = $pxh;
 $5 = $rvh;
 $6 = $r5;
 $7 = $d5;
 $8 = $dr5;
 $9 = $dd5;
 $10 = $px5;
 $11 = $rv5;
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 $16 = $4;
 $17 = $5;
 (_eraStarpv($12,$13,$14,$15,$16,$17,$pvh)|0);
 _eraFk5hip($r5h,$s5h);
 $i = 0;
 while(1) {
  $18 = $i;
  $19 = ($18|0)<(3);
  if (!($19)) {
   break;
  }
  $20 = $i;
  $21 = (($20) + 1)|0;
  $i = $21;
  $22 = (($s5h) + ($20<<3)|0);
  $23 = +HEAPF64[$22>>3];
  $24 = $23 / 365.25;
  HEAPF64[$22>>3] = $24;
 }
 _eraRxp($r5h,$s5h,$sh);
 _eraTrxp($r5h,$pvh,$pv5);
 _eraPxp($pvh,$sh,$wxp);
 $25 = ((($pvh)) + 24|0);
 _eraPmp($25,$wxp,$vv);
 $26 = ((($pv5)) + 24|0);
 _eraTrxp($r5h,$vv,$26);
 $27 = $6;
 $28 = $7;
 $29 = $8;
 $30 = $9;
 $31 = $10;
 $32 = $11;
 (_eraPvstar($pv5,$27,$28,$29,$30,$31,$32)|0);
 STACKTOP = sp;return;
}
function _eraHfk5z($rh,$dh,$date1,$date2,$r5,$d5,$dr5,$dd5) {
 $rh = +$rh;
 $dh = +$dh;
 $date1 = +$date1;
 $date2 = +$date2;
 $r5 = $r5|0;
 $d5 = $d5|0;
 $dr5 = $dr5|0;
 $dd5 = $dd5|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0.0, $9 = 0.0, $ph = 0, $pv5e = 0, $r = 0, $r5h = 0, $r5ht = 0, $rst = 0, $s5h = 0, $sh = 0, $t = 0.0, $v = 0, $vst = 0, $vv = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 464|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ph = sp + 384|0;
 $r5h = sp + 312|0;
 $s5h = sp + 288|0;
 $sh = sp + 264|0;
 $vst = sp + 240|0;
 $rst = sp + 168|0;
 $r5ht = sp + 96|0;
 $pv5e = sp + 48|0;
 $vv = sp + 24|0;
 $w = sp + 16|0;
 $r = sp + 8|0;
 $v = sp;
 $0 = $rh;
 $1 = $dh;
 $2 = $date1;
 $3 = $date2;
 $4 = $r5;
 $5 = $d5;
 $6 = $dr5;
 $7 = $dd5;
 $8 = $2;
 $9 = $8 - 2451545.0;
 $10 = $3;
 $11 = $9 + $10;
 $12 = $11 / 365.25;
 $t = $12;
 $13 = $0;
 $14 = $1;
 _eraS2c($13,$14,$ph);
 _eraFk5hip($r5h,$s5h);
 _eraRxp($r5h,$s5h,$sh);
 $15 = $t;
 _eraSxp($15,$s5h,$vst);
 _eraRv2m($vst,$rst);
 _eraRxr($r5h,$rst,$r5ht);
 _eraTrxp($r5ht,$ph,$pv5e);
 _eraPxp($sh,$ph,$vv);
 $16 = ((($pv5e)) + 24|0);
 _eraTrxp($r5ht,$vv,$16);
 $17 = $5;
 $18 = $6;
 $19 = $7;
 _eraPv2s($pv5e,$w,$17,$r,$18,$19,$v);
 $20 = +HEAPF64[$w>>3];
 $21 = (+_eraAnp($20));
 $22 = $4;
 HEAPF64[$22>>3] = $21;
 STACKTOP = sp;return;
}
function _eraIcrs2g($dr,$dd,$dl,$db) {
 $dr = +$dr;
 $dd = +$dd;
 $dl = $dl|0;
 $db = $db|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $r = 0, $v1 = 0, $v2 = 0, dest = 0;
 var label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v1 = sp + 96|0;
 $v2 = sp + 72|0;
 $r = sp;
 $0 = $dr;
 $1 = $dd;
 $2 = $dl;
 $3 = $db;
 dest=$r; src=68232; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $4 = $0;
 $5 = $1;
 _eraS2c($4,$5,$v1);
 _eraRxp($r,$v1,$v2);
 $6 = $2;
 $7 = $3;
 _eraC2s($v2,$6,$7);
 $8 = $2;
 $9 = +HEAPF64[$8>>3];
 $10 = (+_eraAnp($9));
 $11 = $2;
 HEAPF64[$11>>3] = $10;
 $12 = $3;
 $13 = +HEAPF64[$12>>3];
 $14 = (+_eraAnpm($13));
 $15 = $3;
 HEAPF64[$15>>3] = $14;
 STACKTOP = sp;return;
}
function _eraIr($r) {
 $r = $r|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $r;
 $1 = $0;
 HEAPF64[$1>>3] = 1.0;
 $2 = $0;
 $3 = ((($2)) + 8|0);
 HEAPF64[$3>>3] = 0.0;
 $4 = $0;
 $5 = ((($4)) + 16|0);
 HEAPF64[$5>>3] = 0.0;
 $6 = $0;
 $7 = ((($6)) + 24|0);
 HEAPF64[$7>>3] = 0.0;
 $8 = $0;
 $9 = ((($8)) + 24|0);
 $10 = ((($9)) + 8|0);
 HEAPF64[$10>>3] = 1.0;
 $11 = $0;
 $12 = ((($11)) + 24|0);
 $13 = ((($12)) + 16|0);
 HEAPF64[$13>>3] = 0.0;
 $14 = $0;
 $15 = ((($14)) + 48|0);
 HEAPF64[$15>>3] = 0.0;
 $16 = $0;
 $17 = ((($16)) + 48|0);
 $18 = ((($17)) + 8|0);
 HEAPF64[$18>>3] = 0.0;
 $19 = $0;
 $20 = ((($19)) + 48|0);
 $21 = ((($20)) + 16|0);
 HEAPF64[$21>>3] = 1.0;
 STACKTOP = sp;return;
}
function _eraJd2cal($dj1,$dj2,$iy,$im,$id,$fd) {
 $dj1 = +$dj1;
 $dj2 = +$dj2;
 $iy = $iy|0;
 $im = $im|0;
 $id = $id|0;
 $fd = $fd|0;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0;
 var $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0;
 var $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $DJMAX = 0.0, $DJMIN = 0.0, $d = 0.0, $d1 = 0.0, $d2 = 0.0, $dj = 0.0, $f = 0.0, $f1 = 0.0, $f2 = 0.0, $i = 0, $jd = 0, $k = 0, $l = 0, $n = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $dj1;
 $2 = $dj2;
 $3 = $iy;
 $4 = $im;
 $5 = $id;
 $6 = $fd;
 $DJMIN = -68569.5;
 $DJMAX = 1.0E+9;
 $7 = $1;
 $8 = $2;
 $9 = $7 + $8;
 $dj = $9;
 $10 = $dj;
 $11 = $10 < -68569.5;
 $12 = $dj;
 $13 = $12 > 1.0E+9;
 $or$cond = $11 | $13;
 if ($or$cond) {
  $0 = -1;
  $103 = $0;
  STACKTOP = sp;return ($103|0);
 }
 $14 = $1;
 $15 = $2;
 $16 = $14 >= $15;
 if ($16) {
  $17 = $1;
  $d1 = $17;
  $18 = $2;
  $d2 = $18;
 } else {
  $19 = $2;
  $d1 = $19;
  $20 = $1;
  $d2 = $20;
 }
 $21 = $d2;
 $22 = $21 - 0.5;
 $d2 = $22;
 $23 = $d1;
 $24 = (+_fmod($23,1.0));
 $f1 = $24;
 $25 = $d2;
 $26 = (+_fmod($25,1.0));
 $f2 = $26;
 $27 = $f1;
 $28 = $f2;
 $29 = $27 + $28;
 $30 = (+_fmod($29,1.0));
 $f = $30;
 $31 = $f;
 $32 = $31 < 0.0;
 if ($32) {
  $33 = $f;
  $34 = $33 + 1.0;
  $f = $34;
 }
 $35 = $d1;
 $36 = $f1;
 $37 = $35 - $36;
 $38 = (+Math_floor((+$37)));
 $39 = $d2;
 $40 = $f2;
 $41 = $39 - $40;
 $42 = (+Math_floor((+$41)));
 $43 = $38 + $42;
 $44 = $f1;
 $45 = $f2;
 $46 = $44 + $45;
 $47 = $f;
 $48 = $46 - $47;
 $49 = (+Math_floor((+$48)));
 $50 = $43 + $49;
 $d = $50;
 $51 = $d;
 $52 = (+Math_floor((+$51)));
 $53 = (~~(($52)));
 $54 = (($53) + 1)|0;
 $jd = $54;
 $55 = $jd;
 $56 = (($55) + 68569)|0;
 $l = $56;
 $57 = $l;
 $58 = $57<<2;
 $59 = (($58|0) / 146097)&-1;
 $n = $59;
 $60 = $n;
 $61 = ($60*146097)|0;
 $62 = (($61) + 3)|0;
 $63 = (($62|0) / 4)&-1;
 $64 = $l;
 $65 = (($64) - ($63))|0;
 $l = $65;
 $66 = $l;
 $67 = (($66) + 1)|0;
 $68 = ($67*4000)|0;
 $69 = (($68|0) / 1461001)&-1;
 $i = $69;
 $70 = $i;
 $71 = ($70*1461)|0;
 $72 = (($71|0) / 4)&-1;
 $73 = (($72) - 31)|0;
 $74 = $l;
 $75 = (($74) - ($73))|0;
 $l = $75;
 $76 = $l;
 $77 = ($76*80)|0;
 $78 = (($77|0) / 2447)&-1;
 $k = $78;
 $79 = $l;
 $80 = $k;
 $81 = ($80*2447)|0;
 $82 = (($81|0) / 80)&-1;
 $83 = (($79) - ($82))|0;
 $84 = $5;
 HEAP32[$84>>2] = $83;
 $85 = $k;
 $86 = (($85|0) / 11)&-1;
 $l = $86;
 $87 = $k;
 $88 = (($87) + 2)|0;
 $89 = $l;
 $90 = ($89*12)|0;
 $91 = (($88) - ($90))|0;
 $92 = $4;
 HEAP32[$92>>2] = $91;
 $93 = $n;
 $94 = (($93) - 49)|0;
 $95 = ($94*100)|0;
 $96 = $i;
 $97 = (($95) + ($96))|0;
 $98 = $l;
 $99 = (($97) + ($98))|0;
 $100 = $3;
 HEAP32[$100>>2] = $99;
 $101 = $f;
 $102 = $6;
 HEAPF64[$102>>3] = $101;
 $0 = 0;
 $103 = $0;
 STACKTOP = sp;return ($103|0);
}
function _eraJdcalf($ndp,$dj1,$dj2,$iymdf) {
 $ndp = $ndp|0;
 $dj1 = +$dj1;
 $dj2 = +$dj2;
 $iymdf = $iymdf|0;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0.0, $d1 = 0.0, $d2 = 0.0, $denom = 0.0, $f = 0, $f1 = 0.0, $f2 = 0.0, $j = 0, $js = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 $0 = $ndp;
 $1 = $dj1;
 $2 = $dj2;
 $3 = $iymdf;
 $4 = $0;
 $5 = ($4|0)>=(0);
 $6 = $0;
 $7 = ($6|0)<=(9);
 $or$cond = $5 & $7;
 if ($or$cond) {
  $j = 0;
  $8 = $0;
  $9 = (+($8|0));
  $10 = (+Math_pow(10.0,(+$9)));
  $denom = $10;
 } else {
  $j = 1;
  $denom = 1.0;
 }
 $11 = $1;
 $12 = $2;
 $13 = $11 >= $12;
 if ($13) {
  $14 = $1;
  $d1 = $14;
  $15 = $2;
  $d2 = $15;
 } else {
  $16 = $2;
  $d1 = $16;
  $17 = $1;
  $d2 = $17;
 }
 $18 = $d2;
 $19 = $18 - 0.5;
 $d2 = $19;
 $20 = $d1;
 $21 = (+_fmod($20,1.0));
 $f1 = $21;
 $22 = $d2;
 $23 = (+_fmod($22,1.0));
 $f2 = $23;
 $24 = $d1;
 $25 = $f1;
 $26 = $24 - $25;
 $27 = (+Math_floor((+$26)));
 $d1 = $27;
 $28 = $d2;
 $29 = $f2;
 $30 = $28 - $29;
 $31 = (+Math_floor((+$30)));
 $d2 = $31;
 $32 = $f1;
 $33 = $f2;
 $34 = $32 + $33;
 $35 = $denom;
 $36 = $34 * $35;
 $37 = $36 + 0.5;
 $38 = (+Math_floor((+$37)));
 $39 = $denom;
 $40 = $38 / $39;
 HEAPF64[$f>>3] = $40;
 $41 = +HEAPF64[$f>>3];
 $42 = $41 + 0.5;
 $43 = $d2;
 $44 = $43 + $42;
 $d2 = $44;
 $45 = $d1;
 $46 = $d2;
 $47 = $3;
 $48 = $3;
 $49 = ((($48)) + 4|0);
 $50 = $3;
 $51 = ((($50)) + 8|0);
 $52 = (_eraJd2cal($45,$46,$47,$49,$51,$f)|0);
 $js = $52;
 $53 = $js;
 $54 = ($53|0)==(0);
 if ($54) {
  $55 = +HEAPF64[$f>>3];
  $56 = $denom;
  $57 = $55 * $56;
  $58 = (~~(($57)));
  $59 = $3;
  $60 = ((($59)) + 12|0);
  HEAP32[$60>>2] = $58;
  $62 = $j;
  STACKTOP = sp;return ($62|0);
 } else {
  $61 = $js;
  $j = $61;
  $62 = $j;
  STACKTOP = sp;return ($62|0);
 }
 return (0)|0;
}
function _eraLd($bm,$p,$q,$e,$em,$dlim,$p1) {
 $bm = +$bm;
 $p = $p|0;
 $q = $q|0;
 $e = $e|0;
 $em = +$em;
 $dlim = +$dlim;
 $p1 = $p1|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eq = 0, $i = 0, $peq = 0, $qdqpe = 0.0, $qpe = 0;
 var $w = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $qpe = sp + 64|0;
 $eq = sp + 24|0;
 $peq = sp;
 $0 = $bm;
 $1 = $p;
 $2 = $q;
 $3 = $e;
 $4 = $em;
 $5 = $dlim;
 $6 = $p1;
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = ($7|0)<(3);
  if (!($8)) {
   break;
  }
  $9 = $i;
  $10 = $2;
  $11 = (($10) + ($9<<3)|0);
  $12 = +HEAPF64[$11>>3];
  $13 = $i;
  $14 = $3;
  $15 = (($14) + ($13<<3)|0);
  $16 = +HEAPF64[$15>>3];
  $17 = $12 + $16;
  $18 = $i;
  $19 = (($qpe) + ($18<<3)|0);
  HEAPF64[$19>>3] = $17;
  $20 = $i;
  $21 = (($20) + 1)|0;
  $i = $21;
 }
 $22 = $2;
 $23 = (+_eraPdp($22,$qpe));
 $qdqpe = $23;
 $24 = $0;
 $25 = $24 * 1.9741257433600001E-8;
 $26 = $4;
 $27 = $25 / $26;
 $28 = $qdqpe;
 $29 = $5;
 $30 = $28 > $29;
 $31 = $qdqpe;
 $32 = $5;
 $33 = $30 ? $31 : $32;
 $34 = $27 / $33;
 $w = $34;
 $35 = $3;
 $36 = $2;
 _eraPxp($35,$36,$eq);
 $37 = $1;
 _eraPxp($37,$eq,$peq);
 $i = 0;
 while(1) {
  $38 = $i;
  $39 = ($38|0)<(3);
  if (!($39)) {
   break;
  }
  $40 = $i;
  $41 = $1;
  $42 = (($41) + ($40<<3)|0);
  $43 = +HEAPF64[$42>>3];
  $44 = $w;
  $45 = $i;
  $46 = (($peq) + ($45<<3)|0);
  $47 = +HEAPF64[$46>>3];
  $48 = $44 * $47;
  $49 = $43 + $48;
  $50 = $i;
  $51 = $6;
  $52 = (($51) + ($50<<3)|0);
  HEAPF64[$52>>3] = $49;
  $53 = $i;
  $54 = (($53) + 1)|0;
  $i = $54;
 }
 STACKTOP = sp;return;
}
function _eraLdn($n,$b,$ob,$sc,$sn) {
 $n = $n|0;
 $b = $b|0;
 $ob = $ob|0;
 $sc = $sc|0;
 $sn = $sn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $CR = 0.0, $dt = 0.0, $e = 0, $em = 0, $ev = 0, $i = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp + 64|0;
 $ev = sp + 32|0;
 $em = sp + 24|0;
 $e = sp;
 $0 = $n;
 $1 = $b;
 $2 = $ob;
 $3 = $sc;
 $4 = $sn;
 $CR = 0.0057755183101851851;
 $5 = $3;
 $6 = $4;
 _eraCp($5,$6);
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = $0;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $2;
  $11 = $i;
  $12 = $1;
  $13 = (($12) + ($11<<6)|0);
  $14 = ((($13)) + 16|0);
  _eraPmp($10,$14,$v);
  $15 = $4;
  $16 = (+_eraPdp($15,$v));
  $17 = $16 * 0.0057755183101851851;
  $dt = $17;
  $18 = $dt;
  $19 = $18 < 0.0;
  $20 = $dt;
  $21 = $19 ? $20 : 0.0;
  $dt = $21;
  $22 = $dt;
  $23 = -$22;
  $24 = $i;
  $25 = $1;
  $26 = (($25) + ($24<<6)|0);
  $27 = ((($26)) + 16|0);
  $28 = ((($27)) + 24|0);
  _eraPpsp($v,$23,$28,$ev);
  _eraPn($ev,$em,$e);
  $29 = $i;
  $30 = $1;
  $31 = (($30) + ($29<<6)|0);
  $32 = +HEAPF64[$31>>3];
  $33 = $4;
  $34 = $4;
  $35 = +HEAPF64[$em>>3];
  $36 = $i;
  $37 = $1;
  $38 = (($37) + ($36<<6)|0);
  $39 = ((($38)) + 8|0);
  $40 = +HEAPF64[$39>>3];
  $41 = $4;
  _eraLd($32,$33,$34,$e,$35,$40,$41);
  $42 = $i;
  $43 = (($42) + 1)|0;
  $i = $43;
 }
 STACKTOP = sp;return;
}
function _eraLdsun($p,$e,$em,$p1) {
 $p = $p|0;
 $e = $e|0;
 $em = +$em;
 $p1 = $p1|0;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $e;
 $2 = $em;
 $3 = $p1;
 $4 = $0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 _eraLd(1.0,$4,$5,$6,$7,1.0000000000000001E-9,$8);
 STACKTOP = sp;return;
}
function _eraNum00a($date1,$date2,$rmatn) {
 $date1 = +$date1;
 $date2 = +$date2;
 $rmatn = $rmatn|0;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $deps = 0, $dpsi = 0, $epsa = 0, $rb = 0, $rbp = 0, $rbpn = 0, $rp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dpsi = sp + 304|0;
 $deps = sp + 296|0;
 $epsa = sp + 288|0;
 $rb = sp + 216|0;
 $rp = sp + 144|0;
 $rbp = sp + 72|0;
 $rbpn = sp;
 $0 = $date1;
 $1 = $date2;
 $2 = $rmatn;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 _eraPn00a($3,$4,$dpsi,$deps,$epsa,$rb,$rp,$rbp,$5,$rbpn);
 STACKTOP = sp;return;
}
function _eraNum00b($date1,$date2,$rmatn) {
 $date1 = +$date1;
 $date2 = +$date2;
 $rmatn = $rmatn|0;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $deps = 0, $dpsi = 0, $epsa = 0, $rb = 0, $rbp = 0, $rbpn = 0, $rp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dpsi = sp + 304|0;
 $deps = sp + 296|0;
 $epsa = sp + 288|0;
 $rb = sp + 216|0;
 $rp = sp + 144|0;
 $rbp = sp + 72|0;
 $rbpn = sp;
 $0 = $date1;
 $1 = $date2;
 $2 = $rmatn;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 _eraPn00b($3,$4,$dpsi,$deps,$epsa,$rb,$rp,$rbp,$5,$rbpn);
 STACKTOP = sp;return;
}
function _eraNum06a($date1,$date2,$rmatn) {
 $date1 = +$date1;
 $date2 = +$date2;
 $rmatn = $rmatn|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $de = 0, $dp = 0, $eps = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dp = sp + 8|0;
 $de = sp;
 $0 = $date1;
 $1 = $date2;
 $2 = $rmatn;
 $3 = $0;
 $4 = $1;
 $5 = (+_eraObl06($3,$4));
 $eps = $5;
 $6 = $0;
 $7 = $1;
 _eraNut06a($6,$7,$dp,$de);
 $8 = $eps;
 $9 = +HEAPF64[$dp>>3];
 $10 = +HEAPF64[$de>>3];
 $11 = $2;
 _eraNumat($8,$9,$10,$11);
 STACKTOP = sp;return;
}
function _eraNumat($epsa,$dpsi,$deps,$rmatn) {
 $epsa = +$epsa;
 $dpsi = +$dpsi;
 $deps = +$deps;
 $rmatn = $rmatn|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $epsa;
 $1 = $dpsi;
 $2 = $deps;
 $3 = $rmatn;
 $4 = $3;
 _eraIr($4);
 $5 = $0;
 $6 = $3;
 _eraRx($5,$6);
 $7 = $1;
 $8 = -$7;
 $9 = $3;
 _eraRz($8,$9);
 $10 = $0;
 $11 = $2;
 $12 = $10 + $11;
 $13 = -$12;
 $14 = $3;
 _eraRx($13,$14);
 STACKTOP = sp;return;
}
function _eraNut00a($date1,$date2,$dpsi,$deps) {
 $date1 = +$date1;
 $date2 = +$date2;
 $dpsi = $dpsi|0;
 $deps = $deps|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0;
 var $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0;
 var $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0.0;
 var $189 = 0.0, $19 = 0.0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0, $199 = 0, $2 = 0, $20 = 0.0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0, $239 = 0, $24 = 0.0, $240 = 0, $241 = 0;
 var $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0.0;
 var $260 = 0.0, $261 = 0.0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0.0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0;
 var $279 = 0.0, $28 = 0.0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0.0, $295 = 0.0, $296 = 0.0;
 var $297 = 0.0, $298 = 0.0, $299 = 0.0, $3 = 0, $30 = 0.0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0.0, $310 = 0, $311 = 0.0, $312 = 0.0, $313 = 0.0;
 var $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0.0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0, $327 = 0.0, $328 = 0.0, $329 = 0.0, $33 = 0.0, $330 = 0, $34 = 0.0;
 var $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0;
 var $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0;
 var $9 = 0.0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $NLS = 0, $NPL = 0, $U2R = 0.0, $ad = 0.0, $af = 0.0, $al = 0.0, $alea = 0.0, $alju = 0.0, $alma = 0.0;
 var $alme = 0.0, $alne = 0.0, $alsa = 0.0, $alur = 0.0, $alve = 0.0, $aom = 0.0, $apa = 0.0, $arg = 0.0, $carg = 0.0, $d = 0.0, $de = 0.0, $depsls = 0.0, $depspl = 0.0, $dp = 0.0, $dpsils = 0.0, $dpsipl = 0.0, $el = 0.0, $elp = 0.0, $f = 0.0, $i = 0;
 var $om = 0.0, $sarg = 0.0, $t = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $date1;
 $1 = $date2;
 $2 = $dpsi;
 $3 = $deps;
 $U2R = 4.8481368110953594E-13;
 $NLS = 678;
 $NPL = 687;
 $4 = $0;
 $5 = $4 - 2451545.0;
 $6 = $1;
 $7 = $5 + $6;
 $8 = $7 / 36525.0;
 $t = $8;
 $9 = $t;
 $10 = (+_eraFal03($9));
 $el = $10;
 $11 = $t;
 $12 = $t;
 $13 = $t;
 $14 = $t;
 $15 = $14 * -1.149E-5;
 $16 = 1.36E-4 + $15;
 $17 = $13 * $16;
 $18 = -0.55320000000000003 + $17;
 $19 = $12 * $18;
 $20 = 129596581.04809999 + $19;
 $21 = $11 * $20;
 $22 = 1287104.79305 + $21;
 $23 = (+_fmod($22,1296000.0));
 $24 = $23 * 4.8481368110953598E-6;
 $elp = $24;
 $25 = $t;
 $26 = (+_eraFaf03($25));
 $f = $26;
 $27 = $t;
 $28 = $t;
 $29 = $t;
 $30 = $t;
 $31 = $30 * -3.1690000000000003E-5;
 $32 = 0.0065929999999999999 + $31;
 $33 = $29 * $32;
 $34 = -6.3705999999999996 + $33;
 $35 = $28 * $34;
 $36 = 1602961601.2090001 + $35;
 $37 = $27 * $36;
 $38 = 1072260.7036900001 + $37;
 $39 = (+_fmod($38,1296000.0));
 $40 = $39 * 4.8481368110953598E-6;
 $d = $40;
 $41 = $t;
 $42 = (+_eraFaom03($41));
 $om = $42;
 $dp = 0.0;
 $de = 0.0;
 $i = 677;
 while(1) {
  $43 = $i;
  $44 = ($43|0)>=(0);
  if (!($44)) {
   break;
  }
  $45 = $i;
  $46 = (68304 + (($45*72)|0)|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (+($47|0));
  $49 = $el;
  $50 = $48 * $49;
  $51 = $i;
  $52 = (68304 + (($51*72)|0)|0);
  $53 = ((($52)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (+($54|0));
  $56 = $elp;
  $57 = $55 * $56;
  $58 = $50 + $57;
  $59 = $i;
  $60 = (68304 + (($59*72)|0)|0);
  $61 = ((($60)) + 8|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (+($62|0));
  $64 = $f;
  $65 = $63 * $64;
  $66 = $58 + $65;
  $67 = $i;
  $68 = (68304 + (($67*72)|0)|0);
  $69 = ((($68)) + 12|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (+($70|0));
  $72 = $d;
  $73 = $71 * $72;
  $74 = $66 + $73;
  $75 = $i;
  $76 = (68304 + (($75*72)|0)|0);
  $77 = ((($76)) + 16|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (+($78|0));
  $80 = $om;
  $81 = $79 * $80;
  $82 = $74 + $81;
  $83 = (+_fmod($82,6.2831853071795862));
  $arg = $83;
  $84 = $arg;
  $85 = (+Math_sin((+$84)));
  $sarg = $85;
  $86 = $arg;
  $87 = (+Math_cos((+$86)));
  $carg = $87;
  $88 = $i;
  $89 = (68304 + (($88*72)|0)|0);
  $90 = ((($89)) + 24|0);
  $91 = +HEAPF64[$90>>3];
  $92 = $i;
  $93 = (68304 + (($92*72)|0)|0);
  $94 = ((($93)) + 32|0);
  $95 = +HEAPF64[$94>>3];
  $96 = $t;
  $97 = $95 * $96;
  $98 = $91 + $97;
  $99 = $sarg;
  $100 = $98 * $99;
  $101 = $i;
  $102 = (68304 + (($101*72)|0)|0);
  $103 = ((($102)) + 40|0);
  $104 = +HEAPF64[$103>>3];
  $105 = $carg;
  $106 = $104 * $105;
  $107 = $100 + $106;
  $108 = $dp;
  $109 = $108 + $107;
  $dp = $109;
  $110 = $i;
  $111 = (68304 + (($110*72)|0)|0);
  $112 = ((($111)) + 48|0);
  $113 = +HEAPF64[$112>>3];
  $114 = $i;
  $115 = (68304 + (($114*72)|0)|0);
  $116 = ((($115)) + 56|0);
  $117 = +HEAPF64[$116>>3];
  $118 = $t;
  $119 = $117 * $118;
  $120 = $113 + $119;
  $121 = $carg;
  $122 = $120 * $121;
  $123 = $i;
  $124 = (68304 + (($123*72)|0)|0);
  $125 = ((($124)) + 64|0);
  $126 = +HEAPF64[$125>>3];
  $127 = $sarg;
  $128 = $126 * $127;
  $129 = $122 + $128;
  $130 = $de;
  $131 = $130 + $129;
  $de = $131;
  $132 = $i;
  $133 = (($132) + -1)|0;
  $i = $133;
 }
 $134 = $dp;
 $135 = $134 * 4.8481368110953594E-13;
 $dpsils = $135;
 $136 = $de;
 $137 = $136 * 4.8481368110953594E-13;
 $depsls = $137;
 $138 = $t;
 $139 = 8328.6914269553999 * $138;
 $140 = 2.3555559800000001 + $139;
 $141 = (+_fmod($140,6.2831853071795862));
 $al = $141;
 $142 = $t;
 $143 = 8433.4661581309992 * $142;
 $144 = 1.627905234 + $143;
 $145 = (+_fmod($144,6.2831853071795862));
 $af = $145;
 $146 = $t;
 $147 = 7771.3771468121004 * $146;
 $148 = 5.1984667409999998 + $147;
 $149 = (+_fmod($148,6.2831853071795862));
 $ad = $149;
 $150 = $t;
 $151 = 33.757044999999998 * $150;
 $152 = 2.1824392000000001 - $151;
 $153 = (+_fmod($152,6.2831853071795862));
 $aom = $153;
 $154 = $t;
 $155 = (+_eraFapa03($154));
 $apa = $155;
 $156 = $t;
 $157 = (+_eraFame03($156));
 $alme = $157;
 $158 = $t;
 $159 = (+_eraFave03($158));
 $alve = $159;
 $160 = $t;
 $161 = (+_eraFae03($160));
 $alea = $161;
 $162 = $t;
 $163 = (+_eraFama03($162));
 $alma = $163;
 $164 = $t;
 $165 = (+_eraFaju03($164));
 $alju = $165;
 $166 = $t;
 $167 = (+_eraFasa03($166));
 $alsa = $167;
 $168 = $t;
 $169 = (+_eraFaur03($168));
 $alur = $169;
 $170 = $t;
 $171 = 3.8127773999999999 * $170;
 $172 = 5.3211589999999998 + $171;
 $173 = (+_fmod($172,6.2831853071795862));
 $alne = $173;
 $dp = 0.0;
 $de = 0.0;
 $i = 686;
 while(1) {
  $174 = $i;
  $175 = ($174|0)>=(0);
  if (!($175)) {
   break;
  }
  $176 = $i;
  $177 = (178224 + (($176*68)|0)|0);
  $178 = HEAP32[$177>>2]|0;
  $179 = (+($178|0));
  $180 = $al;
  $181 = $179 * $180;
  $182 = $i;
  $183 = (178224 + (($182*68)|0)|0);
  $184 = ((($183)) + 4|0);
  $185 = HEAP32[$184>>2]|0;
  $186 = (+($185|0));
  $187 = $af;
  $188 = $186 * $187;
  $189 = $181 + $188;
  $190 = $i;
  $191 = (178224 + (($190*68)|0)|0);
  $192 = ((($191)) + 8|0);
  $193 = HEAP32[$192>>2]|0;
  $194 = (+($193|0));
  $195 = $ad;
  $196 = $194 * $195;
  $197 = $189 + $196;
  $198 = $i;
  $199 = (178224 + (($198*68)|0)|0);
  $200 = ((($199)) + 12|0);
  $201 = HEAP32[$200>>2]|0;
  $202 = (+($201|0));
  $203 = $aom;
  $204 = $202 * $203;
  $205 = $197 + $204;
  $206 = $i;
  $207 = (178224 + (($206*68)|0)|0);
  $208 = ((($207)) + 16|0);
  $209 = HEAP32[$208>>2]|0;
  $210 = (+($209|0));
  $211 = $alme;
  $212 = $210 * $211;
  $213 = $205 + $212;
  $214 = $i;
  $215 = (178224 + (($214*68)|0)|0);
  $216 = ((($215)) + 20|0);
  $217 = HEAP32[$216>>2]|0;
  $218 = (+($217|0));
  $219 = $alve;
  $220 = $218 * $219;
  $221 = $213 + $220;
  $222 = $i;
  $223 = (178224 + (($222*68)|0)|0);
  $224 = ((($223)) + 24|0);
  $225 = HEAP32[$224>>2]|0;
  $226 = (+($225|0));
  $227 = $alea;
  $228 = $226 * $227;
  $229 = $221 + $228;
  $230 = $i;
  $231 = (178224 + (($230*68)|0)|0);
  $232 = ((($231)) + 28|0);
  $233 = HEAP32[$232>>2]|0;
  $234 = (+($233|0));
  $235 = $alma;
  $236 = $234 * $235;
  $237 = $229 + $236;
  $238 = $i;
  $239 = (178224 + (($238*68)|0)|0);
  $240 = ((($239)) + 32|0);
  $241 = HEAP32[$240>>2]|0;
  $242 = (+($241|0));
  $243 = $alju;
  $244 = $242 * $243;
  $245 = $237 + $244;
  $246 = $i;
  $247 = (178224 + (($246*68)|0)|0);
  $248 = ((($247)) + 36|0);
  $249 = HEAP32[$248>>2]|0;
  $250 = (+($249|0));
  $251 = $alsa;
  $252 = $250 * $251;
  $253 = $245 + $252;
  $254 = $i;
  $255 = (178224 + (($254*68)|0)|0);
  $256 = ((($255)) + 40|0);
  $257 = HEAP32[$256>>2]|0;
  $258 = (+($257|0));
  $259 = $alur;
  $260 = $258 * $259;
  $261 = $253 + $260;
  $262 = $i;
  $263 = (178224 + (($262*68)|0)|0);
  $264 = ((($263)) + 44|0);
  $265 = HEAP32[$264>>2]|0;
  $266 = (+($265|0));
  $267 = $alne;
  $268 = $266 * $267;
  $269 = $261 + $268;
  $270 = $i;
  $271 = (178224 + (($270*68)|0)|0);
  $272 = ((($271)) + 48|0);
  $273 = HEAP32[$272>>2]|0;
  $274 = (+($273|0));
  $275 = $apa;
  $276 = $274 * $275;
  $277 = $269 + $276;
  $278 = (+_fmod($277,6.2831853071795862));
  $arg = $278;
  $279 = $arg;
  $280 = (+Math_sin((+$279)));
  $sarg = $280;
  $281 = $arg;
  $282 = (+Math_cos((+$281)));
  $carg = $282;
  $283 = $i;
  $284 = (178224 + (($283*68)|0)|0);
  $285 = ((($284)) + 52|0);
  $286 = HEAP32[$285>>2]|0;
  $287 = (+($286|0));
  $288 = $sarg;
  $289 = $287 * $288;
  $290 = $i;
  $291 = (178224 + (($290*68)|0)|0);
  $292 = ((($291)) + 56|0);
  $293 = HEAP32[$292>>2]|0;
  $294 = (+($293|0));
  $295 = $carg;
  $296 = $294 * $295;
  $297 = $289 + $296;
  $298 = $dp;
  $299 = $298 + $297;
  $dp = $299;
  $300 = $i;
  $301 = (178224 + (($300*68)|0)|0);
  $302 = ((($301)) + 60|0);
  $303 = HEAP32[$302>>2]|0;
  $304 = (+($303|0));
  $305 = $sarg;
  $306 = $304 * $305;
  $307 = $i;
  $308 = (178224 + (($307*68)|0)|0);
  $309 = ((($308)) + 64|0);
  $310 = HEAP32[$309>>2]|0;
  $311 = (+($310|0));
  $312 = $carg;
  $313 = $311 * $312;
  $314 = $306 + $313;
  $315 = $de;
  $316 = $315 + $314;
  $de = $316;
  $317 = $i;
  $318 = (($317) + -1)|0;
  $i = $318;
 }
 $319 = $dp;
 $320 = $319 * 4.8481368110953594E-13;
 $dpsipl = $320;
 $321 = $de;
 $322 = $321 * 4.8481368110953594E-13;
 $depspl = $322;
 $323 = $dpsils;
 $324 = $dpsipl;
 $325 = $323 + $324;
 $326 = $2;
 HEAPF64[$326>>3] = $325;
 $327 = $depsls;
 $328 = $depspl;
 $329 = $327 + $328;
 $330 = $3;
 HEAPF64[$330>>3] = $329;
 STACKTOP = sp;return;
}
function _eraNut00b($date1,$date2,$dpsi,$deps) {
 $date1 = +$date1;
 $date2 = +$date2;
 $dpsi = $dpsi|0;
 $deps = $deps|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $NLS = 0, $arg = 0.0, $carg = 0.0;
 var $d = 0.0, $de = 0.0, $depsls = 0.0, $depspl = 0.0, $dp = 0.0, $dpsils = 0.0, $dpsipl = 0.0, $el = 0.0, $elp = 0.0, $f = 0.0, $i = 0, $om = 0.0, $sarg = 0.0, $t = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $date1;
 $1 = $date2;
 $2 = $dpsi;
 $3 = $deps;
 $NLS = 77;
 $4 = $0;
 $5 = $4 - 2451545.0;
 $6 = $1;
 $7 = $5 + $6;
 $8 = $7 / 36525.0;
 $t = $8;
 $9 = $t;
 $10 = 1717915923.2177999 * $9;
 $11 = 485868.24903599999 + $10;
 $12 = (+_fmod($11,1296000.0));
 $13 = $12 * 4.8481368110953598E-6;
 $el = $13;
 $14 = $t;
 $15 = 129596581.04809999 * $14;
 $16 = 1287104.79305 + $15;
 $17 = (+_fmod($16,1296000.0));
 $18 = $17 * 4.8481368110953598E-6;
 $elp = $18;
 $19 = $t;
 $20 = 1739527262.8478 * $19;
 $21 = 335779.52623199997 + $20;
 $22 = (+_fmod($21,1296000.0));
 $23 = $22 * 4.8481368110953598E-6;
 $f = $23;
 $24 = $t;
 $25 = 1602961601.2090001 * $24;
 $26 = 1072260.7036900001 + $25;
 $27 = (+_fmod($26,1296000.0));
 $28 = $27 * 4.8481368110953598E-6;
 $d = $28;
 $29 = $t;
 $30 = -6962890.5431000004 * $29;
 $31 = 450160.39803600003 + $30;
 $32 = (+_fmod($31,1296000.0));
 $33 = $32 * 4.8481368110953598E-6;
 $om = $33;
 $dp = 0.0;
 $de = 0.0;
 $i = 76;
 while(1) {
  $34 = $i;
  $35 = ($34|0)>=(0);
  if (!($35)) {
   break;
  }
  $36 = $i;
  $37 = (117120 + (($36*72)|0)|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (+($38|0));
  $40 = $el;
  $41 = $39 * $40;
  $42 = $i;
  $43 = (117120 + (($42*72)|0)|0);
  $44 = ((($43)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (+($45|0));
  $47 = $elp;
  $48 = $46 * $47;
  $49 = $41 + $48;
  $50 = $i;
  $51 = (117120 + (($50*72)|0)|0);
  $52 = ((($51)) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (+($53|0));
  $55 = $f;
  $56 = $54 * $55;
  $57 = $49 + $56;
  $58 = $i;
  $59 = (117120 + (($58*72)|0)|0);
  $60 = ((($59)) + 12|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (+($61|0));
  $63 = $d;
  $64 = $62 * $63;
  $65 = $57 + $64;
  $66 = $i;
  $67 = (117120 + (($66*72)|0)|0);
  $68 = ((($67)) + 16|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (+($69|0));
  $71 = $om;
  $72 = $70 * $71;
  $73 = $65 + $72;
  $74 = (+_fmod($73,6.2831853071795862));
  $arg = $74;
  $75 = $arg;
  $76 = (+Math_sin((+$75)));
  $sarg = $76;
  $77 = $arg;
  $78 = (+Math_cos((+$77)));
  $carg = $78;
  $79 = $i;
  $80 = (117120 + (($79*72)|0)|0);
  $81 = ((($80)) + 24|0);
  $82 = +HEAPF64[$81>>3];
  $83 = $i;
  $84 = (117120 + (($83*72)|0)|0);
  $85 = ((($84)) + 32|0);
  $86 = +HEAPF64[$85>>3];
  $87 = $t;
  $88 = $86 * $87;
  $89 = $82 + $88;
  $90 = $sarg;
  $91 = $89 * $90;
  $92 = $i;
  $93 = (117120 + (($92*72)|0)|0);
  $94 = ((($93)) + 40|0);
  $95 = +HEAPF64[$94>>3];
  $96 = $carg;
  $97 = $95 * $96;
  $98 = $91 + $97;
  $99 = $dp;
  $100 = $99 + $98;
  $dp = $100;
  $101 = $i;
  $102 = (117120 + (($101*72)|0)|0);
  $103 = ((($102)) + 48|0);
  $104 = +HEAPF64[$103>>3];
  $105 = $i;
  $106 = (117120 + (($105*72)|0)|0);
  $107 = ((($106)) + 56|0);
  $108 = +HEAPF64[$107>>3];
  $109 = $t;
  $110 = $108 * $109;
  $111 = $104 + $110;
  $112 = $carg;
  $113 = $111 * $112;
  $114 = $i;
  $115 = (117120 + (($114*72)|0)|0);
  $116 = ((($115)) + 64|0);
  $117 = +HEAPF64[$116>>3];
  $118 = $sarg;
  $119 = $117 * $118;
  $120 = $113 + $119;
  $121 = $de;
  $122 = $121 + $120;
  $de = $122;
  $123 = $i;
  $124 = (($123) + -1)|0;
  $i = $124;
 }
 $125 = $dp;
 $126 = $125 * 4.8481368110953594E-13;
 $dpsils = $126;
 $127 = $de;
 $128 = $127 * 4.8481368110953594E-13;
 $depsls = $128;
 $dpsipl = -6.5449846949787363E-10;
 $depspl = 1.8810770827049998E-9;
 $129 = $dpsils;
 $130 = $dpsipl;
 $131 = $129 + $130;
 $132 = $2;
 HEAPF64[$132>>3] = $131;
 $133 = $depsls;
 $134 = $depspl;
 $135 = $133 + $134;
 $136 = $3;
 HEAPF64[$136>>3] = $135;
 STACKTOP = sp;return;
}
function _eraNut06a($date1,$date2,$dpsi,$deps) {
 $date1 = +$date1;
 $date2 = +$date2;
 $dpsi = $dpsi|0;
 $deps = $deps|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $3 = 0;
 var $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $de = 0, $dp = 0, $fj2 = 0.0, $t = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dp = sp + 8|0;
 $de = sp;
 $0 = $date1;
 $1 = $date2;
 $2 = $dpsi;
 $3 = $deps;
 $4 = $0;
 $5 = $4 - 2451545.0;
 $6 = $1;
 $7 = $5 + $6;
 $8 = $7 / 36525.0;
 $t = $8;
 $9 = $t;
 $10 = -2.7773999999999999E-6 * $9;
 $fj2 = $10;
 $11 = $0;
 $12 = $1;
 _eraNut00a($11,$12,$dp,$de);
 $13 = +HEAPF64[$dp>>3];
 $14 = +HEAPF64[$dp>>3];
 $15 = $fj2;
 $16 = 4.6969999999999998E-7 + $15;
 $17 = $14 * $16;
 $18 = $13 + $17;
 $19 = $2;
 HEAPF64[$19>>3] = $18;
 $20 = +HEAPF64[$de>>3];
 $21 = +HEAPF64[$de>>3];
 $22 = $fj2;
 $23 = $21 * $22;
 $24 = $20 + $23;
 $25 = $3;
 HEAPF64[$25>>3] = $24;
 STACKTOP = sp;return;
}
function _eraNut80($date1,$date2,$dpsi,$deps) {
 $date1 = +$date1;
 $date2 = +$date2;
 $dpsi = $dpsi|0;
 $deps = $deps|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0;
 var $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0.0;
 var $170 = 0.0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0;
 var $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0;
 var $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0;
 var $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $NT = 0, $U2R = 0.0, $arg = 0.0, $c = 0.0, $d = 0.0;
 var $de = 0.0, $dp = 0.0, $el = 0.0, $elp = 0.0, $f = 0.0, $j = 0, $om = 0.0, $s = 0.0, $t = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $date1;
 $1 = $date2;
 $2 = $dpsi;
 $3 = $deps;
 $U2R = 4.8481368110953598E-10;
 $NT = 106;
 $4 = $0;
 $5 = $4 - 2451545.0;
 $6 = $1;
 $7 = $5 + $6;
 $8 = $7 / 36525.0;
 $t = $8;
 $9 = $t;
 $10 = 0.064000000000000001 * $9;
 $11 = 31.309999999999999 + $10;
 $12 = $t;
 $13 = $11 * $12;
 $14 = 715922.63300000003 + $13;
 $15 = $t;
 $16 = $14 * $15;
 $17 = 485866.73300000001 + $16;
 $18 = $17 * 4.8481368110953598E-6;
 $19 = $t;
 $20 = 1325.0 * $19;
 $21 = (+_fmod($20,1.0));
 $22 = $21 * 6.2831853071795862;
 $23 = $18 + $22;
 $24 = (+_eraAnpm($23));
 $el = $24;
 $25 = $t;
 $26 = 0.012 * $25;
 $27 = -0.57699999999999996 - $26;
 $28 = $t;
 $29 = $27 * $28;
 $30 = 1292581.2239999999 + $29;
 $31 = $t;
 $32 = $30 * $31;
 $33 = 1287099.804 + $32;
 $34 = $33 * 4.8481368110953598E-6;
 $35 = $t;
 $36 = 99.0 * $35;
 $37 = (+_fmod($36,1.0));
 $38 = $37 * 6.2831853071795862;
 $39 = $34 + $38;
 $40 = (+_eraAnpm($39));
 $elp = $40;
 $41 = $t;
 $42 = 0.010999999999999999 * $41;
 $43 = -13.257 + $42;
 $44 = $t;
 $45 = $43 * $44;
 $46 = 295263.13699999999 + $45;
 $47 = $t;
 $48 = $46 * $47;
 $49 = 335778.87699999998 + $48;
 $50 = $49 * 4.8481368110953598E-6;
 $51 = $t;
 $52 = 1342.0 * $51;
 $53 = (+_fmod($52,1.0));
 $54 = $53 * 6.2831853071795862;
 $55 = $50 + $54;
 $56 = (+_eraAnpm($55));
 $f = $56;
 $57 = $t;
 $58 = 0.019 * $57;
 $59 = -6.891 + $58;
 $60 = $t;
 $61 = $59 * $60;
 $62 = 1105601.328 + $61;
 $63 = $t;
 $64 = $62 * $63;
 $65 = 1072261.307 + $64;
 $66 = $65 * 4.8481368110953598E-6;
 $67 = $t;
 $68 = 1236.0 * $67;
 $69 = (+_fmod($68,1.0));
 $70 = $69 * 6.2831853071795862;
 $71 = $66 + $70;
 $72 = (+_eraAnpm($71));
 $d = $72;
 $73 = $t;
 $74 = 0.0080000000000000002 * $73;
 $75 = 7.4550000000000001 + $74;
 $76 = $t;
 $77 = $75 * $76;
 $78 = -482890.53899999999 + $77;
 $79 = $t;
 $80 = $78 * $79;
 $81 = 450160.28000000003 + $80;
 $82 = $81 * 4.8481368110953598E-6;
 $83 = $t;
 $84 = -5.0 * $83;
 $85 = (+_fmod($84,1.0));
 $86 = $85 * 6.2831853071795862;
 $87 = $82 + $86;
 $88 = (+_eraAnpm($87));
 $om = $88;
 $dp = 0.0;
 $de = 0.0;
 $j = 105;
 while(1) {
  $89 = $j;
  $90 = ($89|0)>=(0);
  if (!($90)) {
   break;
  }
  $91 = $j;
  $92 = (122664 + (($91*56)|0)|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = (+($93|0));
  $95 = $el;
  $96 = $94 * $95;
  $97 = $j;
  $98 = (122664 + (($97*56)|0)|0);
  $99 = ((($98)) + 4|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (+($100|0));
  $102 = $elp;
  $103 = $101 * $102;
  $104 = $96 + $103;
  $105 = $j;
  $106 = (122664 + (($105*56)|0)|0);
  $107 = ((($106)) + 8|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = (+($108|0));
  $110 = $f;
  $111 = $109 * $110;
  $112 = $104 + $111;
  $113 = $j;
  $114 = (122664 + (($113*56)|0)|0);
  $115 = ((($114)) + 12|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = (+($116|0));
  $118 = $d;
  $119 = $117 * $118;
  $120 = $112 + $119;
  $121 = $j;
  $122 = (122664 + (($121*56)|0)|0);
  $123 = ((($122)) + 16|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = (+($124|0));
  $126 = $om;
  $127 = $125 * $126;
  $128 = $120 + $127;
  $arg = $128;
  $129 = $j;
  $130 = (122664 + (($129*56)|0)|0);
  $131 = ((($130)) + 24|0);
  $132 = +HEAPF64[$131>>3];
  $133 = $j;
  $134 = (122664 + (($133*56)|0)|0);
  $135 = ((($134)) + 32|0);
  $136 = +HEAPF64[$135>>3];
  $137 = $t;
  $138 = $136 * $137;
  $139 = $132 + $138;
  $s = $139;
  $140 = $j;
  $141 = (122664 + (($140*56)|0)|0);
  $142 = ((($141)) + 40|0);
  $143 = +HEAPF64[$142>>3];
  $144 = $j;
  $145 = (122664 + (($144*56)|0)|0);
  $146 = ((($145)) + 48|0);
  $147 = +HEAPF64[$146>>3];
  $148 = $t;
  $149 = $147 * $148;
  $150 = $143 + $149;
  $c = $150;
  $151 = $s;
  $152 = $151 != 0.0;
  if ($152) {
   $153 = $s;
   $154 = $arg;
   $155 = (+Math_sin((+$154)));
   $156 = $153 * $155;
   $157 = $dp;
   $158 = $157 + $156;
   $dp = $158;
  }
  $159 = $c;
  $160 = $159 != 0.0;
  if ($160) {
   $161 = $c;
   $162 = $arg;
   $163 = (+Math_cos((+$162)));
   $164 = $161 * $163;
   $165 = $de;
   $166 = $165 + $164;
   $de = $166;
  }
  $167 = $j;
  $168 = (($167) + -1)|0;
  $j = $168;
 }
 $169 = $dp;
 $170 = $169 * 4.8481368110953598E-10;
 $171 = $2;
 HEAPF64[$171>>3] = $170;
 $172 = $de;
 $173 = $172 * 4.8481368110953598E-10;
 $174 = $3;
 HEAPF64[$174>>3] = $173;
 STACKTOP = sp;return;
}
function _eraNutm80($date1,$date2,$rmatn) {
 $date1 = +$date1;
 $date2 = +$date2;
 $rmatn = $rmatn|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $deps = 0, $dpsi = 0, $epsa = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dpsi = sp + 16|0;
 $deps = sp + 8|0;
 $0 = $date1;
 $1 = $date2;
 $2 = $rmatn;
 $3 = $0;
 $4 = $1;
 _eraNut80($3,$4,$dpsi,$deps);
 $5 = $0;
 $6 = $1;
 $7 = (+_eraObl80($5,$6));
 $epsa = $7;
 $8 = $epsa;
 $9 = +HEAPF64[$dpsi>>3];
 $10 = +HEAPF64[$deps>>3];
 $11 = $2;
 _eraNumat($8,$9,$10,$11);
 STACKTOP = sp;return;
}
function _eraObl06($date1,$date2) {
 $date1 = +$date1;
 $date2 = +$date2;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0;
 var $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $eps0 = 0.0, $t = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $date1;
 $1 = $date2;
 $2 = $0;
 $3 = $2 - 2451545.0;
 $4 = $1;
 $5 = $3 + $4;
 $6 = $5 / 36525.0;
 $t = $6;
 $7 = $t;
 $8 = -4.3399999999999998E-8 * $7;
 $9 = -5.7599999999999997E-7 + $8;
 $10 = $t;
 $11 = $9 * $10;
 $12 = 0.0020033999999999998 + $11;
 $13 = $t;
 $14 = $12 * $13;
 $15 = -1.8310000000000001E-4 + $14;
 $16 = $t;
 $17 = $15 * $16;
 $18 = -46.836768999999997 + $17;
 $19 = $t;
 $20 = $18 * $19;
 $21 = 84381.406000000003 + $20;
 $22 = $21 * 4.8481368110953598E-6;
 $eps0 = $22;
 $23 = $eps0;
 STACKTOP = sp;return (+$23);
}
function _eraObl80($date1,$date2) {
 $date1 = +$date1;
 $date2 = +$date2;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $eps0 = 0.0, $t = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $date1;
 $1 = $date2;
 $2 = $0;
 $3 = $2 - 2451545.0;
 $4 = $1;
 $5 = $3 + $4;
 $6 = $5 / 36525.0;
 $t = $6;
 $7 = $t;
 $8 = 0.0018129999999999999 * $7;
 $9 = -5.9000000000000003E-4 + $8;
 $10 = $t;
 $11 = $9 * $10;
 $12 = -46.814999999999998 + $11;
 $13 = $t;
 $14 = $12 * $13;
 $15 = 84381.448000000004 + $14;
 $16 = 4.8481368110953598E-6 * $15;
 $eps0 = $16;
 $17 = $eps0;
 STACKTOP = sp;return (+$17);
}
function _eraP06e($date1,$date2,$eps0,$psia,$oma,$bpa,$bqa,$pia,$bpia,$epsa,$chia,$za,$zetaa,$thetaa,$pa,$gam,$phi,$psi) {
 $date1 = +$date1;
 $date2 = +$date2;
 $eps0 = $eps0|0;
 $psia = $psia|0;
 $oma = $oma|0;
 $bpa = $bpa|0;
 $bqa = $bqa|0;
 $pia = $pia|0;
 $bpia = $bpia|0;
 $epsa = $epsa|0;
 $chia = $chia|0;
 $za = $za|0;
 $zetaa = $zetaa|0;
 $thetaa = $thetaa|0;
 $pa = $pa|0;
 $gam = $gam|0;
 $phi = $phi|0;
 $psi = $psi|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0;
 var $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0;
 var $189 = 0.0, $19 = 0.0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0;
 var $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0;
 var $224 = 0.0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0.0, $240 = 0.0, $241 = 0.0;
 var $242 = 0.0, $243 = 0.0, $244 = 0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0.0;
 var $260 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0;
 var $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0;
 var $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0;
 var $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0;
 var $99 = 0.0, $t = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $date1;
 $1 = $date2;
 $2 = $eps0;
 $3 = $psia;
 $4 = $oma;
 $5 = $bpa;
 $6 = $bqa;
 $7 = $pia;
 $8 = $bpia;
 $9 = $epsa;
 $10 = $chia;
 $11 = $za;
 $12 = $zetaa;
 $13 = $thetaa;
 $14 = $pa;
 $15 = $gam;
 $16 = $phi;
 $17 = $psi;
 $18 = $0;
 $19 = $18 - 2451545.0;
 $20 = $1;
 $21 = $19 + $20;
 $22 = $21 / 36525.0;
 $t = $22;
 $23 = $2;
 HEAPF64[$23>>3] = 0.40909260060058289;
 $24 = $t;
 $25 = -9.5099999999999998E-8 * $24;
 $26 = 1.3285099999999999E-4 + $25;
 $27 = $t;
 $28 = $26 * $27;
 $29 = -0.0011404500000000001 + $28;
 $30 = $t;
 $31 = $29 * $30;
 $32 = -1.0790069 + $31;
 $33 = $t;
 $34 = $32 * $33;
 $35 = 5038.4815070000004 + $34;
 $36 = $t;
 $37 = $35 * $36;
 $38 = $37 * 4.8481368110953598E-6;
 $39 = $3;
 HEAPF64[$39>>3] = $38;
 $40 = $2;
 $41 = +HEAPF64[$40>>3];
 $42 = $t;
 $43 = 3.3369999999999998E-7 * $42;
 $44 = -4.6699999999999999E-7 + $43;
 $45 = $t;
 $46 = $44 * $45;
 $47 = -0.0077250299999999999 + $46;
 $48 = $t;
 $49 = $47 * $48;
 $50 = 0.051262299999999997 + $49;
 $51 = $t;
 $52 = $50 * $51;
 $53 = -0.025753999999999999 + $52;
 $54 = $t;
 $55 = $53 * $54;
 $56 = $55 * 4.8481368110953598E-6;
 $57 = $41 + $56;
 $58 = $4;
 HEAPF64[$58>>3] = $57;
 $59 = $t;
 $60 = 1.2E-8 * $59;
 $61 = -9.1200000000000001E-7 + $60;
 $62 = $t;
 $63 = $61 * $62;
 $64 = -2.2466000000000001E-4 + $63;
 $65 = $t;
 $66 = $64 * $65;
 $67 = 0.1939873 + $66;
 $68 = $t;
 $69 = $67 * $68;
 $70 = 4.1990939999999997 + $69;
 $71 = $t;
 $72 = $70 * $71;
 $73 = $72 * 4.8481368110953598E-6;
 $74 = $5;
 HEAPF64[$74>>3] = $73;
 $75 = $t;
 $76 = -1.7199999999999999E-8 * $75;
 $77 = -6.4600000000000004E-7 + $76;
 $78 = $t;
 $79 = $77 * $78;
 $80 = 5.2413000000000004E-4 + $79;
 $81 = $t;
 $82 = $80 * $81;
 $83 = 0.051028299999999999 + $82;
 $84 = $t;
 $85 = $83 * $84;
 $86 = -46.811014999999998 + $85;
 $87 = $t;
 $88 = $86 * $87;
 $89 = $88 * 4.8481368110953598E-6;
 $90 = $6;
 HEAPF64[$90>>3] = $89;
 $91 = $t;
 $92 = -2.1999999999999998E-9 * $91;
 $93 = 1.1300000000000001E-7 + $92;
 $94 = $t;
 $95 = $93 * $94;
 $96 = -1.2559E-4 + $95;
 $97 = $t;
 $98 = $96 * $97;
 $99 = -0.033492599999999997 + $98;
 $100 = $t;
 $101 = $99 * $100;
 $102 = 46.998972999999999 + $101;
 $103 = $t;
 $104 = $102 * $103;
 $105 = $104 * 4.8481368110953598E-6;
 $106 = $7;
 HEAPF64[$106>>3] = $105;
 $107 = $t;
 $108 = 7.1999999999999996E-8 * $107;
 $109 = -4.7970000000000003E-5 + $108;
 $110 = $t;
 $111 = $109 * $110;
 $112 = -5.3709999999999999E-4 + $111;
 $113 = $t;
 $114 = $112 * $113;
 $115 = 0.15799199999999999 + $114;
 $116 = $t;
 $117 = $115 * $116;
 $118 = -867.95758000000001 + $117;
 $119 = $t;
 $120 = $118 * $119;
 $121 = 629546.79359999998 + $120;
 $122 = $121 * 4.8481368110953598E-6;
 $123 = $8;
 HEAPF64[$123>>3] = $122;
 $124 = $0;
 $125 = $1;
 $126 = (+_eraObl06($124,$125));
 $127 = $9;
 HEAPF64[$127>>3] = $126;
 $128 = $t;
 $129 = -5.5999999999999999E-8 * $128;
 $130 = 1.7066299999999999E-4 + $129;
 $131 = $t;
 $132 = $130 * $131;
 $133 = -0.0012119699999999999 + $132;
 $134 = $t;
 $135 = $133 * $134;
 $136 = -2.3814291999999999 + $135;
 $137 = $t;
 $138 = $136 * $137;
 $139 = 10.556403 + $138;
 $140 = $t;
 $141 = $139 * $140;
 $142 = $141 * 4.8481368110953598E-6;
 $143 = $10;
 HEAPF64[$143>>3] = $142;
 $144 = $t;
 $145 = -2.9040000000000001E-7 * $144;
 $146 = -2.8595999999999999E-5 + $145;
 $147 = $t;
 $148 = $146 * $147;
 $149 = 0.018268369999999999 + $148;
 $150 = $t;
 $151 = $149 * $150;
 $152 = 1.0927347999999999 + $151;
 $153 = $t;
 $154 = $152 * $153;
 $155 = 2306.0771810000001 + $154;
 $156 = $t;
 $157 = $155 * $156;
 $158 = -2.6505450000000002 + $157;
 $159 = $158 * 4.8481368110953598E-6;
 $160 = $11;
 HEAPF64[$160>>3] = $159;
 $161 = $t;
 $162 = -3.1730000000000002E-7 * $161;
 $163 = -5.9710000000000001E-6 + $162;
 $164 = $t;
 $165 = $163 * $164;
 $166 = 0.018018280000000001 + $165;
 $167 = $t;
 $168 = $166 * $167;
 $169 = 0.2988499 + $168;
 $170 = $t;
 $171 = $169 * $170;
 $172 = 2306.0832270000001 + $171;
 $173 = $t;
 $174 = $172 * $173;
 $175 = 2.6505450000000002 + $174;
 $176 = $175 * 4.8481368110953598E-6;
 $177 = $12;
 HEAPF64[$177>>3] = $176;
 $178 = $t;
 $179 = -1.2739999999999999E-7 * $178;
 $180 = -7.0890000000000002E-6 + $179;
 $181 = $t;
 $182 = $180 * $181;
 $183 = -0.041822640000000001 + $182;
 $184 = $t;
 $185 = $183 * $184;
 $186 = -0.42949340000000003 + $185;
 $187 = $t;
 $188 = $186 * $187;
 $189 = 2004.1919029999999 + $188;
 $190 = $t;
 $191 = $189 * $190;
 $192 = $191 * 4.8481368110953598E-6;
 $193 = $13;
 HEAPF64[$193>>3] = $192;
 $194 = $t;
 $195 = 3.8299999999999999E-8 * $194;
 $196 = -2.3856999999999999E-5 + $195;
 $197 = $t;
 $198 = $196 * $197;
 $199 = 7.9640000000000003E-5 + $198;
 $200 = $t;
 $201 = $199 * $200;
 $202 = 1.1054348000000001 + $201;
 $203 = $t;
 $204 = $202 * $203;
 $205 = 5028.7961949999999 + $204;
 $206 = $t;
 $207 = $205 * $206;
 $208 = $207 * 4.8481368110953598E-6;
 $209 = $14;
 HEAPF64[$209>>3] = $208;
 $210 = $t;
 $211 = 2.6000000000000001E-8 * $210;
 $212 = -2.7879999999999998E-6 + $211;
 $213 = $t;
 $214 = $212 * $213;
 $215 = -3.1238000000000001E-4 + $214;
 $216 = $t;
 $217 = $215 * $216;
 $218 = 0.49320439999999999 + $217;
 $219 = $t;
 $220 = $218 * $219;
 $221 = 10.556403 + $220;
 $222 = $t;
 $223 = $221 * $222;
 $224 = $223 * 4.8481368110953598E-6;
 $225 = $15;
 HEAPF64[$225>>3] = $224;
 $226 = $2;
 $227 = +HEAPF64[$226>>3];
 $228 = $t;
 $229 = -1.7599999999999999E-8 * $228;
 $230 = -4.4000000000000002E-7 + $229;
 $231 = $t;
 $232 = $230 * $231;
 $233 = 5.3288999999999995E-4 + $232;
 $234 = $t;
 $235 = $233 * $234;
 $236 = 0.051126900000000003 + $235;
 $237 = $t;
 $238 = $236 * $237;
 $239 = -46.811014999999998 + $238;
 $240 = $t;
 $241 = $239 * $240;
 $242 = $241 * 4.8481368110953598E-6;
 $243 = $227 + $242;
 $244 = $16;
 HEAPF64[$244>>3] = $243;
 $245 = $t;
 $246 = -1.48E-8 * $245;
 $247 = -2.6452E-5 + $246;
 $248 = $t;
 $249 = $247 * $248;
 $250 = -1.8521999999999999E-4 + $249;
 $251 = $t;
 $252 = $250 * $251;
 $253 = 1.5584176000000001 + $252;
 $254 = $t;
 $255 = $253 * $254;
 $256 = 5038.4815070000004 + $255;
 $257 = $t;
 $258 = $256 * $257;
 $259 = $258 * 4.8481368110953598E-6;
 $260 = $17;
 HEAPF64[$260>>3] = $259;
 STACKTOP = sp;return;
}
function _eraP2pv($p,$pv) {
 $p = $p|0;
 $pv = $pv|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $pv;
 $2 = $0;
 $3 = $1;
 _eraCp($2,$3);
 $4 = $1;
 $5 = ((($4)) + 24|0);
 _eraZp($5);
 STACKTOP = sp;return;
}
function _eraP2s($p,$theta,$phi,$r) {
 $p = $p|0;
 $theta = $theta|0;
 $phi = $phi|0;
 $r = $r|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $theta;
 $2 = $phi;
 $3 = $r;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 _eraC2s($4,$5,$6);
 $7 = $0;
 $8 = (+_eraPm($7));
 $9 = $3;
 HEAPF64[$9>>3] = $8;
 STACKTOP = sp;return;
}
function _eraPap($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $$ = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0;
 var $44 = 0.0, $45 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $a2b = 0, $am = 0, $au = 0, $bm = 0.0, $ct = 0.0, $eta = 0, $or$cond = 0, $or$cond3 = 0, $pa = 0.0, $st = 0.0, $xa = 0.0, $xi = 0, $ya = 0.0;
 var $za = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $am = sp + 152|0;
 $au = sp + 128|0;
 $eta = sp + 56|0;
 $xi = sp + 32|0;
 $a2b = sp + 8|0;
 $0 = $a;
 $1 = $b;
 $2 = $0;
 _eraPn($2,$am,$au);
 $3 = $1;
 $4 = (+_eraPm($3));
 $bm = $4;
 $5 = +HEAPF64[$am>>3];
 $6 = $5 == 0.0;
 $7 = $bm;
 $8 = $7 == 0.0;
 $or$cond = $6 | $8;
 if ($or$cond) {
  $st = 0.0;
  $ct = 1.0;
  $42 = $st;
  $43 = $ct;
  $44 = (+Math_atan2((+$42),(+$43)));
  $pa = $44;
  $45 = $pa;
  STACKTOP = sp;return (+$45);
 } else {
  $9 = $0;
  $10 = +HEAPF64[$9>>3];
  $xa = $10;
  $11 = $0;
  $12 = ((($11)) + 8|0);
  $13 = +HEAPF64[$12>>3];
  $ya = $13;
  $14 = $0;
  $15 = ((($14)) + 16|0);
  $16 = +HEAPF64[$15>>3];
  $za = $16;
  $17 = $xa;
  $18 = -$17;
  $19 = $za;
  $20 = $18 * $19;
  HEAPF64[$eta>>3] = $20;
  $21 = $ya;
  $22 = -$21;
  $23 = $za;
  $24 = $22 * $23;
  $25 = ((($eta)) + 8|0);
  HEAPF64[$25>>3] = $24;
  $26 = $xa;
  $27 = $xa;
  $28 = $26 * $27;
  $29 = $ya;
  $30 = $ya;
  $31 = $29 * $30;
  $32 = $28 + $31;
  $33 = ((($eta)) + 16|0);
  HEAPF64[$33>>3] = $32;
  _eraPxp($eta,$au,$xi);
  $34 = $1;
  $35 = $0;
  _eraPmp($34,$35,$a2b);
  $36 = (+_eraPdp($a2b,$xi));
  $st = $36;
  $37 = (+_eraPdp($a2b,$eta));
  $ct = $37;
  $38 = $st;
  $39 = $38 == 0.0;
  $40 = $ct;
  $41 = $40 == 0.0;
  $or$cond3 = $39 & $41;
  $$ = $or$cond3 ? 1.0 : $37;
  $ct = $$;
  $42 = $st;
  $43 = $ct;
  $44 = (+Math_atan2((+$42),(+$43)));
  $pa = $44;
  $45 = $pa;
  STACKTOP = sp;return (+$45);
 }
 return +(0.0);
}
function _eraPas($al,$ap,$bl,$bp) {
 $al = +$al;
 $ap = +$ap;
 $bl = +$bl;
 $bp = +$bp;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $dl = 0.0, $or$cond = 0, $pa = 0.0, $x = 0.0, $y = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $al;
 $1 = $ap;
 $2 = $bl;
 $3 = $bp;
 $4 = $2;
 $5 = $0;
 $6 = $4 - $5;
 $dl = $6;
 $7 = $dl;
 $8 = (+Math_sin((+$7)));
 $9 = $3;
 $10 = (+Math_cos((+$9)));
 $11 = $8 * $10;
 $y = $11;
 $12 = $3;
 $13 = (+Math_sin((+$12)));
 $14 = $1;
 $15 = (+Math_cos((+$14)));
 $16 = $13 * $15;
 $17 = $3;
 $18 = (+Math_cos((+$17)));
 $19 = $1;
 $20 = (+Math_sin((+$19)));
 $21 = $18 * $20;
 $22 = $dl;
 $23 = (+Math_cos((+$22)));
 $24 = $21 * $23;
 $25 = $16 - $24;
 $x = $25;
 $26 = $x;
 $27 = $26 != 0.0;
 $28 = $y;
 $29 = $28 != 0.0;
 $or$cond = $27 | $29;
 if (!($or$cond)) {
  $33 = 0.0;
  $pa = $33;
  $34 = $pa;
  STACKTOP = sp;return (+$34);
 }
 $30 = $y;
 $31 = $x;
 $32 = (+Math_atan2((+$30),(+$31)));
 $33 = $32;
 $pa = $33;
 $34 = $pa;
 STACKTOP = sp;return (+$34);
}
function _eraPb06($date1,$date2,$bzeta,$bz,$btheta) {
 $date1 = +$date1;
 $date2 = +$date2;
 $bzeta = $bzeta|0;
 $bz = $bz|0;
 $btheta = $btheta|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, $r = 0, $r31 = 0.0, $r32 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $r = sp + 16|0;
 $0 = $date1;
 $1 = $date2;
 $2 = $bzeta;
 $3 = $bz;
 $4 = $btheta;
 $5 = $0;
 $6 = $1;
 _eraPmat06($5,$6,$r);
 $7 = ((($r)) + 24|0);
 $8 = ((($7)) + 16|0);
 $9 = +HEAPF64[$8>>3];
 $10 = ((($r)) + 16|0);
 $11 = +HEAPF64[$10>>3];
 $12 = (+Math_atan2((+$9),(+$11)));
 $13 = $3;
 HEAPF64[$13>>3] = $12;
 $14 = $3;
 $15 = +HEAPF64[$14>>3];
 _eraRz($15,$r);
 $16 = ((($r)) + 24|0);
 $17 = +HEAPF64[$16>>3];
 $18 = ((($r)) + 24|0);
 $19 = ((($18)) + 8|0);
 $20 = +HEAPF64[$19>>3];
 $21 = (+Math_atan2((+$17),(+$20)));
 $22 = $2;
 HEAPF64[$22>>3] = $21;
 $23 = ((($r)) + 48|0);
 $24 = +HEAPF64[$23>>3];
 $r31 = $24;
 $25 = ((($r)) + 48|0);
 $26 = ((($25)) + 8|0);
 $27 = +HEAPF64[$26>>3];
 $r32 = $27;
 $28 = ((($r)) + 16|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $29 < 0.0;
 $31 = $r31;
 $32 = $r31;
 $33 = $31 * $32;
 $34 = $r32;
 $35 = $r32;
 $36 = $34 * $35;
 $37 = $33 + $36;
 $38 = (+Math_sqrt((+$37)));
 $39 = (+Math_abs((+$38)));
 $40 = -$39;
 $41 = $30 ? $40 : $39;
 $42 = -$41;
 $43 = ((($r)) + 48|0);
 $44 = ((($43)) + 16|0);
 $45 = +HEAPF64[$44>>3];
 $46 = (+Math_atan2((+$42),(+$45)));
 $47 = $4;
 HEAPF64[$47>>3] = $46;
 STACKTOP = sp;return;
}
function _eraPdp($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0;
 var $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, $w = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $4 = $1;
 $5 = +HEAPF64[$4>>3];
 $6 = $3 * $5;
 $7 = $0;
 $8 = ((($7)) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = $1;
 $11 = ((($10)) + 8|0);
 $12 = +HEAPF64[$11>>3];
 $13 = $9 * $12;
 $14 = $6 + $13;
 $15 = $0;
 $16 = ((($15)) + 16|0);
 $17 = +HEAPF64[$16>>3];
 $18 = $1;
 $19 = ((($18)) + 16|0);
 $20 = +HEAPF64[$19>>3];
 $21 = $17 * $20;
 $22 = $14 + $21;
 $w = $22;
 $23 = $w;
 STACKTOP = sp;return (+$23);
}
function _eraPfw06($date1,$date2,$gamb,$phib,$psib,$epsa) {
 $date1 = +$date1;
 $date2 = +$date2;
 $gamb = $gamb|0;
 $phib = $phib|0;
 $psib = $psib|0;
 $epsa = $epsa|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $t = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $date1;
 $1 = $date2;
 $2 = $gamb;
 $3 = $phib;
 $4 = $psib;
 $5 = $epsa;
 $6 = $0;
 $7 = $6 - 2451545.0;
 $8 = $1;
 $9 = $7 + $8;
 $10 = $9 / 36525.0;
 $t = $10;
 $11 = $t;
 $12 = 2.6000000000000001E-8 * $11;
 $13 = -2.7879999999999998E-6 + $12;
 $14 = $t;
 $15 = $13 * $14;
 $16 = -3.1238000000000001E-4 + $15;
 $17 = $t;
 $18 = $16 * $17;
 $19 = 0.49320439999999999 + $18;
 $20 = $t;
 $21 = $19 * $20;
 $22 = 10.556378 + $21;
 $23 = $t;
 $24 = $22 * $23;
 $25 = -0.052928000000000003 + $24;
 $26 = $25 * 4.8481368110953598E-6;
 $27 = $2;
 HEAPF64[$27>>3] = $26;
 $28 = $t;
 $29 = -1.7599999999999999E-8 * $28;
 $30 = -4.4000000000000002E-7 + $29;
 $31 = $t;
 $32 = $30 * $31;
 $33 = 5.3288999999999995E-4 + $32;
 $34 = $t;
 $35 = $33 * $34;
 $36 = 0.0511268 + $35;
 $37 = $t;
 $38 = $36 * $37;
 $39 = -46.811016000000002 + $38;
 $40 = $t;
 $41 = $39 * $40;
 $42 = 84381.412819000005 + $41;
 $43 = $42 * 4.8481368110953598E-6;
 $44 = $3;
 HEAPF64[$44>>3] = $43;
 $45 = $t;
 $46 = -1.48E-8 * $45;
 $47 = -2.6452E-5 + $46;
 $48 = $t;
 $49 = $47 * $48;
 $50 = -1.8521999999999999E-4 + $49;
 $51 = $t;
 $52 = $50 * $51;
 $53 = 1.5584175 + $52;
 $54 = $t;
 $55 = $53 * $54;
 $56 = 5038.4814839999999 + $55;
 $57 = $t;
 $58 = $56 * $57;
 $59 = -0.041775 + $58;
 $60 = $59 * 4.8481368110953598E-6;
 $61 = $4;
 HEAPF64[$61>>3] = $60;
 $62 = $0;
 $63 = $1;
 $64 = (+_eraObl06($62,$63));
 $65 = $5;
 HEAPF64[$65>>3] = $64;
 STACKTOP = sp;return;
}
function _eraPlan94($date1,$date2,$np,$pv) {
 $date1 = +$date1;
 $date2 = +$date2;
 $np = $np|0;
 $pv = $pv|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0.0;
 var $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0.0, $222 = 0.0, $223 = 0.0;
 var $224 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0.0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0, $249 = 0, $25 = 0.0, $250 = 0, $251 = 0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0.0;
 var $260 = 0.0, $261 = 0, $262 = 0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0, $275 = 0, $276 = 0.0, $277 = 0.0, $278 = 0;
 var $279 = 0.0, $28 = 0.0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0.0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0;
 var $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0, $323 = 0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0.0;
 var $332 = 0.0, $333 = 0.0, $334 = 0.0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0.0, $340 = 0.0, $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0;
 var $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0.0, $356 = 0.0, $357 = 0.0, $358 = 0.0, $359 = 0.0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0.0;
 var $369 = 0.0, $37 = 0, $370 = 0.0, $371 = 0.0, $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0.0, $379 = 0.0, $38 = 0.0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0.0;
 var $387 = 0.0, $388 = 0.0, $389 = 0.0, $39 = 0, $390 = 0.0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0.0, $395 = 0.0, $396 = 0.0, $397 = 0.0, $398 = 0.0, $399 = 0.0, $4 = 0, $40 = 0, $400 = 0.0, $401 = 0.0, $402 = 0.0, $403 = 0.0;
 var $404 = 0.0, $405 = 0.0, $406 = 0.0, $407 = 0.0, $408 = 0.0, $409 = 0.0, $41 = 0, $410 = 0.0, $411 = 0.0, $412 = 0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0, $419 = 0, $42 = 0.0, $420 = 0.0, $421 = 0.0;
 var $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0, $426 = 0, $427 = 0.0, $428 = 0.0, $429 = 0.0, $43 = 0.0, $430 = 0.0, $431 = 0.0, $432 = 0.0, $433 = 0.0, $434 = 0.0, $435 = 0.0, $436 = 0.0, $437 = 0.0, $438 = 0.0, $439 = 0.0, $44 = 0.0;
 var $440 = 0.0, $441 = 0.0, $442 = 0.0, $443 = 0.0, $444 = 0.0, $445 = 0.0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0.0, $45 = 0.0, $450 = 0.0, $451 = 0.0, $452 = 0.0, $453 = 0.0, $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0.0, $458 = 0.0;
 var $459 = 0.0, $46 = 0.0, $460 = 0.0, $461 = 0.0, $462 = 0.0, $463 = 0.0, $464 = 0.0, $465 = 0.0, $466 = 0, $467 = 0, $468 = 0.0, $469 = 0.0, $47 = 0.0, $470 = 0.0, $471 = 0.0, $472 = 0.0, $473 = 0, $474 = 0, $475 = 0, $476 = 0.0;
 var $477 = 0.0, $478 = 0.0, $479 = 0.0, $48 = 0.0, $480 = 0.0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $ae = 0.0, $ae2 = 0.0, $am = 0.0, $arga = 0.0, $argl = 0.0, $at = 0.0, $ci2 = 0.0, $da = 0.0, $dae = 0.0, $de = 0.0, $di = 0.0, $dl = 0.0, $dmu = 0.0, $dom = 0.0, $dp = 0.0;
 var $i = 0, $jstat = 0, $k = 0, $or$cond = 0, $r = 0.0, $si2 = 0.0, $t = 0.0, $tl = 0.0, $v = 0.0, $x = 0.0, $xcw = 0.0, $xf = 0.0, $xm2 = 0.0, $xmc = 0.0, $xms = 0.0, $xp = 0.0, $xpxq2 = 0.0, $xq = 0.0, $xsw = 0.0, $y = 0.0;
 var $z = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $date1;
 $1 = $date2;
 $2 = $np;
 $3 = $pv;
 $4 = $2;
 $5 = ($4|0)<(1);
 $6 = $2;
 $7 = ($6|0)>(8);
 $or$cond = $5 | $7;
 if ($or$cond) {
  $jstat = -1;
  $k = 0;
  while(1) {
   $8 = $k;
   $9 = ($8|0)<(2);
   if (!($9)) {
    break;
   }
   $i = 0;
   while(1) {
    $10 = $i;
    $11 = ($10|0)<(3);
    if (!($11)) {
     break;
    }
    $12 = $i;
    $13 = $k;
    $14 = $3;
    $15 = (($14) + (($13*24)|0)|0);
    $16 = (($15) + ($12<<3)|0);
    HEAPF64[$16>>3] = 0.0;
    $17 = $i;
    $18 = (($17) + 1)|0;
    $i = $18;
   }
   $19 = $k;
   $20 = (($19) + 1)|0;
   $k = $20;
  }
  $484 = $jstat;
  STACKTOP = sp;return ($484|0);
 }
 $21 = $2;
 $22 = (($21) + -1)|0;
 $2 = $22;
 $23 = $0;
 $24 = $23 - 2451545.0;
 $25 = $1;
 $26 = $24 + $25;
 $27 = $26 / 365250.0;
 $t = $27;
 $28 = $t;
 $29 = (+Math_abs((+$28)));
 $30 = $29 <= 1.0;
 $31 = $30 ? 0 : 1;
 $jstat = $31;
 $32 = $2;
 $33 = (128600 + (($32*24)|0)|0);
 $34 = +HEAPF64[$33>>3];
 $35 = $2;
 $36 = (128600 + (($35*24)|0)|0);
 $37 = ((($36)) + 8|0);
 $38 = +HEAPF64[$37>>3];
 $39 = $2;
 $40 = (128600 + (($39*24)|0)|0);
 $41 = ((($40)) + 16|0);
 $42 = +HEAPF64[$41>>3];
 $43 = $t;
 $44 = $42 * $43;
 $45 = $38 + $44;
 $46 = $t;
 $47 = $45 * $46;
 $48 = $34 + $47;
 $da = $48;
 $49 = $2;
 $50 = (128792 + (($49*24)|0)|0);
 $51 = +HEAPF64[$50>>3];
 $52 = 3600.0 * $51;
 $53 = $2;
 $54 = (128792 + (($53*24)|0)|0);
 $55 = ((($54)) + 8|0);
 $56 = +HEAPF64[$55>>3];
 $57 = $2;
 $58 = (128792 + (($57*24)|0)|0);
 $59 = ((($58)) + 16|0);
 $60 = +HEAPF64[$59>>3];
 $61 = $t;
 $62 = $60 * $61;
 $63 = $56 + $62;
 $64 = $t;
 $65 = $63 * $64;
 $66 = $52 + $65;
 $67 = $66 * 4.8481368110953598E-6;
 $dl = $67;
 $68 = $2;
 $69 = (128984 + (($68*24)|0)|0);
 $70 = +HEAPF64[$69>>3];
 $71 = $2;
 $72 = (128984 + (($71*24)|0)|0);
 $73 = ((($72)) + 8|0);
 $74 = +HEAPF64[$73>>3];
 $75 = $2;
 $76 = (128984 + (($75*24)|0)|0);
 $77 = ((($76)) + 16|0);
 $78 = +HEAPF64[$77>>3];
 $79 = $t;
 $80 = $78 * $79;
 $81 = $74 + $80;
 $82 = $t;
 $83 = $81 * $82;
 $84 = $70 + $83;
 $de = $84;
 $85 = $2;
 $86 = (129176 + (($85*24)|0)|0);
 $87 = +HEAPF64[$86>>3];
 $88 = 3600.0 * $87;
 $89 = $2;
 $90 = (129176 + (($89*24)|0)|0);
 $91 = ((($90)) + 8|0);
 $92 = +HEAPF64[$91>>3];
 $93 = $2;
 $94 = (129176 + (($93*24)|0)|0);
 $95 = ((($94)) + 16|0);
 $96 = +HEAPF64[$95>>3];
 $97 = $t;
 $98 = $96 * $97;
 $99 = $92 + $98;
 $100 = $t;
 $101 = $99 * $100;
 $102 = $88 + $101;
 $103 = $102 * 4.8481368110953598E-6;
 $104 = (+_eraAnpm($103));
 $dp = $104;
 $105 = $2;
 $106 = (129368 + (($105*24)|0)|0);
 $107 = +HEAPF64[$106>>3];
 $108 = 3600.0 * $107;
 $109 = $2;
 $110 = (129368 + (($109*24)|0)|0);
 $111 = ((($110)) + 8|0);
 $112 = +HEAPF64[$111>>3];
 $113 = $2;
 $114 = (129368 + (($113*24)|0)|0);
 $115 = ((($114)) + 16|0);
 $116 = +HEAPF64[$115>>3];
 $117 = $t;
 $118 = $116 * $117;
 $119 = $112 + $118;
 $120 = $t;
 $121 = $119 * $120;
 $122 = $108 + $121;
 $123 = $122 * 4.8481368110953598E-6;
 $di = $123;
 $124 = $2;
 $125 = (129560 + (($124*24)|0)|0);
 $126 = +HEAPF64[$125>>3];
 $127 = 3600.0 * $126;
 $128 = $2;
 $129 = (129560 + (($128*24)|0)|0);
 $130 = ((($129)) + 8|0);
 $131 = +HEAPF64[$130>>3];
 $132 = $2;
 $133 = (129560 + (($132*24)|0)|0);
 $134 = ((($133)) + 16|0);
 $135 = +HEAPF64[$134>>3];
 $136 = $t;
 $137 = $135 * $136;
 $138 = $131 + $137;
 $139 = $t;
 $140 = $138 * $139;
 $141 = $127 + $140;
 $142 = $141 * 4.8481368110953598E-6;
 $143 = (+_eraAnpm($142));
 $dom = $143;
 $144 = $t;
 $145 = 0.35953619999999997 * $144;
 $dmu = $145;
 $k = 0;
 while(1) {
  $146 = $k;
  $147 = ($146|0)<(8);
  if (!($147)) {
   break;
  }
  $148 = $k;
  $149 = $2;
  $150 = (129752 + (($149*72)|0)|0);
  $151 = (($150) + ($148<<3)|0);
  $152 = +HEAPF64[$151>>3];
  $153 = $dmu;
  $154 = $152 * $153;
  $arga = $154;
  $155 = $k;
  $156 = $2;
  $157 = (130328 + (($156*80)|0)|0);
  $158 = (($157) + ($155<<3)|0);
  $159 = +HEAPF64[$158>>3];
  $160 = $dmu;
  $161 = $159 * $160;
  $argl = $161;
  $162 = $k;
  $163 = $2;
  $164 = (130968 + (($163*72)|0)|0);
  $165 = (($164) + ($162<<3)|0);
  $166 = +HEAPF64[$165>>3];
  $167 = $arga;
  $168 = (+Math_cos((+$167)));
  $169 = $166 * $168;
  $170 = $k;
  $171 = $2;
  $172 = (131544 + (($171*72)|0)|0);
  $173 = (($172) + ($170<<3)|0);
  $174 = +HEAPF64[$173>>3];
  $175 = $arga;
  $176 = (+Math_sin((+$175)));
  $177 = $174 * $176;
  $178 = $169 + $177;
  $179 = $178 * 9.9999999999999995E-8;
  $180 = $da;
  $181 = $180 + $179;
  $da = $181;
  $182 = $k;
  $183 = $2;
  $184 = (132120 + (($183*80)|0)|0);
  $185 = (($184) + ($182<<3)|0);
  $186 = +HEAPF64[$185>>3];
  $187 = $argl;
  $188 = (+Math_cos((+$187)));
  $189 = $186 * $188;
  $190 = $k;
  $191 = $2;
  $192 = (132760 + (($191*80)|0)|0);
  $193 = (($192) + ($190<<3)|0);
  $194 = +HEAPF64[$193>>3];
  $195 = $argl;
  $196 = (+Math_sin((+$195)));
  $197 = $194 * $196;
  $198 = $189 + $197;
  $199 = $198 * 9.9999999999999995E-8;
  $200 = $dl;
  $201 = $200 + $199;
  $dl = $201;
  $202 = $k;
  $203 = (($202) + 1)|0;
  $k = $203;
 }
 $204 = $2;
 $205 = (129752 + (($204*72)|0)|0);
 $206 = ((($205)) + 64|0);
 $207 = +HEAPF64[$206>>3];
 $208 = $dmu;
 $209 = $207 * $208;
 $arga = $209;
 $210 = $t;
 $211 = $2;
 $212 = (130968 + (($211*72)|0)|0);
 $213 = ((($212)) + 64|0);
 $214 = +HEAPF64[$213>>3];
 $215 = $arga;
 $216 = (+Math_cos((+$215)));
 $217 = $214 * $216;
 $218 = $2;
 $219 = (131544 + (($218*72)|0)|0);
 $220 = ((($219)) + 64|0);
 $221 = +HEAPF64[$220>>3];
 $222 = $arga;
 $223 = (+Math_sin((+$222)));
 $224 = $221 * $223;
 $225 = $217 + $224;
 $226 = $210 * $225;
 $227 = $226 * 9.9999999999999995E-8;
 $228 = $da;
 $229 = $228 + $227;
 $da = $229;
 $k = 8;
 while(1) {
  $230 = $k;
  $231 = ($230|0)<(10);
  if (!($231)) {
   break;
  }
  $232 = $k;
  $233 = $2;
  $234 = (130328 + (($233*80)|0)|0);
  $235 = (($234) + ($232<<3)|0);
  $236 = +HEAPF64[$235>>3];
  $237 = $dmu;
  $238 = $236 * $237;
  $argl = $238;
  $239 = $t;
  $240 = $k;
  $241 = $2;
  $242 = (132120 + (($241*80)|0)|0);
  $243 = (($242) + ($240<<3)|0);
  $244 = +HEAPF64[$243>>3];
  $245 = $argl;
  $246 = (+Math_cos((+$245)));
  $247 = $244 * $246;
  $248 = $k;
  $249 = $2;
  $250 = (132760 + (($249*80)|0)|0);
  $251 = (($250) + ($248<<3)|0);
  $252 = +HEAPF64[$251>>3];
  $253 = $argl;
  $254 = (+Math_sin((+$253)));
  $255 = $252 * $254;
  $256 = $247 + $255;
  $257 = $239 * $256;
  $258 = $257 * 9.9999999999999995E-8;
  $259 = $dl;
  $260 = $259 + $258;
  $dl = $260;
  $261 = $k;
  $262 = (($261) + 1)|0;
  $k = $262;
 }
 $263 = $dl;
 $264 = (+_fmod($263,6.2831853071795862));
 $dl = $264;
 $265 = $dl;
 $266 = $dp;
 $267 = $265 - $266;
 $am = $267;
 $268 = $am;
 $269 = $de;
 $270 = $am;
 $271 = (+Math_sin((+$270)));
 $272 = $269 * $271;
 $273 = $268 + $272;
 $ae = $273;
 $k = 0;
 $dae = 1.0;
 while(1) {
  $274 = $k;
  $275 = ($274|0)<(10);
  if (!($275)) {
   break;
  }
  $276 = $dae;
  $277 = (+Math_abs((+$276)));
  $278 = $277 > 9.9999999999999998E-13;
  if (!($278)) {
   break;
  }
  $279 = $am;
  $280 = $ae;
  $281 = $279 - $280;
  $282 = $de;
  $283 = $ae;
  $284 = (+Math_sin((+$283)));
  $285 = $282 * $284;
  $286 = $281 + $285;
  $287 = $de;
  $288 = $ae;
  $289 = (+Math_cos((+$288)));
  $290 = $287 * $289;
  $291 = 1.0 - $290;
  $292 = $286 / $291;
  $dae = $292;
  $293 = $dae;
  $294 = $ae;
  $295 = $294 + $293;
  $ae = $295;
  $296 = $k;
  $297 = (($296) + 1)|0;
  $k = $297;
  $298 = $k;
  $299 = ($298|0)==(9);
  if (!($299)) {
   continue;
  }
  $jstat = 2;
 }
 $300 = $ae;
 $301 = $300 / 2.0;
 $ae2 = $301;
 $302 = $de;
 $303 = 1.0 + $302;
 $304 = $de;
 $305 = 1.0 - $304;
 $306 = $303 / $305;
 $307 = (+Math_sqrt((+$306)));
 $308 = $ae2;
 $309 = (+Math_sin((+$308)));
 $310 = $307 * $309;
 $311 = $ae2;
 $312 = (+Math_cos((+$311)));
 $313 = (+Math_atan2((+$310),(+$312)));
 $314 = 2.0 * $313;
 $at = $314;
 $315 = $da;
 $316 = $de;
 $317 = $ae;
 $318 = (+Math_cos((+$317)));
 $319 = $316 * $318;
 $320 = 1.0 - $319;
 $321 = $315 * $320;
 $r = $321;
 $322 = $2;
 $323 = (133400 + ($322<<3)|0);
 $324 = +HEAPF64[$323>>3];
 $325 = 1.0 / $324;
 $326 = 1.0 + $325;
 $327 = $da;
 $328 = $da;
 $329 = $327 * $328;
 $330 = $da;
 $331 = $329 * $330;
 $332 = $326 / $331;
 $333 = (+Math_sqrt((+$332)));
 $334 = 0.017202098950000001 * $333;
 $v = $334;
 $335 = $di;
 $336 = $335 / 2.0;
 $337 = (+Math_sin((+$336)));
 $si2 = $337;
 $338 = $si2;
 $339 = $dom;
 $340 = (+Math_cos((+$339)));
 $341 = $338 * $340;
 $xq = $341;
 $342 = $si2;
 $343 = $dom;
 $344 = (+Math_sin((+$343)));
 $345 = $342 * $344;
 $xp = $345;
 $346 = $at;
 $347 = $dp;
 $348 = $346 + $347;
 $tl = $348;
 $349 = $tl;
 $350 = (+Math_sin((+$349)));
 $xsw = $350;
 $351 = $tl;
 $352 = (+Math_cos((+$351)));
 $xcw = $352;
 $353 = $xp;
 $354 = $xcw;
 $355 = $353 * $354;
 $356 = $xq;
 $357 = $xsw;
 $358 = $356 * $357;
 $359 = $355 - $358;
 $360 = 2.0 * $359;
 $xm2 = $360;
 $361 = $da;
 $362 = $de;
 $363 = $de;
 $364 = $362 * $363;
 $365 = 1.0 - $364;
 $366 = (+Math_sqrt((+$365)));
 $367 = $361 / $366;
 $xf = $367;
 $368 = $di;
 $369 = $368 / 2.0;
 $370 = (+Math_cos((+$369)));
 $ci2 = $370;
 $371 = $de;
 $372 = $dp;
 $373 = (+Math_sin((+$372)));
 $374 = $371 * $373;
 $375 = $xsw;
 $376 = $374 + $375;
 $377 = $xf;
 $378 = $376 * $377;
 $xms = $378;
 $379 = $de;
 $380 = $dp;
 $381 = (+Math_cos((+$380)));
 $382 = $379 * $381;
 $383 = $xcw;
 $384 = $382 + $383;
 $385 = $xf;
 $386 = $384 * $385;
 $xmc = $386;
 $387 = $xp;
 $388 = 2.0 * $387;
 $389 = $xq;
 $390 = $388 * $389;
 $xpxq2 = $390;
 $391 = $r;
 $392 = $xcw;
 $393 = $xm2;
 $394 = $xp;
 $395 = $393 * $394;
 $396 = $392 - $395;
 $397 = $391 * $396;
 $x = $397;
 $398 = $r;
 $399 = $xsw;
 $400 = $xm2;
 $401 = $xq;
 $402 = $400 * $401;
 $403 = $399 + $402;
 $404 = $398 * $403;
 $y = $404;
 $405 = $r;
 $406 = $xm2;
 $407 = -$406;
 $408 = $ci2;
 $409 = $407 * $408;
 $410 = $405 * $409;
 $z = $410;
 $411 = $x;
 $412 = $3;
 HEAPF64[$412>>3] = $411;
 $413 = $y;
 $414 = $413 * 0.91748206206918181;
 $415 = $z;
 $416 = $415 * 0.39777715593191371;
 $417 = $414 - $416;
 $418 = $3;
 $419 = ((($418)) + 8|0);
 HEAPF64[$419>>3] = $417;
 $420 = $y;
 $421 = $420 * 0.39777715593191371;
 $422 = $z;
 $423 = $422 * 0.91748206206918181;
 $424 = $421 + $423;
 $425 = $3;
 $426 = ((($425)) + 16|0);
 HEAPF64[$426>>3] = $424;
 $427 = $v;
 $428 = $xp;
 $429 = 2.0 * $428;
 $430 = $xp;
 $431 = $429 * $430;
 $432 = -1.0 + $431;
 $433 = $xms;
 $434 = $432 * $433;
 $435 = $xpxq2;
 $436 = $xmc;
 $437 = $435 * $436;
 $438 = $434 + $437;
 $439 = $427 * $438;
 $x = $439;
 $440 = $v;
 $441 = $xq;
 $442 = 2.0 * $441;
 $443 = $xq;
 $444 = $442 * $443;
 $445 = 1.0 - $444;
 $446 = $xmc;
 $447 = $445 * $446;
 $448 = $xpxq2;
 $449 = $xms;
 $450 = $448 * $449;
 $451 = $447 - $450;
 $452 = $440 * $451;
 $y = $452;
 $453 = $v;
 $454 = $ci2;
 $455 = 2.0 * $454;
 $456 = $xp;
 $457 = $xms;
 $458 = $456 * $457;
 $459 = $xq;
 $460 = $xmc;
 $461 = $459 * $460;
 $462 = $458 + $461;
 $463 = $455 * $462;
 $464 = $453 * $463;
 $z = $464;
 $465 = $x;
 $466 = $3;
 $467 = ((($466)) + 24|0);
 HEAPF64[$467>>3] = $465;
 $468 = $y;
 $469 = $468 * 0.91748206206918181;
 $470 = $z;
 $471 = $470 * 0.39777715593191371;
 $472 = $469 - $471;
 $473 = $3;
 $474 = ((($473)) + 24|0);
 $475 = ((($474)) + 8|0);
 HEAPF64[$475>>3] = $472;
 $476 = $y;
 $477 = $476 * 0.39777715593191371;
 $478 = $z;
 $479 = $478 * 0.91748206206918181;
 $480 = $477 + $479;
 $481 = $3;
 $482 = ((($481)) + 24|0);
 $483 = ((($482)) + 16|0);
 HEAPF64[$483>>3] = $480;
 $484 = $jstat;
 STACKTOP = sp;return ($484|0);
}
function _eraPmat00($date1,$date2,$rbp) {
 $date1 = +$date1;
 $date2 = +$date2;
 $rbp = $rbp|0;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $rb = 0, $rp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $rb = sp + 72|0;
 $rp = sp;
 $0 = $date1;
 $1 = $date2;
 $2 = $rbp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 _eraBp00($3,$4,$rb,$rp,$5);
 STACKTOP = sp;return;
}
function _eraPmat06($date1,$date2,$rbp) {
 $date1 = +$date1;
 $date2 = +$date2;
 $rbp = $rbp|0;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $epsa = 0, $gamb = 0, $phib = 0, $psib = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $gamb = sp + 24|0;
 $phib = sp + 16|0;
 $psib = sp + 8|0;
 $epsa = sp;
 $0 = $date1;
 $1 = $date2;
 $2 = $rbp;
 $3 = $0;
 $4 = $1;
 _eraPfw06($3,$4,$gamb,$phib,$psib,$epsa);
 $5 = +HEAPF64[$gamb>>3];
 $6 = +HEAPF64[$phib>>3];
 $7 = +HEAPF64[$psib>>3];
 $8 = +HEAPF64[$epsa>>3];
 $9 = $2;
 _eraFw2m($5,$6,$7,$8,$9);
 STACKTOP = sp;return;
}
function _eraPmat76($date1,$date2,$rmatp) {
 $date1 = +$date1;
 $date2 = +$date2;
 $rmatp = $rmatp|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $theta = 0, $wmat = 0, $z = 0, $zeta = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $zeta = sp + 88|0;
 $z = sp + 80|0;
 $theta = sp + 72|0;
 $wmat = sp;
 $0 = $date1;
 $1 = $date2;
 $2 = $rmatp;
 $3 = $0;
 $4 = $1;
 _eraPrec76(2451545.0,0.0,$3,$4,$zeta,$z,$theta);
 _eraIr($wmat);
 $5 = +HEAPF64[$zeta>>3];
 $6 = -$5;
 _eraRz($6,$wmat);
 $7 = +HEAPF64[$theta>>3];
 _eraRy($7,$wmat);
 $8 = +HEAPF64[$z>>3];
 $9 = -$8;
 _eraRz($9,$wmat);
 $10 = $2;
 _eraCr($wmat,$10);
 STACKTOP = sp;return;
}
function _eraPm($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0;
 var $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = +HEAPF64[$1>>3];
 $3 = $0;
 $4 = +HEAPF64[$3>>3];
 $5 = $2 * $4;
 $6 = $0;
 $7 = ((($6)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = $0;
 $10 = ((($9)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = $8 * $11;
 $13 = $5 + $12;
 $14 = $0;
 $15 = ((($14)) + 16|0);
 $16 = +HEAPF64[$15>>3];
 $17 = $0;
 $18 = ((($17)) + 16|0);
 $19 = +HEAPF64[$18>>3];
 $20 = $16 * $19;
 $21 = $13 + $20;
 $22 = (+Math_sqrt((+$21)));
 STACKTOP = sp;return (+$22);
}
function _eraPmp($a,$b,$amb) {
 $a = $a|0;
 $b = $b|0;
 $amb = $amb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $amb;
 $3 = $0;
 $4 = +HEAPF64[$3>>3];
 $5 = $1;
 $6 = +HEAPF64[$5>>3];
 $7 = $4 - $6;
 $8 = $2;
 HEAPF64[$8>>3] = $7;
 $9 = $0;
 $10 = ((($9)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = $1;
 $13 = ((($12)) + 8|0);
 $14 = +HEAPF64[$13>>3];
 $15 = $11 - $14;
 $16 = $2;
 $17 = ((($16)) + 8|0);
 HEAPF64[$17>>3] = $15;
 $18 = $0;
 $19 = ((($18)) + 16|0);
 $20 = +HEAPF64[$19>>3];
 $21 = $1;
 $22 = ((($21)) + 16|0);
 $23 = +HEAPF64[$22>>3];
 $24 = $20 - $23;
 $25 = $2;
 $26 = ((($25)) + 16|0);
 HEAPF64[$26>>3] = $24;
 STACKTOP = sp;return;
}
function _eraPmpx($rc,$dc,$pr,$pd,$px,$rv,$pmt,$pob,$pco) {
 $rc = +$rc;
 $dc = +$dc;
 $pr = +$pr;
 $pd = +$pd;
 $px = +$px;
 $rv = +$rv;
 $pmt = +$pmt;
 $pob = $pob|0;
 $pco = $pco|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $AULTY = 0.0, $VF = 0.0, $cd = 0.0, $cr = 0.0, $dt = 0.0, $i = 0, $p = 0;
 var $pdz = 0.0, $pm = 0, $pxr = 0.0, $sd = 0.0, $sr = 0.0, $w = 0, $x = 0.0, $y = 0.0, $z = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $p = sp + 56|0;
 $w = sp + 32|0;
 $pm = sp;
 $0 = $rc;
 $1 = $dc;
 $2 = $pr;
 $3 = $pd;
 $4 = $px;
 $5 = $rv;
 $6 = $pmt;
 $7 = $pob;
 $8 = $pco;
 $VF = 0.21094952755677604;
 $AULTY = 1.5812507351636374E-5;
 $9 = $0;
 $10 = (+Math_sin((+$9)));
 $sr = $10;
 $11 = $0;
 $12 = (+Math_cos((+$11)));
 $cr = $12;
 $13 = $1;
 $14 = (+Math_sin((+$13)));
 $sd = $14;
 $15 = $1;
 $16 = (+Math_cos((+$15)));
 $cd = $16;
 $17 = $cr;
 $18 = $cd;
 $19 = $17 * $18;
 $x = $19;
 HEAPF64[$p>>3] = $19;
 $20 = $sr;
 $21 = $cd;
 $22 = $20 * $21;
 $y = $22;
 $23 = ((($p)) + 8|0);
 HEAPF64[$23>>3] = $22;
 $24 = $sd;
 $z = $24;
 $25 = ((($p)) + 16|0);
 HEAPF64[$25>>3] = $24;
 $26 = $6;
 $27 = $7;
 $28 = (+_eraPdp($p,$27));
 $29 = $28 * 1.5812507351636374E-5;
 $30 = $26 + $29;
 $dt = $30;
 $31 = $4;
 $32 = $31 * 4.8481368110953598E-6;
 $pxr = $32;
 $33 = $5;
 $34 = 0.21094952755677604 * $33;
 $35 = $pxr;
 $36 = $34 * $35;
 HEAPF64[$w>>3] = $36;
 $37 = $3;
 $38 = $z;
 $39 = $37 * $38;
 $pdz = $39;
 $40 = $2;
 $41 = -$40;
 $42 = $y;
 $43 = $41 * $42;
 $44 = $pdz;
 $45 = $cr;
 $46 = $44 * $45;
 $47 = $43 - $46;
 $48 = +HEAPF64[$w>>3];
 $49 = $x;
 $50 = $48 * $49;
 $51 = $47 + $50;
 HEAPF64[$pm>>3] = $51;
 $52 = $2;
 $53 = $x;
 $54 = $52 * $53;
 $55 = $pdz;
 $56 = $sr;
 $57 = $55 * $56;
 $58 = $54 - $57;
 $59 = +HEAPF64[$w>>3];
 $60 = $y;
 $61 = $59 * $60;
 $62 = $58 + $61;
 $63 = ((($pm)) + 8|0);
 HEAPF64[$63>>3] = $62;
 $64 = $3;
 $65 = $cd;
 $66 = $64 * $65;
 $67 = +HEAPF64[$w>>3];
 $68 = $z;
 $69 = $67 * $68;
 $70 = $66 + $69;
 $71 = ((($pm)) + 16|0);
 HEAPF64[$71>>3] = $70;
 $i = 0;
 while(1) {
  $72 = $i;
  $73 = ($72|0)<(3);
  if (!($73)) {
   break;
  }
  $74 = $dt;
  $75 = $i;
  $76 = (($pm) + ($75<<3)|0);
  $77 = +HEAPF64[$76>>3];
  $78 = $74 * $77;
  $79 = $pxr;
  $80 = $i;
  $81 = $7;
  $82 = (($81) + ($80<<3)|0);
  $83 = +HEAPF64[$82>>3];
  $84 = $79 * $83;
  $85 = $78 - $84;
  $86 = $i;
  $87 = (($p) + ($86<<3)|0);
  $88 = +HEAPF64[$87>>3];
  $89 = $88 + $85;
  HEAPF64[$87>>3] = $89;
  $90 = $i;
  $91 = (($90) + 1)|0;
  $i = $91;
 }
 $92 = $8;
 _eraPn($p,$w,$92);
 STACKTOP = sp;return;
}
function _eraPmsafe($ra1,$dec1,$pmr1,$pmd1,$px1,$rv1,$ep1a,$ep1b,$ep2a,$ep2b,$ra2,$dec2,$pmr2,$pmd2,$px2,$rv2) {
 $ra1 = +$ra1;
 $dec1 = +$dec1;
 $pmr1 = +$pmr1;
 $pmd1 = +$pmd1;
 $px1 = +$px1;
 $rv1 = +$rv1;
 $ep1a = +$ep1a;
 $ep1b = +$ep1b;
 $ep2a = +$ep2a;
 $ep2b = +$ep2b;
 $ra2 = $ra2|0;
 $dec2 = $dec2|0;
 $pmr2 = $pmr2|0;
 $pmd2 = $pmd2|0;
 $px2 = $px2|0;
 $rv2 = $rv2|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $F = 0.0, $PXMIN = 0.0;
 var $j = 0, $jpx = 0, $pm = 0.0, $px1a = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ra1;
 $1 = $dec1;
 $2 = $pmr1;
 $3 = $pmd1;
 $4 = $px1;
 $5 = $rv1;
 $6 = $ep1a;
 $7 = $ep1b;
 $8 = $ep2a;
 $9 = $ep2b;
 $10 = $ra2;
 $11 = $dec2;
 $12 = $pmr2;
 $13 = $pmd2;
 $14 = $px2;
 $15 = $rv2;
 $PXMIN = 4.9999999999999998E-7;
 $F = 326.0;
 $16 = $0;
 $17 = $1;
 $18 = $0;
 $19 = $2;
 $20 = $18 + $19;
 $21 = $1;
 $22 = $3;
 $23 = $21 + $22;
 $24 = (+_eraSeps($16,$17,$20,$23));
 $pm = $24;
 $jpx = 0;
 $25 = $4;
 $px1a = $25;
 $26 = $pm;
 $27 = $26 * 326.0;
 $pm = $27;
 $28 = $px1a;
 $29 = $pm;
 $30 = $28 < $29;
 if ($30) {
  $jpx = 1;
  $31 = $pm;
  $px1a = $31;
 }
 $32 = $px1a;
 $33 = $32 < 4.9999999999999998E-7;
 if ($33) {
  $jpx = 1;
  $px1a = 4.9999999999999998E-7;
 }
 $34 = $0;
 $35 = $1;
 $36 = $2;
 $37 = $3;
 $38 = $px1a;
 $39 = $5;
 $40 = $6;
 $41 = $7;
 $42 = $8;
 $43 = $9;
 $44 = $10;
 $45 = $11;
 $46 = $12;
 $47 = $13;
 $48 = $14;
 $49 = $15;
 $50 = (_eraStarpm($34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49)|0);
 $j = $50;
 $51 = $j;
 $52 = (($51|0) % 2)&-1;
 $53 = ($52|0)!=(0);
 if ($53) {
  $57 = $j;
  STACKTOP = sp;return ($57|0);
 }
 $54 = $jpx;
 $55 = $j;
 $56 = (($55) + ($54))|0;
 $j = $56;
 $57 = $j;
 STACKTOP = sp;return ($57|0);
}
function _eraPn00a($date1,$date2,$dpsi,$deps,$epsa,$rb,$rp,$rbp,$rn,$rbpn) {
 $date1 = +$date1;
 $date2 = +$date2;
 $dpsi = $dpsi|0;
 $deps = $deps|0;
 $epsa = $epsa|0;
 $rb = $rb|0;
 $rp = $rp|0;
 $rbp = $rbp|0;
 $rn = $rn|0;
 $rbpn = $rbpn|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $date1;
 $1 = $date2;
 $2 = $dpsi;
 $3 = $deps;
 $4 = $epsa;
 $5 = $rb;
 $6 = $rp;
 $7 = $rbp;
 $8 = $rn;
 $9 = $rbpn;
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 _eraNut00a($10,$11,$12,$13);
 $14 = $0;
 $15 = $1;
 $16 = $2;
 $17 = +HEAPF64[$16>>3];
 $18 = $3;
 $19 = +HEAPF64[$18>>3];
 $20 = $4;
 $21 = $5;
 $22 = $6;
 $23 = $7;
 $24 = $8;
 $25 = $9;
 _eraPn00($14,$15,$17,$19,$20,$21,$22,$23,$24,$25);
 STACKTOP = sp;return;
}
function _eraPn00b($date1,$date2,$dpsi,$deps,$epsa,$rb,$rp,$rbp,$rn,$rbpn) {
 $date1 = +$date1;
 $date2 = +$date2;
 $dpsi = $dpsi|0;
 $deps = $deps|0;
 $epsa = $epsa|0;
 $rb = $rb|0;
 $rp = $rp|0;
 $rbp = $rbp|0;
 $rn = $rn|0;
 $rbpn = $rbpn|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $date1;
 $1 = $date2;
 $2 = $dpsi;
 $3 = $deps;
 $4 = $epsa;
 $5 = $rb;
 $6 = $rp;
 $7 = $rbp;
 $8 = $rn;
 $9 = $rbpn;
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 _eraNut00b($10,$11,$12,$13);
 $14 = $0;
 $15 = $1;
 $16 = $2;
 $17 = +HEAPF64[$16>>3];
 $18 = $3;
 $19 = +HEAPF64[$18>>3];
 $20 = $4;
 $21 = $5;
 $22 = $6;
 $23 = $7;
 $24 = $8;
 $25 = $9;
 _eraPn00($14,$15,$17,$19,$20,$21,$22,$23,$24,$25);
 STACKTOP = sp;return;
}
function _eraPn00($date1,$date2,$dpsi,$deps,$epsa,$rb,$rp,$rbp,$rn,$rbpn) {
 $date1 = +$date1;
 $date2 = +$date2;
 $dpsi = +$dpsi;
 $deps = +$deps;
 $epsa = $epsa|0;
 $rb = $rb|0;
 $rp = $rp|0;
 $rbp = $rbp|0;
 $rn = $rn|0;
 $rbpn = $rbpn|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $depspr = 0, $dpsipr = 0, $rbpw = 0, $rnw = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dpsipr = sp + 152|0;
 $depspr = sp + 144|0;
 $rbpw = sp + 72|0;
 $rnw = sp;
 $0 = $date1;
 $1 = $date2;
 $2 = $dpsi;
 $3 = $deps;
 $4 = $epsa;
 $5 = $rb;
 $6 = $rp;
 $7 = $rbp;
 $8 = $rn;
 $9 = $rbpn;
 $10 = $0;
 $11 = $1;
 _eraPr00($10,$11,$dpsipr,$depspr);
 $12 = $0;
 $13 = $1;
 $14 = (+_eraObl80($12,$13));
 $15 = +HEAPF64[$depspr>>3];
 $16 = $14 + $15;
 $17 = $4;
 HEAPF64[$17>>3] = $16;
 $18 = $0;
 $19 = $1;
 $20 = $5;
 $21 = $6;
 _eraBp00($18,$19,$20,$21,$rbpw);
 $22 = $7;
 _eraCr($rbpw,$22);
 $23 = $4;
 $24 = +HEAPF64[$23>>3];
 $25 = $2;
 $26 = $3;
 _eraNumat($24,$25,$26,$rnw);
 $27 = $8;
 _eraCr($rnw,$27);
 $28 = $9;
 _eraRxr($rnw,$rbpw,$28);
 STACKTOP = sp;return;
}
function _eraPn06a($date1,$date2,$dpsi,$deps,$epsa,$rb,$rp,$rbp,$rn,$rbpn) {
 $date1 = +$date1;
 $date2 = +$date2;
 $dpsi = $dpsi|0;
 $deps = $deps|0;
 $epsa = $epsa|0;
 $rb = $rb|0;
 $rp = $rp|0;
 $rbp = $rbp|0;
 $rn = $rn|0;
 $rbpn = $rbpn|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $date1;
 $1 = $date2;
 $2 = $dpsi;
 $3 = $deps;
 $4 = $epsa;
 $5 = $rb;
 $6 = $rp;
 $7 = $rbp;
 $8 = $rn;
 $9 = $rbpn;
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 _eraNut06a($10,$11,$12,$13);
 $14 = $0;
 $15 = $1;
 $16 = $2;
 $17 = +HEAPF64[$16>>3];
 $18 = $3;
 $19 = +HEAPF64[$18>>3];
 $20 = $4;
 $21 = $5;
 $22 = $6;
 $23 = $7;
 $24 = $8;
 $25 = $9;
 _eraPn06($14,$15,$17,$19,$20,$21,$22,$23,$24,$25);
 STACKTOP = sp;return;
}
function _eraPn06($date1,$date2,$dpsi,$deps,$epsa,$rb,$rp,$rbp,$rn,$rbpn) {
 $date1 = +$date1;
 $date2 = +$date2;
 $dpsi = +$dpsi;
 $deps = +$deps;
 $epsa = $epsa|0;
 $rb = $rb|0;
 $rp = $rp|0;
 $rbp = $rbp|0;
 $rn = $rn|0;
 $rbpn = $rbpn|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eps = 0, $gamb = 0, $phib = 0, $psib = 0, $r1 = 0;
 var $r2 = 0, $rt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $gamb = sp + 240|0;
 $phib = sp + 232|0;
 $psib = sp + 224|0;
 $eps = sp + 216|0;
 $r1 = sp + 144|0;
 $r2 = sp + 72|0;
 $rt = sp;
 $0 = $date1;
 $1 = $date2;
 $2 = $dpsi;
 $3 = $deps;
 $4 = $epsa;
 $5 = $rb;
 $6 = $rp;
 $7 = $rbp;
 $8 = $rn;
 $9 = $rbpn;
 _eraPfw06(2400000.5,51544.5,$gamb,$phib,$psib,$eps);
 $10 = +HEAPF64[$gamb>>3];
 $11 = +HEAPF64[$phib>>3];
 $12 = +HEAPF64[$psib>>3];
 $13 = +HEAPF64[$eps>>3];
 _eraFw2m($10,$11,$12,$13,$r1);
 $14 = $5;
 _eraCr($r1,$14);
 $15 = $0;
 $16 = $1;
 _eraPfw06($15,$16,$gamb,$phib,$psib,$eps);
 $17 = +HEAPF64[$gamb>>3];
 $18 = +HEAPF64[$phib>>3];
 $19 = +HEAPF64[$psib>>3];
 $20 = +HEAPF64[$eps>>3];
 _eraFw2m($17,$18,$19,$20,$r2);
 $21 = $7;
 _eraCr($r2,$21);
 _eraTr($r1,$rt);
 $22 = $6;
 _eraRxr($r2,$rt,$22);
 $23 = +HEAPF64[$gamb>>3];
 $24 = +HEAPF64[$phib>>3];
 $25 = +HEAPF64[$psib>>3];
 $26 = $2;
 $27 = $25 + $26;
 $28 = +HEAPF64[$eps>>3];
 $29 = $3;
 $30 = $28 + $29;
 _eraFw2m($23,$24,$27,$30,$r1);
 $31 = $9;
 _eraCr($r1,$31);
 _eraTr($r2,$rt);
 $32 = $8;
 _eraRxr($r1,$rt,$32);
 $33 = +HEAPF64[$eps>>3];
 $34 = $4;
 HEAPF64[$34>>3] = $33;
 STACKTOP = sp;return;
}
function _eraPn($p,$r,$u) {
 $p = $p|0;
 $r = $r|0;
 $u = $u|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $w = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $r;
 $2 = $u;
 $3 = $0;
 $4 = (+_eraPm($3));
 $w = $4;
 $5 = $w;
 $6 = $5 == 0.0;
 if ($6) {
  $7 = $2;
  _eraZp($7);
 } else {
  $8 = $w;
  $9 = 1.0 / $8;
  $10 = $0;
  $11 = $2;
  _eraSxp($9,$10,$11);
 }
 $12 = $w;
 $13 = $1;
 HEAPF64[$13>>3] = $12;
 STACKTOP = sp;return;
}
function _eraPnm00a($date1,$date2,$rbpn) {
 $date1 = +$date1;
 $date2 = +$date2;
 $rbpn = $rbpn|0;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $deps = 0, $dpsi = 0, $epsa = 0, $rb = 0, $rbp = 0, $rn = 0, $rp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dpsi = sp + 304|0;
 $deps = sp + 296|0;
 $epsa = sp + 288|0;
 $rb = sp + 216|0;
 $rp = sp + 144|0;
 $rbp = sp + 72|0;
 $rn = sp;
 $0 = $date1;
 $1 = $date2;
 $2 = $rbpn;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 _eraPn00a($3,$4,$dpsi,$deps,$epsa,$rb,$rp,$rbp,$rn,$5);
 STACKTOP = sp;return;
}
function _eraPnm00b($date1,$date2,$rbpn) {
 $date1 = +$date1;
 $date2 = +$date2;
 $rbpn = $rbpn|0;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $deps = 0, $dpsi = 0, $epsa = 0, $rb = 0, $rbp = 0, $rn = 0, $rp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dpsi = sp + 304|0;
 $deps = sp + 296|0;
 $epsa = sp + 288|0;
 $rb = sp + 216|0;
 $rp = sp + 144|0;
 $rbp = sp + 72|0;
 $rn = sp;
 $0 = $date1;
 $1 = $date2;
 $2 = $rbpn;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 _eraPn00b($3,$4,$dpsi,$deps,$epsa,$rb,$rp,$rbp,$rn,$5);
 STACKTOP = sp;return;
}
function _eraPnm06a($date1,$date2,$rnpb) {
 $date1 = +$date1;
 $date2 = +$date2;
 $rnpb = $rnpb|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $de = 0, $dp = 0, $epsa = 0, $gamb = 0;
 var $phib = 0, $psib = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $gamb = sp + 40|0;
 $phib = sp + 32|0;
 $psib = sp + 24|0;
 $epsa = sp + 16|0;
 $dp = sp + 8|0;
 $de = sp;
 $0 = $date1;
 $1 = $date2;
 $2 = $rnpb;
 $3 = $0;
 $4 = $1;
 _eraPfw06($3,$4,$gamb,$phib,$psib,$epsa);
 $5 = $0;
 $6 = $1;
 _eraNut06a($5,$6,$dp,$de);
 $7 = +HEAPF64[$gamb>>3];
 $8 = +HEAPF64[$phib>>3];
 $9 = +HEAPF64[$psib>>3];
 $10 = +HEAPF64[$dp>>3];
 $11 = $9 + $10;
 $12 = +HEAPF64[$epsa>>3];
 $13 = +HEAPF64[$de>>3];
 $14 = $12 + $13;
 $15 = $2;
 _eraFw2m($7,$8,$11,$14,$15);
 STACKTOP = sp;return;
}
function _eraPnm80($date1,$date2,$rmatpn) {
 $date1 = +$date1;
 $date2 = +$date2;
 $rmatpn = $rmatpn|0;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $rmatn = 0, $rmatp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $rmatp = sp + 72|0;
 $rmatn = sp;
 $0 = $date1;
 $1 = $date2;
 $2 = $rmatpn;
 $3 = $0;
 $4 = $1;
 _eraPmat76($3,$4,$rmatp);
 $5 = $0;
 $6 = $1;
 _eraNutm80($5,$6,$rmatn);
 $7 = $2;
 _eraRxr($rmatn,$rmatp,$7);
 STACKTOP = sp;return;
}
function _eraPom00($xp,$yp,$sp,$rpom) {
 $xp = +$xp;
 $yp = +$yp;
 $sp = +$sp;
 $rpom = $rpom|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $xp;
 $1 = $yp;
 $2 = $sp;
 $3 = $rpom;
 $4 = $3;
 _eraIr($4);
 $5 = $2;
 $6 = $3;
 _eraRz($5,$6);
 $7 = $0;
 $8 = -$7;
 $9 = $3;
 _eraRy($8,$9);
 $10 = $1;
 $11 = -$10;
 $12 = $3;
 _eraRx($11,$12);
 STACKTOP = sp;return;
}
function _eraPpp($a,$b,$apb) {
 $a = $a|0;
 $b = $b|0;
 $apb = $apb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $apb;
 $3 = $0;
 $4 = +HEAPF64[$3>>3];
 $5 = $1;
 $6 = +HEAPF64[$5>>3];
 $7 = $4 + $6;
 $8 = $2;
 HEAPF64[$8>>3] = $7;
 $9 = $0;
 $10 = ((($9)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = $1;
 $13 = ((($12)) + 8|0);
 $14 = +HEAPF64[$13>>3];
 $15 = $11 + $14;
 $16 = $2;
 $17 = ((($16)) + 8|0);
 HEAPF64[$17>>3] = $15;
 $18 = $0;
 $19 = ((($18)) + 16|0);
 $20 = +HEAPF64[$19>>3];
 $21 = $1;
 $22 = ((($21)) + 16|0);
 $23 = +HEAPF64[$22>>3];
 $24 = $20 + $23;
 $25 = $2;
 $26 = ((($25)) + 16|0);
 HEAPF64[$26>>3] = $24;
 STACKTOP = sp;return;
}
function _eraPpsp($a,$s,$b,$apsb) {
 $a = $a|0;
 $s = +$s;
 $b = $b|0;
 $apsb = $apsb|0;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $sb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $sb = sp;
 $0 = $a;
 $1 = $s;
 $2 = $b;
 $3 = $apsb;
 $4 = $1;
 $5 = $2;
 _eraSxp($4,$5,$sb);
 $6 = $0;
 $7 = $3;
 _eraPpp($6,$sb,$7);
 STACKTOP = sp;return;
}
function _eraPr00($date1,$date2,$dpsipr,$depspr) {
 $date1 = +$date1;
 $date2 = +$date2;
 $dpsipr = $dpsipr|0;
 $depspr = $depspr|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $t = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $date1;
 $1 = $date2;
 $2 = $dpsipr;
 $3 = $depspr;
 $4 = $0;
 $5 = $4 - 2451545.0;
 $6 = $1;
 $7 = $5 + $6;
 $8 = $7 / 36525.0;
 $t = $8;
 $9 = $t;
 $10 = -1.4527441954447247E-6 * $9;
 $11 = $2;
 HEAPF64[$11>>3] = $10;
 $12 = $t;
 $13 = -1.2236697311204688E-7 * $12;
 $14 = $3;
 HEAPF64[$14>>3] = $13;
 STACKTOP = sp;return;
}
function _eraPrec76($date01,$date02,$date11,$date12,$zeta,$z,$theta) {
 $date01 = +$date01;
 $date02 = +$date02;
 $date11 = +$date11;
 $date12 = +$date12;
 $zeta = $zeta|0;
 $z = $z|0;
 $theta = $theta|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0, $8 = 0.0, $9 = 0.0, $t = 0.0, $t0 = 0.0, $tas2r = 0.0, $w = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $date01;
 $1 = $date02;
 $2 = $date11;
 $3 = $date12;
 $4 = $zeta;
 $5 = $z;
 $6 = $theta;
 $7 = $0;
 $8 = $7 - 2451545.0;
 $9 = $1;
 $10 = $8 + $9;
 $11 = $10 / 36525.0;
 $t0 = $11;
 $12 = $2;
 $13 = $0;
 $14 = $12 - $13;
 $15 = $3;
 $16 = $1;
 $17 = $15 - $16;
 $18 = $14 + $17;
 $19 = $18 / 36525.0;
 $t = $19;
 $20 = $t;
 $21 = $20 * 4.8481368110953598E-6;
 $tas2r = $21;
 $22 = $t0;
 $23 = 1.3899999999999999E-4 * $22;
 $24 = 1.39656 - $23;
 $25 = $t0;
 $26 = $24 * $25;
 $27 = 2306.2181 + $26;
 $w = $27;
 $28 = $w;
 $29 = $t0;
 $30 = 3.4400000000000001E-4 * $29;
 $31 = 0.30187999999999998 - $30;
 $32 = $t;
 $33 = 0.017998 * $32;
 $34 = $31 + $33;
 $35 = $t;
 $36 = $34 * $35;
 $37 = $28 + $36;
 $38 = $tas2r;
 $39 = $37 * $38;
 $40 = $4;
 HEAPF64[$40>>3] = $39;
 $41 = $w;
 $42 = $t0;
 $43 = 6.6000000000000005E-5 * $42;
 $44 = 1.0946800000000001 + $43;
 $45 = $t;
 $46 = 0.018203 * $45;
 $47 = $44 + $46;
 $48 = $t;
 $49 = $47 * $48;
 $50 = $41 + $49;
 $51 = $tas2r;
 $52 = $50 * $51;
 $53 = $5;
 HEAPF64[$53>>3] = $52;
 $54 = $t0;
 $55 = 2.1699999999999999E-4 * $54;
 $56 = -0.85329999999999995 - $55;
 $57 = $t0;
 $58 = $56 * $57;
 $59 = 2004.3108999999999 + $58;
 $60 = $t0;
 $61 = 2.1699999999999999E-4 * $60;
 $62 = -0.42664999999999997 - $61;
 $63 = $t;
 $64 = 0.041833000000000002 * $63;
 $65 = $62 - $64;
 $66 = $t;
 $67 = $65 * $66;
 $68 = $59 + $67;
 $69 = $tas2r;
 $70 = $68 * $69;
 $71 = $6;
 HEAPF64[$71>>3] = $70;
 STACKTOP = sp;return;
}
function _eraPv2p($pv,$p) {
 $pv = $pv|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pv;
 $1 = $p;
 $2 = $0;
 $3 = $1;
 _eraCp($2,$3);
 STACKTOP = sp;return;
}
function _eraPv2s($pv,$theta,$phi,$r,$td,$pd,$rd) {
 $pv = $pv|0;
 $theta = $theta|0;
 $phi = $phi|0;
 $r = $r|0;
 $td = $td|0;
 $pd = $pd|0;
 $rd = $rd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0;
 var $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0;
 var $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0;
 var $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0;
 var $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $r2 = 0.0, $rtrue = 0.0, $rw = 0.0, $rxy = 0.0, $rxy2 = 0.0, $x = 0.0, $xd = 0.0, $xyp = 0.0, $y = 0.0, $yd = 0.0, $z = 0.0, $zd = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pv;
 $1 = $theta;
 $2 = $phi;
 $3 = $r;
 $4 = $td;
 $5 = $pd;
 $6 = $rd;
 $7 = $0;
 $8 = +HEAPF64[$7>>3];
 $x = $8;
 $9 = $0;
 $10 = ((($9)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $y = $11;
 $12 = $0;
 $13 = ((($12)) + 16|0);
 $14 = +HEAPF64[$13>>3];
 $z = $14;
 $15 = $0;
 $16 = ((($15)) + 24|0);
 $17 = +HEAPF64[$16>>3];
 $xd = $17;
 $18 = $0;
 $19 = ((($18)) + 24|0);
 $20 = ((($19)) + 8|0);
 $21 = +HEAPF64[$20>>3];
 $yd = $21;
 $22 = $0;
 $23 = ((($22)) + 24|0);
 $24 = ((($23)) + 16|0);
 $25 = +HEAPF64[$24>>3];
 $zd = $25;
 $26 = $x;
 $27 = $x;
 $28 = $26 * $27;
 $29 = $y;
 $30 = $y;
 $31 = $29 * $30;
 $32 = $28 + $31;
 $rxy2 = $32;
 $33 = $rxy2;
 $34 = $z;
 $35 = $z;
 $36 = $34 * $35;
 $37 = $33 + $36;
 $r2 = $37;
 $38 = $r2;
 $39 = (+Math_sqrt((+$38)));
 $rtrue = $39;
 $40 = $rtrue;
 $rw = $40;
 $41 = $rtrue;
 $42 = $41 == 0.0;
 if ($42) {
  $43 = $xd;
  $x = $43;
  $44 = $yd;
  $y = $44;
  $45 = $zd;
  $z = $45;
  $46 = $x;
  $47 = $x;
  $48 = $46 * $47;
  $49 = $y;
  $50 = $y;
  $51 = $49 * $50;
  $52 = $48 + $51;
  $rxy2 = $52;
  $53 = $rxy2;
  $54 = $z;
  $55 = $z;
  $56 = $54 * $55;
  $57 = $53 + $56;
  $r2 = $57;
  $58 = $r2;
  $59 = (+Math_sqrt((+$58)));
  $rw = $59;
 }
 $60 = $rxy2;
 $61 = (+Math_sqrt((+$60)));
 $rxy = $61;
 $62 = $x;
 $63 = $xd;
 $64 = $62 * $63;
 $65 = $y;
 $66 = $yd;
 $67 = $65 * $66;
 $68 = $64 + $67;
 $xyp = $68;
 $69 = $rxy2;
 $70 = $69 != 0.0;
 if ($70) {
  $71 = $y;
  $72 = $x;
  $73 = (+Math_atan2((+$71),(+$72)));
  $74 = $1;
  HEAPF64[$74>>3] = $73;
  $75 = $z;
  $76 = $rxy;
  $77 = (+Math_atan2((+$75),(+$76)));
  $78 = $2;
  HEAPF64[$78>>3] = $77;
  $79 = $x;
  $80 = $yd;
  $81 = $79 * $80;
  $82 = $y;
  $83 = $xd;
  $84 = $82 * $83;
  $85 = $81 - $84;
  $86 = $rxy2;
  $87 = $85 / $86;
  $88 = $4;
  HEAPF64[$88>>3] = $87;
  $89 = $zd;
  $90 = $rxy2;
  $91 = $89 * $90;
  $92 = $z;
  $93 = $xyp;
  $94 = $92 * $93;
  $95 = $91 - $94;
  $96 = $r2;
  $97 = $rxy;
  $98 = $96 * $97;
  $99 = $95 / $98;
  $100 = $5;
  HEAPF64[$100>>3] = $99;
 } else {
  $101 = $1;
  HEAPF64[$101>>3] = 0.0;
  $102 = $z;
  $103 = $102 != 0.0;
  if ($103) {
   $104 = $z;
   $105 = $rxy;
   $106 = (+Math_atan2((+$104),(+$105)));
   $108 = $106;
  } else {
   $108 = 0.0;
  }
  $107 = $2;
  HEAPF64[$107>>3] = $108;
  $109 = $4;
  HEAPF64[$109>>3] = 0.0;
  $110 = $5;
  HEAPF64[$110>>3] = 0.0;
 }
 $111 = $rtrue;
 $112 = $3;
 HEAPF64[$112>>3] = $111;
 $113 = $rw;
 $114 = $113 != 0.0;
 if (!($114)) {
  $123 = 0.0;
  $122 = $6;
  HEAPF64[$122>>3] = $123;
  STACKTOP = sp;return;
 }
 $115 = $xyp;
 $116 = $z;
 $117 = $zd;
 $118 = $116 * $117;
 $119 = $115 + $118;
 $120 = $rw;
 $121 = $119 / $120;
 $123 = $121;
 $122 = $6;
 HEAPF64[$122>>3] = $123;
 STACKTOP = sp;return;
}
function _eraPvdpv($a,$b,$adb) {
 $a = $a|0;
 $b = $b|0;
 $adb = $adb|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $adbd = 0.0, $addb = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $adb;
 $3 = $0;
 $4 = $1;
 $5 = (+_eraPdp($3,$4));
 $6 = $2;
 HEAPF64[$6>>3] = $5;
 $7 = $0;
 $8 = $1;
 $9 = ((($8)) + 24|0);
 $10 = (+_eraPdp($7,$9));
 $adbd = $10;
 $11 = $0;
 $12 = ((($11)) + 24|0);
 $13 = $1;
 $14 = (+_eraPdp($12,$13));
 $addb = $14;
 $15 = $adbd;
 $16 = $addb;
 $17 = $15 + $16;
 $18 = $2;
 $19 = ((($18)) + 8|0);
 HEAPF64[$19>>3] = $17;
 STACKTOP = sp;return;
}
function _eraPvm($pv,$r,$s) {
 $pv = $pv|0;
 $r = $r|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pv;
 $1 = $r;
 $2 = $s;
 $3 = $0;
 $4 = (+_eraPm($3));
 $5 = $1;
 HEAPF64[$5>>3] = $4;
 $6 = $0;
 $7 = ((($6)) + 24|0);
 $8 = (+_eraPm($7));
 $9 = $2;
 HEAPF64[$9>>3] = $8;
 STACKTOP = sp;return;
}
function _eraPvmpv($a,$b,$amb) {
 $a = $a|0;
 $b = $b|0;
 $amb = $amb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $amb;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 _eraPmp($3,$4,$5);
 $6 = $0;
 $7 = ((($6)) + 24|0);
 $8 = $1;
 $9 = ((($8)) + 24|0);
 $10 = $2;
 $11 = ((($10)) + 24|0);
 _eraPmp($7,$9,$11);
 STACKTOP = sp;return;
}
function _eraPvppv($a,$b,$apb) {
 $a = $a|0;
 $b = $b|0;
 $apb = $apb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $apb;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 _eraPpp($3,$4,$5);
 $6 = $0;
 $7 = ((($6)) + 24|0);
 $8 = $1;
 $9 = ((($8)) + 24|0);
 $10 = $2;
 $11 = ((($10)) + 24|0);
 _eraPpp($7,$9,$11);
 STACKTOP = sp;return;
}
function _eraPvstar($pv,$ra,$dec,$pmr,$pmd,$px,$rv) {
 $pv = $pv|0;
 $ra = $ra|0;
 $dec = $dec|0;
 $pmr = $pmr|0;
 $pmd = $pmd|0;
 $px = $px|0;
 $rv = $rv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0;
 var $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $a = 0, $betr = 0.0, $bett = 0.0, $d = 0.0, $decd = 0, $del = 0.0;
 var $or$cond = 0, $r = 0, $rad = 0, $rd = 0, $ur = 0, $usr = 0, $ust = 0, $ut = 0, $vr = 0.0, $vt = 0.0, $w = 0.0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $r = sp + 208|0;
 $x = sp + 184|0;
 $ur = sp + 152|0;
 $ut = sp + 120|0;
 $usr = sp + 56|0;
 $ust = sp + 32|0;
 $a = sp + 24|0;
 $rad = sp + 16|0;
 $decd = sp + 8|0;
 $rd = sp;
 $1 = $pv;
 $2 = $ra;
 $3 = $dec;
 $4 = $pmr;
 $5 = $pmd;
 $6 = $px;
 $7 = $rv;
 $8 = $1;
 _eraPn($8,$r,$x);
 $9 = $1;
 $10 = ((($9)) + 24|0);
 $11 = (+_eraPdp($x,$10));
 $vr = $11;
 $12 = $vr;
 _eraSxp($12,$x,$ur);
 $13 = $1;
 $14 = ((($13)) + 24|0);
 _eraPmp($14,$ur,$ut);
 $15 = (+_eraPm($ut));
 $vt = $15;
 $16 = $vt;
 $17 = $16 / 173.14463331134971;
 $bett = $17;
 $18 = $vr;
 $19 = $18 / 173.14463331134971;
 $betr = $19;
 $20 = $betr;
 $21 = 1.0 + $20;
 $d = $21;
 $22 = $betr;
 $23 = $betr;
 $24 = $22 * $23;
 $25 = 1.0 - $24;
 $26 = $bett;
 $27 = $bett;
 $28 = $26 * $27;
 $29 = $25 - $28;
 $w = $29;
 $30 = $d;
 $31 = $30 == 0.0;
 $32 = $w;
 $33 = $32 < 0.0;
 $or$cond = $31 | $33;
 if ($or$cond) {
  $0 = -1;
  $73 = $0;
  STACKTOP = sp;return ($73|0);
 }
 $34 = $w;
 $35 = (+Math_sqrt((+$34)));
 $36 = $35 - 1.0;
 $del = $36;
 $37 = $betr;
 $38 = $37 != 0.0;
 if ($38) {
  $39 = $betr;
  $40 = $del;
  $41 = $39 - $40;
  $42 = $betr;
  $43 = $d;
  $44 = $42 * $43;
  $45 = $41 / $44;
  $46 = $45;
 } else {
  $46 = 1.0;
 }
 $w = $46;
 $47 = $w;
 _eraSxp($47,$ur,$usr);
 $48 = $d;
 $49 = 1.0 / $48;
 _eraSxp($49,$ut,$ust);
 $50 = $1;
 $51 = ((($50)) + 24|0);
 _eraPpp($usr,$ust,$51);
 $52 = $1;
 $53 = $3;
 _eraPv2s($52,$a,$53,$r,$rad,$decd,$rd);
 $54 = +HEAPF64[$r>>3];
 $55 = $54 == 0.0;
 if ($55) {
  $0 = -2;
  $73 = $0;
  STACKTOP = sp;return ($73|0);
 } else {
  $56 = +HEAPF64[$a>>3];
  $57 = (+_eraAnp($56));
  $58 = $2;
  HEAPF64[$58>>3] = $57;
  $59 = +HEAPF64[$rad>>3];
  $60 = $59 * 365.25;
  $61 = $4;
  HEAPF64[$61>>3] = $60;
  $62 = +HEAPF64[$decd>>3];
  $63 = $62 * 365.25;
  $64 = $5;
  HEAPF64[$64>>3] = $63;
  $65 = +HEAPF64[$r>>3];
  $66 = 206264.80624709636 / $65;
  $67 = $6;
  HEAPF64[$67>>3] = $66;
  $68 = +HEAPF64[$rd>>3];
  $69 = 0.001 * $68;
  $70 = $69 * 1.4959787E+11;
  $71 = $70 / 86400.0;
  $72 = $7;
  HEAPF64[$72>>3] = $71;
  $0 = 0;
  $73 = $0;
  STACKTOP = sp;return ($73|0);
 }
 return (0)|0;
}
function _eraPvtob($elong,$phi,$hm,$xp,$yp,$sp,$theta,$pv) {
 $elong = +$elong;
 $phi = +$phi;
 $hm = +$hm;
 $xp = +$xp;
 $yp = +$yp;
 $sp = +$sp;
 $theta = +$theta;
 $pv = $pv|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $OM = 0.0, $c = 0.0, $rpm = 0, $s = 0.0, $x = 0.0, $xyz = 0, $xyzm = 0, $y = 0.0, $z = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $xyzm = sp + 136|0;
 $rpm = sp + 64|0;
 $xyz = sp + 40|0;
 $0 = $elong;
 $1 = $phi;
 $2 = $hm;
 $3 = $xp;
 $4 = $yp;
 $5 = $sp;
 $6 = $theta;
 $7 = $pv;
 $OM = 7.2921151467069805E-5;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 (_eraGd2gc(1,$8,$9,$10,$xyzm)|0);
 $11 = $3;
 $12 = $4;
 $13 = $5;
 _eraPom00($11,$12,$13,$rpm);
 _eraTrxp($rpm,$xyzm,$xyz);
 $14 = +HEAPF64[$xyz>>3];
 $x = $14;
 $15 = ((($xyz)) + 8|0);
 $16 = +HEAPF64[$15>>3];
 $y = $16;
 $17 = ((($xyz)) + 16|0);
 $18 = +HEAPF64[$17>>3];
 $z = $18;
 $19 = $6;
 $20 = (+Math_sin((+$19)));
 $s = $20;
 $21 = $6;
 $22 = (+Math_cos((+$21)));
 $c = $22;
 $23 = $c;
 $24 = $x;
 $25 = $23 * $24;
 $26 = $s;
 $27 = $y;
 $28 = $26 * $27;
 $29 = $25 - $28;
 $30 = $7;
 HEAPF64[$30>>3] = $29;
 $31 = $s;
 $32 = $x;
 $33 = $31 * $32;
 $34 = $c;
 $35 = $y;
 $36 = $34 * $35;
 $37 = $33 + $36;
 $38 = $7;
 $39 = ((($38)) + 8|0);
 HEAPF64[$39>>3] = $37;
 $40 = $z;
 $41 = $7;
 $42 = ((($41)) + 16|0);
 HEAPF64[$42>>3] = $40;
 $43 = $s;
 $44 = -$43;
 $45 = $x;
 $46 = $44 * $45;
 $47 = $c;
 $48 = $y;
 $49 = $47 * $48;
 $50 = $46 - $49;
 $51 = 7.2921151467069805E-5 * $50;
 $52 = $7;
 $53 = ((($52)) + 24|0);
 HEAPF64[$53>>3] = $51;
 $54 = $c;
 $55 = $x;
 $56 = $54 * $55;
 $57 = $s;
 $58 = $y;
 $59 = $57 * $58;
 $60 = $56 - $59;
 $61 = 7.2921151467069805E-5 * $60;
 $62 = $7;
 $63 = ((($62)) + 24|0);
 $64 = ((($63)) + 8|0);
 HEAPF64[$64>>3] = $61;
 $65 = $7;
 $66 = ((($65)) + 24|0);
 $67 = ((($66)) + 16|0);
 HEAPF64[$67>>3] = 0.0;
 STACKTOP = sp;return;
}
function _eraPvu($dt,$pv,$upv) {
 $dt = +$dt;
 $pv = $pv|0;
 $upv = $upv|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dt;
 $1 = $pv;
 $2 = $upv;
 $3 = $1;
 $4 = $0;
 $5 = $1;
 $6 = ((($5)) + 24|0);
 $7 = $2;
 _eraPpsp($3,$4,$6,$7);
 $8 = $1;
 $9 = ((($8)) + 24|0);
 $10 = $2;
 $11 = ((($10)) + 24|0);
 _eraCp($9,$11);
 STACKTOP = sp;return;
}
function _eraPvup($dt,$pv,$p) {
 $dt = +$dt;
 $pv = $pv|0;
 $p = $p|0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dt;
 $1 = $pv;
 $2 = $p;
 $3 = $1;
 $4 = +HEAPF64[$3>>3];
 $5 = $0;
 $6 = $1;
 $7 = ((($6)) + 24|0);
 $8 = +HEAPF64[$7>>3];
 $9 = $5 * $8;
 $10 = $4 + $9;
 $11 = $2;
 HEAPF64[$11>>3] = $10;
 $12 = $1;
 $13 = ((($12)) + 8|0);
 $14 = +HEAPF64[$13>>3];
 $15 = $0;
 $16 = $1;
 $17 = ((($16)) + 24|0);
 $18 = ((($17)) + 8|0);
 $19 = +HEAPF64[$18>>3];
 $20 = $15 * $19;
 $21 = $14 + $20;
 $22 = $2;
 $23 = ((($22)) + 8|0);
 HEAPF64[$23>>3] = $21;
 $24 = $1;
 $25 = ((($24)) + 16|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $0;
 $28 = $1;
 $29 = ((($28)) + 24|0);
 $30 = ((($29)) + 16|0);
 $31 = +HEAPF64[$30>>3];
 $32 = $27 * $31;
 $33 = $26 + $32;
 $34 = $2;
 $35 = ((($34)) + 16|0);
 HEAPF64[$35>>3] = $33;
 STACKTOP = sp;return;
}
function _eraPvxpv($a,$b,$axb) {
 $a = $a|0;
 $b = $b|0;
 $axb = $axb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $adxb = 0, $axbd = 0, $wa = 0, $wb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $wa = sp + 96|0;
 $wb = sp + 48|0;
 $axbd = sp + 24|0;
 $adxb = sp;
 $0 = $a;
 $1 = $b;
 $2 = $axb;
 $3 = $0;
 _eraCpv($3,$wa);
 $4 = $1;
 _eraCpv($4,$wb);
 $5 = $2;
 _eraPxp($wa,$wb,$5);
 $6 = ((($wb)) + 24|0);
 _eraPxp($wa,$6,$axbd);
 $7 = ((($wa)) + 24|0);
 _eraPxp($7,$wb,$adxb);
 $8 = $2;
 $9 = ((($8)) + 24|0);
 _eraPpp($axbd,$adxb,$9);
 STACKTOP = sp;return;
}
function _eraPxp($a,$b,$axb) {
 $a = $a|0;
 $b = $b|0;
 $axb = $axb|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $xa = 0.0, $xb = 0.0, $ya = 0.0, $yb = 0.0, $za = 0.0, $zb = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $axb;
 $3 = $0;
 $4 = +HEAPF64[$3>>3];
 $xa = $4;
 $5 = $0;
 $6 = ((($5)) + 8|0);
 $7 = +HEAPF64[$6>>3];
 $ya = $7;
 $8 = $0;
 $9 = ((($8)) + 16|0);
 $10 = +HEAPF64[$9>>3];
 $za = $10;
 $11 = $1;
 $12 = +HEAPF64[$11>>3];
 $xb = $12;
 $13 = $1;
 $14 = ((($13)) + 8|0);
 $15 = +HEAPF64[$14>>3];
 $yb = $15;
 $16 = $1;
 $17 = ((($16)) + 16|0);
 $18 = +HEAPF64[$17>>3];
 $zb = $18;
 $19 = $ya;
 $20 = $zb;
 $21 = $19 * $20;
 $22 = $za;
 $23 = $yb;
 $24 = $22 * $23;
 $25 = $21 - $24;
 $26 = $2;
 HEAPF64[$26>>3] = $25;
 $27 = $za;
 $28 = $xb;
 $29 = $27 * $28;
 $30 = $xa;
 $31 = $zb;
 $32 = $30 * $31;
 $33 = $29 - $32;
 $34 = $2;
 $35 = ((($34)) + 8|0);
 HEAPF64[$35>>3] = $33;
 $36 = $xa;
 $37 = $yb;
 $38 = $36 * $37;
 $39 = $ya;
 $40 = $xb;
 $41 = $39 * $40;
 $42 = $38 - $41;
 $43 = $2;
 $44 = ((($43)) + 16|0);
 HEAPF64[$44>>3] = $42;
 STACKTOP = sp;return;
}
function _eraRefco($phpa,$tc,$rh,$wl,$refa,$refb) {
 $phpa = +$phpa;
 $tc = +$tc;
 $rh = +$rh;
 $wl = +$wl;
 $refa = $refa|0;
 $refb = $refb|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0;
 var $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0;
 var $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0;
 var $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0;
 var $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0;
 var $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $beta = 0.0, $gamma = 0.0, $optic = 0, $p = 0.0, $ps = 0.0, $pw = 0.0, $r = 0.0, $t = 0.0, $tk = 0.0, $w = 0.0, $wlsq = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $phpa;
 $1 = $tc;
 $2 = $rh;
 $3 = $wl;
 $4 = $refa;
 $5 = $refb;
 $6 = $3;
 $7 = $6 <= 100.0;
 $8 = $7&1;
 $optic = $8;
 $9 = $1;
 $10 = $9 > -150.0;
 $11 = $1;
 $12 = $10 ? $11 : -150.0;
 $t = $12;
 $13 = $t;
 $14 = $13 < 200.0;
 $15 = $t;
 $16 = $14 ? $15 : 200.0;
 $t = $16;
 $17 = $0;
 $18 = $17 > 0.0;
 $19 = $0;
 $20 = $18 ? $19 : 0.0;
 $p = $20;
 $21 = $p;
 $22 = $21 < 1.0E+4;
 $23 = $p;
 $24 = $22 ? $23 : 1.0E+4;
 $p = $24;
 $25 = $2;
 $26 = $25 > 0.0;
 $27 = $2;
 $28 = $26 ? $27 : 0.0;
 $r = $28;
 $29 = $r;
 $30 = $29 < 1.0;
 $31 = $r;
 $32 = $30 ? $31 : 1.0;
 $r = $32;
 $33 = $3;
 $34 = $33 > 0.10000000000000001;
 $35 = $3;
 $36 = $34 ? $35 : 0.10000000000000001;
 $w = $36;
 $37 = $w;
 $38 = $37 < 1.0E+6;
 $39 = $w;
 $40 = $38 ? $39 : 1.0E+6;
 $w = $40;
 $41 = $p;
 $42 = $41 > 0.0;
 if ($42) {
  $43 = $t;
  $44 = 0.034770000000000002 * $43;
  $45 = 0.78590000000000004 + $44;
  $46 = $t;
  $47 = 0.0041200000000000004 * $46;
  $48 = 1.0 + $47;
  $49 = $45 / $48;
  $50 = (+Math_pow(10.0,(+$49)));
  $51 = $p;
  $52 = $t;
  $53 = 6.0E-10 * $52;
  $54 = $t;
  $55 = $53 * $54;
  $56 = 4.5000000000000001E-6 + $55;
  $57 = $51 * $56;
  $58 = 1.0 + $57;
  $59 = $50 * $58;
  $ps = $59;
  $60 = $r;
  $61 = $ps;
  $62 = $60 * $61;
  $63 = $r;
  $64 = 1.0 - $63;
  $65 = $ps;
  $66 = $64 * $65;
  $67 = $p;
  $68 = $66 / $67;
  $69 = 1.0 - $68;
  $70 = $62 / $69;
  $pw = $70;
 } else {
  $pw = 0.0;
 }
 $71 = $t;
 $72 = $71 + 273.14999999999998;
 $tk = $72;
 $73 = $optic;
 $74 = ($73|0)!=(0);
 if ($74) {
  $75 = $w;
  $76 = $w;
  $77 = $75 * $76;
  $wlsq = $77;
  $78 = $wlsq;
  $79 = 3.666E-9 / $78;
  $80 = 4.3910800000000002E-7 + $79;
  $81 = $wlsq;
  $82 = $80 / $81;
  $83 = 7.7534839999999998E-5 + $82;
  $84 = $p;
  $85 = $83 * $84;
  $86 = $pw;
  $87 = 1.12684E-5 * $86;
  $88 = $85 - $87;
  $89 = $tk;
  $90 = $88 / $89;
  $gamma = $90;
 } else {
  $91 = $p;
  $92 = 7.7688999999999994E-5 * $91;
  $93 = $tk;
  $94 = 0.37546299999999999 / $93;
  $95 = 6.3937999999999997E-6 - $94;
  $96 = $pw;
  $97 = $95 * $96;
  $98 = $92 - $97;
  $99 = $tk;
  $100 = $98 / $99;
  $gamma = $100;
 }
 $101 = $tk;
 $102 = 4.4474E-6 * $101;
 $beta = $102;
 $103 = $optic;
 $104 = ($103|0)!=(0);
 if ($104) {
  $111 = $gamma;
  $112 = $beta;
  $113 = 1.0 - $112;
  $114 = $111 * $113;
  $115 = $4;
  HEAPF64[$115>>3] = $114;
  $116 = $gamma;
  $117 = -$116;
  $118 = $beta;
  $119 = $gamma;
  $120 = $119 / 2.0;
  $121 = $118 - $120;
  $122 = $117 * $121;
  $123 = $5;
  HEAPF64[$123>>3] = $122;
  STACKTOP = sp;return;
 }
 $105 = $pw;
 $106 = 0.0074000000000000003 * $105;
 $107 = $beta;
 $108 = $106 * $107;
 $109 = $beta;
 $110 = $109 - $108;
 $beta = $110;
 $111 = $gamma;
 $112 = $beta;
 $113 = 1.0 - $112;
 $114 = $111 * $113;
 $115 = $4;
 HEAPF64[$115>>3] = $114;
 $116 = $gamma;
 $117 = -$116;
 $118 = $beta;
 $119 = $gamma;
 $120 = $119 / 2.0;
 $121 = $118 - $120;
 $122 = $117 * $121;
 $123 = $5;
 HEAPF64[$123>>3] = $122;
 STACKTOP = sp;return;
}
function _eraRm2v($r,$w) {
 $r = $r|0;
 $w = $w|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0.0, $c2 = 0.0, $f = 0.0, $phi = 0.0;
 var $s2 = 0.0, $x = 0.0, $y = 0.0, $z = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $r;
 $1 = $w;
 $2 = $0;
 $3 = ((($2)) + 24|0);
 $4 = ((($3)) + 16|0);
 $5 = +HEAPF64[$4>>3];
 $6 = $0;
 $7 = ((($6)) + 48|0);
 $8 = ((($7)) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = $5 - $9;
 $x = $10;
 $11 = $0;
 $12 = ((($11)) + 48|0);
 $13 = +HEAPF64[$12>>3];
 $14 = $0;
 $15 = ((($14)) + 16|0);
 $16 = +HEAPF64[$15>>3];
 $17 = $13 - $16;
 $y = $17;
 $18 = $0;
 $19 = ((($18)) + 8|0);
 $20 = +HEAPF64[$19>>3];
 $21 = $0;
 $22 = ((($21)) + 24|0);
 $23 = +HEAPF64[$22>>3];
 $24 = $20 - $23;
 $z = $24;
 $25 = $x;
 $26 = $x;
 $27 = $25 * $26;
 $28 = $y;
 $29 = $y;
 $30 = $28 * $29;
 $31 = $27 + $30;
 $32 = $z;
 $33 = $z;
 $34 = $32 * $33;
 $35 = $31 + $34;
 $36 = (+Math_sqrt((+$35)));
 $s2 = $36;
 $37 = $s2;
 $38 = $37 > 0.0;
 if ($38) {
  $39 = $0;
  $40 = +HEAPF64[$39>>3];
  $41 = $0;
  $42 = ((($41)) + 24|0);
  $43 = ((($42)) + 8|0);
  $44 = +HEAPF64[$43>>3];
  $45 = $40 + $44;
  $46 = $0;
  $47 = ((($46)) + 48|0);
  $48 = ((($47)) + 16|0);
  $49 = +HEAPF64[$48>>3];
  $50 = $45 + $49;
  $51 = $50 - 1.0;
  $c2 = $51;
  $52 = $s2;
  $53 = $c2;
  $54 = (+Math_atan2((+$52),(+$53)));
  $phi = $54;
  $55 = $phi;
  $56 = $s2;
  $57 = $55 / $56;
  $f = $57;
  $58 = $x;
  $59 = $f;
  $60 = $58 * $59;
  $61 = $1;
  HEAPF64[$61>>3] = $60;
  $62 = $y;
  $63 = $f;
  $64 = $62 * $63;
  $65 = $1;
  $66 = ((($65)) + 8|0);
  HEAPF64[$66>>3] = $64;
  $67 = $z;
  $68 = $f;
  $69 = $67 * $68;
  $70 = $1;
  $71 = ((($70)) + 16|0);
  HEAPF64[$71>>3] = $69;
  STACKTOP = sp;return;
 } else {
  $72 = $1;
  HEAPF64[$72>>3] = 0.0;
  $73 = $1;
  $74 = ((($73)) + 8|0);
  HEAPF64[$74>>3] = 0.0;
  $75 = $1;
  $76 = ((($75)) + 16|0);
  HEAPF64[$76>>3] = 0.0;
  STACKTOP = sp;return;
 }
}
function _eraRv2m($w,$r) {
 $w = $w|0;
 $r = $r|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0;
 var $134 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0.0;
 var $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0;
 var $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0;
 var $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, $c = 0.0, $f = 0.0, $phi = 0.0, $s = 0.0, $x = 0.0;
 var $y = 0.0, $z = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $w;
 $1 = $r;
 $2 = $0;
 $3 = +HEAPF64[$2>>3];
 $x = $3;
 $4 = $0;
 $5 = ((($4)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $y = $6;
 $7 = $0;
 $8 = ((($7)) + 16|0);
 $9 = +HEAPF64[$8>>3];
 $z = $9;
 $10 = $x;
 $11 = $x;
 $12 = $10 * $11;
 $13 = $y;
 $14 = $y;
 $15 = $13 * $14;
 $16 = $12 + $15;
 $17 = $z;
 $18 = $z;
 $19 = $17 * $18;
 $20 = $16 + $19;
 $21 = (+Math_sqrt((+$20)));
 $phi = $21;
 $22 = $phi;
 $23 = (+Math_sin((+$22)));
 $s = $23;
 $24 = $phi;
 $25 = (+Math_cos((+$24)));
 $c = $25;
 $26 = $c;
 $27 = 1.0 - $26;
 $f = $27;
 $28 = $phi;
 $29 = $28 > 0.0;
 if ($29) {
  $30 = $phi;
  $31 = $x;
  $32 = $31 / $30;
  $x = $32;
  $33 = $phi;
  $34 = $y;
  $35 = $34 / $33;
  $y = $35;
  $36 = $phi;
  $37 = $z;
  $38 = $37 / $36;
  $z = $38;
 }
 $39 = $x;
 $40 = $x;
 $41 = $39 * $40;
 $42 = $f;
 $43 = $41 * $42;
 $44 = $c;
 $45 = $43 + $44;
 $46 = $1;
 HEAPF64[$46>>3] = $45;
 $47 = $x;
 $48 = $y;
 $49 = $47 * $48;
 $50 = $f;
 $51 = $49 * $50;
 $52 = $z;
 $53 = $s;
 $54 = $52 * $53;
 $55 = $51 + $54;
 $56 = $1;
 $57 = ((($56)) + 8|0);
 HEAPF64[$57>>3] = $55;
 $58 = $x;
 $59 = $z;
 $60 = $58 * $59;
 $61 = $f;
 $62 = $60 * $61;
 $63 = $y;
 $64 = $s;
 $65 = $63 * $64;
 $66 = $62 - $65;
 $67 = $1;
 $68 = ((($67)) + 16|0);
 HEAPF64[$68>>3] = $66;
 $69 = $y;
 $70 = $x;
 $71 = $69 * $70;
 $72 = $f;
 $73 = $71 * $72;
 $74 = $z;
 $75 = $s;
 $76 = $74 * $75;
 $77 = $73 - $76;
 $78 = $1;
 $79 = ((($78)) + 24|0);
 HEAPF64[$79>>3] = $77;
 $80 = $y;
 $81 = $y;
 $82 = $80 * $81;
 $83 = $f;
 $84 = $82 * $83;
 $85 = $c;
 $86 = $84 + $85;
 $87 = $1;
 $88 = ((($87)) + 24|0);
 $89 = ((($88)) + 8|0);
 HEAPF64[$89>>3] = $86;
 $90 = $y;
 $91 = $z;
 $92 = $90 * $91;
 $93 = $f;
 $94 = $92 * $93;
 $95 = $x;
 $96 = $s;
 $97 = $95 * $96;
 $98 = $94 + $97;
 $99 = $1;
 $100 = ((($99)) + 24|0);
 $101 = ((($100)) + 16|0);
 HEAPF64[$101>>3] = $98;
 $102 = $z;
 $103 = $x;
 $104 = $102 * $103;
 $105 = $f;
 $106 = $104 * $105;
 $107 = $y;
 $108 = $s;
 $109 = $107 * $108;
 $110 = $106 + $109;
 $111 = $1;
 $112 = ((($111)) + 48|0);
 HEAPF64[$112>>3] = $110;
 $113 = $z;
 $114 = $y;
 $115 = $113 * $114;
 $116 = $f;
 $117 = $115 * $116;
 $118 = $x;
 $119 = $s;
 $120 = $118 * $119;
 $121 = $117 - $120;
 $122 = $1;
 $123 = ((($122)) + 48|0);
 $124 = ((($123)) + 8|0);
 HEAPF64[$124>>3] = $121;
 $125 = $z;
 $126 = $z;
 $127 = $125 * $126;
 $128 = $f;
 $129 = $127 * $128;
 $130 = $c;
 $131 = $129 + $130;
 $132 = $1;
 $133 = ((($132)) + 48|0);
 $134 = ((($133)) + 16|0);
 HEAPF64[$134>>3] = $131;
 STACKTOP = sp;return;
}
function _eraRx($phi,$r) {
 $phi = +$phi;
 $r = $r|0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0;
 var $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0;
 var $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0;
 var $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0, $a10 = 0.0, $a11 = 0.0, $a12 = 0.0, $a20 = 0.0, $a21 = 0.0, $a22 = 0.0, $c = 0.0, $s = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $phi;
 $1 = $r;
 $2 = $0;
 $3 = (+Math_sin((+$2)));
 $s = $3;
 $4 = $0;
 $5 = (+Math_cos((+$4)));
 $c = $5;
 $6 = $c;
 $7 = $1;
 $8 = ((($7)) + 24|0);
 $9 = +HEAPF64[$8>>3];
 $10 = $6 * $9;
 $11 = $s;
 $12 = $1;
 $13 = ((($12)) + 48|0);
 $14 = +HEAPF64[$13>>3];
 $15 = $11 * $14;
 $16 = $10 + $15;
 $a10 = $16;
 $17 = $c;
 $18 = $1;
 $19 = ((($18)) + 24|0);
 $20 = ((($19)) + 8|0);
 $21 = +HEAPF64[$20>>3];
 $22 = $17 * $21;
 $23 = $s;
 $24 = $1;
 $25 = ((($24)) + 48|0);
 $26 = ((($25)) + 8|0);
 $27 = +HEAPF64[$26>>3];
 $28 = $23 * $27;
 $29 = $22 + $28;
 $a11 = $29;
 $30 = $c;
 $31 = $1;
 $32 = ((($31)) + 24|0);
 $33 = ((($32)) + 16|0);
 $34 = +HEAPF64[$33>>3];
 $35 = $30 * $34;
 $36 = $s;
 $37 = $1;
 $38 = ((($37)) + 48|0);
 $39 = ((($38)) + 16|0);
 $40 = +HEAPF64[$39>>3];
 $41 = $36 * $40;
 $42 = $35 + $41;
 $a12 = $42;
 $43 = $s;
 $44 = -$43;
 $45 = $1;
 $46 = ((($45)) + 24|0);
 $47 = +HEAPF64[$46>>3];
 $48 = $44 * $47;
 $49 = $c;
 $50 = $1;
 $51 = ((($50)) + 48|0);
 $52 = +HEAPF64[$51>>3];
 $53 = $49 * $52;
 $54 = $48 + $53;
 $a20 = $54;
 $55 = $s;
 $56 = -$55;
 $57 = $1;
 $58 = ((($57)) + 24|0);
 $59 = ((($58)) + 8|0);
 $60 = +HEAPF64[$59>>3];
 $61 = $56 * $60;
 $62 = $c;
 $63 = $1;
 $64 = ((($63)) + 48|0);
 $65 = ((($64)) + 8|0);
 $66 = +HEAPF64[$65>>3];
 $67 = $62 * $66;
 $68 = $61 + $67;
 $a21 = $68;
 $69 = $s;
 $70 = -$69;
 $71 = $1;
 $72 = ((($71)) + 24|0);
 $73 = ((($72)) + 16|0);
 $74 = +HEAPF64[$73>>3];
 $75 = $70 * $74;
 $76 = $c;
 $77 = $1;
 $78 = ((($77)) + 48|0);
 $79 = ((($78)) + 16|0);
 $80 = +HEAPF64[$79>>3];
 $81 = $76 * $80;
 $82 = $75 + $81;
 $a22 = $82;
 $83 = $a10;
 $84 = $1;
 $85 = ((($84)) + 24|0);
 HEAPF64[$85>>3] = $83;
 $86 = $a11;
 $87 = $1;
 $88 = ((($87)) + 24|0);
 $89 = ((($88)) + 8|0);
 HEAPF64[$89>>3] = $86;
 $90 = $a12;
 $91 = $1;
 $92 = ((($91)) + 24|0);
 $93 = ((($92)) + 16|0);
 HEAPF64[$93>>3] = $90;
 $94 = $a20;
 $95 = $1;
 $96 = ((($95)) + 48|0);
 HEAPF64[$96>>3] = $94;
 $97 = $a21;
 $98 = $1;
 $99 = ((($98)) + 48|0);
 $100 = ((($99)) + 8|0);
 HEAPF64[$100>>3] = $97;
 $101 = $a22;
 $102 = $1;
 $103 = ((($102)) + 48|0);
 $104 = ((($103)) + 16|0);
 HEAPF64[$104>>3] = $101;
 STACKTOP = sp;return;
}
function _eraRxp($r,$p,$rp) {
 $r = $r|0;
 $p = $p|0;
 $rp = $rp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, $w = 0.0, $wrp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $wrp = sp;
 $0 = $r;
 $1 = $p;
 $2 = $rp;
 $j = 0;
 while(1) {
  $3 = $j;
  $4 = ($3|0)<(3);
  if (!($4)) {
   break;
  }
  $w = 0.0;
  $i = 0;
  while(1) {
   $5 = $i;
   $6 = ($5|0)<(3);
   if (!($6)) {
    break;
   }
   $7 = $i;
   $8 = $j;
   $9 = $0;
   $10 = (($9) + (($8*24)|0)|0);
   $11 = (($10) + ($7<<3)|0);
   $12 = +HEAPF64[$11>>3];
   $13 = $i;
   $14 = $1;
   $15 = (($14) + ($13<<3)|0);
   $16 = +HEAPF64[$15>>3];
   $17 = $12 * $16;
   $18 = $w;
   $19 = $18 + $17;
   $w = $19;
   $20 = $i;
   $21 = (($20) + 1)|0;
   $i = $21;
  }
  $22 = $w;
  $23 = $j;
  $24 = (($wrp) + ($23<<3)|0);
  HEAPF64[$24>>3] = $22;
  $25 = $j;
  $26 = (($25) + 1)|0;
  $j = $26;
 }
 $27 = $2;
 _eraCp($wrp,$27);
 STACKTOP = sp;return;
}
function _eraRxpv($r,$pv,$rpv) {
 $r = $r|0;
 $pv = $pv|0;
 $rpv = $rpv|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $r;
 $1 = $pv;
 $2 = $rpv;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 _eraRxp($3,$4,$5);
 $6 = $0;
 $7 = $1;
 $8 = ((($7)) + 24|0);
 $9 = $2;
 $10 = ((($9)) + 24|0);
 _eraRxp($6,$8,$10);
 STACKTOP = sp;return;
}
function _eraRxr($a,$b,$atb) {
 $a = $a|0;
 $b = $b|0;
 $atb = $atb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, $k = 0, $w = 0.0;
 var $wm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $wm = sp;
 $0 = $a;
 $1 = $b;
 $2 = $atb;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3|0)<(3);
  if (!($4)) {
   break;
  }
  $j = 0;
  while(1) {
   $5 = $j;
   $6 = ($5|0)<(3);
   if (!($6)) {
    break;
   }
   $w = 0.0;
   $k = 0;
   while(1) {
    $7 = $k;
    $8 = ($7|0)<(3);
    if (!($8)) {
     break;
    }
    $9 = $k;
    $10 = $i;
    $11 = $0;
    $12 = (($11) + (($10*24)|0)|0);
    $13 = (($12) + ($9<<3)|0);
    $14 = +HEAPF64[$13>>3];
    $15 = $j;
    $16 = $k;
    $17 = $1;
    $18 = (($17) + (($16*24)|0)|0);
    $19 = (($18) + ($15<<3)|0);
    $20 = +HEAPF64[$19>>3];
    $21 = $14 * $20;
    $22 = $w;
    $23 = $22 + $21;
    $w = $23;
    $24 = $k;
    $25 = (($24) + 1)|0;
    $k = $25;
   }
   $26 = $w;
   $27 = $j;
   $28 = $i;
   $29 = (($wm) + (($28*24)|0)|0);
   $30 = (($29) + ($27<<3)|0);
   HEAPF64[$30>>3] = $26;
   $31 = $j;
   $32 = (($31) + 1)|0;
   $j = $32;
  }
  $33 = $i;
  $34 = (($33) + 1)|0;
  $i = $34;
 }
 $35 = $2;
 _eraCr($wm,$35);
 STACKTOP = sp;return;
}
function _eraRy($theta,$r) {
 $theta = +$theta;
 $r = $r|0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0;
 var $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $a00 = 0.0, $a01 = 0.0, $a02 = 0.0, $a20 = 0.0, $a21 = 0.0, $a22 = 0.0, $c = 0.0;
 var $s = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $theta;
 $1 = $r;
 $2 = $0;
 $3 = (+Math_sin((+$2)));
 $s = $3;
 $4 = $0;
 $5 = (+Math_cos((+$4)));
 $c = $5;
 $6 = $c;
 $7 = $1;
 $8 = +HEAPF64[$7>>3];
 $9 = $6 * $8;
 $10 = $s;
 $11 = $1;
 $12 = ((($11)) + 48|0);
 $13 = +HEAPF64[$12>>3];
 $14 = $10 * $13;
 $15 = $9 - $14;
 $a00 = $15;
 $16 = $c;
 $17 = $1;
 $18 = ((($17)) + 8|0);
 $19 = +HEAPF64[$18>>3];
 $20 = $16 * $19;
 $21 = $s;
 $22 = $1;
 $23 = ((($22)) + 48|0);
 $24 = ((($23)) + 8|0);
 $25 = +HEAPF64[$24>>3];
 $26 = $21 * $25;
 $27 = $20 - $26;
 $a01 = $27;
 $28 = $c;
 $29 = $1;
 $30 = ((($29)) + 16|0);
 $31 = +HEAPF64[$30>>3];
 $32 = $28 * $31;
 $33 = $s;
 $34 = $1;
 $35 = ((($34)) + 48|0);
 $36 = ((($35)) + 16|0);
 $37 = +HEAPF64[$36>>3];
 $38 = $33 * $37;
 $39 = $32 - $38;
 $a02 = $39;
 $40 = $s;
 $41 = $1;
 $42 = +HEAPF64[$41>>3];
 $43 = $40 * $42;
 $44 = $c;
 $45 = $1;
 $46 = ((($45)) + 48|0);
 $47 = +HEAPF64[$46>>3];
 $48 = $44 * $47;
 $49 = $43 + $48;
 $a20 = $49;
 $50 = $s;
 $51 = $1;
 $52 = ((($51)) + 8|0);
 $53 = +HEAPF64[$52>>3];
 $54 = $50 * $53;
 $55 = $c;
 $56 = $1;
 $57 = ((($56)) + 48|0);
 $58 = ((($57)) + 8|0);
 $59 = +HEAPF64[$58>>3];
 $60 = $55 * $59;
 $61 = $54 + $60;
 $a21 = $61;
 $62 = $s;
 $63 = $1;
 $64 = ((($63)) + 16|0);
 $65 = +HEAPF64[$64>>3];
 $66 = $62 * $65;
 $67 = $c;
 $68 = $1;
 $69 = ((($68)) + 48|0);
 $70 = ((($69)) + 16|0);
 $71 = +HEAPF64[$70>>3];
 $72 = $67 * $71;
 $73 = $66 + $72;
 $a22 = $73;
 $74 = $a00;
 $75 = $1;
 HEAPF64[$75>>3] = $74;
 $76 = $a01;
 $77 = $1;
 $78 = ((($77)) + 8|0);
 HEAPF64[$78>>3] = $76;
 $79 = $a02;
 $80 = $1;
 $81 = ((($80)) + 16|0);
 HEAPF64[$81>>3] = $79;
 $82 = $a20;
 $83 = $1;
 $84 = ((($83)) + 48|0);
 HEAPF64[$84>>3] = $82;
 $85 = $a21;
 $86 = $1;
 $87 = ((($86)) + 48|0);
 $88 = ((($87)) + 8|0);
 HEAPF64[$88>>3] = $85;
 $89 = $a22;
 $90 = $1;
 $91 = ((($90)) + 48|0);
 $92 = ((($91)) + 16|0);
 HEAPF64[$92>>3] = $89;
 STACKTOP = sp;return;
}
function _eraRz($psi,$r) {
 $psi = +$psi;
 $r = $r|0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0;
 var $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $a00 = 0.0, $a01 = 0.0, $a02 = 0.0, $a10 = 0.0;
 var $a11 = 0.0, $a12 = 0.0, $c = 0.0, $s = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $psi;
 $1 = $r;
 $2 = $0;
 $3 = (+Math_sin((+$2)));
 $s = $3;
 $4 = $0;
 $5 = (+Math_cos((+$4)));
 $c = $5;
 $6 = $c;
 $7 = $1;
 $8 = +HEAPF64[$7>>3];
 $9 = $6 * $8;
 $10 = $s;
 $11 = $1;
 $12 = ((($11)) + 24|0);
 $13 = +HEAPF64[$12>>3];
 $14 = $10 * $13;
 $15 = $9 + $14;
 $a00 = $15;
 $16 = $c;
 $17 = $1;
 $18 = ((($17)) + 8|0);
 $19 = +HEAPF64[$18>>3];
 $20 = $16 * $19;
 $21 = $s;
 $22 = $1;
 $23 = ((($22)) + 24|0);
 $24 = ((($23)) + 8|0);
 $25 = +HEAPF64[$24>>3];
 $26 = $21 * $25;
 $27 = $20 + $26;
 $a01 = $27;
 $28 = $c;
 $29 = $1;
 $30 = ((($29)) + 16|0);
 $31 = +HEAPF64[$30>>3];
 $32 = $28 * $31;
 $33 = $s;
 $34 = $1;
 $35 = ((($34)) + 24|0);
 $36 = ((($35)) + 16|0);
 $37 = +HEAPF64[$36>>3];
 $38 = $33 * $37;
 $39 = $32 + $38;
 $a02 = $39;
 $40 = $s;
 $41 = -$40;
 $42 = $1;
 $43 = +HEAPF64[$42>>3];
 $44 = $41 * $43;
 $45 = $c;
 $46 = $1;
 $47 = ((($46)) + 24|0);
 $48 = +HEAPF64[$47>>3];
 $49 = $45 * $48;
 $50 = $44 + $49;
 $a10 = $50;
 $51 = $s;
 $52 = -$51;
 $53 = $1;
 $54 = ((($53)) + 8|0);
 $55 = +HEAPF64[$54>>3];
 $56 = $52 * $55;
 $57 = $c;
 $58 = $1;
 $59 = ((($58)) + 24|0);
 $60 = ((($59)) + 8|0);
 $61 = +HEAPF64[$60>>3];
 $62 = $57 * $61;
 $63 = $56 + $62;
 $a11 = $63;
 $64 = $s;
 $65 = -$64;
 $66 = $1;
 $67 = ((($66)) + 16|0);
 $68 = +HEAPF64[$67>>3];
 $69 = $65 * $68;
 $70 = $c;
 $71 = $1;
 $72 = ((($71)) + 24|0);
 $73 = ((($72)) + 16|0);
 $74 = +HEAPF64[$73>>3];
 $75 = $70 * $74;
 $76 = $69 + $75;
 $a12 = $76;
 $77 = $a00;
 $78 = $1;
 HEAPF64[$78>>3] = $77;
 $79 = $a01;
 $80 = $1;
 $81 = ((($80)) + 8|0);
 HEAPF64[$81>>3] = $79;
 $82 = $a02;
 $83 = $1;
 $84 = ((($83)) + 16|0);
 HEAPF64[$84>>3] = $82;
 $85 = $a10;
 $86 = $1;
 $87 = ((($86)) + 24|0);
 HEAPF64[$87>>3] = $85;
 $88 = $a11;
 $89 = $1;
 $90 = ((($89)) + 24|0);
 $91 = ((($90)) + 8|0);
 HEAPF64[$91>>3] = $88;
 $92 = $a12;
 $93 = $1;
 $94 = ((($93)) + 24|0);
 $95 = ((($94)) + 16|0);
 HEAPF64[$95>>3] = $92;
 STACKTOP = sp;return;
}
function _eraS00a($date1,$date2) {
 $date1 = +$date1;
 $date2 = +$date2;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $rbpn = 0, $s = 0.0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $rbpn = sp + 24|0;
 $x = sp + 16|0;
 $y = sp + 8|0;
 $0 = $date1;
 $1 = $date2;
 $2 = $0;
 $3 = $1;
 _eraPnm00a($2,$3,$rbpn);
 _eraBpn2xy($rbpn,$x,$y);
 $4 = $0;
 $5 = $1;
 $6 = +HEAPF64[$x>>3];
 $7 = +HEAPF64[$y>>3];
 $8 = (+_eraS00($4,$5,$6,$7));
 $s = $8;
 $9 = $s;
 STACKTOP = sp;return (+$9);
}
function _eraS00b($date1,$date2) {
 $date1 = +$date1;
 $date2 = +$date2;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $rbpn = 0, $s = 0.0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $rbpn = sp + 24|0;
 $x = sp + 16|0;
 $y = sp + 8|0;
 $0 = $date1;
 $1 = $date2;
 $2 = $0;
 $3 = $1;
 _eraPnm00b($2,$3,$rbpn);
 _eraBpn2xy($rbpn,$x,$y);
 $4 = $0;
 $5 = $1;
 $6 = +HEAPF64[$x>>3];
 $7 = +HEAPF64[$y>>3];
 $8 = (+_eraS00($4,$5,$6,$7));
 $s = $8;
 $9 = $s;
 STACKTOP = sp;return (+$9);
}
function _eraS00($date1,$date2,$x,$y) {
 $date1 = +$date1;
 $date2 = +$date2;
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0.0;
 var $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0.0, $2 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0, $222 = 0, $223 = 0.0;
 var $224 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0.0, $240 = 0.0, $241 = 0.0;
 var $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0;
 var $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0;
 var $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0;
 var $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0;
 var $9 = 0.0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $NS0 = 0, $NS1 = 0, $NS2 = 0, $NS3 = 0, $NS4 = 0, $a = 0.0, $fa = 0, $i = 0, $j = 0;
 var $s = 0.0, $t = 0.0, $w0 = 0.0, $w1 = 0.0, $w2 = 0.0, $w3 = 0.0, $w4 = 0.0, $w5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $fa = sp + 8|0;
 $0 = $date1;
 $1 = $date2;
 $2 = $x;
 $3 = $y;
 $NS0 = 33;
 $NS1 = 3;
 $NS2 = 25;
 $NS3 = 4;
 $NS4 = 1;
 $4 = $0;
 $5 = $4 - 2451545.0;
 $6 = $1;
 $7 = $5 + $6;
 $8 = $7 / 36525.0;
 $t = $8;
 $9 = $t;
 $10 = (+_eraFal03($9));
 HEAPF64[$fa>>3] = $10;
 $11 = $t;
 $12 = (+_eraFalp03($11));
 $13 = ((($fa)) + 8|0);
 HEAPF64[$13>>3] = $12;
 $14 = $t;
 $15 = (+_eraFaf03($14));
 $16 = ((($fa)) + 16|0);
 HEAPF64[$16>>3] = $15;
 $17 = $t;
 $18 = (+_eraFad03($17));
 $19 = ((($fa)) + 24|0);
 HEAPF64[$19>>3] = $18;
 $20 = $t;
 $21 = (+_eraFaom03($20));
 $22 = ((($fa)) + 32|0);
 HEAPF64[$22>>3] = $21;
 $23 = $t;
 $24 = (+_eraFave03($23));
 $25 = ((($fa)) + 40|0);
 HEAPF64[$25>>3] = $24;
 $26 = $t;
 $27 = (+_eraFae03($26));
 $28 = ((($fa)) + 48|0);
 HEAPF64[$28>>3] = $27;
 $29 = $t;
 $30 = (+_eraFapa03($29));
 $31 = ((($fa)) + 56|0);
 HEAPF64[$31>>3] = $30;
 $32 = +HEAPF64[133464>>3];
 $w0 = $32;
 $33 = +HEAPF64[(133472)>>3];
 $w1 = $33;
 $34 = +HEAPF64[(133480)>>3];
 $w2 = $34;
 $35 = +HEAPF64[(133488)>>3];
 $w3 = $35;
 $36 = +HEAPF64[(133496)>>3];
 $w4 = $36;
 $37 = +HEAPF64[(133504)>>3];
 $w5 = $37;
 $i = 32;
 while(1) {
  $38 = $i;
  $39 = ($38|0)>=(0);
  if (!($39)) {
   break;
  }
  $a = 0.0;
  $j = 0;
  while(1) {
   $40 = $j;
   $41 = ($40|0)<(8);
   if (!($41)) {
    break;
   }
   $42 = $j;
   $43 = $i;
   $44 = (133512 + (($43*48)|0)|0);
   $45 = (($44) + ($42<<2)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (+($46|0));
   $48 = $j;
   $49 = (($fa) + ($48<<3)|0);
   $50 = +HEAPF64[$49>>3];
   $51 = $47 * $50;
   $52 = $a;
   $53 = $52 + $51;
   $a = $53;
   $54 = $j;
   $55 = (($54) + 1)|0;
   $j = $55;
  }
  $56 = $i;
  $57 = (133512 + (($56*48)|0)|0);
  $58 = ((($57)) + 32|0);
  $59 = +HEAPF64[$58>>3];
  $60 = $a;
  $61 = (+Math_sin((+$60)));
  $62 = $59 * $61;
  $63 = $i;
  $64 = (133512 + (($63*48)|0)|0);
  $65 = ((($64)) + 40|0);
  $66 = +HEAPF64[$65>>3];
  $67 = $a;
  $68 = (+Math_cos((+$67)));
  $69 = $66 * $68;
  $70 = $62 + $69;
  $71 = $w0;
  $72 = $71 + $70;
  $w0 = $72;
  $73 = $i;
  $74 = (($73) + -1)|0;
  $i = $74;
 }
 $i = 2;
 while(1) {
  $75 = $i;
  $76 = ($75|0)>=(0);
  if (!($76)) {
   break;
  }
  $a = 0.0;
  $j = 0;
  while(1) {
   $77 = $j;
   $78 = ($77|0)<(8);
   if (!($78)) {
    break;
   }
   $79 = $j;
   $80 = $i;
   $81 = (135096 + (($80*48)|0)|0);
   $82 = (($81) + ($79<<2)|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = (+($83|0));
   $85 = $j;
   $86 = (($fa) + ($85<<3)|0);
   $87 = +HEAPF64[$86>>3];
   $88 = $84 * $87;
   $89 = $a;
   $90 = $89 + $88;
   $a = $90;
   $91 = $j;
   $92 = (($91) + 1)|0;
   $j = $92;
  }
  $93 = $i;
  $94 = (135096 + (($93*48)|0)|0);
  $95 = ((($94)) + 32|0);
  $96 = +HEAPF64[$95>>3];
  $97 = $a;
  $98 = (+Math_sin((+$97)));
  $99 = $96 * $98;
  $100 = $i;
  $101 = (135096 + (($100*48)|0)|0);
  $102 = ((($101)) + 40|0);
  $103 = +HEAPF64[$102>>3];
  $104 = $a;
  $105 = (+Math_cos((+$104)));
  $106 = $103 * $105;
  $107 = $99 + $106;
  $108 = $w1;
  $109 = $108 + $107;
  $w1 = $109;
  $110 = $i;
  $111 = (($110) + -1)|0;
  $i = $111;
 }
 $i = 24;
 while(1) {
  $112 = $i;
  $113 = ($112|0)>=(0);
  if (!($113)) {
   break;
  }
  $a = 0.0;
  $j = 0;
  while(1) {
   $114 = $j;
   $115 = ($114|0)<(8);
   if (!($115)) {
    break;
   }
   $116 = $j;
   $117 = $i;
   $118 = (135240 + (($117*48)|0)|0);
   $119 = (($118) + ($116<<2)|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = (+($120|0));
   $122 = $j;
   $123 = (($fa) + ($122<<3)|0);
   $124 = +HEAPF64[$123>>3];
   $125 = $121 * $124;
   $126 = $a;
   $127 = $126 + $125;
   $a = $127;
   $128 = $j;
   $129 = (($128) + 1)|0;
   $j = $129;
  }
  $130 = $i;
  $131 = (135240 + (($130*48)|0)|0);
  $132 = ((($131)) + 32|0);
  $133 = +HEAPF64[$132>>3];
  $134 = $a;
  $135 = (+Math_sin((+$134)));
  $136 = $133 * $135;
  $137 = $i;
  $138 = (135240 + (($137*48)|0)|0);
  $139 = ((($138)) + 40|0);
  $140 = +HEAPF64[$139>>3];
  $141 = $a;
  $142 = (+Math_cos((+$141)));
  $143 = $140 * $142;
  $144 = $136 + $143;
  $145 = $w2;
  $146 = $145 + $144;
  $w2 = $146;
  $147 = $i;
  $148 = (($147) + -1)|0;
  $i = $148;
 }
 $i = 3;
 while(1) {
  $149 = $i;
  $150 = ($149|0)>=(0);
  if (!($150)) {
   break;
  }
  $a = 0.0;
  $j = 0;
  while(1) {
   $151 = $j;
   $152 = ($151|0)<(8);
   if (!($152)) {
    break;
   }
   $153 = $j;
   $154 = $i;
   $155 = (136440 + (($154*48)|0)|0);
   $156 = (($155) + ($153<<2)|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = (+($157|0));
   $159 = $j;
   $160 = (($fa) + ($159<<3)|0);
   $161 = +HEAPF64[$160>>3];
   $162 = $158 * $161;
   $163 = $a;
   $164 = $163 + $162;
   $a = $164;
   $165 = $j;
   $166 = (($165) + 1)|0;
   $j = $166;
  }
  $167 = $i;
  $168 = (136440 + (($167*48)|0)|0);
  $169 = ((($168)) + 32|0);
  $170 = +HEAPF64[$169>>3];
  $171 = $a;
  $172 = (+Math_sin((+$171)));
  $173 = $170 * $172;
  $174 = $i;
  $175 = (136440 + (($174*48)|0)|0);
  $176 = ((($175)) + 40|0);
  $177 = +HEAPF64[$176>>3];
  $178 = $a;
  $179 = (+Math_cos((+$178)));
  $180 = $177 * $179;
  $181 = $173 + $180;
  $182 = $w3;
  $183 = $182 + $181;
  $w3 = $183;
  $184 = $i;
  $185 = (($184) + -1)|0;
  $i = $185;
 }
 $i = 0;
 while(1) {
  $186 = $i;
  $187 = ($186|0)>=(0);
  if (!($187)) {
   break;
  }
  $a = 0.0;
  $j = 0;
  while(1) {
   $188 = $j;
   $189 = ($188|0)<(8);
   if (!($189)) {
    break;
   }
   $190 = $j;
   $191 = $i;
   $192 = (136632 + (($191*48)|0)|0);
   $193 = (($192) + ($190<<2)|0);
   $194 = HEAP32[$193>>2]|0;
   $195 = (+($194|0));
   $196 = $j;
   $197 = (($fa) + ($196<<3)|0);
   $198 = +HEAPF64[$197>>3];
   $199 = $195 * $198;
   $200 = $a;
   $201 = $200 + $199;
   $a = $201;
   $202 = $j;
   $203 = (($202) + 1)|0;
   $j = $203;
  }
  $204 = $i;
  $205 = (136632 + (($204*48)|0)|0);
  $206 = ((($205)) + 32|0);
  $207 = +HEAPF64[$206>>3];
  $208 = $a;
  $209 = (+Math_sin((+$208)));
  $210 = $207 * $209;
  $211 = $i;
  $212 = (136632 + (($211*48)|0)|0);
  $213 = ((($212)) + 40|0);
  $214 = +HEAPF64[$213>>3];
  $215 = $a;
  $216 = (+Math_cos((+$215)));
  $217 = $214 * $216;
  $218 = $210 + $217;
  $219 = $w4;
  $220 = $219 + $218;
  $w4 = $220;
  $221 = $i;
  $222 = (($221) + -1)|0;
  $i = $222;
 }
 $223 = $w0;
 $224 = $w1;
 $225 = $w2;
 $226 = $w3;
 $227 = $w4;
 $228 = $w5;
 $229 = $t;
 $230 = $228 * $229;
 $231 = $227 + $230;
 $232 = $t;
 $233 = $231 * $232;
 $234 = $226 + $233;
 $235 = $t;
 $236 = $234 * $235;
 $237 = $225 + $236;
 $238 = $t;
 $239 = $237 * $238;
 $240 = $224 + $239;
 $241 = $t;
 $242 = $240 * $241;
 $243 = $223 + $242;
 $244 = $243 * 4.8481368110953598E-6;
 $245 = $2;
 $246 = $3;
 $247 = $245 * $246;
 $248 = $247 / 2.0;
 $249 = $244 - $248;
 $s = $249;
 $250 = $s;
 STACKTOP = sp;return (+$250);
}
function _eraS06a($date1,$date2) {
 $date1 = +$date1;
 $date2 = +$date2;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $rnpb = 0, $s = 0.0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $rnpb = sp + 24|0;
 $x = sp + 16|0;
 $y = sp + 8|0;
 $0 = $date1;
 $1 = $date2;
 $2 = $0;
 $3 = $1;
 _eraPnm06a($2,$3,$rnpb);
 _eraBpn2xy($rnpb,$x,$y);
 $4 = $0;
 $5 = $1;
 $6 = +HEAPF64[$x>>3];
 $7 = +HEAPF64[$y>>3];
 $8 = (+_eraS06($4,$5,$6,$7));
 $s = $8;
 $9 = $s;
 STACKTOP = sp;return (+$9);
}
function _eraS06($date1,$date2,$x,$y) {
 $date1 = +$date1;
 $date2 = +$date2;
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0.0;
 var $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0.0, $2 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0, $222 = 0, $223 = 0.0;
 var $224 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0.0, $240 = 0.0, $241 = 0.0;
 var $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0;
 var $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0;
 var $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0;
 var $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0;
 var $9 = 0.0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $a = 0.0, $fa = 0, $i = 0, $j = 0, $s = 0.0, $t = 0.0, $w0 = 0.0, $w1 = 0.0, $w2 = 0.0;
 var $w3 = 0.0, $w4 = 0.0, $w5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $fa = sp + 8|0;
 $0 = $date1;
 $1 = $date2;
 $2 = $x;
 $3 = $y;
 $4 = $0;
 $5 = $4 - 2451545.0;
 $6 = $1;
 $7 = $5 + $6;
 $8 = $7 / 36525.0;
 $t = $8;
 $9 = $t;
 $10 = (+_eraFal03($9));
 HEAPF64[$fa>>3] = $10;
 $11 = $t;
 $12 = (+_eraFalp03($11));
 $13 = ((($fa)) + 8|0);
 HEAPF64[$13>>3] = $12;
 $14 = $t;
 $15 = (+_eraFaf03($14));
 $16 = ((($fa)) + 16|0);
 HEAPF64[$16>>3] = $15;
 $17 = $t;
 $18 = (+_eraFad03($17));
 $19 = ((($fa)) + 24|0);
 HEAPF64[$19>>3] = $18;
 $20 = $t;
 $21 = (+_eraFaom03($20));
 $22 = ((($fa)) + 32|0);
 HEAPF64[$22>>3] = $21;
 $23 = $t;
 $24 = (+_eraFave03($23));
 $25 = ((($fa)) + 40|0);
 HEAPF64[$25>>3] = $24;
 $26 = $t;
 $27 = (+_eraFae03($26));
 $28 = ((($fa)) + 48|0);
 HEAPF64[$28>>3] = $27;
 $29 = $t;
 $30 = (+_eraFapa03($29));
 $31 = ((($fa)) + 56|0);
 HEAPF64[$31>>3] = $30;
 $32 = +HEAPF64[136680>>3];
 $w0 = $32;
 $33 = +HEAPF64[(136688)>>3];
 $w1 = $33;
 $34 = +HEAPF64[(136696)>>3];
 $w2 = $34;
 $35 = +HEAPF64[(136704)>>3];
 $w3 = $35;
 $36 = +HEAPF64[(136712)>>3];
 $w4 = $36;
 $37 = +HEAPF64[(136720)>>3];
 $w5 = $37;
 $i = 32;
 while(1) {
  $38 = $i;
  $39 = ($38|0)>=(0);
  if (!($39)) {
   break;
  }
  $a = 0.0;
  $j = 0;
  while(1) {
   $40 = $j;
   $41 = ($40|0)<(8);
   if (!($41)) {
    break;
   }
   $42 = $j;
   $43 = $i;
   $44 = (136728 + (($43*48)|0)|0);
   $45 = (($44) + ($42<<2)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (+($46|0));
   $48 = $j;
   $49 = (($fa) + ($48<<3)|0);
   $50 = +HEAPF64[$49>>3];
   $51 = $47 * $50;
   $52 = $a;
   $53 = $52 + $51;
   $a = $53;
   $54 = $j;
   $55 = (($54) + 1)|0;
   $j = $55;
  }
  $56 = $i;
  $57 = (136728 + (($56*48)|0)|0);
  $58 = ((($57)) + 32|0);
  $59 = +HEAPF64[$58>>3];
  $60 = $a;
  $61 = (+Math_sin((+$60)));
  $62 = $59 * $61;
  $63 = $i;
  $64 = (136728 + (($63*48)|0)|0);
  $65 = ((($64)) + 40|0);
  $66 = +HEAPF64[$65>>3];
  $67 = $a;
  $68 = (+Math_cos((+$67)));
  $69 = $66 * $68;
  $70 = $62 + $69;
  $71 = $w0;
  $72 = $71 + $70;
  $w0 = $72;
  $73 = $i;
  $74 = (($73) + -1)|0;
  $i = $74;
 }
 $i = 2;
 while(1) {
  $75 = $i;
  $76 = ($75|0)>=(0);
  if (!($76)) {
   break;
  }
  $a = 0.0;
  $j = 0;
  while(1) {
   $77 = $j;
   $78 = ($77|0)<(8);
   if (!($78)) {
    break;
   }
   $79 = $j;
   $80 = $i;
   $81 = (138312 + (($80*48)|0)|0);
   $82 = (($81) + ($79<<2)|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = (+($83|0));
   $85 = $j;
   $86 = (($fa) + ($85<<3)|0);
   $87 = +HEAPF64[$86>>3];
   $88 = $84 * $87;
   $89 = $a;
   $90 = $89 + $88;
   $a = $90;
   $91 = $j;
   $92 = (($91) + 1)|0;
   $j = $92;
  }
  $93 = $i;
  $94 = (138312 + (($93*48)|0)|0);
  $95 = ((($94)) + 32|0);
  $96 = +HEAPF64[$95>>3];
  $97 = $a;
  $98 = (+Math_sin((+$97)));
  $99 = $96 * $98;
  $100 = $i;
  $101 = (138312 + (($100*48)|0)|0);
  $102 = ((($101)) + 40|0);
  $103 = +HEAPF64[$102>>3];
  $104 = $a;
  $105 = (+Math_cos((+$104)));
  $106 = $103 * $105;
  $107 = $99 + $106;
  $108 = $w1;
  $109 = $108 + $107;
  $w1 = $109;
  $110 = $i;
  $111 = (($110) + -1)|0;
  $i = $111;
 }
 $i = 24;
 while(1) {
  $112 = $i;
  $113 = ($112|0)>=(0);
  if (!($113)) {
   break;
  }
  $a = 0.0;
  $j = 0;
  while(1) {
   $114 = $j;
   $115 = ($114|0)<(8);
   if (!($115)) {
    break;
   }
   $116 = $j;
   $117 = $i;
   $118 = (138456 + (($117*48)|0)|0);
   $119 = (($118) + ($116<<2)|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = (+($120|0));
   $122 = $j;
   $123 = (($fa) + ($122<<3)|0);
   $124 = +HEAPF64[$123>>3];
   $125 = $121 * $124;
   $126 = $a;
   $127 = $126 + $125;
   $a = $127;
   $128 = $j;
   $129 = (($128) + 1)|0;
   $j = $129;
  }
  $130 = $i;
  $131 = (138456 + (($130*48)|0)|0);
  $132 = ((($131)) + 32|0);
  $133 = +HEAPF64[$132>>3];
  $134 = $a;
  $135 = (+Math_sin((+$134)));
  $136 = $133 * $135;
  $137 = $i;
  $138 = (138456 + (($137*48)|0)|0);
  $139 = ((($138)) + 40|0);
  $140 = +HEAPF64[$139>>3];
  $141 = $a;
  $142 = (+Math_cos((+$141)));
  $143 = $140 * $142;
  $144 = $136 + $143;
  $145 = $w2;
  $146 = $145 + $144;
  $w2 = $146;
  $147 = $i;
  $148 = (($147) + -1)|0;
  $i = $148;
 }
 $i = 3;
 while(1) {
  $149 = $i;
  $150 = ($149|0)>=(0);
  if (!($150)) {
   break;
  }
  $a = 0.0;
  $j = 0;
  while(1) {
   $151 = $j;
   $152 = ($151|0)<(8);
   if (!($152)) {
    break;
   }
   $153 = $j;
   $154 = $i;
   $155 = (139656 + (($154*48)|0)|0);
   $156 = (($155) + ($153<<2)|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = (+($157|0));
   $159 = $j;
   $160 = (($fa) + ($159<<3)|0);
   $161 = +HEAPF64[$160>>3];
   $162 = $158 * $161;
   $163 = $a;
   $164 = $163 + $162;
   $a = $164;
   $165 = $j;
   $166 = (($165) + 1)|0;
   $j = $166;
  }
  $167 = $i;
  $168 = (139656 + (($167*48)|0)|0);
  $169 = ((($168)) + 32|0);
  $170 = +HEAPF64[$169>>3];
  $171 = $a;
  $172 = (+Math_sin((+$171)));
  $173 = $170 * $172;
  $174 = $i;
  $175 = (139656 + (($174*48)|0)|0);
  $176 = ((($175)) + 40|0);
  $177 = +HEAPF64[$176>>3];
  $178 = $a;
  $179 = (+Math_cos((+$178)));
  $180 = $177 * $179;
  $181 = $173 + $180;
  $182 = $w3;
  $183 = $182 + $181;
  $w3 = $183;
  $184 = $i;
  $185 = (($184) + -1)|0;
  $i = $185;
 }
 $i = 0;
 while(1) {
  $186 = $i;
  $187 = ($186|0)>=(0);
  if (!($187)) {
   break;
  }
  $a = 0.0;
  $j = 0;
  while(1) {
   $188 = $j;
   $189 = ($188|0)<(8);
   if (!($189)) {
    break;
   }
   $190 = $j;
   $191 = $i;
   $192 = (139848 + (($191*48)|0)|0);
   $193 = (($192) + ($190<<2)|0);
   $194 = HEAP32[$193>>2]|0;
   $195 = (+($194|0));
   $196 = $j;
   $197 = (($fa) + ($196<<3)|0);
   $198 = +HEAPF64[$197>>3];
   $199 = $195 * $198;
   $200 = $a;
   $201 = $200 + $199;
   $a = $201;
   $202 = $j;
   $203 = (($202) + 1)|0;
   $j = $203;
  }
  $204 = $i;
  $205 = (139848 + (($204*48)|0)|0);
  $206 = ((($205)) + 32|0);
  $207 = +HEAPF64[$206>>3];
  $208 = $a;
  $209 = (+Math_sin((+$208)));
  $210 = $207 * $209;
  $211 = $i;
  $212 = (139848 + (($211*48)|0)|0);
  $213 = ((($212)) + 40|0);
  $214 = +HEAPF64[$213>>3];
  $215 = $a;
  $216 = (+Math_cos((+$215)));
  $217 = $214 * $216;
  $218 = $210 + $217;
  $219 = $w4;
  $220 = $219 + $218;
  $w4 = $220;
  $221 = $i;
  $222 = (($221) + -1)|0;
  $i = $222;
 }
 $223 = $w0;
 $224 = $w1;
 $225 = $w2;
 $226 = $w3;
 $227 = $w4;
 $228 = $w5;
 $229 = $t;
 $230 = $228 * $229;
 $231 = $227 + $230;
 $232 = $t;
 $233 = $231 * $232;
 $234 = $226 + $233;
 $235 = $t;
 $236 = $234 * $235;
 $237 = $225 + $236;
 $238 = $t;
 $239 = $237 * $238;
 $240 = $224 + $239;
 $241 = $t;
 $242 = $240 * $241;
 $243 = $223 + $242;
 $244 = $243 * 4.8481368110953598E-6;
 $245 = $2;
 $246 = $3;
 $247 = $245 * $246;
 $248 = $247 / 2.0;
 $249 = $244 - $248;
 $s = $249;
 $250 = $s;
 STACKTOP = sp;return (+$250);
}
function _eraS2c($theta,$phi,$c) {
 $theta = +$theta;
 $phi = +$phi;
 $c = $c|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0;
 var $cp = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $theta;
 $1 = $phi;
 $2 = $c;
 $3 = $1;
 $4 = (+Math_cos((+$3)));
 $cp = $4;
 $5 = $0;
 $6 = (+Math_cos((+$5)));
 $7 = $cp;
 $8 = $6 * $7;
 $9 = $2;
 HEAPF64[$9>>3] = $8;
 $10 = $0;
 $11 = (+Math_sin((+$10)));
 $12 = $cp;
 $13 = $11 * $12;
 $14 = $2;
 $15 = ((($14)) + 8|0);
 HEAPF64[$15>>3] = $13;
 $16 = $1;
 $17 = (+Math_sin((+$16)));
 $18 = $2;
 $19 = ((($18)) + 16|0);
 HEAPF64[$19>>3] = $17;
 STACKTOP = sp;return;
}
function _eraS2p($theta,$phi,$r,$p) {
 $theta = +$theta;
 $phi = +$phi;
 $r = +$r;
 $p = $p|0;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $u = sp;
 $0 = $theta;
 $1 = $phi;
 $2 = $r;
 $3 = $p;
 $4 = $0;
 $5 = $1;
 _eraS2c($4,$5,$u);
 $6 = $2;
 $7 = $3;
 _eraSxp($6,$u,$7);
 STACKTOP = sp;return;
}
function _eraS2pv($theta,$phi,$r,$td,$pd,$rd,$pv) {
 $theta = +$theta;
 $phi = +$phi;
 $r = +$r;
 $td = +$td;
 $pd = +$pd;
 $rd = +$rd;
 $pv = $pv|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $8 = 0.0, $9 = 0.0, $cp = 0.0, $ct = 0.0, $rcp = 0.0, $rpd = 0.0, $sp = 0.0, $st = 0.0;
 var $w = 0.0, $x = 0.0, $y = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $theta;
 $1 = $phi;
 $2 = $r;
 $3 = $td;
 $4 = $pd;
 $5 = $rd;
 $6 = $pv;
 $7 = $0;
 $8 = (+Math_sin((+$7)));
 $st = $8;
 $9 = $0;
 $10 = (+Math_cos((+$9)));
 $ct = $10;
 $11 = $1;
 $12 = (+Math_sin((+$11)));
 $sp = $12;
 $13 = $1;
 $14 = (+Math_cos((+$13)));
 $cp = $14;
 $15 = $2;
 $16 = $cp;
 $17 = $15 * $16;
 $rcp = $17;
 $18 = $rcp;
 $19 = $ct;
 $20 = $18 * $19;
 $x = $20;
 $21 = $rcp;
 $22 = $st;
 $23 = $21 * $22;
 $y = $23;
 $24 = $2;
 $25 = $4;
 $26 = $24 * $25;
 $rpd = $26;
 $27 = $rpd;
 $28 = $sp;
 $29 = $27 * $28;
 $30 = $cp;
 $31 = $5;
 $32 = $30 * $31;
 $33 = $29 - $32;
 $w = $33;
 $34 = $x;
 $35 = $6;
 HEAPF64[$35>>3] = $34;
 $36 = $y;
 $37 = $6;
 $38 = ((($37)) + 8|0);
 HEAPF64[$38>>3] = $36;
 $39 = $2;
 $40 = $sp;
 $41 = $39 * $40;
 $42 = $6;
 $43 = ((($42)) + 16|0);
 HEAPF64[$43>>3] = $41;
 $44 = $y;
 $45 = -$44;
 $46 = $3;
 $47 = $45 * $46;
 $48 = $w;
 $49 = $ct;
 $50 = $48 * $49;
 $51 = $47 - $50;
 $52 = $6;
 $53 = ((($52)) + 24|0);
 HEAPF64[$53>>3] = $51;
 $54 = $x;
 $55 = $3;
 $56 = $54 * $55;
 $57 = $w;
 $58 = $st;
 $59 = $57 * $58;
 $60 = $56 - $59;
 $61 = $6;
 $62 = ((($61)) + 24|0);
 $63 = ((($62)) + 8|0);
 HEAPF64[$63>>3] = $60;
 $64 = $rpd;
 $65 = $cp;
 $66 = $64 * $65;
 $67 = $sp;
 $68 = $5;
 $69 = $67 * $68;
 $70 = $66 + $69;
 $71 = $6;
 $72 = ((($71)) + 24|0);
 $73 = ((($72)) + 16|0);
 HEAPF64[$73>>3] = $70;
 STACKTOP = sp;return;
}
function _eraS2xpv($s1,$s2,$pv,$spv) {
 $s1 = +$s1;
 $s2 = +$s2;
 $pv = $pv|0;
 $spv = $spv|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s1;
 $1 = $s2;
 $2 = $pv;
 $3 = $spv;
 $4 = $0;
 $5 = $2;
 $6 = $3;
 _eraSxp($4,$5,$6);
 $7 = $1;
 $8 = $2;
 $9 = ((($8)) + 24|0);
 $10 = $3;
 $11 = ((($10)) + 24|0);
 _eraSxp($7,$9,$11);
 STACKTOP = sp;return;
}
function _eraSepp($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $axb = 0, $cs = 0.0, $or$cond = 0;
 var $s = 0.0, $ss = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $axb = sp + 24|0;
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = $1;
 _eraPxp($2,$3,$axb);
 $4 = (+_eraPm($axb));
 $ss = $4;
 $5 = $0;
 $6 = $1;
 $7 = (+_eraPdp($5,$6));
 $cs = $7;
 $8 = $ss;
 $9 = $8 != 0.0;
 $10 = $cs;
 $11 = $10 != 0.0;
 $or$cond = $9 | $11;
 if (!($or$cond)) {
  $15 = 0.0;
  $s = $15;
  $16 = $s;
  STACKTOP = sp;return (+$16);
 }
 $12 = $ss;
 $13 = $cs;
 $14 = (+Math_atan2((+$12),(+$13)));
 $15 = $14;
 $s = $15;
 $16 = $s;
 STACKTOP = sp;return (+$16);
}
function _eraSeps($al,$ap,$bl,$bp) {
 $al = +$al;
 $ap = +$ap;
 $bl = +$bl;
 $bp = +$bp;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $ac = 0, $bc = 0, $s = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ac = sp + 32|0;
 $bc = sp + 8|0;
 $0 = $al;
 $1 = $ap;
 $2 = $bl;
 $3 = $bp;
 $4 = $0;
 $5 = $1;
 _eraS2c($4,$5,$ac);
 $6 = $2;
 $7 = $3;
 _eraS2c($6,$7,$bc);
 $8 = (+_eraSepp($ac,$bc));
 $s = $8;
 $9 = $s;
 STACKTOP = sp;return (+$9);
}
function _eraSp00($date1,$date2) {
 $date1 = +$date1;
 $date2 = +$date2;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $sp = 0.0, $t = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $date1;
 $1 = $date2;
 $2 = $0;
 $3 = $2 - 2451545.0;
 $4 = $1;
 $5 = $3 + $4;
 $6 = $5 / 36525.0;
 $t = $6;
 $7 = $t;
 $8 = -4.6999999999999997E-5 * $7;
 $9 = $8 * 4.8481368110953598E-6;
 $sp = $9;
 $10 = $sp;
 STACKTOP = sp;return (+$10);
}
function _eraStarpm($ra1,$dec1,$pmr1,$pmd1,$px1,$rv1,$ep1a,$ep1b,$ep2a,$ep2b,$ra2,$dec2,$pmr2,$pmd2,$px2,$rv2) {
 $ra1 = +$ra1;
 $dec1 = +$dec1;
 $pmr1 = +$pmr1;
 $pmd1 = +$pmd1;
 $px1 = +$px1;
 $rv1 = +$rv1;
 $ep1a = +$ep1a;
 $ep1b = +$ep1b;
 $ep2a = +$ep2a;
 $ep2b = +$ep2b;
 $ra2 = $ra2|0;
 $dec2 = $dec2|0;
 $pmr2 = $pmr2|0;
 $pmd2 = $pmd2|0;
 $px2 = $px2|0;
 $rv2 = $rv2|0;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0.0, $9 = 0.0, $c2mv2 = 0.0, $dt = 0.0, $j = 0;
 var $j1 = 0, $j2 = 0, $pv = 0, $pv1 = 0, $pv2 = 0, $r2 = 0.0, $rdv = 0.0, $tl1 = 0.0, $tl2 = 0.0, $v2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pv1 = sp + 152|0;
 $pv = sp + 88|0;
 $pv2 = sp;
 $1 = $ra1;
 $2 = $dec1;
 $3 = $pmr1;
 $4 = $pmd1;
 $5 = $px1;
 $6 = $rv1;
 $7 = $ep1a;
 $8 = $ep1b;
 $9 = $ep2a;
 $10 = $ep2b;
 $11 = $ra2;
 $12 = $dec2;
 $13 = $pmr2;
 $14 = $pmd2;
 $15 = $px2;
 $16 = $rv2;
 $17 = $1;
 $18 = $2;
 $19 = $3;
 $20 = $4;
 $21 = $5;
 $22 = $6;
 $23 = (_eraStarpv($17,$18,$19,$20,$21,$22,$pv1)|0);
 $j1 = $23;
 $24 = (+_eraPm($pv1));
 $25 = $24 / 173.14463331134971;
 $tl1 = $25;
 $26 = $9;
 $27 = $7;
 $28 = $26 - $27;
 $29 = $10;
 $30 = $8;
 $31 = $29 - $30;
 $32 = $28 + $31;
 $dt = $32;
 $33 = $dt;
 $34 = $tl1;
 $35 = $33 + $34;
 _eraPvu($35,$pv1,$pv);
 $36 = (+_eraPdp($pv,$pv));
 $r2 = $36;
 $37 = ((($pv)) + 24|0);
 $38 = (+_eraPdp($pv,$37));
 $rdv = $38;
 $39 = ((($pv)) + 24|0);
 $40 = ((($pv)) + 24|0);
 $41 = (+_eraPdp($39,$40));
 $v2 = $41;
 $42 = $v2;
 $43 = 29979.06404452175 - $42;
 $c2mv2 = $43;
 $44 = $c2mv2;
 $45 = $44 <= 0.0;
 if ($45) {
  $0 = -1;
  $76 = $0;
  STACKTOP = sp;return ($76|0);
 } else {
  $46 = $rdv;
  $47 = -$46;
  $48 = $rdv;
  $49 = $rdv;
  $50 = $48 * $49;
  $51 = $c2mv2;
  $52 = $r2;
  $53 = $51 * $52;
  $54 = $50 + $53;
  $55 = (+Math_sqrt((+$54)));
  $56 = $47 + $55;
  $57 = $c2mv2;
  $58 = $56 / $57;
  $tl2 = $58;
  $59 = $dt;
  $60 = $tl1;
  $61 = $tl2;
  $62 = $60 - $61;
  $63 = $59 + $62;
  _eraPvu($63,$pv1,$pv2);
  $64 = $11;
  $65 = $12;
  $66 = $13;
  $67 = $14;
  $68 = $15;
  $69 = $16;
  $70 = (_eraPvstar($pv2,$64,$65,$66,$67,$68,$69)|0);
  $j2 = $70;
  $71 = $j2;
  $72 = ($71|0)==(0);
  $73 = $j1;
  $74 = $72 ? $73 : -1;
  $j = $74;
  $75 = $j;
  $0 = $75;
  $76 = $0;
  STACKTOP = sp;return ($76|0);
 }
 return (0)|0;
}
function _eraStarpv($ra,$dec,$pmr,$pmd,$px,$rv,$pv) {
 $ra = +$ra;
 $dec = +$dec;
 $pmr = +$pmr;
 $pmd = +$pmd;
 $px = +$px;
 $rv = +$rv;
 $pv = $pv|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $12 = 0.0, $13 = 0.0;
 var $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0;
 var $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0;
 var $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0;
 var $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $betr = 0.0, $betsr = 0.0, $betst = 0.0, $bett = 0.0, $d = 0.0, $dd = 0.0;
 var $ddel = 0.0, $decd = 0.0, $del = 0.0, $i = 0, $iwarn = 0, $od = 0.0, $odd = 0.0, $oddel = 0.0, $odel = 0.0, $r = 0.0, $rad = 0.0, $rd = 0.0, $ur = 0, $usr = 0, $ust = 0, $ut = 0, $v = 0.0, $vsr = 0.0, $vst = 0.0, $w = 0;
 var $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $w = sp + 272|0;
 $x = sp + 208|0;
 $usr = sp + 184|0;
 $ust = sp + 160|0;
 $ur = sp + 72|0;
 $ut = sp + 48|0;
 $0 = $ra;
 $1 = $dec;
 $2 = $pmr;
 $3 = $pmd;
 $4 = $px;
 $5 = $rv;
 $6 = $pv;
 $d = 0.0;
 $del = 0.0;
 $odd = 0.0;
 $oddel = 0.0;
 $od = 0.0;
 $odel = 0.0;
 $7 = $4;
 $8 = $7 >= 9.9999999999999995E-8;
 if ($8) {
  $9 = $4;
  HEAPF64[$w>>3] = $9;
  $iwarn = 0;
 } else {
  HEAPF64[$w>>3] = 9.9999999999999995E-8;
  $iwarn = 1;
 }
 $10 = +HEAPF64[$w>>3];
 $11 = 206264.80624709636 / $10;
 $r = $11;
 $12 = $5;
 $13 = 86400.0 * $12;
 $14 = $13 * 1000.0;
 $15 = $14 / 1.4959787E+11;
 $rd = $15;
 $16 = $2;
 $17 = $16 / 365.25;
 $rad = $17;
 $18 = $3;
 $19 = $18 / 365.25;
 $decd = $19;
 $20 = $0;
 $21 = $1;
 $22 = $r;
 $23 = $rad;
 $24 = $decd;
 $25 = $rd;
 $26 = $6;
 _eraS2pv($20,$21,$22,$23,$24,$25,$26);
 $27 = $6;
 $28 = ((($27)) + 24|0);
 $29 = (+_eraPm($28));
 $v = $29;
 $30 = $v;
 $31 = $30 / 173.14463331134971;
 $32 = $31 > 0.5;
 if ($32) {
  $33 = $6;
  $34 = ((($33)) + 24|0);
  _eraZp($34);
  $35 = $iwarn;
  $36 = (($35) + 2)|0;
  $iwarn = $36;
 }
 $37 = $6;
 _eraPn($37,$w,$x);
 $38 = $6;
 $39 = ((($38)) + 24|0);
 $40 = (+_eraPdp($x,$39));
 $vsr = $40;
 $41 = $vsr;
 _eraSxp($41,$x,$usr);
 $42 = $6;
 $43 = ((($42)) + 24|0);
 _eraPmp($43,$usr,$ust);
 $44 = (+_eraPm($ust));
 $vst = $44;
 $45 = $vsr;
 $46 = $45 / 173.14463331134971;
 $betsr = $46;
 $47 = $vst;
 $48 = $47 / 173.14463331134971;
 $betst = $48;
 $49 = $betst;
 $bett = $49;
 $50 = $betsr;
 $betr = $50;
 $i = 0;
 while(1) {
  $51 = $i;
  $52 = ($51|0)<(100);
  if (!($52)) {
   break;
  }
  $53 = $betr;
  $54 = 1.0 + $53;
  $d = $54;
  $55 = $betr;
  $56 = $betr;
  $57 = $55 * $56;
  $58 = 1.0 - $57;
  $59 = $bett;
  $60 = $bett;
  $61 = $59 * $60;
  $62 = $58 - $61;
  $63 = (+Math_sqrt((+$62)));
  $64 = $63 - 1.0;
  $del = $64;
  $65 = $d;
  $66 = $betsr;
  $67 = $65 * $66;
  $68 = $del;
  $69 = $67 + $68;
  $betr = $69;
  $70 = $d;
  $71 = $betst;
  $72 = $70 * $71;
  $bett = $72;
  $73 = $i;
  $74 = ($73|0)>(0);
  if ($74) {
   $75 = $d;
   $76 = $od;
   $77 = $75 - $76;
   $78 = (+Math_abs((+$77)));
   $dd = $78;
   $79 = $del;
   $80 = $odel;
   $81 = $79 - $80;
   $82 = (+Math_abs((+$81)));
   $ddel = $82;
   $83 = $i;
   $84 = ($83|0)>(1);
   if ($84) {
    $85 = $dd;
    $86 = $odd;
    $87 = $85 >= $86;
    if ($87) {
     $88 = $ddel;
     $89 = $oddel;
     $90 = $88 >= $89;
     if ($90) {
      break;
     }
    }
   }
   $91 = $dd;
   $odd = $91;
   $92 = $ddel;
   $oddel = $92;
  }
  $93 = $d;
  $od = $93;
  $94 = $del;
  $odel = $94;
  $95 = $i;
  $96 = (($95) + 1)|0;
  $i = $96;
 }
 $97 = $i;
 $98 = ($97|0)>=(100);
 if ($98) {
  $99 = $iwarn;
  $100 = (($99) + 4)|0;
  $iwarn = $100;
 }
 $101 = $betsr;
 $102 = $101 != 0.0;
 if (!($102)) {
  $108 = 1.0;
  HEAPF64[$w>>3] = $108;
  $109 = +HEAPF64[$w>>3];
  _eraSxp($109,$usr,$ur);
  $110 = $d;
  _eraSxp($110,$ust,$ut);
  $111 = $6;
  $112 = ((($111)) + 24|0);
  _eraPpp($ur,$ut,$112);
  $113 = $iwarn;
  STACKTOP = sp;return ($113|0);
 }
 $103 = $d;
 $104 = $del;
 $105 = $betsr;
 $106 = $104 / $105;
 $107 = $103 + $106;
 $108 = $107;
 HEAPF64[$w>>3] = $108;
 $109 = +HEAPF64[$w>>3];
 _eraSxp($109,$usr,$ur);
 $110 = $d;
 _eraSxp($110,$ust,$ut);
 $111 = $6;
 $112 = ((($111)) + 24|0);
 _eraPpp($ur,$ut,$112);
 $113 = $iwarn;
 STACKTOP = sp;return ($113|0);
}
function _eraSxp($s,$p,$sp) {
 $s = +$s;
 $p = $p|0;
 $sp = $sp|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0;
 var $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $p;
 $2 = $sp;
 $3 = $0;
 $4 = $1;
 $5 = +HEAPF64[$4>>3];
 $6 = $3 * $5;
 $7 = $2;
 HEAPF64[$7>>3] = $6;
 $8 = $0;
 $9 = $1;
 $10 = ((($9)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = $8 * $11;
 $13 = $2;
 $14 = ((($13)) + 8|0);
 HEAPF64[$14>>3] = $12;
 $15 = $0;
 $16 = $1;
 $17 = ((($16)) + 16|0);
 $18 = +HEAPF64[$17>>3];
 $19 = $15 * $18;
 $20 = $2;
 $21 = ((($20)) + 16|0);
 HEAPF64[$21>>3] = $19;
 STACKTOP = sp;return;
}
function _eraSxpv($s,$pv,$spv) {
 $s = +$s;
 $pv = $pv|0;
 $spv = $spv|0;
 var $0 = 0.0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $pv;
 $2 = $spv;
 $3 = $0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 _eraS2xpv($3,$4,$5,$6);
 STACKTOP = sp;return;
}
function _eraTaitt($tai1,$tai2,$tt1,$tt2) {
 $tai1 = +$tai1;
 $tai2 = +$tai2;
 $tt1 = $tt1|0;
 $tt2 = $tt2|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tai1;
 $1 = $tai2;
 $2 = $tt1;
 $3 = $tt2;
 $4 = $0;
 $5 = $1;
 $6 = $4 > $5;
 $7 = $0;
 if ($6) {
  $8 = $2;
  HEAPF64[$8>>3] = $7;
  $9 = $1;
  $10 = $9 + 3.7249999999999995E-4;
  $11 = $3;
  HEAPF64[$11>>3] = $10;
  STACKTOP = sp;return 0;
 } else {
  $12 = $7 + 3.7249999999999995E-4;
  $13 = $2;
  HEAPF64[$13>>3] = $12;
  $14 = $1;
  $15 = $3;
  HEAPF64[$15>>3] = $14;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _eraTaiut1($tai1,$tai2,$dta,$ut11,$ut12) {
 $tai1 = +$tai1;
 $tai2 = +$tai2;
 $dta = +$dta;
 $ut11 = $ut11|0;
 $ut12 = $ut12|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0;
 var $9 = 0, $dtad = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tai1;
 $1 = $tai2;
 $2 = $dta;
 $3 = $ut11;
 $4 = $ut12;
 $5 = $2;
 $6 = $5 / 86400.0;
 $dtad = $6;
 $7 = $0;
 $8 = $1;
 $9 = $7 > $8;
 $10 = $0;
 if ($9) {
  $11 = $3;
  HEAPF64[$11>>3] = $10;
  $12 = $1;
  $13 = $dtad;
  $14 = $12 + $13;
  $15 = $4;
  HEAPF64[$15>>3] = $14;
  STACKTOP = sp;return 0;
 } else {
  $16 = $dtad;
  $17 = $10 + $16;
  $18 = $3;
  HEAPF64[$18>>3] = $17;
  $19 = $1;
  $20 = $4;
  HEAPF64[$20>>3] = $19;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _eraTaiutc($tai1,$tai2,$utc1,$utc2) {
 $tai1 = +$tai1;
 $tai2 = +$tai2;
 $utc1 = $utc1|0;
 $utc2 = $utc2|0;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $a1 = 0.0, $a2 = 0.0, $big1 = 0, $g1 = 0, $g2 = 0, $i = 0, $j = 0, $u1 = 0.0, $u2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $g1 = sp + 8|0;
 $g2 = sp;
 $1 = $tai1;
 $2 = $tai2;
 $3 = $utc1;
 $4 = $utc2;
 $5 = $1;
 $6 = $2;
 $7 = $5 >= $6;
 $8 = $7&1;
 $big1 = $8;
 $9 = $big1;
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = $1;
  $a1 = $11;
  $12 = $2;
  $a2 = $12;
 } else {
  $13 = $2;
  $a1 = $13;
  $14 = $1;
  $a2 = $14;
 }
 $15 = $a1;
 $u1 = $15;
 $16 = $a2;
 $u2 = $16;
 $i = 0;
 while(1) {
  $17 = $i;
  $18 = ($17|0)<(3);
  if (!($18)) {
   break;
  }
  $19 = $u1;
  $20 = $u2;
  $21 = (_eraUtctai($19,$20,$g1,$g2)|0);
  $j = $21;
  $22 = $j;
  $23 = ($22|0)<(0);
  if ($23) {
   label = 7;
   break;
  }
  $25 = $a1;
  $26 = +HEAPF64[$g1>>3];
  $27 = $25 - $26;
  $28 = $u2;
  $29 = $28 + $27;
  $u2 = $29;
  $30 = $a2;
  $31 = +HEAPF64[$g2>>3];
  $32 = $30 - $31;
  $33 = $u2;
  $34 = $33 + $32;
  $u2 = $34;
  $35 = $i;
  $36 = (($35) + 1)|0;
  $i = $36;
 }
 if ((label|0) == 7) {
  $24 = $j;
  $0 = $24;
  $48 = $0;
  STACKTOP = sp;return ($48|0);
 }
 $37 = $big1;
 $38 = ($37|0)!=(0);
 if ($38) {
  $39 = $u1;
  $40 = $3;
  HEAPF64[$40>>3] = $39;
  $41 = $u2;
  $42 = $4;
  HEAPF64[$42>>3] = $41;
 } else {
  $43 = $u2;
  $44 = $3;
  HEAPF64[$44>>3] = $43;
  $45 = $u1;
  $46 = $4;
  HEAPF64[$46>>3] = $45;
 }
 $47 = $j;
 $0 = $47;
 $48 = $0;
 STACKTOP = sp;return ($48|0);
}
function _eraTcbtdb($tcb1,$tcb2,$tdb1,$tdb2) {
 $tcb1 = +$tcb1;
 $tcb2 = +$tcb2;
 $tdb1 = $tdb1|0;
 $tdb2 = $tdb2|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $d = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tcb1;
 $1 = $tcb2;
 $2 = $tdb1;
 $3 = $tdb2;
 $4 = $0;
 $5 = $1;
 $6 = $4 > $5;
 if ($6) {
  $7 = $0;
  $8 = $7 - 2443144.5;
  $d = $8;
  $9 = $0;
  $10 = $2;
  HEAPF64[$10>>3] = $9;
  $11 = $1;
  $12 = $11 + -7.5810185185185191E-10;
  $13 = $d;
  $14 = $1;
  $15 = $14 - 3.7249999999999995E-4;
  $16 = $13 + $15;
  $17 = $16 * 1.5505197680000001E-8;
  $18 = $12 - $17;
  $19 = $3;
  HEAPF64[$19>>3] = $18;
  STACKTOP = sp;return 0;
 } else {
  $20 = $1;
  $21 = $20 - 2443144.5;
  $d = $21;
  $22 = $0;
  $23 = $22 + -7.5810185185185191E-10;
  $24 = $d;
  $25 = $0;
  $26 = $25 - 3.7249999999999995E-4;
  $27 = $24 + $26;
  $28 = $27 * 1.5505197680000001E-8;
  $29 = $23 - $28;
  $30 = $2;
  HEAPF64[$30>>3] = $29;
  $31 = $1;
  $32 = $3;
  HEAPF64[$32>>3] = $31;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _eraTcgtt($tcg1,$tcg2,$tt1,$tt2) {
 $tcg1 = +$tcg1;
 $tcg2 = +$tcg2;
 $tt1 = $tt1|0;
 $tt2 = $tt2|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tcg1;
 $1 = $tcg2;
 $2 = $tt1;
 $3 = $tt2;
 $4 = $0;
 $5 = $1;
 $6 = $4 > $5;
 $7 = $0;
 if ($6) {
  $8 = $2;
  HEAPF64[$8>>3] = $7;
  $9 = $1;
  $10 = $0;
  $11 = $10 - 2400000.5;
  $12 = $1;
  $13 = $12 - 43144.000372499999;
  $14 = $11 + $13;
  $15 = $14 * 6.969290134E-10;
  $16 = $9 - $15;
  $17 = $3;
  HEAPF64[$17>>3] = $16;
  STACKTOP = sp;return 0;
 } else {
  $18 = $1;
  $19 = $18 - 2400000.5;
  $20 = $0;
  $21 = $20 - 43144.000372499999;
  $22 = $19 + $21;
  $23 = $22 * 6.969290134E-10;
  $24 = $7 - $23;
  $25 = $2;
  HEAPF64[$25>>3] = $24;
  $26 = $1;
  $27 = $3;
  HEAPF64[$27>>3] = $26;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _eraTdbtcb($tdb1,$tdb2,$tcb1,$tcb2) {
 $tdb1 = +$tdb1;
 $tdb2 = +$tdb2;
 $tcb1 = $tcb1|0;
 $tcb2 = $tcb2|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $d = 0.0, $f = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tdb1;
 $1 = $tdb2;
 $2 = $tcb1;
 $3 = $tcb2;
 $4 = $0;
 $5 = $1;
 $6 = $4 > $5;
 if ($6) {
  $7 = $0;
  $8 = 2443144.5 - $7;
  $d = $8;
  $9 = $1;
  $10 = $9 - -7.5810185185185191E-10;
  $f = $10;
  $11 = $0;
  $12 = $2;
  HEAPF64[$12>>3] = $11;
  $13 = $f;
  $14 = $d;
  $15 = $f;
  $16 = $15 - 3.7249999999999995E-4;
  $17 = $14 - $16;
  $18 = $17 * 1.5505197920411159E-8;
  $19 = $13 - $18;
  $20 = $3;
  HEAPF64[$20>>3] = $19;
  STACKTOP = sp;return 0;
 } else {
  $21 = $1;
  $22 = 2443144.5 - $21;
  $d = $22;
  $23 = $0;
  $24 = $23 - -7.5810185185185191E-10;
  $f = $24;
  $25 = $f;
  $26 = $d;
  $27 = $f;
  $28 = $27 - 3.7249999999999995E-4;
  $29 = $26 - $28;
  $30 = $29 * 1.5505197920411159E-8;
  $31 = $25 + $30;
  $32 = $2;
  HEAPF64[$32>>3] = $31;
  $33 = $1;
  $34 = $3;
  HEAPF64[$34>>3] = $33;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _eraTdbtt($tdb1,$tdb2,$dtr,$tt1,$tt2) {
 $tdb1 = +$tdb1;
 $tdb2 = +$tdb2;
 $dtr = +$dtr;
 $tt1 = $tt1|0;
 $tt2 = $tt2|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0;
 var $9 = 0, $dtrd = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tdb1;
 $1 = $tdb2;
 $2 = $dtr;
 $3 = $tt1;
 $4 = $tt2;
 $5 = $2;
 $6 = $5 / 86400.0;
 $dtrd = $6;
 $7 = $0;
 $8 = $1;
 $9 = $7 > $8;
 $10 = $0;
 if ($9) {
  $11 = $3;
  HEAPF64[$11>>3] = $10;
  $12 = $1;
  $13 = $dtrd;
  $14 = $12 - $13;
  $15 = $4;
  HEAPF64[$15>>3] = $14;
  STACKTOP = sp;return 0;
 } else {
  $16 = $dtrd;
  $17 = $10 - $16;
  $18 = $3;
  HEAPF64[$18>>3] = $17;
  $19 = $1;
  $20 = $4;
  HEAPF64[$20>>3] = $19;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _eraTf2a($s,$ihour,$imin,$sec,$rad) {
 $s = $s|0;
 $ihour = $ihour|0;
 $imin = $imin|0;
 $sec = +$sec;
 $rad = $rad|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $or$cond = 0, $or$cond3 = 0;
 var $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $ihour;
 $3 = $imin;
 $4 = $sec;
 $5 = $rad;
 $6 = $1;
 $7 = $6 << 24 >> 24;
 $8 = ($7|0)==(45);
 $9 = $8 ? -1.0 : 1.0;
 $10 = $2;
 $11 = (Math_abs(($10|0))|0);
 $12 = (+($11|0));
 $13 = 60.0 * $12;
 $14 = $3;
 $15 = (Math_abs(($14|0))|0);
 $16 = (+($15|0));
 $17 = $13 + $16;
 $18 = 60.0 * $17;
 $19 = $4;
 $20 = (+Math_abs((+$19)));
 $21 = $18 + $20;
 $22 = $9 * $21;
 $23 = $22 * 7.2722052166430395E-5;
 $24 = $5;
 HEAPF64[$24>>3] = $23;
 $25 = $2;
 $26 = ($25|0)<(0);
 $27 = $2;
 $28 = ($27|0)>(23);
 $or$cond = $26 | $28;
 if ($or$cond) {
  $0 = 1;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 $29 = $3;
 $30 = ($29|0)<(0);
 $31 = $3;
 $32 = ($31|0)>(59);
 $or$cond3 = $30 | $32;
 if ($or$cond3) {
  $0 = 2;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 $33 = $4;
 $34 = $33 < 0.0;
 $35 = $4;
 $36 = $35 >= 60.0;
 $or$cond5 = $34 | $36;
 if ($or$cond5) {
  $0 = 3;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 } else {
  $0 = 0;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 return (0)|0;
}
function _eraTf2d($s,$ihour,$imin,$sec,$days) {
 $s = $s|0;
 $ihour = $ihour|0;
 $imin = $imin|0;
 $sec = +$sec;
 $days = $days|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $or$cond = 0, $or$cond3 = 0;
 var $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $ihour;
 $3 = $imin;
 $4 = $sec;
 $5 = $days;
 $6 = $1;
 $7 = $6 << 24 >> 24;
 $8 = ($7|0)==(45);
 $9 = $8 ? -1.0 : 1.0;
 $10 = $2;
 $11 = (Math_abs(($10|0))|0);
 $12 = (+($11|0));
 $13 = 60.0 * $12;
 $14 = $3;
 $15 = (Math_abs(($14|0))|0);
 $16 = (+($15|0));
 $17 = $13 + $16;
 $18 = 60.0 * $17;
 $19 = $4;
 $20 = (+Math_abs((+$19)));
 $21 = $18 + $20;
 $22 = $9 * $21;
 $23 = $22 / 86400.0;
 $24 = $5;
 HEAPF64[$24>>3] = $23;
 $25 = $2;
 $26 = ($25|0)<(0);
 $27 = $2;
 $28 = ($27|0)>(23);
 $or$cond = $26 | $28;
 if ($or$cond) {
  $0 = 1;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 $29 = $3;
 $30 = ($29|0)<(0);
 $31 = $3;
 $32 = ($31|0)>(59);
 $or$cond3 = $30 | $32;
 if ($or$cond3) {
  $0 = 2;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 $33 = $4;
 $34 = $33 < 0.0;
 $35 = $4;
 $36 = $35 >= 60.0;
 $or$cond5 = $34 | $36;
 if ($or$cond5) {
  $0 = 3;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 } else {
  $0 = 0;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 return (0)|0;
}
function _eraTr($r,$rt) {
 $r = $r|0;
 $rt = $rt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i = 0, $j = 0, $wm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $wm = sp;
 $0 = $r;
 $1 = $rt;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2|0)<(3);
  if (!($3)) {
   break;
  }
  $j = 0;
  while(1) {
   $4 = $j;
   $5 = ($4|0)<(3);
   $6 = $i;
   if (!($5)) {
    break;
   }
   $7 = $j;
   $8 = $0;
   $9 = (($8) + (($7*24)|0)|0);
   $10 = (($9) + ($6<<3)|0);
   $11 = +HEAPF64[$10>>3];
   $12 = $j;
   $13 = $i;
   $14 = (($wm) + (($13*24)|0)|0);
   $15 = (($14) + ($12<<3)|0);
   HEAPF64[$15>>3] = $11;
   $16 = $j;
   $17 = (($16) + 1)|0;
   $j = $17;
  }
  $18 = (($6) + 1)|0;
  $i = $18;
 }
 $19 = $1;
 _eraCr($wm,$19);
 STACKTOP = sp;return;
}
function _eraTrxp($r,$p,$trp) {
 $r = $r|0;
 $p = $p|0;
 $trp = $trp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $tr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tr = sp;
 $0 = $r;
 $1 = $p;
 $2 = $trp;
 $3 = $0;
 _eraTr($3,$tr);
 $4 = $1;
 $5 = $2;
 _eraRxp($tr,$4,$5);
 STACKTOP = sp;return;
}
function _eraTrxpv($r,$pv,$trpv) {
 $r = $r|0;
 $pv = $pv|0;
 $trpv = $trpv|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $tr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tr = sp;
 $0 = $r;
 $1 = $pv;
 $2 = $trpv;
 $3 = $0;
 _eraTr($3,$tr);
 $4 = $1;
 $5 = $2;
 _eraRxpv($tr,$4,$5);
 STACKTOP = sp;return;
}
function _eraTttai($tt1,$tt2,$tai1,$tai2) {
 $tt1 = +$tt1;
 $tt2 = +$tt2;
 $tai1 = $tai1|0;
 $tai2 = $tai2|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tt1;
 $1 = $tt2;
 $2 = $tai1;
 $3 = $tai2;
 $4 = $0;
 $5 = $1;
 $6 = $4 > $5;
 $7 = $0;
 if ($6) {
  $8 = $2;
  HEAPF64[$8>>3] = $7;
  $9 = $1;
  $10 = $9 - 3.7249999999999995E-4;
  $11 = $3;
  HEAPF64[$11>>3] = $10;
  STACKTOP = sp;return 0;
 } else {
  $12 = $7 - 3.7249999999999995E-4;
  $13 = $2;
  HEAPF64[$13>>3] = $12;
  $14 = $1;
  $15 = $3;
  HEAPF64[$15>>3] = $14;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _eraTttcg($tt1,$tt2,$tcg1,$tcg2) {
 $tt1 = +$tt1;
 $tt2 = +$tt2;
 $tcg1 = $tcg1|0;
 $tcg2 = $tcg2|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tt1;
 $1 = $tt2;
 $2 = $tcg1;
 $3 = $tcg2;
 $4 = $0;
 $5 = $1;
 $6 = $4 > $5;
 $7 = $0;
 if ($6) {
  $8 = $2;
  HEAPF64[$8>>3] = $7;
  $9 = $1;
  $10 = $0;
  $11 = $10 - 2400000.5;
  $12 = $1;
  $13 = $12 - 43144.000372499999;
  $14 = $11 + $13;
  $15 = $14 * 6.9692901388571001E-10;
  $16 = $9 + $15;
  $17 = $3;
  HEAPF64[$17>>3] = $16;
  STACKTOP = sp;return 0;
 } else {
  $18 = $1;
  $19 = $18 - 2400000.5;
  $20 = $0;
  $21 = $20 - 43144.000372499999;
  $22 = $19 + $21;
  $23 = $22 * 6.9692901388571001E-10;
  $24 = $7 + $23;
  $25 = $2;
  HEAPF64[$25>>3] = $24;
  $26 = $1;
  $27 = $3;
  HEAPF64[$27>>3] = $26;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _eraTttdb($tt1,$tt2,$dtr,$tdb1,$tdb2) {
 $tt1 = +$tt1;
 $tt2 = +$tt2;
 $dtr = +$dtr;
 $tdb1 = $tdb1|0;
 $tdb2 = $tdb2|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0;
 var $9 = 0, $dtrd = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tt1;
 $1 = $tt2;
 $2 = $dtr;
 $3 = $tdb1;
 $4 = $tdb2;
 $5 = $2;
 $6 = $5 / 86400.0;
 $dtrd = $6;
 $7 = $0;
 $8 = $1;
 $9 = $7 > $8;
 $10 = $0;
 if ($9) {
  $11 = $3;
  HEAPF64[$11>>3] = $10;
  $12 = $1;
  $13 = $dtrd;
  $14 = $12 + $13;
  $15 = $4;
  HEAPF64[$15>>3] = $14;
  STACKTOP = sp;return 0;
 } else {
  $16 = $dtrd;
  $17 = $10 + $16;
  $18 = $3;
  HEAPF64[$18>>3] = $17;
  $19 = $1;
  $20 = $4;
  HEAPF64[$20>>3] = $19;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _eraTtut1($tt1,$tt2,$dt,$ut11,$ut12) {
 $tt1 = +$tt1;
 $tt2 = +$tt2;
 $dt = +$dt;
 $ut11 = $ut11|0;
 $ut12 = $ut12|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0;
 var $9 = 0, $dtd = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tt1;
 $1 = $tt2;
 $2 = $dt;
 $3 = $ut11;
 $4 = $ut12;
 $5 = $2;
 $6 = $5 / 86400.0;
 $dtd = $6;
 $7 = $0;
 $8 = $1;
 $9 = $7 > $8;
 $10 = $0;
 if ($9) {
  $11 = $3;
  HEAPF64[$11>>3] = $10;
  $12 = $1;
  $13 = $dtd;
  $14 = $12 - $13;
  $15 = $4;
  HEAPF64[$15>>3] = $14;
  STACKTOP = sp;return 0;
 } else {
  $16 = $dtd;
  $17 = $10 - $16;
  $18 = $3;
  HEAPF64[$18>>3] = $17;
  $19 = $1;
  $20 = $4;
  HEAPF64[$20>>3] = $19;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _eraUt1tai($ut11,$ut12,$dta,$tai1,$tai2) {
 $ut11 = +$ut11;
 $ut12 = +$ut12;
 $dta = +$dta;
 $tai1 = $tai1|0;
 $tai2 = $tai2|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0;
 var $9 = 0, $dtad = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ut11;
 $1 = $ut12;
 $2 = $dta;
 $3 = $tai1;
 $4 = $tai2;
 $5 = $2;
 $6 = $5 / 86400.0;
 $dtad = $6;
 $7 = $0;
 $8 = $1;
 $9 = $7 > $8;
 $10 = $0;
 if ($9) {
  $11 = $3;
  HEAPF64[$11>>3] = $10;
  $12 = $1;
  $13 = $dtad;
  $14 = $12 - $13;
  $15 = $4;
  HEAPF64[$15>>3] = $14;
  STACKTOP = sp;return 0;
 } else {
  $16 = $dtad;
  $17 = $10 - $16;
  $18 = $3;
  HEAPF64[$18>>3] = $17;
  $19 = $1;
  $20 = $4;
  HEAPF64[$20>>3] = $19;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _eraUt1tt($ut11,$ut12,$dt,$tt1,$tt2) {
 $ut11 = +$ut11;
 $ut12 = +$ut12;
 $dt = +$dt;
 $tt1 = $tt1|0;
 $tt2 = $tt2|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0;
 var $9 = 0, $dtd = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ut11;
 $1 = $ut12;
 $2 = $dt;
 $3 = $tt1;
 $4 = $tt2;
 $5 = $2;
 $6 = $5 / 86400.0;
 $dtd = $6;
 $7 = $0;
 $8 = $1;
 $9 = $7 > $8;
 $10 = $0;
 if ($9) {
  $11 = $3;
  HEAPF64[$11>>3] = $10;
  $12 = $1;
  $13 = $dtd;
  $14 = $12 + $13;
  $15 = $4;
  HEAPF64[$15>>3] = $14;
  STACKTOP = sp;return 0;
 } else {
  $16 = $dtd;
  $17 = $10 + $16;
  $18 = $3;
  HEAPF64[$18>>3] = $17;
  $19 = $1;
  $20 = $4;
  HEAPF64[$20>>3] = $19;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _eraUt1utc($ut11,$ut12,$dut1,$utc1,$utc2) {
 $ut11 = +$ut11;
 $ut12 = +$ut12;
 $dut1 = +$dut1;
 $utc1 = $utc1|0;
 $utc2 = $utc2|0;
 var $0 = 0, $1 = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0;
 var $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0;
 var $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0;
 var $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0;
 var $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0;
 var $97 = 0.0, $98 = 0, $99 = 0.0, $big1 = 0, $d1 = 0, $d2 = 0, $dats1 = 0.0, $dats2 = 0, $ddats = 0.0, $du = 0.0, $duts = 0.0, $fd = 0, $i = 0, $id = 0, $im = 0, $iy = 0, $js = 0, $u1 = 0.0, $u2 = 0.0, $us1 = 0.0;
 var $us2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $iy = sp + 132|0;
 $im = sp + 128|0;
 $id = sp + 124|0;
 $d1 = sp + 64|0;
 $d2 = sp + 48|0;
 $fd = sp + 40|0;
 $dats2 = sp + 32|0;
 $1 = $ut11;
 $2 = $ut12;
 $3 = $dut1;
 $4 = $utc1;
 $5 = $utc2;
 $6 = $3;
 $duts = $6;
 $7 = $1;
 $8 = $2;
 $9 = $7 >= $8;
 $10 = $9&1;
 $big1 = $10;
 $11 = $big1;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $1;
  $u1 = $13;
  $14 = $2;
  $u2 = $14;
 } else {
  $15 = $2;
  $u1 = $15;
  $16 = $1;
  $u2 = $16;
 }
 $17 = $u1;
 HEAPF64[$d1>>3] = $17;
 $dats1 = 0.0;
 $i = -1;
 while(1) {
  $18 = $i;
  $19 = ($18|0)<=(3);
  if (!($19)) {
   break;
  }
  $20 = $u2;
  $21 = $i;
  $22 = (+($21|0));
  $23 = $20 + $22;
  HEAPF64[$d2>>3] = $23;
  $24 = +HEAPF64[$d1>>3];
  $25 = +HEAPF64[$d2>>3];
  $26 = (_eraJd2cal($24,$25,$iy,$im,$id,$fd)|0);
  $27 = ($26|0)!=(0);
  if ($27) {
   label = 7;
   break;
  }
  $28 = HEAP32[$iy>>2]|0;
  $29 = HEAP32[$im>>2]|0;
  $30 = HEAP32[$id>>2]|0;
  $31 = (_eraDat($28,$29,$30,0.0,$dats2)|0);
  $js = $31;
  $32 = $js;
  $33 = ($32|0)<(0);
  if ($33) {
   label = 9;
   break;
  }
  $34 = $i;
  $35 = ($34|0)==(-1);
  if ($35) {
   $36 = +HEAPF64[$dats2>>3];
   $dats1 = $36;
  }
  $37 = +HEAPF64[$dats2>>3];
  $38 = $dats1;
  $39 = $37 - $38;
  $ddats = $39;
  $40 = $ddats;
  $41 = (+Math_abs((+$40)));
  $42 = $41 >= 0.5;
  if ($42) {
   label = 13;
   break;
  }
  $84 = +HEAPF64[$dats2>>3];
  $dats1 = $84;
  $85 = $i;
  $86 = (($85) + 1)|0;
  $i = $86;
 }
 do {
  if ((label|0) == 7) {
   $0 = -1;
   $102 = $0;
   STACKTOP = sp;return ($102|0);
  }
  else if ((label|0) == 9) {
   $0 = -1;
   $102 = $0;
   STACKTOP = sp;return ($102|0);
  }
  else if ((label|0) == 13) {
   $43 = $ddats;
   $44 = $duts;
   $45 = $43 * $44;
   $46 = $45 >= 0.0;
   if ($46) {
    $47 = $ddats;
    $48 = $duts;
    $49 = $48 - $47;
    $duts = $49;
   }
   $50 = HEAP32[$iy>>2]|0;
   $51 = HEAP32[$im>>2]|0;
   $52 = HEAP32[$id>>2]|0;
   $53 = (_eraCal2jd($50,$51,$52,$d1,$d2)|0);
   $54 = ($53|0)!=(0);
   if ($54) {
    $0 = -1;
    $102 = $0;
    STACKTOP = sp;return ($102|0);
   } else {
    $55 = +HEAPF64[$d1>>3];
    $us1 = $55;
    $56 = +HEAPF64[$d2>>3];
    $57 = $56 - 1.0;
    $58 = $duts;
    $59 = $58 / 86400.0;
    $60 = $57 + $59;
    $us2 = $60;
    $61 = $u1;
    $62 = $us1;
    $63 = $61 - $62;
    $du = $63;
    $64 = $u2;
    $65 = $us2;
    $66 = $64 - $65;
    $67 = $du;
    $68 = $67 + $66;
    $du = $68;
    $69 = $du;
    $70 = $69 > 0.0;
    if (!($70)) {
     break;
    }
    $71 = $du;
    $72 = $71 * 86400.0;
    $73 = $ddats;
    $74 = 86400.0 + $73;
    $75 = $72 / $74;
    HEAPF64[$fd>>3] = $75;
    $76 = $ddats;
    $77 = +HEAPF64[$fd>>3];
    $78 = $77 <= 1.0;
    $79 = +HEAPF64[$fd>>3];
    $80 = $78 ? $79 : 1.0;
    $81 = $76 * $80;
    $82 = $duts;
    $83 = $82 + $81;
    $duts = $83;
    break;
   }
  }
 } while(0);
 $87 = $duts;
 $88 = $87 / 86400.0;
 $89 = $u2;
 $90 = $89 - $88;
 $u2 = $90;
 $91 = $big1;
 $92 = ($91|0)!=(0);
 if ($92) {
  $93 = $u1;
  $94 = $4;
  HEAPF64[$94>>3] = $93;
  $95 = $u2;
  $96 = $5;
  HEAPF64[$96>>3] = $95;
 } else {
  $97 = $u2;
  $98 = $4;
  HEAPF64[$98>>3] = $97;
  $99 = $u1;
  $100 = $5;
  HEAPF64[$100>>3] = $99;
 }
 $101 = $js;
 $0 = $101;
 $102 = $0;
 STACKTOP = sp;return ($102|0);
}
function _eraUtctai($utc1,$utc2,$tai1,$tai2) {
 $utc1 = +$utc1;
 $utc2 = +$utc2;
 $tai1 = $tai1|0;
 $tai2 = $tai2|0;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0;
 var $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $a2 = 0.0;
 var $big1 = 0, $dat0 = 0, $dat12 = 0, $dat24 = 0, $dleap = 0.0, $dlod = 0.0, $fd = 0, $id = 0, $idt = 0, $im = 0, $imt = 0, $iy = 0, $iyt = 0, $j = 0, $u1 = 0.0, $u2 = 0.0, $w = 0, $z1 = 0, $z2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $iy = sp + 136|0;
 $im = sp + 132|0;
 $id = sp + 128|0;
 $iyt = sp + 120|0;
 $imt = sp + 116|0;
 $idt = sp + 112|0;
 $fd = sp + 72|0;
 $dat0 = sp + 64|0;
 $dat12 = sp + 56|0;
 $w = sp + 48|0;
 $dat24 = sp + 40|0;
 $z1 = sp + 16|0;
 $z2 = sp + 8|0;
 $1 = $utc1;
 $2 = $utc2;
 $3 = $tai1;
 $4 = $tai2;
 $5 = $1;
 $6 = $2;
 $7 = $5 >= $6;
 $8 = $7&1;
 $big1 = $8;
 $9 = $big1;
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = $1;
  $u1 = $11;
  $12 = $2;
  $u2 = $12;
 } else {
  $13 = $2;
  $u1 = $13;
  $14 = $1;
  $u2 = $14;
 }
 $15 = $u1;
 $16 = $u2;
 $17 = (_eraJd2cal($15,$16,$iy,$im,$id,$fd)|0);
 $j = $17;
 $18 = $j;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = $j;
  $0 = $20;
  $98 = $0;
  STACKTOP = sp;return ($98|0);
 }
 $21 = HEAP32[$iy>>2]|0;
 $22 = HEAP32[$im>>2]|0;
 $23 = HEAP32[$id>>2]|0;
 $24 = (_eraDat($21,$22,$23,0.0,$dat0)|0);
 $j = $24;
 $25 = $j;
 $26 = ($25|0)<(0);
 if ($26) {
  $27 = $j;
  $0 = $27;
  $98 = $0;
  STACKTOP = sp;return ($98|0);
 }
 $28 = HEAP32[$iy>>2]|0;
 $29 = HEAP32[$im>>2]|0;
 $30 = HEAP32[$id>>2]|0;
 $31 = (_eraDat($28,$29,$30,0.5,$dat12)|0);
 $j = $31;
 $32 = $j;
 $33 = ($32|0)<(0);
 if ($33) {
  $34 = $j;
  $0 = $34;
  $98 = $0;
  STACKTOP = sp;return ($98|0);
 }
 $35 = $u1;
 $36 = $35 + 1.5;
 $37 = $u2;
 $38 = +HEAPF64[$fd>>3];
 $39 = $37 - $38;
 $40 = (_eraJd2cal($36,$39,$iyt,$imt,$idt,$w)|0);
 $j = $40;
 $41 = $j;
 $42 = ($41|0)!=(0);
 if ($42) {
  $43 = $j;
  $0 = $43;
  $98 = $0;
  STACKTOP = sp;return ($98|0);
 }
 $44 = HEAP32[$iyt>>2]|0;
 $45 = HEAP32[$imt>>2]|0;
 $46 = HEAP32[$idt>>2]|0;
 $47 = (_eraDat($44,$45,$46,0.0,$dat24)|0);
 $j = $47;
 $48 = $j;
 $49 = ($48|0)<(0);
 if ($49) {
  $50 = $j;
  $0 = $50;
  $98 = $0;
  STACKTOP = sp;return ($98|0);
 }
 $51 = +HEAPF64[$dat12>>3];
 $52 = +HEAPF64[$dat0>>3];
 $53 = $51 - $52;
 $54 = 2.0 * $53;
 $dlod = $54;
 $55 = +HEAPF64[$dat24>>3];
 $56 = +HEAPF64[$dat0>>3];
 $57 = $dlod;
 $58 = $56 + $57;
 $59 = $55 - $58;
 $dleap = $59;
 $60 = $dleap;
 $61 = 86400.0 + $60;
 $62 = $61 / 86400.0;
 $63 = +HEAPF64[$fd>>3];
 $64 = $63 * $62;
 HEAPF64[$fd>>3] = $64;
 $65 = $dlod;
 $66 = 86400.0 + $65;
 $67 = $66 / 86400.0;
 $68 = +HEAPF64[$fd>>3];
 $69 = $68 * $67;
 HEAPF64[$fd>>3] = $69;
 $70 = HEAP32[$iy>>2]|0;
 $71 = HEAP32[$im>>2]|0;
 $72 = HEAP32[$id>>2]|0;
 $73 = (_eraCal2jd($70,$71,$72,$z1,$z2)|0);
 $74 = ($73|0)!=(0);
 if ($74) {
  $0 = -1;
  $98 = $0;
  STACKTOP = sp;return ($98|0);
 }
 $75 = +HEAPF64[$z1>>3];
 $76 = $u1;
 $77 = $75 - $76;
 $a2 = $77;
 $78 = +HEAPF64[$z2>>3];
 $79 = $a2;
 $80 = $79 + $78;
 $a2 = $80;
 $81 = +HEAPF64[$fd>>3];
 $82 = +HEAPF64[$dat0>>3];
 $83 = $82 / 86400.0;
 $84 = $81 + $83;
 $85 = $a2;
 $86 = $85 + $84;
 $a2 = $86;
 $87 = $big1;
 $88 = ($87|0)!=(0);
 if ($88) {
  $89 = $u1;
  $90 = $3;
  HEAPF64[$90>>3] = $89;
  $91 = $a2;
  $92 = $4;
  HEAPF64[$92>>3] = $91;
 } else {
  $93 = $a2;
  $94 = $3;
  HEAPF64[$94>>3] = $93;
  $95 = $u1;
  $96 = $4;
  HEAPF64[$96>>3] = $95;
 }
 $97 = $j;
 $0 = $97;
 $98 = $0;
 STACKTOP = sp;return ($98|0);
}
function _eraUtcut1($utc1,$utc2,$dut1,$ut11,$ut12) {
 $utc1 = +$utc1;
 $utc2 = +$utc2;
 $dut1 = +$dut1;
 $ut11 = $ut11|0;
 $ut12 = $ut12|0;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $dat = 0, $dta = 0.0, $id = 0, $im = 0;
 var $iy = 0, $js = 0, $jw = 0, $tai1 = 0, $tai2 = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $iy = sp + 80|0;
 $im = sp + 76|0;
 $id = sp + 72|0;
 $w = sp + 32|0;
 $dat = sp + 24|0;
 $tai1 = sp + 8|0;
 $tai2 = sp;
 $1 = $utc1;
 $2 = $utc2;
 $3 = $dut1;
 $4 = $ut11;
 $5 = $ut12;
 $6 = $1;
 $7 = $2;
 $8 = (_eraJd2cal($6,$7,$iy,$im,$id,$w)|0);
 $9 = ($8|0)!=(0);
 if ($9) {
  $0 = -1;
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 }
 $10 = HEAP32[$iy>>2]|0;
 $11 = HEAP32[$im>>2]|0;
 $12 = HEAP32[$id>>2]|0;
 $13 = (_eraDat($10,$11,$12,0.0,$dat)|0);
 $js = $13;
 $14 = $js;
 $15 = ($14|0)<(0);
 if ($15) {
  $0 = -1;
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 }
 $16 = $3;
 $17 = +HEAPF64[$dat>>3];
 $18 = $16 - $17;
 $dta = $18;
 $19 = $1;
 $20 = $2;
 $21 = (_eraUtctai($19,$20,$tai1,$tai2)|0);
 $jw = $21;
 $22 = $jw;
 $23 = ($22|0)<(0);
 if ($23) {
  $0 = -1;
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 }
 $24 = $jw;
 $25 = ($24|0)>(0);
 if ($25) {
  $26 = $jw;
  $js = $26;
 }
 $27 = +HEAPF64[$tai1>>3];
 $28 = +HEAPF64[$tai2>>3];
 $29 = $dta;
 $30 = $4;
 $31 = $5;
 $32 = (_eraTaiut1($27,$28,$29,$30,$31)|0);
 $33 = ($32|0)!=(0);
 if ($33) {
  $0 = -1;
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 } else {
  $34 = $js;
  $0 = $34;
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 }
 return (0)|0;
}
function _eraXy06($date1,$date2,$x,$y) {
 $date1 = +$date1;
 $date2 = +$date2;
 $x = $x|0;
 $y = $y|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0.0;
 var $152 = 0.0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0.0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0.0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0.0, $236 = 0, $237 = 0.0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0.0;
 var $242 = 0.0, $243 = 0.0, $244 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0.0;
 var $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0;
 var $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arg = 0.0, $fa = 0, $i = 0, $ia = 0, $ialast = 0, $ifreq = 0, $j = 0, $jpt = 0, $jsc = 0, $jxy = 0, $m = 0, $pt = 0, $sc = 0, $t = 0.0, $w = 0.0;
 var $xyls = 0, $xypl = 0, $xypr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pt = sp + 184|0;
 $fa = sp + 72|0;
 $xypr = sp + 56|0;
 $xypl = sp + 40|0;
 $xyls = sp + 24|0;
 $sc = sp;
 $0 = $date1;
 $1 = $date2;
 $2 = $x;
 $3 = $y;
 $4 = $0;
 $5 = $4 - 2451545.0;
 $6 = $1;
 $7 = $5 + $6;
 $8 = $7 / 36525.0;
 $t = $8;
 $w = 1.0;
 $jpt = 0;
 while(1) {
  $9 = $jpt;
  $10 = ($9|0)<=(5);
  if (!($10)) {
   break;
  }
  $11 = $w;
  $12 = $jpt;
  $13 = (($pt) + ($12<<3)|0);
  HEAPF64[$13>>3] = $11;
  $14 = $t;
  $15 = $w;
  $16 = $15 * $14;
  $w = $16;
  $17 = $jpt;
  $18 = (($17) + 1)|0;
  $jpt = $18;
 }
 $jxy = 0;
 while(1) {
  $19 = $jxy;
  $20 = ($19|0)<(2);
  if (!($20)) {
   break;
  }
  $21 = $jxy;
  $22 = (($xypr) + ($21<<3)|0);
  HEAPF64[$22>>3] = 0.0;
  $23 = $jxy;
  $24 = (($xyls) + ($23<<3)|0);
  HEAPF64[$24>>3] = 0.0;
  $25 = $jxy;
  $26 = (($xypl) + ($25<<3)|0);
  HEAPF64[$26>>3] = 0.0;
  $27 = $jxy;
  $28 = (($27) + 1)|0;
  $jxy = $28;
 }
 $29 = $t;
 $30 = (+_eraFal03($29));
 HEAPF64[$fa>>3] = $30;
 $31 = $t;
 $32 = (+_eraFalp03($31));
 $33 = ((($fa)) + 8|0);
 HEAPF64[$33>>3] = $32;
 $34 = $t;
 $35 = (+_eraFaf03($34));
 $36 = ((($fa)) + 16|0);
 HEAPF64[$36>>3] = $35;
 $37 = $t;
 $38 = (+_eraFad03($37));
 $39 = ((($fa)) + 24|0);
 HEAPF64[$39>>3] = $38;
 $40 = $t;
 $41 = (+_eraFaom03($40));
 $42 = ((($fa)) + 32|0);
 HEAPF64[$42>>3] = $41;
 $43 = $t;
 $44 = (+_eraFame03($43));
 $45 = ((($fa)) + 40|0);
 HEAPF64[$45>>3] = $44;
 $46 = $t;
 $47 = (+_eraFave03($46));
 $48 = ((($fa)) + 48|0);
 HEAPF64[$48>>3] = $47;
 $49 = $t;
 $50 = (+_eraFae03($49));
 $51 = ((($fa)) + 56|0);
 HEAPF64[$51>>3] = $50;
 $52 = $t;
 $53 = (+_eraFama03($52));
 $54 = ((($fa)) + 64|0);
 HEAPF64[$54>>3] = $53;
 $55 = $t;
 $56 = (+_eraFaju03($55));
 $57 = ((($fa)) + 72|0);
 HEAPF64[$57>>3] = $56;
 $58 = $t;
 $59 = (+_eraFasa03($58));
 $60 = ((($fa)) + 80|0);
 HEAPF64[$60>>3] = $59;
 $61 = $t;
 $62 = (+_eraFaur03($61));
 $63 = ((($fa)) + 88|0);
 HEAPF64[$63>>3] = $62;
 $64 = $t;
 $65 = (+_eraFane03($64));
 $66 = ((($fa)) + 96|0);
 HEAPF64[$66>>3] = $65;
 $67 = $t;
 $68 = (+_eraFapa03($67));
 $69 = ((($fa)) + 104|0);
 HEAPF64[$69>>3] = $68;
 $jxy = 0;
 while(1) {
  $70 = $jxy;
  $71 = ($70|0)<(2);
  if (!($71)) {
   break;
  }
  $j = 5;
  while(1) {
   $72 = $j;
   $73 = ($72|0)>=(0);
   if (!($73)) {
    break;
   }
   $74 = $j;
   $75 = $jxy;
   $76 = (139896 + (($75*48)|0)|0);
   $77 = (($76) + ($74<<3)|0);
   $78 = +HEAPF64[$77>>3];
   $79 = $j;
   $80 = (($pt) + ($79<<3)|0);
   $81 = +HEAPF64[$80>>3];
   $82 = $78 * $81;
   $83 = $jxy;
   $84 = (($xypr) + ($83<<3)|0);
   $85 = +HEAPF64[$84>>3];
   $86 = $85 + $82;
   HEAPF64[$84>>3] = $86;
   $87 = $j;
   $88 = (($87) + -1)|0;
   $j = $88;
  }
  $89 = $jxy;
  $90 = (($89) + 1)|0;
  $jxy = $90;
 }
 $ialast = 4755;
 $ifreq = 655;
 while(1) {
  $91 = $ifreq;
  $92 = ($91|0)>=(0);
  if (!($92)) {
   break;
  }
  $arg = 0.0;
  $i = 0;
  while(1) {
   $93 = $i;
   $94 = ($93|0)<(14);
   if (!($94)) {
    break;
   }
   $95 = $i;
   $96 = $ifreq;
   $97 = (224940 + (($96*56)|0)|0);
   $98 = (($97) + ($95<<2)|0);
   $99 = HEAP32[$98>>2]|0;
   $m = $99;
   $100 = $m;
   $101 = ($100|0)!=(0);
   if ($101) {
    $102 = $m;
    $103 = (+($102|0));
    $104 = $i;
    $105 = (($fa) + ($104<<3)|0);
    $106 = +HEAPF64[$105>>3];
    $107 = $103 * $106;
    $108 = $arg;
    $109 = $108 + $107;
    $arg = $109;
   }
   $110 = $i;
   $111 = (($110) + 1)|0;
   $i = $111;
  }
  $112 = $arg;
  $113 = (+Math_sin((+$112)));
  HEAPF64[$sc>>3] = $113;
  $114 = $arg;
  $115 = (+Math_cos((+$114)));
  $116 = ((($sc)) + 8|0);
  HEAPF64[$116>>3] = $115;
  $117 = $ifreq;
  $118 = (($117) + 653)|0;
  $119 = (261676 + ($118<<2)|0);
  $120 = HEAP32[$119>>2]|0;
  $ia = $120;
  $121 = $ialast;
  $i = $121;
  while(1) {
   $122 = $i;
   $123 = $ia;
   $124 = ($122|0)>=($123|0);
   if (!($124)) {
    break;
   }
   $125 = $i;
   $126 = $ia;
   $127 = (($125) - ($126))|0;
   $j = $127;
   $128 = $j;
   $129 = (266912 + ($128<<2)|0);
   $130 = HEAP32[$129>>2]|0;
   $jxy = $130;
   $131 = $j;
   $132 = (266992 + ($131<<2)|0);
   $133 = HEAP32[$132>>2]|0;
   $jsc = $133;
   $134 = $j;
   $135 = (267072 + ($134<<2)|0);
   $136 = HEAP32[$135>>2]|0;
   $jpt = $136;
   $137 = $i;
   $138 = (($137) - 1)|0;
   $139 = (139992 + ($138<<3)|0);
   $140 = +HEAPF64[$139>>3];
   $141 = $jsc;
   $142 = (($sc) + ($141<<3)|0);
   $143 = +HEAPF64[$142>>3];
   $144 = $140 * $143;
   $145 = $jpt;
   $146 = (($pt) + ($145<<3)|0);
   $147 = +HEAPF64[$146>>3];
   $148 = $144 * $147;
   $149 = $jxy;
   $150 = (($xypl) + ($149<<3)|0);
   $151 = +HEAPF64[$150>>3];
   $152 = $151 + $148;
   HEAPF64[$150>>3] = $152;
   $153 = $i;
   $154 = (($153) + -1)|0;
   $i = $154;
  }
  $155 = $ia;
  $156 = (($155) - 1)|0;
  $ialast = $156;
  $157 = $ifreq;
  $158 = (($157) + -1)|0;
  $ifreq = $158;
 }
 $ifreq = 652;
 while(1) {
  $159 = $ifreq;
  $160 = ($159|0)>=(0);
  if (!($160)) {
   break;
  }
  $arg = 0.0;
  $i = 0;
  while(1) {
   $161 = $i;
   $162 = ($161|0)<(5);
   if (!($162)) {
    break;
   }
   $163 = $i;
   $164 = $ifreq;
   $165 = (267152 + (($164*20)|0)|0);
   $166 = (($165) + ($163<<2)|0);
   $167 = HEAP32[$166>>2]|0;
   $m = $167;
   $168 = $m;
   $169 = ($168|0)!=(0);
   if ($169) {
    $170 = $m;
    $171 = (+($170|0));
    $172 = $i;
    $173 = (($fa) + ($172<<3)|0);
    $174 = +HEAPF64[$173>>3];
    $175 = $171 * $174;
    $176 = $arg;
    $177 = $176 + $175;
    $arg = $177;
   }
   $178 = $i;
   $179 = (($178) + 1)|0;
   $i = $179;
  }
  $180 = $arg;
  $181 = (+Math_sin((+$180)));
  HEAPF64[$sc>>3] = $181;
  $182 = $arg;
  $183 = (+Math_cos((+$182)));
  $184 = ((($sc)) + 8|0);
  HEAPF64[$184>>3] = $183;
  $185 = $ifreq;
  $186 = (261676 + ($185<<2)|0);
  $187 = HEAP32[$186>>2]|0;
  $ia = $187;
  $188 = $ialast;
  $i = $188;
  while(1) {
   $189 = $i;
   $190 = $ia;
   $191 = ($189|0)>=($190|0);
   if (!($191)) {
    break;
   }
   $192 = $i;
   $193 = $ia;
   $194 = (($192) - ($193))|0;
   $j = $194;
   $195 = $j;
   $196 = (266912 + ($195<<2)|0);
   $197 = HEAP32[$196>>2]|0;
   $jxy = $197;
   $198 = $j;
   $199 = (266992 + ($198<<2)|0);
   $200 = HEAP32[$199>>2]|0;
   $jsc = $200;
   $201 = $j;
   $202 = (267072 + ($201<<2)|0);
   $203 = HEAP32[$202>>2]|0;
   $jpt = $203;
   $204 = $i;
   $205 = (($204) - 1)|0;
   $206 = (139992 + ($205<<3)|0);
   $207 = +HEAPF64[$206>>3];
   $208 = $jsc;
   $209 = (($sc) + ($208<<3)|0);
   $210 = +HEAPF64[$209>>3];
   $211 = $207 * $210;
   $212 = $jpt;
   $213 = (($pt) + ($212<<3)|0);
   $214 = +HEAPF64[$213>>3];
   $215 = $211 * $214;
   $216 = $jxy;
   $217 = (($xyls) + ($216<<3)|0);
   $218 = +HEAPF64[$217>>3];
   $219 = $218 + $215;
   HEAPF64[$217>>3] = $219;
   $220 = $i;
   $221 = (($220) + -1)|0;
   $i = $221;
  }
  $222 = $ia;
  $223 = (($222) - 1)|0;
  $ialast = $223;
  $224 = $ifreq;
  $225 = (($224) + -1)|0;
  $ifreq = $225;
 }
 $226 = +HEAPF64[$xypr>>3];
 $227 = +HEAPF64[$xyls>>3];
 $228 = +HEAPF64[$xypl>>3];
 $229 = $227 + $228;
 $230 = $229 / 1.0E+6;
 $231 = $226 + $230;
 $232 = 4.8481368110953598E-6 * $231;
 $233 = $2;
 HEAPF64[$233>>3] = $232;
 $234 = ((($xypr)) + 8|0);
 $235 = +HEAPF64[$234>>3];
 $236 = ((($xyls)) + 8|0);
 $237 = +HEAPF64[$236>>3];
 $238 = ((($xypl)) + 8|0);
 $239 = +HEAPF64[$238>>3];
 $240 = $237 + $239;
 $241 = $240 / 1.0E+6;
 $242 = $235 + $241;
 $243 = 4.8481368110953598E-6 * $242;
 $244 = $3;
 HEAPF64[$244>>3] = $243;
 STACKTOP = sp;return;
}
function _eraXys00a($date1,$date2,$x,$y,$s) {
 $date1 = +$date1;
 $date2 = +$date2;
 $x = $x|0;
 $y = $y|0;
 $s = $s|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, $rbpn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $rbpn = sp;
 $0 = $date1;
 $1 = $date2;
 $2 = $x;
 $3 = $y;
 $4 = $s;
 $5 = $0;
 $6 = $1;
 _eraPnm00a($5,$6,$rbpn);
 $7 = $2;
 $8 = $3;
 _eraBpn2xy($rbpn,$7,$8);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = +HEAPF64[$11>>3];
 $13 = $3;
 $14 = +HEAPF64[$13>>3];
 $15 = (+_eraS00($9,$10,$12,$14));
 $16 = $4;
 HEAPF64[$16>>3] = $15;
 STACKTOP = sp;return;
}
function _eraXys00b($date1,$date2,$x,$y,$s) {
 $date1 = +$date1;
 $date2 = +$date2;
 $x = $x|0;
 $y = $y|0;
 $s = $s|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, $rbpn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $rbpn = sp;
 $0 = $date1;
 $1 = $date2;
 $2 = $x;
 $3 = $y;
 $4 = $s;
 $5 = $0;
 $6 = $1;
 _eraPnm00b($5,$6,$rbpn);
 $7 = $2;
 $8 = $3;
 _eraBpn2xy($rbpn,$7,$8);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = +HEAPF64[$11>>3];
 $13 = $3;
 $14 = +HEAPF64[$13>>3];
 $15 = (+_eraS00($9,$10,$12,$14));
 $16 = $4;
 HEAPF64[$16>>3] = $15;
 STACKTOP = sp;return;
}
function _eraXys06a($date1,$date2,$x,$y,$s) {
 $date1 = +$date1;
 $date2 = +$date2;
 $x = $x|0;
 $y = $y|0;
 $s = $s|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, $rbpn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $rbpn = sp;
 $0 = $date1;
 $1 = $date2;
 $2 = $x;
 $3 = $y;
 $4 = $s;
 $5 = $0;
 $6 = $1;
 _eraPnm06a($5,$6,$rbpn);
 $7 = $2;
 $8 = $3;
 _eraBpn2xy($rbpn,$7,$8);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = +HEAPF64[$11>>3];
 $13 = $3;
 $14 = +HEAPF64[$13>>3];
 $15 = (+_eraS06($9,$10,$12,$14));
 $16 = $4;
 HEAPF64[$16>>3] = $15;
 STACKTOP = sp;return;
}
function _eraZp($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 HEAPF64[$1>>3] = 0.0;
 $2 = $0;
 $3 = ((($2)) + 8|0);
 HEAPF64[$3>>3] = 0.0;
 $4 = $0;
 $5 = ((($4)) + 16|0);
 HEAPF64[$5>>3] = 0.0;
 STACKTOP = sp;return;
}
function _eraZpv($pv) {
 $pv = $pv|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pv;
 $1 = $0;
 _eraZp($1);
 $2 = $0;
 $3 = ((($2)) + 24|0);
 _eraZp($3);
 STACKTOP = sp;return;
}
function _eraZr($r) {
 $r = $r|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $r;
 $1 = $0;
 HEAPF64[$1>>3] = 0.0;
 $2 = $0;
 $3 = ((($2)) + 8|0);
 HEAPF64[$3>>3] = 0.0;
 $4 = $0;
 $5 = ((($4)) + 16|0);
 HEAPF64[$5>>3] = 0.0;
 $6 = $0;
 $7 = ((($6)) + 24|0);
 HEAPF64[$7>>3] = 0.0;
 $8 = $0;
 $9 = ((($8)) + 24|0);
 $10 = ((($9)) + 8|0);
 HEAPF64[$10>>3] = 0.0;
 $11 = $0;
 $12 = ((($11)) + 24|0);
 $13 = ((($12)) + 16|0);
 HEAPF64[$13>>3] = 0.0;
 $14 = $0;
 $15 = ((($14)) + 48|0);
 HEAPF64[$15>>3] = 0.0;
 $16 = $0;
 $17 = ((($16)) + 48|0);
 $18 = ((($17)) + 8|0);
 HEAPF64[$18>>3] = 0.0;
 $19 = $0;
 $20 = ((($19)) + 48|0);
 $21 = ((($20)) + 16|0);
 HEAPF64[$21>>3] = 0.0;
 STACKTOP = sp;return;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$3$i = 0, $$lcssa = 0, $$lcssa211 = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa217 = 0, $$lcssa219 = 0, $$lcssa222 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa228 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0;
 var $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre106 = 0, $$pre14$i$i = 0, $$pre43$i = 0, $$pre56$i$i = 0, $$pre57$i$i = 0, $$pre8$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i13$i = 0, $$sum$i15$i = 0, $$sum$i17$i = 0, $$sum$i19$i = 0;
 var $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i14$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0;
 var $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum124$i = 0, $$sum125$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0;
 var $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i16$i = 0, $$sum2$i18$i = 0, $$sum2$i21$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i27 = 0;
 var $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0;
 var $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0;
 var $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0;
 var $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0;
 var $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
 var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
 var $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0;
 var $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0;
 var $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0;
 var $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0;
 var $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0;
 var $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0;
 var $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0;
 var $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0;
 var $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0;
 var $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0;
 var $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0;
 var $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0;
 var $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0;
 var $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0;
 var $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0;
 var $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0;
 var $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0;
 var $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0;
 var $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0;
 var $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0;
 var $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0;
 var $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0;
 var $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0;
 var $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0;
 var $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0;
 var $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0;
 var $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$07$i$i = 0, $K8$051$i$i = 0;
 var $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0, $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0;
 var $T$050$i$i = 0, $T$050$i$i$lcssa = 0, $T$06$i$i = 0, $T$06$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $not$$i = 0, $not$$i$i = 0, $not$$i26$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i30 = 0, $or$cond1$i = 0;
 var $or$cond19$i = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond5$i = 0, $or$cond57$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0;
 var $sp$0$i$i$i = 0, $sp$084$i = 0, $sp$084$i$lcssa = 0, $sp$183$i = 0, $sp$183$i$lcssa = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$230$i = 0, $tbase$255$i = 0, $tsize$0$ph$i = 0, $tsize$0323944$i = 0, $tsize$1$i = 0, $tsize$254$i = 0;
 var $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$3$ph$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[280260>>2]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (280300 + ($13<<2)|0);
    $$sum10 = (($13) + 2)|0;
    $15 = (280300 + ($$sum10<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[280260>>2] = $22;
     } else {
      $23 = HEAP32[(280276)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if (!($24)) {
       $25 = ((($18)) + 12|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = ($26|0)==($16|0);
       if ($27) {
        HEAP32[$25>>2] = $14;
        HEAP32[$15>>2] = $18;
        break;
       }
      }
      _abort();
      // unreachable;
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    break;
   }
   $34 = HEAP32[(280268)>>2]|0;
   $35 = ($4>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $5;
     $38 = 2 << $5;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = (280300 + ($65<<2)|0);
     $$sum4 = (($65) + 2)|0;
     $67 = (280300 + ($$sum4<<2)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($68)) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[280260>>2] = $74;
       $89 = $34;
      } else {
       $75 = HEAP32[(280276)>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if (!($76)) {
        $77 = ((($70)) + 12|0);
        $78 = HEAP32[$77>>2]|0;
        $79 = ($78|0)==($68|0);
        if ($79) {
         HEAP32[$77>>2] = $66;
         HEAP32[$67>>2] = $70;
         $$pre = HEAP32[(280268)>>2]|0;
         $89 = $$pre;
         break;
        }
       }
       _abort();
       // unreachable;
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($4))|0;
     $82 = $4 | 3;
     $83 = ((($68)) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($4)|0);
     $85 = $81 | 1;
     $$sum56 = $4 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = ($89|0)==(0);
     if (!($88)) {
      $90 = HEAP32[(280280)>>2]|0;
      $91 = $89 >>> 3;
      $92 = $91 << 1;
      $93 = (280300 + ($92<<2)|0);
      $94 = HEAP32[280260>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[280260>>2] = $98;
       $$pre105 = (($92) + 2)|0;
       $$pre106 = (280300 + ($$pre105<<2)|0);
       $$pre$phiZ2D = $$pre106;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = (280300 + ($$sum9<<2)|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[(280276)>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = ((($F4$0)) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = ((($90)) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = ((($90)) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[(280268)>>2] = $81;
     HEAP32[(280280)>>2] = $84;
     $mem$0 = $69;
     break;
    }
    $106 = HEAP32[(280264)>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $4;
     label = 154;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = (280564 + ($130<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($132)) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($4))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = ((($t$0$i)) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = ((($t$0$i)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = ((($144)) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($4))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[(280276)>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if (!($150)) {
      $151 = (($v$0$i$lcssa) + ($4)|0);
      $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
      if ($152) {
       $153 = ((($v$0$i$lcssa)) + 24|0);
       $154 = HEAP32[$153>>2]|0;
       $155 = ((($v$0$i$lcssa)) + 12|0);
       $156 = HEAP32[$155>>2]|0;
       $157 = ($156|0)==($v$0$i$lcssa|0);
       do {
        if ($157) {
         $167 = ((($v$0$i$lcssa)) + 20|0);
         $168 = HEAP32[$167>>2]|0;
         $169 = ($168|0)==(0|0);
         if ($169) {
          $170 = ((($v$0$i$lcssa)) + 16|0);
          $171 = HEAP32[$170>>2]|0;
          $172 = ($171|0)==(0|0);
          if ($172) {
           $R$1$i = 0;
           break;
          } else {
           $R$0$i = $171;$RP$0$i = $170;
          }
         } else {
          $R$0$i = $168;$RP$0$i = $167;
         }
         while(1) {
          $173 = ((($R$0$i)) + 20|0);
          $174 = HEAP32[$173>>2]|0;
          $175 = ($174|0)==(0|0);
          if (!($175)) {
           $R$0$i = $174;$RP$0$i = $173;
           continue;
          }
          $176 = ((($R$0$i)) + 16|0);
          $177 = HEAP32[$176>>2]|0;
          $178 = ($177|0)==(0|0);
          if ($178) {
           $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
           break;
          } else {
           $R$0$i = $177;$RP$0$i = $176;
          }
         }
         $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
         if ($179) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i$lcssa>>2] = 0;
          $R$1$i = $R$0$i$lcssa;
          break;
         }
        } else {
         $158 = ((($v$0$i$lcssa)) + 8|0);
         $159 = HEAP32[$158>>2]|0;
         $160 = ($159>>>0)<($149>>>0);
         if (!($160)) {
          $161 = ((($159)) + 12|0);
          $162 = HEAP32[$161>>2]|0;
          $163 = ($162|0)==($v$0$i$lcssa|0);
          if ($163) {
           $164 = ((($156)) + 8|0);
           $165 = HEAP32[$164>>2]|0;
           $166 = ($165|0)==($v$0$i$lcssa|0);
           if ($166) {
            HEAP32[$161>>2] = $156;
            HEAP32[$164>>2] = $159;
            $R$1$i = $156;
            break;
           }
          }
         }
         _abort();
         // unreachable;
        }
       } while(0);
       $180 = ($154|0)==(0|0);
       do {
        if (!($180)) {
         $181 = ((($v$0$i$lcssa)) + 28|0);
         $182 = HEAP32[$181>>2]|0;
         $183 = (280564 + ($182<<2)|0);
         $184 = HEAP32[$183>>2]|0;
         $185 = ($v$0$i$lcssa|0)==($184|0);
         if ($185) {
          HEAP32[$183>>2] = $R$1$i;
          $cond$i = ($R$1$i|0)==(0|0);
          if ($cond$i) {
           $186 = 1 << $182;
           $187 = $186 ^ -1;
           $188 = HEAP32[(280264)>>2]|0;
           $189 = $188 & $187;
           HEAP32[(280264)>>2] = $189;
           break;
          }
         } else {
          $190 = HEAP32[(280276)>>2]|0;
          $191 = ($154>>>0)<($190>>>0);
          if ($191) {
           _abort();
           // unreachable;
          }
          $192 = ((($154)) + 16|0);
          $193 = HEAP32[$192>>2]|0;
          $194 = ($193|0)==($v$0$i$lcssa|0);
          if ($194) {
           HEAP32[$192>>2] = $R$1$i;
          } else {
           $195 = ((($154)) + 20|0);
           HEAP32[$195>>2] = $R$1$i;
          }
          $196 = ($R$1$i|0)==(0|0);
          if ($196) {
           break;
          }
         }
         $197 = HEAP32[(280276)>>2]|0;
         $198 = ($R$1$i>>>0)<($197>>>0);
         if ($198) {
          _abort();
          // unreachable;
         }
         $199 = ((($R$1$i)) + 24|0);
         HEAP32[$199>>2] = $154;
         $200 = ((($v$0$i$lcssa)) + 16|0);
         $201 = HEAP32[$200>>2]|0;
         $202 = ($201|0)==(0|0);
         do {
          if (!($202)) {
           $203 = ($201>>>0)<($197>>>0);
           if ($203) {
            _abort();
            // unreachable;
           } else {
            $204 = ((($R$1$i)) + 16|0);
            HEAP32[$204>>2] = $201;
            $205 = ((($201)) + 24|0);
            HEAP32[$205>>2] = $R$1$i;
            break;
           }
          }
         } while(0);
         $206 = ((($v$0$i$lcssa)) + 20|0);
         $207 = HEAP32[$206>>2]|0;
         $208 = ($207|0)==(0|0);
         if (!($208)) {
          $209 = HEAP32[(280276)>>2]|0;
          $210 = ($207>>>0)<($209>>>0);
          if ($210) {
           _abort();
           // unreachable;
          } else {
           $211 = ((($R$1$i)) + 20|0);
           HEAP32[$211>>2] = $207;
           $212 = ((($207)) + 24|0);
           HEAP32[$212>>2] = $R$1$i;
           break;
          }
         }
        }
       } while(0);
       $213 = ($rsize$0$i$lcssa>>>0)<(16);
       if ($213) {
        $214 = (($rsize$0$i$lcssa) + ($4))|0;
        $215 = $214 | 3;
        $216 = ((($v$0$i$lcssa)) + 4|0);
        HEAP32[$216>>2] = $215;
        $$sum4$i = (($214) + 4)|0;
        $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
        $218 = HEAP32[$217>>2]|0;
        $219 = $218 | 1;
        HEAP32[$217>>2] = $219;
       } else {
        $220 = $4 | 3;
        $221 = ((($v$0$i$lcssa)) + 4|0);
        HEAP32[$221>>2] = $220;
        $222 = $rsize$0$i$lcssa | 1;
        $$sum$i35 = $4 | 4;
        $223 = (($v$0$i$lcssa) + ($$sum$i35)|0);
        HEAP32[$223>>2] = $222;
        $$sum1$i = (($rsize$0$i$lcssa) + ($4))|0;
        $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
        HEAP32[$224>>2] = $rsize$0$i$lcssa;
        $225 = HEAP32[(280268)>>2]|0;
        $226 = ($225|0)==(0);
        if (!($226)) {
         $227 = HEAP32[(280280)>>2]|0;
         $228 = $225 >>> 3;
         $229 = $228 << 1;
         $230 = (280300 + ($229<<2)|0);
         $231 = HEAP32[280260>>2]|0;
         $232 = 1 << $228;
         $233 = $231 & $232;
         $234 = ($233|0)==(0);
         if ($234) {
          $235 = $231 | $232;
          HEAP32[280260>>2] = $235;
          $$pre$i = (($229) + 2)|0;
          $$pre8$i = (280300 + ($$pre$i<<2)|0);
          $$pre$phi$iZ2D = $$pre8$i;$F1$0$i = $230;
         } else {
          $$sum3$i = (($229) + 2)|0;
          $236 = (280300 + ($$sum3$i<<2)|0);
          $237 = HEAP32[$236>>2]|0;
          $238 = HEAP32[(280276)>>2]|0;
          $239 = ($237>>>0)<($238>>>0);
          if ($239) {
           _abort();
           // unreachable;
          } else {
           $$pre$phi$iZ2D = $236;$F1$0$i = $237;
          }
         }
         HEAP32[$$pre$phi$iZ2D>>2] = $227;
         $240 = ((($F1$0$i)) + 12|0);
         HEAP32[$240>>2] = $227;
         $241 = ((($227)) + 8|0);
         HEAP32[$241>>2] = $F1$0$i;
         $242 = ((($227)) + 12|0);
         HEAP32[$242>>2] = $230;
        }
        HEAP32[(280268)>>2] = $rsize$0$i$lcssa;
        HEAP32[(280280)>>2] = $151;
       }
       $243 = ((($v$0$i$lcssa)) + 8|0);
       $mem$0 = $243;
       break;
      }
     }
     _abort();
     // unreachable;
    }
   } else {
    $nb$0 = $4;
    label = 154;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
    label = 154;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(280264)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
     label = 154;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = (280564 + ($idx$0$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L110: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
       label = 86;
      } else {
       $278 = ($idx$0$i|0)==(31);
       $279 = $idx$0$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = ((($t$0$i14)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$331$i = $286;$t$230$i = $t$0$i14;$v$332$i = $t$0$i14;
          label = 90;
          break L110;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = ((($t$0$i14)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = (((($t$0$i14)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $298 = ($t$1$i|0)==(0|0);
      $299 = ($v$2$i|0)==(0|0);
      $or$cond$i = $298 & $299;
      if ($or$cond$i) {
       $300 = 2 << $idx$0$i;
       $301 = (0 - ($300))|0;
       $302 = $300 | $301;
       $303 = $247 & $302;
       $304 = ($303|0)==(0);
       if ($304) {
        $nb$0 = $246;
        label = 154;
        break;
       }
       $305 = (0 - ($303))|0;
       $306 = $303 & $305;
       $307 = (($306) + -1)|0;
       $308 = $307 >>> 12;
       $309 = $308 & 16;
       $310 = $307 >>> $309;
       $311 = $310 >>> 5;
       $312 = $311 & 8;
       $313 = $312 | $309;
       $314 = $310 >>> $312;
       $315 = $314 >>> 2;
       $316 = $315 & 4;
       $317 = $313 | $316;
       $318 = $314 >>> $316;
       $319 = $318 >>> 1;
       $320 = $319 & 2;
       $321 = $317 | $320;
       $322 = $318 >>> $320;
       $323 = $322 >>> 1;
       $324 = $323 & 1;
       $325 = $321 | $324;
       $326 = $322 >>> $324;
       $327 = (($325) + ($326))|0;
       $328 = (280564 + ($327<<2)|0);
       $329 = HEAP32[$328>>2]|0;
       $t$2$ph$i = $329;$v$3$ph$i = 0;
      } else {
       $t$2$ph$i = $t$1$i;$v$3$ph$i = $v$2$i;
      }
      $330 = ($t$2$ph$i|0)==(0|0);
      if ($330) {
       $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$3$ph$i;
      } else {
       $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$3$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $331 = ((($t$230$i)) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = ((($t$230$i)) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        label = 90;
        continue;
       }
       $339 = ((($t$230$i)) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
        label = 90;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
      label = 154;
     } else {
      $343 = HEAP32[(280268)>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[(280276)>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if (!($347)) {
        $348 = (($v$3$lcssa$i) + ($246)|0);
        $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
        if ($349) {
         $350 = ((($v$3$lcssa$i)) + 24|0);
         $351 = HEAP32[$350>>2]|0;
         $352 = ((($v$3$lcssa$i)) + 12|0);
         $353 = HEAP32[$352>>2]|0;
         $354 = ($353|0)==($v$3$lcssa$i|0);
         do {
          if ($354) {
           $364 = ((($v$3$lcssa$i)) + 20|0);
           $365 = HEAP32[$364>>2]|0;
           $366 = ($365|0)==(0|0);
           if ($366) {
            $367 = ((($v$3$lcssa$i)) + 16|0);
            $368 = HEAP32[$367>>2]|0;
            $369 = ($368|0)==(0|0);
            if ($369) {
             $R$1$i20 = 0;
             break;
            } else {
             $R$0$i18 = $368;$RP$0$i17 = $367;
            }
           } else {
            $R$0$i18 = $365;$RP$0$i17 = $364;
           }
           while(1) {
            $370 = ((($R$0$i18)) + 20|0);
            $371 = HEAP32[$370>>2]|0;
            $372 = ($371|0)==(0|0);
            if (!($372)) {
             $R$0$i18 = $371;$RP$0$i17 = $370;
             continue;
            }
            $373 = ((($R$0$i18)) + 16|0);
            $374 = HEAP32[$373>>2]|0;
            $375 = ($374|0)==(0|0);
            if ($375) {
             $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
             break;
            } else {
             $R$0$i18 = $374;$RP$0$i17 = $373;
            }
           }
           $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
           if ($376) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$RP$0$i17$lcssa>>2] = 0;
            $R$1$i20 = $R$0$i18$lcssa;
            break;
           }
          } else {
           $355 = ((($v$3$lcssa$i)) + 8|0);
           $356 = HEAP32[$355>>2]|0;
           $357 = ($356>>>0)<($346>>>0);
           if (!($357)) {
            $358 = ((($356)) + 12|0);
            $359 = HEAP32[$358>>2]|0;
            $360 = ($359|0)==($v$3$lcssa$i|0);
            if ($360) {
             $361 = ((($353)) + 8|0);
             $362 = HEAP32[$361>>2]|0;
             $363 = ($362|0)==($v$3$lcssa$i|0);
             if ($363) {
              HEAP32[$358>>2] = $353;
              HEAP32[$361>>2] = $356;
              $R$1$i20 = $353;
              break;
             }
            }
           }
           _abort();
           // unreachable;
          }
         } while(0);
         $377 = ($351|0)==(0|0);
         do {
          if (!($377)) {
           $378 = ((($v$3$lcssa$i)) + 28|0);
           $379 = HEAP32[$378>>2]|0;
           $380 = (280564 + ($379<<2)|0);
           $381 = HEAP32[$380>>2]|0;
           $382 = ($v$3$lcssa$i|0)==($381|0);
           if ($382) {
            HEAP32[$380>>2] = $R$1$i20;
            $cond$i21 = ($R$1$i20|0)==(0|0);
            if ($cond$i21) {
             $383 = 1 << $379;
             $384 = $383 ^ -1;
             $385 = HEAP32[(280264)>>2]|0;
             $386 = $385 & $384;
             HEAP32[(280264)>>2] = $386;
             break;
            }
           } else {
            $387 = HEAP32[(280276)>>2]|0;
            $388 = ($351>>>0)<($387>>>0);
            if ($388) {
             _abort();
             // unreachable;
            }
            $389 = ((($351)) + 16|0);
            $390 = HEAP32[$389>>2]|0;
            $391 = ($390|0)==($v$3$lcssa$i|0);
            if ($391) {
             HEAP32[$389>>2] = $R$1$i20;
            } else {
             $392 = ((($351)) + 20|0);
             HEAP32[$392>>2] = $R$1$i20;
            }
            $393 = ($R$1$i20|0)==(0|0);
            if ($393) {
             break;
            }
           }
           $394 = HEAP32[(280276)>>2]|0;
           $395 = ($R$1$i20>>>0)<($394>>>0);
           if ($395) {
            _abort();
            // unreachable;
           }
           $396 = ((($R$1$i20)) + 24|0);
           HEAP32[$396>>2] = $351;
           $397 = ((($v$3$lcssa$i)) + 16|0);
           $398 = HEAP32[$397>>2]|0;
           $399 = ($398|0)==(0|0);
           do {
            if (!($399)) {
             $400 = ($398>>>0)<($394>>>0);
             if ($400) {
              _abort();
              // unreachable;
             } else {
              $401 = ((($R$1$i20)) + 16|0);
              HEAP32[$401>>2] = $398;
              $402 = ((($398)) + 24|0);
              HEAP32[$402>>2] = $R$1$i20;
              break;
             }
            }
           } while(0);
           $403 = ((($v$3$lcssa$i)) + 20|0);
           $404 = HEAP32[$403>>2]|0;
           $405 = ($404|0)==(0|0);
           if (!($405)) {
            $406 = HEAP32[(280276)>>2]|0;
            $407 = ($404>>>0)<($406>>>0);
            if ($407) {
             _abort();
             // unreachable;
            } else {
             $408 = ((($R$1$i20)) + 20|0);
             HEAP32[$408>>2] = $404;
             $409 = ((($404)) + 24|0);
             HEAP32[$409>>2] = $R$1$i20;
             break;
            }
           }
          }
         } while(0);
         $410 = ($rsize$3$lcssa$i>>>0)<(16);
         L179: do {
          if ($410) {
           $411 = (($rsize$3$lcssa$i) + ($246))|0;
           $412 = $411 | 3;
           $413 = ((($v$3$lcssa$i)) + 4|0);
           HEAP32[$413>>2] = $412;
           $$sum18$i = (($411) + 4)|0;
           $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
           $415 = HEAP32[$414>>2]|0;
           $416 = $415 | 1;
           HEAP32[$414>>2] = $416;
          } else {
           $417 = $246 | 3;
           $418 = ((($v$3$lcssa$i)) + 4|0);
           HEAP32[$418>>2] = $417;
           $419 = $rsize$3$lcssa$i | 1;
           $$sum$i2334 = $246 | 4;
           $420 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
           HEAP32[$420>>2] = $419;
           $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
           $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
           HEAP32[$421>>2] = $rsize$3$lcssa$i;
           $422 = $rsize$3$lcssa$i >>> 3;
           $423 = ($rsize$3$lcssa$i>>>0)<(256);
           if ($423) {
            $424 = $422 << 1;
            $425 = (280300 + ($424<<2)|0);
            $426 = HEAP32[280260>>2]|0;
            $427 = 1 << $422;
            $428 = $426 & $427;
            $429 = ($428|0)==(0);
            if ($429) {
             $430 = $426 | $427;
             HEAP32[280260>>2] = $430;
             $$pre$i25 = (($424) + 2)|0;
             $$pre43$i = (280300 + ($$pre$i25<<2)|0);
             $$pre$phi$i26Z2D = $$pre43$i;$F5$0$i = $425;
            } else {
             $$sum17$i = (($424) + 2)|0;
             $431 = (280300 + ($$sum17$i<<2)|0);
             $432 = HEAP32[$431>>2]|0;
             $433 = HEAP32[(280276)>>2]|0;
             $434 = ($432>>>0)<($433>>>0);
             if ($434) {
              _abort();
              // unreachable;
             } else {
              $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
             }
            }
            HEAP32[$$pre$phi$i26Z2D>>2] = $348;
            $435 = ((($F5$0$i)) + 12|0);
            HEAP32[$435>>2] = $348;
            $$sum15$i = (($246) + 8)|0;
            $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
            HEAP32[$436>>2] = $F5$0$i;
            $$sum16$i = (($246) + 12)|0;
            $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
            HEAP32[$437>>2] = $425;
            break;
           }
           $438 = $rsize$3$lcssa$i >>> 8;
           $439 = ($438|0)==(0);
           if ($439) {
            $I7$0$i = 0;
           } else {
            $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
            if ($440) {
             $I7$0$i = 31;
            } else {
             $441 = (($438) + 1048320)|0;
             $442 = $441 >>> 16;
             $443 = $442 & 8;
             $444 = $438 << $443;
             $445 = (($444) + 520192)|0;
             $446 = $445 >>> 16;
             $447 = $446 & 4;
             $448 = $447 | $443;
             $449 = $444 << $447;
             $450 = (($449) + 245760)|0;
             $451 = $450 >>> 16;
             $452 = $451 & 2;
             $453 = $448 | $452;
             $454 = (14 - ($453))|0;
             $455 = $449 << $452;
             $456 = $455 >>> 15;
             $457 = (($454) + ($456))|0;
             $458 = $457 << 1;
             $459 = (($457) + 7)|0;
             $460 = $rsize$3$lcssa$i >>> $459;
             $461 = $460 & 1;
             $462 = $461 | $458;
             $I7$0$i = $462;
            }
           }
           $463 = (280564 + ($I7$0$i<<2)|0);
           $$sum2$i = (($246) + 28)|0;
           $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
           HEAP32[$464>>2] = $I7$0$i;
           $$sum3$i27 = (($246) + 16)|0;
           $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
           $$sum4$i28 = (($246) + 20)|0;
           $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
           HEAP32[$466>>2] = 0;
           HEAP32[$465>>2] = 0;
           $467 = HEAP32[(280264)>>2]|0;
           $468 = 1 << $I7$0$i;
           $469 = $467 & $468;
           $470 = ($469|0)==(0);
           if ($470) {
            $471 = $467 | $468;
            HEAP32[(280264)>>2] = $471;
            HEAP32[$463>>2] = $348;
            $$sum5$i = (($246) + 24)|0;
            $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
            HEAP32[$472>>2] = $463;
            $$sum6$i = (($246) + 12)|0;
            $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
            HEAP32[$473>>2] = $348;
            $$sum7$i = (($246) + 8)|0;
            $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
            HEAP32[$474>>2] = $348;
            break;
           }
           $475 = HEAP32[$463>>2]|0;
           $476 = ((($475)) + 4|0);
           $477 = HEAP32[$476>>2]|0;
           $478 = $477 & -8;
           $479 = ($478|0)==($rsize$3$lcssa$i|0);
           L197: do {
            if ($479) {
             $T$0$lcssa$i = $475;
            } else {
             $480 = ($I7$0$i|0)==(31);
             $481 = $I7$0$i >>> 1;
             $482 = (25 - ($481))|0;
             $483 = $480 ? 0 : $482;
             $484 = $rsize$3$lcssa$i << $483;
             $K12$029$i = $484;$T$028$i = $475;
             while(1) {
              $491 = $K12$029$i >>> 31;
              $492 = (((($T$028$i)) + 16|0) + ($491<<2)|0);
              $487 = HEAP32[$492>>2]|0;
              $493 = ($487|0)==(0|0);
              if ($493) {
               $$lcssa232 = $492;$T$028$i$lcssa = $T$028$i;
               break;
              }
              $485 = $K12$029$i << 1;
              $486 = ((($487)) + 4|0);
              $488 = HEAP32[$486>>2]|0;
              $489 = $488 & -8;
              $490 = ($489|0)==($rsize$3$lcssa$i|0);
              if ($490) {
               $T$0$lcssa$i = $487;
               break L197;
              } else {
               $K12$029$i = $485;$T$028$i = $487;
              }
             }
             $494 = HEAP32[(280276)>>2]|0;
             $495 = ($$lcssa232>>>0)<($494>>>0);
             if ($495) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$$lcssa232>>2] = $348;
              $$sum11$i = (($246) + 24)|0;
              $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
              HEAP32[$496>>2] = $T$028$i$lcssa;
              $$sum12$i = (($246) + 12)|0;
              $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
              HEAP32[$497>>2] = $348;
              $$sum13$i = (($246) + 8)|0;
              $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
              HEAP32[$498>>2] = $348;
              break L179;
             }
            }
           } while(0);
           $499 = ((($T$0$lcssa$i)) + 8|0);
           $500 = HEAP32[$499>>2]|0;
           $501 = HEAP32[(280276)>>2]|0;
           $502 = ($500>>>0)>=($501>>>0);
           $not$$i = ($T$0$lcssa$i>>>0)>=($501>>>0);
           $503 = $502 & $not$$i;
           if ($503) {
            $504 = ((($500)) + 12|0);
            HEAP32[$504>>2] = $348;
            HEAP32[$499>>2] = $348;
            $$sum8$i = (($246) + 8)|0;
            $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
            HEAP32[$505>>2] = $500;
            $$sum9$i = (($246) + 12)|0;
            $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
            HEAP32[$506>>2] = $T$0$lcssa$i;
            $$sum10$i = (($246) + 24)|0;
            $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
            HEAP32[$507>>2] = 0;
            break;
           } else {
            _abort();
            // unreachable;
           }
          }
         } while(0);
         $508 = ((($v$3$lcssa$i)) + 8|0);
         $mem$0 = $508;
         break;
        }
       }
       _abort();
       // unreachable;
      } else {
       $nb$0 = $246;
       label = 154;
      }
     }
    }
   }
  }
 } while(0);
 L212: do {
  if ((label|0) == 154) {
   $509 = HEAP32[(280268)>>2]|0;
   $510 = ($509>>>0)<($nb$0>>>0);
   if (!($510)) {
    $511 = (($509) - ($nb$0))|0;
    $512 = HEAP32[(280280)>>2]|0;
    $513 = ($511>>>0)>(15);
    if ($513) {
     $514 = (($512) + ($nb$0)|0);
     HEAP32[(280280)>>2] = $514;
     HEAP32[(280268)>>2] = $511;
     $515 = $511 | 1;
     $$sum2 = (($nb$0) + 4)|0;
     $516 = (($512) + ($$sum2)|0);
     HEAP32[$516>>2] = $515;
     $517 = (($512) + ($509)|0);
     HEAP32[$517>>2] = $511;
     $518 = $nb$0 | 3;
     $519 = ((($512)) + 4|0);
     HEAP32[$519>>2] = $518;
    } else {
     HEAP32[(280268)>>2] = 0;
     HEAP32[(280280)>>2] = 0;
     $520 = $509 | 3;
     $521 = ((($512)) + 4|0);
     HEAP32[$521>>2] = $520;
     $$sum1 = (($509) + 4)|0;
     $522 = (($512) + ($$sum1)|0);
     $523 = HEAP32[$522>>2]|0;
     $524 = $523 | 1;
     HEAP32[$522>>2] = $524;
    }
    $525 = ((($512)) + 8|0);
    $mem$0 = $525;
    break;
   }
   $526 = HEAP32[(280272)>>2]|0;
   $527 = ($526>>>0)>($nb$0>>>0);
   if ($527) {
    $528 = (($526) - ($nb$0))|0;
    HEAP32[(280272)>>2] = $528;
    $529 = HEAP32[(280284)>>2]|0;
    $530 = (($529) + ($nb$0)|0);
    HEAP32[(280284)>>2] = $530;
    $531 = $528 | 1;
    $$sum = (($nb$0) + 4)|0;
    $532 = (($529) + ($$sum)|0);
    HEAP32[$532>>2] = $531;
    $533 = $nb$0 | 3;
    $534 = ((($529)) + 4|0);
    HEAP32[$534>>2] = $533;
    $535 = ((($529)) + 8|0);
    $mem$0 = $535;
    break;
   }
   $536 = HEAP32[280732>>2]|0;
   $537 = ($536|0)==(0);
   if ($537) {
    _init_mparams();
   }
   $538 = (($nb$0) + 48)|0;
   $539 = HEAP32[(280740)>>2]|0;
   $540 = (($nb$0) + 47)|0;
   $541 = (($539) + ($540))|0;
   $542 = (0 - ($539))|0;
   $543 = $541 & $542;
   $544 = ($543>>>0)>($nb$0>>>0);
   if ($544) {
    $545 = HEAP32[(280700)>>2]|0;
    $546 = ($545|0)==(0);
    if (!($546)) {
     $547 = HEAP32[(280692)>>2]|0;
     $548 = (($547) + ($543))|0;
     $549 = ($548>>>0)<=($547>>>0);
     $550 = ($548>>>0)>($545>>>0);
     $or$cond1$i = $549 | $550;
     if ($or$cond1$i) {
      $mem$0 = 0;
      break;
     }
    }
    $551 = HEAP32[(280704)>>2]|0;
    $552 = $551 & 4;
    $553 = ($552|0)==(0);
    L231: do {
     if ($553) {
      $554 = HEAP32[(280284)>>2]|0;
      $555 = ($554|0)==(0|0);
      L233: do {
       if ($555) {
        label = 172;
       } else {
        $sp$0$i$i = (280708);
        while(1) {
         $556 = HEAP32[$sp$0$i$i>>2]|0;
         $557 = ($556>>>0)>($554>>>0);
         if (!($557)) {
          $558 = ((($sp$0$i$i)) + 4|0);
          $559 = HEAP32[$558>>2]|0;
          $560 = (($556) + ($559)|0);
          $561 = ($560>>>0)>($554>>>0);
          if ($561) {
           $$lcssa228 = $sp$0$i$i;$$lcssa230 = $558;
           break;
          }
         }
         $562 = ((($sp$0$i$i)) + 8|0);
         $563 = HEAP32[$562>>2]|0;
         $564 = ($563|0)==(0|0);
         if ($564) {
          label = 172;
          break L233;
         } else {
          $sp$0$i$i = $563;
         }
        }
        $587 = HEAP32[(280272)>>2]|0;
        $588 = (($541) - ($587))|0;
        $589 = $588 & $542;
        $590 = ($589>>>0)<(2147483647);
        if ($590) {
         $591 = (_sbrk(($589|0))|0);
         $592 = HEAP32[$$lcssa228>>2]|0;
         $593 = HEAP32[$$lcssa230>>2]|0;
         $594 = (($592) + ($593)|0);
         $595 = ($591|0)==($594|0);
         $$3$i = $595 ? $589 : 0;
         if ($595) {
          $596 = ($591|0)==((-1)|0);
          if ($596) {
           $tsize$0323944$i = $$3$i;
          } else {
           $tbase$255$i = $591;$tsize$254$i = $$3$i;
           label = 192;
           break L231;
          }
         } else {
          $br$0$ph$i = $591;$ssize$1$ph$i = $589;$tsize$0$ph$i = $$3$i;
          label = 182;
         }
        } else {
         $tsize$0323944$i = 0;
        }
       }
      } while(0);
      do {
       if ((label|0) == 172) {
        $565 = (_sbrk(0)|0);
        $566 = ($565|0)==((-1)|0);
        if ($566) {
         $tsize$0323944$i = 0;
        } else {
         $567 = $565;
         $568 = HEAP32[(280736)>>2]|0;
         $569 = (($568) + -1)|0;
         $570 = $569 & $567;
         $571 = ($570|0)==(0);
         if ($571) {
          $ssize$0$i = $543;
         } else {
          $572 = (($569) + ($567))|0;
          $573 = (0 - ($568))|0;
          $574 = $572 & $573;
          $575 = (($543) - ($567))|0;
          $576 = (($575) + ($574))|0;
          $ssize$0$i = $576;
         }
         $577 = HEAP32[(280692)>>2]|0;
         $578 = (($577) + ($ssize$0$i))|0;
         $579 = ($ssize$0$i>>>0)>($nb$0>>>0);
         $580 = ($ssize$0$i>>>0)<(2147483647);
         $or$cond$i30 = $579 & $580;
         if ($or$cond$i30) {
          $581 = HEAP32[(280700)>>2]|0;
          $582 = ($581|0)==(0);
          if (!($582)) {
           $583 = ($578>>>0)<=($577>>>0);
           $584 = ($578>>>0)>($581>>>0);
           $or$cond2$i = $583 | $584;
           if ($or$cond2$i) {
            $tsize$0323944$i = 0;
            break;
           }
          }
          $585 = (_sbrk(($ssize$0$i|0))|0);
          $586 = ($585|0)==($565|0);
          $ssize$0$$i = $586 ? $ssize$0$i : 0;
          if ($586) {
           $tbase$255$i = $565;$tsize$254$i = $ssize$0$$i;
           label = 192;
           break L231;
          } else {
           $br$0$ph$i = $585;$ssize$1$ph$i = $ssize$0$i;$tsize$0$ph$i = $ssize$0$$i;
           label = 182;
          }
         } else {
          $tsize$0323944$i = 0;
         }
        }
       }
      } while(0);
      L253: do {
       if ((label|0) == 182) {
        $597 = (0 - ($ssize$1$ph$i))|0;
        $598 = ($br$0$ph$i|0)!=((-1)|0);
        $599 = ($ssize$1$ph$i>>>0)<(2147483647);
        $or$cond5$i = $599 & $598;
        $600 = ($538>>>0)>($ssize$1$ph$i>>>0);
        $or$cond6$i = $600 & $or$cond5$i;
        do {
         if ($or$cond6$i) {
          $601 = HEAP32[(280740)>>2]|0;
          $602 = (($540) - ($ssize$1$ph$i))|0;
          $603 = (($602) + ($601))|0;
          $604 = (0 - ($601))|0;
          $605 = $603 & $604;
          $606 = ($605>>>0)<(2147483647);
          if ($606) {
           $607 = (_sbrk(($605|0))|0);
           $608 = ($607|0)==((-1)|0);
           if ($608) {
            (_sbrk(($597|0))|0);
            $tsize$0323944$i = $tsize$0$ph$i;
            break L253;
           } else {
            $609 = (($605) + ($ssize$1$ph$i))|0;
            $ssize$2$i = $609;
            break;
           }
          } else {
           $ssize$2$i = $ssize$1$ph$i;
          }
         } else {
          $ssize$2$i = $ssize$1$ph$i;
         }
        } while(0);
        $610 = ($br$0$ph$i|0)==((-1)|0);
        if ($610) {
         $tsize$0323944$i = $tsize$0$ph$i;
        } else {
         $tbase$255$i = $br$0$ph$i;$tsize$254$i = $ssize$2$i;
         label = 192;
         break L231;
        }
       }
      } while(0);
      $611 = HEAP32[(280704)>>2]|0;
      $612 = $611 | 4;
      HEAP32[(280704)>>2] = $612;
      $tsize$1$i = $tsize$0323944$i;
      label = 189;
     } else {
      $tsize$1$i = 0;
      label = 189;
     }
    } while(0);
    if ((label|0) == 189) {
     $613 = ($543>>>0)<(2147483647);
     if ($613) {
      $614 = (_sbrk(($543|0))|0);
      $615 = (_sbrk(0)|0);
      $616 = ($614|0)!=((-1)|0);
      $617 = ($615|0)!=((-1)|0);
      $or$cond3$i = $616 & $617;
      $618 = ($614>>>0)<($615>>>0);
      $or$cond8$i = $618 & $or$cond3$i;
      if ($or$cond8$i) {
       $619 = $615;
       $620 = $614;
       $621 = (($619) - ($620))|0;
       $622 = (($nb$0) + 40)|0;
       $623 = ($621>>>0)>($622>>>0);
       $$tsize$1$i = $623 ? $621 : $tsize$1$i;
       if ($623) {
        $tbase$255$i = $614;$tsize$254$i = $$tsize$1$i;
        label = 192;
       }
      }
     }
    }
    if ((label|0) == 192) {
     $624 = HEAP32[(280692)>>2]|0;
     $625 = (($624) + ($tsize$254$i))|0;
     HEAP32[(280692)>>2] = $625;
     $626 = HEAP32[(280696)>>2]|0;
     $627 = ($625>>>0)>($626>>>0);
     if ($627) {
      HEAP32[(280696)>>2] = $625;
     }
     $628 = HEAP32[(280284)>>2]|0;
     $629 = ($628|0)==(0|0);
     L272: do {
      if ($629) {
       $630 = HEAP32[(280276)>>2]|0;
       $631 = ($630|0)==(0|0);
       $632 = ($tbase$255$i>>>0)<($630>>>0);
       $or$cond9$i = $631 | $632;
       if ($or$cond9$i) {
        HEAP32[(280276)>>2] = $tbase$255$i;
       }
       HEAP32[(280708)>>2] = $tbase$255$i;
       HEAP32[(280712)>>2] = $tsize$254$i;
       HEAP32[(280720)>>2] = 0;
       $633 = HEAP32[280732>>2]|0;
       HEAP32[(280296)>>2] = $633;
       HEAP32[(280292)>>2] = -1;
       $i$02$i$i = 0;
       while(1) {
        $634 = $i$02$i$i << 1;
        $635 = (280300 + ($634<<2)|0);
        $$sum$i13$i = (($634) + 3)|0;
        $636 = (280300 + ($$sum$i13$i<<2)|0);
        HEAP32[$636>>2] = $635;
        $$sum1$i14$i = (($634) + 2)|0;
        $637 = (280300 + ($$sum1$i14$i<<2)|0);
        HEAP32[$637>>2] = $635;
        $638 = (($i$02$i$i) + 1)|0;
        $exitcond$i$i = ($638|0)==(32);
        if ($exitcond$i$i) {
         break;
        } else {
         $i$02$i$i = $638;
        }
       }
       $639 = (($tsize$254$i) + -40)|0;
       $640 = ((($tbase$255$i)) + 8|0);
       $641 = $640;
       $642 = $641 & 7;
       $643 = ($642|0)==(0);
       $644 = (0 - ($641))|0;
       $645 = $644 & 7;
       $646 = $643 ? 0 : $645;
       $647 = (($tbase$255$i) + ($646)|0);
       $648 = (($639) - ($646))|0;
       HEAP32[(280284)>>2] = $647;
       HEAP32[(280272)>>2] = $648;
       $649 = $648 | 1;
       $$sum$i15$i = (($646) + 4)|0;
       $650 = (($tbase$255$i) + ($$sum$i15$i)|0);
       HEAP32[$650>>2] = $649;
       $$sum2$i16$i = (($tsize$254$i) + -36)|0;
       $651 = (($tbase$255$i) + ($$sum2$i16$i)|0);
       HEAP32[$651>>2] = 40;
       $652 = HEAP32[(280748)>>2]|0;
       HEAP32[(280288)>>2] = $652;
      } else {
       $sp$084$i = (280708);
       while(1) {
        $653 = HEAP32[$sp$084$i>>2]|0;
        $654 = ((($sp$084$i)) + 4|0);
        $655 = HEAP32[$654>>2]|0;
        $656 = (($653) + ($655)|0);
        $657 = ($tbase$255$i|0)==($656|0);
        if ($657) {
         $$lcssa222 = $653;$$lcssa224 = $654;$$lcssa226 = $655;$sp$084$i$lcssa = $sp$084$i;
         label = 202;
         break;
        }
        $658 = ((($sp$084$i)) + 8|0);
        $659 = HEAP32[$658>>2]|0;
        $660 = ($659|0)==(0|0);
        if ($660) {
         break;
        } else {
         $sp$084$i = $659;
        }
       }
       if ((label|0) == 202) {
        $661 = ((($sp$084$i$lcssa)) + 12|0);
        $662 = HEAP32[$661>>2]|0;
        $663 = $662 & 8;
        $664 = ($663|0)==(0);
        if ($664) {
         $665 = ($628>>>0)>=($$lcssa222>>>0);
         $666 = ($628>>>0)<($tbase$255$i>>>0);
         $or$cond57$i = $666 & $665;
         if ($or$cond57$i) {
          $667 = (($$lcssa226) + ($tsize$254$i))|0;
          HEAP32[$$lcssa224>>2] = $667;
          $668 = HEAP32[(280272)>>2]|0;
          $669 = (($668) + ($tsize$254$i))|0;
          $670 = ((($628)) + 8|0);
          $671 = $670;
          $672 = $671 & 7;
          $673 = ($672|0)==(0);
          $674 = (0 - ($671))|0;
          $675 = $674 & 7;
          $676 = $673 ? 0 : $675;
          $677 = (($628) + ($676)|0);
          $678 = (($669) - ($676))|0;
          HEAP32[(280284)>>2] = $677;
          HEAP32[(280272)>>2] = $678;
          $679 = $678 | 1;
          $$sum$i17$i = (($676) + 4)|0;
          $680 = (($628) + ($$sum$i17$i)|0);
          HEAP32[$680>>2] = $679;
          $$sum2$i18$i = (($669) + 4)|0;
          $681 = (($628) + ($$sum2$i18$i)|0);
          HEAP32[$681>>2] = 40;
          $682 = HEAP32[(280748)>>2]|0;
          HEAP32[(280288)>>2] = $682;
          break;
         }
        }
       }
       $683 = HEAP32[(280276)>>2]|0;
       $684 = ($tbase$255$i>>>0)<($683>>>0);
       if ($684) {
        HEAP32[(280276)>>2] = $tbase$255$i;
        $748 = $tbase$255$i;
       } else {
        $748 = $683;
       }
       $685 = (($tbase$255$i) + ($tsize$254$i)|0);
       $sp$183$i = (280708);
       while(1) {
        $686 = HEAP32[$sp$183$i>>2]|0;
        $687 = ($686|0)==($685|0);
        if ($687) {
         $$lcssa219 = $sp$183$i;$sp$183$i$lcssa = $sp$183$i;
         label = 210;
         break;
        }
        $688 = ((($sp$183$i)) + 8|0);
        $689 = HEAP32[$688>>2]|0;
        $690 = ($689|0)==(0|0);
        if ($690) {
         $sp$0$i$i$i = (280708);
         break;
        } else {
         $sp$183$i = $689;
        }
       }
       if ((label|0) == 210) {
        $691 = ((($sp$183$i$lcssa)) + 12|0);
        $692 = HEAP32[$691>>2]|0;
        $693 = $692 & 8;
        $694 = ($693|0)==(0);
        if ($694) {
         HEAP32[$$lcssa219>>2] = $tbase$255$i;
         $695 = ((($sp$183$i$lcssa)) + 4|0);
         $696 = HEAP32[$695>>2]|0;
         $697 = (($696) + ($tsize$254$i))|0;
         HEAP32[$695>>2] = $697;
         $698 = ((($tbase$255$i)) + 8|0);
         $699 = $698;
         $700 = $699 & 7;
         $701 = ($700|0)==(0);
         $702 = (0 - ($699))|0;
         $703 = $702 & 7;
         $704 = $701 ? 0 : $703;
         $705 = (($tbase$255$i) + ($704)|0);
         $$sum112$i = (($tsize$254$i) + 8)|0;
         $706 = (($tbase$255$i) + ($$sum112$i)|0);
         $707 = $706;
         $708 = $707 & 7;
         $709 = ($708|0)==(0);
         $710 = (0 - ($707))|0;
         $711 = $710 & 7;
         $712 = $709 ? 0 : $711;
         $$sum113$i = (($712) + ($tsize$254$i))|0;
         $713 = (($tbase$255$i) + ($$sum113$i)|0);
         $714 = $713;
         $715 = $705;
         $716 = (($714) - ($715))|0;
         $$sum$i19$i = (($704) + ($nb$0))|0;
         $717 = (($tbase$255$i) + ($$sum$i19$i)|0);
         $718 = (($716) - ($nb$0))|0;
         $719 = $nb$0 | 3;
         $$sum1$i20$i = (($704) + 4)|0;
         $720 = (($tbase$255$i) + ($$sum1$i20$i)|0);
         HEAP32[$720>>2] = $719;
         $721 = ($713|0)==($628|0);
         L297: do {
          if ($721) {
           $722 = HEAP32[(280272)>>2]|0;
           $723 = (($722) + ($718))|0;
           HEAP32[(280272)>>2] = $723;
           HEAP32[(280284)>>2] = $717;
           $724 = $723 | 1;
           $$sum42$i$i = (($$sum$i19$i) + 4)|0;
           $725 = (($tbase$255$i) + ($$sum42$i$i)|0);
           HEAP32[$725>>2] = $724;
          } else {
           $726 = HEAP32[(280280)>>2]|0;
           $727 = ($713|0)==($726|0);
           if ($727) {
            $728 = HEAP32[(280268)>>2]|0;
            $729 = (($728) + ($718))|0;
            HEAP32[(280268)>>2] = $729;
            HEAP32[(280280)>>2] = $717;
            $730 = $729 | 1;
            $$sum40$i$i = (($$sum$i19$i) + 4)|0;
            $731 = (($tbase$255$i) + ($$sum40$i$i)|0);
            HEAP32[$731>>2] = $730;
            $$sum41$i$i = (($729) + ($$sum$i19$i))|0;
            $732 = (($tbase$255$i) + ($$sum41$i$i)|0);
            HEAP32[$732>>2] = $729;
            break;
           }
           $$sum2$i21$i = (($tsize$254$i) + 4)|0;
           $$sum114$i = (($$sum2$i21$i) + ($712))|0;
           $733 = (($tbase$255$i) + ($$sum114$i)|0);
           $734 = HEAP32[$733>>2]|0;
           $735 = $734 & 3;
           $736 = ($735|0)==(1);
           if ($736) {
            $737 = $734 & -8;
            $738 = $734 >>> 3;
            $739 = ($734>>>0)<(256);
            L305: do {
             if ($739) {
              $$sum3738$i$i = $712 | 8;
              $$sum124$i = (($$sum3738$i$i) + ($tsize$254$i))|0;
              $740 = (($tbase$255$i) + ($$sum124$i)|0);
              $741 = HEAP32[$740>>2]|0;
              $$sum39$i$i = (($tsize$254$i) + 12)|0;
              $$sum125$i = (($$sum39$i$i) + ($712))|0;
              $742 = (($tbase$255$i) + ($$sum125$i)|0);
              $743 = HEAP32[$742>>2]|0;
              $744 = $738 << 1;
              $745 = (280300 + ($744<<2)|0);
              $746 = ($741|0)==($745|0);
              do {
               if (!($746)) {
                $747 = ($741>>>0)<($748>>>0);
                if (!($747)) {
                 $749 = ((($741)) + 12|0);
                 $750 = HEAP32[$749>>2]|0;
                 $751 = ($750|0)==($713|0);
                 if ($751) {
                  break;
                 }
                }
                _abort();
                // unreachable;
               }
              } while(0);
              $752 = ($743|0)==($741|0);
              if ($752) {
               $753 = 1 << $738;
               $754 = $753 ^ -1;
               $755 = HEAP32[280260>>2]|0;
               $756 = $755 & $754;
               HEAP32[280260>>2] = $756;
               break;
              }
              $757 = ($743|0)==($745|0);
              do {
               if ($757) {
                $$pre57$i$i = ((($743)) + 8|0);
                $$pre$phi58$i$iZ2D = $$pre57$i$i;
               } else {
                $758 = ($743>>>0)<($748>>>0);
                if (!($758)) {
                 $759 = ((($743)) + 8|0);
                 $760 = HEAP32[$759>>2]|0;
                 $761 = ($760|0)==($713|0);
                 if ($761) {
                  $$pre$phi58$i$iZ2D = $759;
                  break;
                 }
                }
                _abort();
                // unreachable;
               }
              } while(0);
              $762 = ((($741)) + 12|0);
              HEAP32[$762>>2] = $743;
              HEAP32[$$pre$phi58$i$iZ2D>>2] = $741;
             } else {
              $$sum34$i$i = $712 | 24;
              $$sum115$i = (($$sum34$i$i) + ($tsize$254$i))|0;
              $763 = (($tbase$255$i) + ($$sum115$i)|0);
              $764 = HEAP32[$763>>2]|0;
              $$sum5$i$i = (($tsize$254$i) + 12)|0;
              $$sum116$i = (($$sum5$i$i) + ($712))|0;
              $765 = (($tbase$255$i) + ($$sum116$i)|0);
              $766 = HEAP32[$765>>2]|0;
              $767 = ($766|0)==($713|0);
              L324: do {
               if ($767) {
                $$sum67$i$i = $712 | 16;
                $$sum122$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
                $777 = (($tbase$255$i) + ($$sum122$i)|0);
                $778 = HEAP32[$777>>2]|0;
                $779 = ($778|0)==(0|0);
                if ($779) {
                 $$sum123$i = (($$sum67$i$i) + ($tsize$254$i))|0;
                 $780 = (($tbase$255$i) + ($$sum123$i)|0);
                 $781 = HEAP32[$780>>2]|0;
                 $782 = ($781|0)==(0|0);
                 if ($782) {
                  $R$1$i$i = 0;
                  break;
                 } else {
                  $R$0$i$i = $781;$RP$0$i$i = $780;
                 }
                } else {
                 $R$0$i$i = $778;$RP$0$i$i = $777;
                }
                while(1) {
                 $783 = ((($R$0$i$i)) + 20|0);
                 $784 = HEAP32[$783>>2]|0;
                 $785 = ($784|0)==(0|0);
                 if (!($785)) {
                  $R$0$i$i = $784;$RP$0$i$i = $783;
                  continue;
                 }
                 $786 = ((($R$0$i$i)) + 16|0);
                 $787 = HEAP32[$786>>2]|0;
                 $788 = ($787|0)==(0|0);
                 if ($788) {
                  $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
                  break;
                 } else {
                  $R$0$i$i = $787;$RP$0$i$i = $786;
                 }
                }
                $789 = ($RP$0$i$i$lcssa>>>0)<($748>>>0);
                if ($789) {
                 _abort();
                 // unreachable;
                } else {
                 HEAP32[$RP$0$i$i$lcssa>>2] = 0;
                 $R$1$i$i = $R$0$i$i$lcssa;
                 break;
                }
               } else {
                $$sum3536$i$i = $712 | 8;
                $$sum117$i = (($$sum3536$i$i) + ($tsize$254$i))|0;
                $768 = (($tbase$255$i) + ($$sum117$i)|0);
                $769 = HEAP32[$768>>2]|0;
                $770 = ($769>>>0)<($748>>>0);
                do {
                 if (!($770)) {
                  $771 = ((($769)) + 12|0);
                  $772 = HEAP32[$771>>2]|0;
                  $773 = ($772|0)==($713|0);
                  if (!($773)) {
                   break;
                  }
                  $774 = ((($766)) + 8|0);
                  $775 = HEAP32[$774>>2]|0;
                  $776 = ($775|0)==($713|0);
                  if (!($776)) {
                   break;
                  }
                  HEAP32[$771>>2] = $766;
                  HEAP32[$774>>2] = $769;
                  $R$1$i$i = $766;
                  break L324;
                 }
                } while(0);
                _abort();
                // unreachable;
               }
              } while(0);
              $790 = ($764|0)==(0|0);
              if ($790) {
               break;
              }
              $$sum30$i$i = (($tsize$254$i) + 28)|0;
              $$sum118$i = (($$sum30$i$i) + ($712))|0;
              $791 = (($tbase$255$i) + ($$sum118$i)|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = (280564 + ($792<<2)|0);
              $794 = HEAP32[$793>>2]|0;
              $795 = ($713|0)==($794|0);
              do {
               if ($795) {
                HEAP32[$793>>2] = $R$1$i$i;
                $cond$i$i = ($R$1$i$i|0)==(0|0);
                if (!($cond$i$i)) {
                 break;
                }
                $796 = 1 << $792;
                $797 = $796 ^ -1;
                $798 = HEAP32[(280264)>>2]|0;
                $799 = $798 & $797;
                HEAP32[(280264)>>2] = $799;
                break L305;
               } else {
                $800 = HEAP32[(280276)>>2]|0;
                $801 = ($764>>>0)<($800>>>0);
                if ($801) {
                 _abort();
                 // unreachable;
                }
                $802 = ((($764)) + 16|0);
                $803 = HEAP32[$802>>2]|0;
                $804 = ($803|0)==($713|0);
                if ($804) {
                 HEAP32[$802>>2] = $R$1$i$i;
                } else {
                 $805 = ((($764)) + 20|0);
                 HEAP32[$805>>2] = $R$1$i$i;
                }
                $806 = ($R$1$i$i|0)==(0|0);
                if ($806) {
                 break L305;
                }
               }
              } while(0);
              $807 = HEAP32[(280276)>>2]|0;
              $808 = ($R$1$i$i>>>0)<($807>>>0);
              if ($808) {
               _abort();
               // unreachable;
              }
              $809 = ((($R$1$i$i)) + 24|0);
              HEAP32[$809>>2] = $764;
              $$sum3132$i$i = $712 | 16;
              $$sum119$i = (($$sum3132$i$i) + ($tsize$254$i))|0;
              $810 = (($tbase$255$i) + ($$sum119$i)|0);
              $811 = HEAP32[$810>>2]|0;
              $812 = ($811|0)==(0|0);
              do {
               if (!($812)) {
                $813 = ($811>>>0)<($807>>>0);
                if ($813) {
                 _abort();
                 // unreachable;
                } else {
                 $814 = ((($R$1$i$i)) + 16|0);
                 HEAP32[$814>>2] = $811;
                 $815 = ((($811)) + 24|0);
                 HEAP32[$815>>2] = $R$1$i$i;
                 break;
                }
               }
              } while(0);
              $$sum120$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
              $816 = (($tbase$255$i) + ($$sum120$i)|0);
              $817 = HEAP32[$816>>2]|0;
              $818 = ($817|0)==(0|0);
              if ($818) {
               break;
              }
              $819 = HEAP32[(280276)>>2]|0;
              $820 = ($817>>>0)<($819>>>0);
              if ($820) {
               _abort();
               // unreachable;
              } else {
               $821 = ((($R$1$i$i)) + 20|0);
               HEAP32[$821>>2] = $817;
               $822 = ((($817)) + 24|0);
               HEAP32[$822>>2] = $R$1$i$i;
               break;
              }
             }
            } while(0);
            $$sum9$i$i = $737 | $712;
            $$sum121$i = (($$sum9$i$i) + ($tsize$254$i))|0;
            $823 = (($tbase$255$i) + ($$sum121$i)|0);
            $824 = (($737) + ($718))|0;
            $oldfirst$0$i$i = $823;$qsize$0$i$i = $824;
           } else {
            $oldfirst$0$i$i = $713;$qsize$0$i$i = $718;
           }
           $825 = ((($oldfirst$0$i$i)) + 4|0);
           $826 = HEAP32[$825>>2]|0;
           $827 = $826 & -2;
           HEAP32[$825>>2] = $827;
           $828 = $qsize$0$i$i | 1;
           $$sum10$i$i = (($$sum$i19$i) + 4)|0;
           $829 = (($tbase$255$i) + ($$sum10$i$i)|0);
           HEAP32[$829>>2] = $828;
           $$sum11$i$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
           $830 = (($tbase$255$i) + ($$sum11$i$i)|0);
           HEAP32[$830>>2] = $qsize$0$i$i;
           $831 = $qsize$0$i$i >>> 3;
           $832 = ($qsize$0$i$i>>>0)<(256);
           if ($832) {
            $833 = $831 << 1;
            $834 = (280300 + ($833<<2)|0);
            $835 = HEAP32[280260>>2]|0;
            $836 = 1 << $831;
            $837 = $835 & $836;
            $838 = ($837|0)==(0);
            do {
             if ($838) {
              $839 = $835 | $836;
              HEAP32[280260>>2] = $839;
              $$pre$i22$i = (($833) + 2)|0;
              $$pre56$i$i = (280300 + ($$pre$i22$i<<2)|0);
              $$pre$phi$i23$iZ2D = $$pre56$i$i;$F4$0$i$i = $834;
             } else {
              $$sum29$i$i = (($833) + 2)|0;
              $840 = (280300 + ($$sum29$i$i<<2)|0);
              $841 = HEAP32[$840>>2]|0;
              $842 = HEAP32[(280276)>>2]|0;
              $843 = ($841>>>0)<($842>>>0);
              if (!($843)) {
               $$pre$phi$i23$iZ2D = $840;$F4$0$i$i = $841;
               break;
              }
              _abort();
              // unreachable;
             }
            } while(0);
            HEAP32[$$pre$phi$i23$iZ2D>>2] = $717;
            $844 = ((($F4$0$i$i)) + 12|0);
            HEAP32[$844>>2] = $717;
            $$sum27$i$i = (($$sum$i19$i) + 8)|0;
            $845 = (($tbase$255$i) + ($$sum27$i$i)|0);
            HEAP32[$845>>2] = $F4$0$i$i;
            $$sum28$i$i = (($$sum$i19$i) + 12)|0;
            $846 = (($tbase$255$i) + ($$sum28$i$i)|0);
            HEAP32[$846>>2] = $834;
            break;
           }
           $847 = $qsize$0$i$i >>> 8;
           $848 = ($847|0)==(0);
           do {
            if ($848) {
             $I7$0$i$i = 0;
            } else {
             $849 = ($qsize$0$i$i>>>0)>(16777215);
             if ($849) {
              $I7$0$i$i = 31;
              break;
             }
             $850 = (($847) + 1048320)|0;
             $851 = $850 >>> 16;
             $852 = $851 & 8;
             $853 = $847 << $852;
             $854 = (($853) + 520192)|0;
             $855 = $854 >>> 16;
             $856 = $855 & 4;
             $857 = $856 | $852;
             $858 = $853 << $856;
             $859 = (($858) + 245760)|0;
             $860 = $859 >>> 16;
             $861 = $860 & 2;
             $862 = $857 | $861;
             $863 = (14 - ($862))|0;
             $864 = $858 << $861;
             $865 = $864 >>> 15;
             $866 = (($863) + ($865))|0;
             $867 = $866 << 1;
             $868 = (($866) + 7)|0;
             $869 = $qsize$0$i$i >>> $868;
             $870 = $869 & 1;
             $871 = $870 | $867;
             $I7$0$i$i = $871;
            }
           } while(0);
           $872 = (280564 + ($I7$0$i$i<<2)|0);
           $$sum12$i$i = (($$sum$i19$i) + 28)|0;
           $873 = (($tbase$255$i) + ($$sum12$i$i)|0);
           HEAP32[$873>>2] = $I7$0$i$i;
           $$sum13$i$i = (($$sum$i19$i) + 16)|0;
           $874 = (($tbase$255$i) + ($$sum13$i$i)|0);
           $$sum14$i$i = (($$sum$i19$i) + 20)|0;
           $875 = (($tbase$255$i) + ($$sum14$i$i)|0);
           HEAP32[$875>>2] = 0;
           HEAP32[$874>>2] = 0;
           $876 = HEAP32[(280264)>>2]|0;
           $877 = 1 << $I7$0$i$i;
           $878 = $876 & $877;
           $879 = ($878|0)==(0);
           if ($879) {
            $880 = $876 | $877;
            HEAP32[(280264)>>2] = $880;
            HEAP32[$872>>2] = $717;
            $$sum15$i$i = (($$sum$i19$i) + 24)|0;
            $881 = (($tbase$255$i) + ($$sum15$i$i)|0);
            HEAP32[$881>>2] = $872;
            $$sum16$i$i = (($$sum$i19$i) + 12)|0;
            $882 = (($tbase$255$i) + ($$sum16$i$i)|0);
            HEAP32[$882>>2] = $717;
            $$sum17$i$i = (($$sum$i19$i) + 8)|0;
            $883 = (($tbase$255$i) + ($$sum17$i$i)|0);
            HEAP32[$883>>2] = $717;
            break;
           }
           $884 = HEAP32[$872>>2]|0;
           $885 = ((($884)) + 4|0);
           $886 = HEAP32[$885>>2]|0;
           $887 = $886 & -8;
           $888 = ($887|0)==($qsize$0$i$i|0);
           L385: do {
            if ($888) {
             $T$0$lcssa$i25$i = $884;
            } else {
             $889 = ($I7$0$i$i|0)==(31);
             $890 = $I7$0$i$i >>> 1;
             $891 = (25 - ($890))|0;
             $892 = $889 ? 0 : $891;
             $893 = $qsize$0$i$i << $892;
             $K8$051$i$i = $893;$T$050$i$i = $884;
             while(1) {
              $900 = $K8$051$i$i >>> 31;
              $901 = (((($T$050$i$i)) + 16|0) + ($900<<2)|0);
              $896 = HEAP32[$901>>2]|0;
              $902 = ($896|0)==(0|0);
              if ($902) {
               $$lcssa = $901;$T$050$i$i$lcssa = $T$050$i$i;
               break;
              }
              $894 = $K8$051$i$i << 1;
              $895 = ((($896)) + 4|0);
              $897 = HEAP32[$895>>2]|0;
              $898 = $897 & -8;
              $899 = ($898|0)==($qsize$0$i$i|0);
              if ($899) {
               $T$0$lcssa$i25$i = $896;
               break L385;
              } else {
               $K8$051$i$i = $894;$T$050$i$i = $896;
              }
             }
             $903 = HEAP32[(280276)>>2]|0;
             $904 = ($$lcssa>>>0)<($903>>>0);
             if ($904) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$$lcssa>>2] = $717;
              $$sum23$i$i = (($$sum$i19$i) + 24)|0;
              $905 = (($tbase$255$i) + ($$sum23$i$i)|0);
              HEAP32[$905>>2] = $T$050$i$i$lcssa;
              $$sum24$i$i = (($$sum$i19$i) + 12)|0;
              $906 = (($tbase$255$i) + ($$sum24$i$i)|0);
              HEAP32[$906>>2] = $717;
              $$sum25$i$i = (($$sum$i19$i) + 8)|0;
              $907 = (($tbase$255$i) + ($$sum25$i$i)|0);
              HEAP32[$907>>2] = $717;
              break L297;
             }
            }
           } while(0);
           $908 = ((($T$0$lcssa$i25$i)) + 8|0);
           $909 = HEAP32[$908>>2]|0;
           $910 = HEAP32[(280276)>>2]|0;
           $911 = ($909>>>0)>=($910>>>0);
           $not$$i26$i = ($T$0$lcssa$i25$i>>>0)>=($910>>>0);
           $912 = $911 & $not$$i26$i;
           if ($912) {
            $913 = ((($909)) + 12|0);
            HEAP32[$913>>2] = $717;
            HEAP32[$908>>2] = $717;
            $$sum20$i$i = (($$sum$i19$i) + 8)|0;
            $914 = (($tbase$255$i) + ($$sum20$i$i)|0);
            HEAP32[$914>>2] = $909;
            $$sum21$i$i = (($$sum$i19$i) + 12)|0;
            $915 = (($tbase$255$i) + ($$sum21$i$i)|0);
            HEAP32[$915>>2] = $T$0$lcssa$i25$i;
            $$sum22$i$i = (($$sum$i19$i) + 24)|0;
            $916 = (($tbase$255$i) + ($$sum22$i$i)|0);
            HEAP32[$916>>2] = 0;
            break;
           } else {
            _abort();
            // unreachable;
           }
          }
         } while(0);
         $$sum1819$i$i = $704 | 8;
         $917 = (($tbase$255$i) + ($$sum1819$i$i)|0);
         $mem$0 = $917;
         break L212;
        } else {
         $sp$0$i$i$i = (280708);
        }
       }
       while(1) {
        $918 = HEAP32[$sp$0$i$i$i>>2]|0;
        $919 = ($918>>>0)>($628>>>0);
        if (!($919)) {
         $920 = ((($sp$0$i$i$i)) + 4|0);
         $921 = HEAP32[$920>>2]|0;
         $922 = (($918) + ($921)|0);
         $923 = ($922>>>0)>($628>>>0);
         if ($923) {
          $$lcssa215 = $918;$$lcssa216 = $921;$$lcssa217 = $922;
          break;
         }
        }
        $924 = ((($sp$0$i$i$i)) + 8|0);
        $925 = HEAP32[$924>>2]|0;
        $sp$0$i$i$i = $925;
       }
       $$sum$i$i = (($$lcssa216) + -47)|0;
       $$sum1$i$i = (($$lcssa216) + -39)|0;
       $926 = (($$lcssa215) + ($$sum1$i$i)|0);
       $927 = $926;
       $928 = $927 & 7;
       $929 = ($928|0)==(0);
       $930 = (0 - ($927))|0;
       $931 = $930 & 7;
       $932 = $929 ? 0 : $931;
       $$sum2$i$i = (($$sum$i$i) + ($932))|0;
       $933 = (($$lcssa215) + ($$sum2$i$i)|0);
       $934 = ((($628)) + 16|0);
       $935 = ($933>>>0)<($934>>>0);
       $936 = $935 ? $628 : $933;
       $937 = ((($936)) + 8|0);
       $938 = (($tsize$254$i) + -40)|0;
       $939 = ((($tbase$255$i)) + 8|0);
       $940 = $939;
       $941 = $940 & 7;
       $942 = ($941|0)==(0);
       $943 = (0 - ($940))|0;
       $944 = $943 & 7;
       $945 = $942 ? 0 : $944;
       $946 = (($tbase$255$i) + ($945)|0);
       $947 = (($938) - ($945))|0;
       HEAP32[(280284)>>2] = $946;
       HEAP32[(280272)>>2] = $947;
       $948 = $947 | 1;
       $$sum$i$i$i = (($945) + 4)|0;
       $949 = (($tbase$255$i) + ($$sum$i$i$i)|0);
       HEAP32[$949>>2] = $948;
       $$sum2$i$i$i = (($tsize$254$i) + -36)|0;
       $950 = (($tbase$255$i) + ($$sum2$i$i$i)|0);
       HEAP32[$950>>2] = 40;
       $951 = HEAP32[(280748)>>2]|0;
       HEAP32[(280288)>>2] = $951;
       $952 = ((($936)) + 4|0);
       HEAP32[$952>>2] = 27;
       ;HEAP32[$937>>2]=HEAP32[(280708)>>2]|0;HEAP32[$937+4>>2]=HEAP32[(280708)+4>>2]|0;HEAP32[$937+8>>2]=HEAP32[(280708)+8>>2]|0;HEAP32[$937+12>>2]=HEAP32[(280708)+12>>2]|0;
       HEAP32[(280708)>>2] = $tbase$255$i;
       HEAP32[(280712)>>2] = $tsize$254$i;
       HEAP32[(280720)>>2] = 0;
       HEAP32[(280716)>>2] = $937;
       $953 = ((($936)) + 28|0);
       HEAP32[$953>>2] = 7;
       $954 = ((($936)) + 32|0);
       $955 = ($954>>>0)<($$lcssa217>>>0);
       if ($955) {
        $957 = $953;
        while(1) {
         $956 = ((($957)) + 4|0);
         HEAP32[$956>>2] = 7;
         $958 = ((($957)) + 8|0);
         $959 = ($958>>>0)<($$lcssa217>>>0);
         if ($959) {
          $957 = $956;
         } else {
          break;
         }
        }
       }
       $960 = ($936|0)==($628|0);
       if (!($960)) {
        $961 = $936;
        $962 = $628;
        $963 = (($961) - ($962))|0;
        $964 = HEAP32[$952>>2]|0;
        $965 = $964 & -2;
        HEAP32[$952>>2] = $965;
        $966 = $963 | 1;
        $967 = ((($628)) + 4|0);
        HEAP32[$967>>2] = $966;
        HEAP32[$936>>2] = $963;
        $968 = $963 >>> 3;
        $969 = ($963>>>0)<(256);
        if ($969) {
         $970 = $968 << 1;
         $971 = (280300 + ($970<<2)|0);
         $972 = HEAP32[280260>>2]|0;
         $973 = 1 << $968;
         $974 = $972 & $973;
         $975 = ($974|0)==(0);
         if ($975) {
          $976 = $972 | $973;
          HEAP32[280260>>2] = $976;
          $$pre$i$i = (($970) + 2)|0;
          $$pre14$i$i = (280300 + ($$pre$i$i<<2)|0);
          $$pre$phi$i$iZ2D = $$pre14$i$i;$F$0$i$i = $971;
         } else {
          $$sum4$i$i = (($970) + 2)|0;
          $977 = (280300 + ($$sum4$i$i<<2)|0);
          $978 = HEAP32[$977>>2]|0;
          $979 = HEAP32[(280276)>>2]|0;
          $980 = ($978>>>0)<($979>>>0);
          if ($980) {
           _abort();
           // unreachable;
          } else {
           $$pre$phi$i$iZ2D = $977;$F$0$i$i = $978;
          }
         }
         HEAP32[$$pre$phi$i$iZ2D>>2] = $628;
         $981 = ((($F$0$i$i)) + 12|0);
         HEAP32[$981>>2] = $628;
         $982 = ((($628)) + 8|0);
         HEAP32[$982>>2] = $F$0$i$i;
         $983 = ((($628)) + 12|0);
         HEAP32[$983>>2] = $971;
         break;
        }
        $984 = $963 >>> 8;
        $985 = ($984|0)==(0);
        if ($985) {
         $I1$0$i$i = 0;
        } else {
         $986 = ($963>>>0)>(16777215);
         if ($986) {
          $I1$0$i$i = 31;
         } else {
          $987 = (($984) + 1048320)|0;
          $988 = $987 >>> 16;
          $989 = $988 & 8;
          $990 = $984 << $989;
          $991 = (($990) + 520192)|0;
          $992 = $991 >>> 16;
          $993 = $992 & 4;
          $994 = $993 | $989;
          $995 = $990 << $993;
          $996 = (($995) + 245760)|0;
          $997 = $996 >>> 16;
          $998 = $997 & 2;
          $999 = $994 | $998;
          $1000 = (14 - ($999))|0;
          $1001 = $995 << $998;
          $1002 = $1001 >>> 15;
          $1003 = (($1000) + ($1002))|0;
          $1004 = $1003 << 1;
          $1005 = (($1003) + 7)|0;
          $1006 = $963 >>> $1005;
          $1007 = $1006 & 1;
          $1008 = $1007 | $1004;
          $I1$0$i$i = $1008;
         }
        }
        $1009 = (280564 + ($I1$0$i$i<<2)|0);
        $1010 = ((($628)) + 28|0);
        HEAP32[$1010>>2] = $I1$0$i$i;
        $1011 = ((($628)) + 20|0);
        HEAP32[$1011>>2] = 0;
        HEAP32[$934>>2] = 0;
        $1012 = HEAP32[(280264)>>2]|0;
        $1013 = 1 << $I1$0$i$i;
        $1014 = $1012 & $1013;
        $1015 = ($1014|0)==(0);
        if ($1015) {
         $1016 = $1012 | $1013;
         HEAP32[(280264)>>2] = $1016;
         HEAP32[$1009>>2] = $628;
         $1017 = ((($628)) + 24|0);
         HEAP32[$1017>>2] = $1009;
         $1018 = ((($628)) + 12|0);
         HEAP32[$1018>>2] = $628;
         $1019 = ((($628)) + 8|0);
         HEAP32[$1019>>2] = $628;
         break;
        }
        $1020 = HEAP32[$1009>>2]|0;
        $1021 = ((($1020)) + 4|0);
        $1022 = HEAP32[$1021>>2]|0;
        $1023 = $1022 & -8;
        $1024 = ($1023|0)==($963|0);
        L425: do {
         if ($1024) {
          $T$0$lcssa$i$i = $1020;
         } else {
          $1025 = ($I1$0$i$i|0)==(31);
          $1026 = $I1$0$i$i >>> 1;
          $1027 = (25 - ($1026))|0;
          $1028 = $1025 ? 0 : $1027;
          $1029 = $963 << $1028;
          $K2$07$i$i = $1029;$T$06$i$i = $1020;
          while(1) {
           $1036 = $K2$07$i$i >>> 31;
           $1037 = (((($T$06$i$i)) + 16|0) + ($1036<<2)|0);
           $1032 = HEAP32[$1037>>2]|0;
           $1038 = ($1032|0)==(0|0);
           if ($1038) {
            $$lcssa211 = $1037;$T$06$i$i$lcssa = $T$06$i$i;
            break;
           }
           $1030 = $K2$07$i$i << 1;
           $1031 = ((($1032)) + 4|0);
           $1033 = HEAP32[$1031>>2]|0;
           $1034 = $1033 & -8;
           $1035 = ($1034|0)==($963|0);
           if ($1035) {
            $T$0$lcssa$i$i = $1032;
            break L425;
           } else {
            $K2$07$i$i = $1030;$T$06$i$i = $1032;
           }
          }
          $1039 = HEAP32[(280276)>>2]|0;
          $1040 = ($$lcssa211>>>0)<($1039>>>0);
          if ($1040) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa211>>2] = $628;
           $1041 = ((($628)) + 24|0);
           HEAP32[$1041>>2] = $T$06$i$i$lcssa;
           $1042 = ((($628)) + 12|0);
           HEAP32[$1042>>2] = $628;
           $1043 = ((($628)) + 8|0);
           HEAP32[$1043>>2] = $628;
           break L272;
          }
         }
        } while(0);
        $1044 = ((($T$0$lcssa$i$i)) + 8|0);
        $1045 = HEAP32[$1044>>2]|0;
        $1046 = HEAP32[(280276)>>2]|0;
        $1047 = ($1045>>>0)>=($1046>>>0);
        $not$$i$i = ($T$0$lcssa$i$i>>>0)>=($1046>>>0);
        $1048 = $1047 & $not$$i$i;
        if ($1048) {
         $1049 = ((($1045)) + 12|0);
         HEAP32[$1049>>2] = $628;
         HEAP32[$1044>>2] = $628;
         $1050 = ((($628)) + 8|0);
         HEAP32[$1050>>2] = $1045;
         $1051 = ((($628)) + 12|0);
         HEAP32[$1051>>2] = $T$0$lcssa$i$i;
         $1052 = ((($628)) + 24|0);
         HEAP32[$1052>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      }
     } while(0);
     $1053 = HEAP32[(280272)>>2]|0;
     $1054 = ($1053>>>0)>($nb$0>>>0);
     if ($1054) {
      $1055 = (($1053) - ($nb$0))|0;
      HEAP32[(280272)>>2] = $1055;
      $1056 = HEAP32[(280284)>>2]|0;
      $1057 = (($1056) + ($nb$0)|0);
      HEAP32[(280284)>>2] = $1057;
      $1058 = $1055 | 1;
      $$sum$i32 = (($nb$0) + 4)|0;
      $1059 = (($1056) + ($$sum$i32)|0);
      HEAP32[$1059>>2] = $1058;
      $1060 = $nb$0 | 3;
      $1061 = ((($1056)) + 4|0);
      HEAP32[$1061>>2] = $1060;
      $1062 = ((($1056)) + 8|0);
      $mem$0 = $1062;
      break;
     }
    }
    $1063 = (___errno_location()|0);
    HEAP32[$1063>>2] = 12;
    $mem$0 = 0;
   } else {
    $mem$0 = 0;
   }
  }
 } while(0);
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi59Z2D = 0, $$pre$phi61Z2D = 0, $$pre$phiZ2D = 0, $$pre57 = 0, $$pre58 = 0, $$pre60 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0;
 var $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$052 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0;
 var $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$051 = 0, $T$051$lcssa = 0, $cond = 0, $cond47 = 0, $not$ = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 L1: do {
  if (!($0)) {
   $1 = ((($mem)) + -8|0);
   $2 = HEAP32[(280276)>>2]|0;
   $3 = ($1>>>0)<($2>>>0);
   L3: do {
    if (!($3)) {
     $4 = ((($mem)) + -4|0);
     $5 = HEAP32[$4>>2]|0;
     $6 = $5 & 3;
     $7 = ($6|0)==(1);
     if (!($7)) {
      $8 = $5 & -8;
      $$sum = (($8) + -8)|0;
      $9 = (($mem) + ($$sum)|0);
      $10 = $5 & 1;
      $11 = ($10|0)==(0);
      do {
       if ($11) {
        $12 = HEAP32[$1>>2]|0;
        $13 = ($6|0)==(0);
        if ($13) {
         break L1;
        }
        $$sum2 = (-8 - ($12))|0;
        $14 = (($mem) + ($$sum2)|0);
        $15 = (($12) + ($8))|0;
        $16 = ($14>>>0)<($2>>>0);
        if ($16) {
         break L3;
        }
        $17 = HEAP32[(280280)>>2]|0;
        $18 = ($14|0)==($17|0);
        if ($18) {
         $$sum3 = (($8) + -4)|0;
         $103 = (($mem) + ($$sum3)|0);
         $104 = HEAP32[$103>>2]|0;
         $105 = $104 & 3;
         $106 = ($105|0)==(3);
         if (!($106)) {
          $p$0 = $14;$psize$0 = $15;
          break;
         }
         HEAP32[(280268)>>2] = $15;
         $107 = $104 & -2;
         HEAP32[$103>>2] = $107;
         $108 = $15 | 1;
         $$sum20 = (($$sum2) + 4)|0;
         $109 = (($mem) + ($$sum20)|0);
         HEAP32[$109>>2] = $108;
         HEAP32[$9>>2] = $15;
         break L1;
        }
        $19 = $12 >>> 3;
        $20 = ($12>>>0)<(256);
        if ($20) {
         $$sum30 = (($$sum2) + 8)|0;
         $21 = (($mem) + ($$sum30)|0);
         $22 = HEAP32[$21>>2]|0;
         $$sum31 = (($$sum2) + 12)|0;
         $23 = (($mem) + ($$sum31)|0);
         $24 = HEAP32[$23>>2]|0;
         $25 = $19 << 1;
         $26 = (280300 + ($25<<2)|0);
         $27 = ($22|0)==($26|0);
         do {
          if (!($27)) {
           $28 = ($22>>>0)<($2>>>0);
           if (!($28)) {
            $29 = ((($22)) + 12|0);
            $30 = HEAP32[$29>>2]|0;
            $31 = ($30|0)==($14|0);
            if ($31) {
             break;
            }
           }
           _abort();
           // unreachable;
          }
         } while(0);
         $32 = ($24|0)==($22|0);
         if ($32) {
          $33 = 1 << $19;
          $34 = $33 ^ -1;
          $35 = HEAP32[280260>>2]|0;
          $36 = $35 & $34;
          HEAP32[280260>>2] = $36;
          $p$0 = $14;$psize$0 = $15;
          break;
         }
         $37 = ($24|0)==($26|0);
         do {
          if ($37) {
           $$pre60 = ((($24)) + 8|0);
           $$pre$phi61Z2D = $$pre60;
          } else {
           $38 = ($24>>>0)<($2>>>0);
           if (!($38)) {
            $39 = ((($24)) + 8|0);
            $40 = HEAP32[$39>>2]|0;
            $41 = ($40|0)==($14|0);
            if ($41) {
             $$pre$phi61Z2D = $39;
             break;
            }
           }
           _abort();
           // unreachable;
          }
         } while(0);
         $42 = ((($22)) + 12|0);
         HEAP32[$42>>2] = $24;
         HEAP32[$$pre$phi61Z2D>>2] = $22;
         $p$0 = $14;$psize$0 = $15;
         break;
        }
        $$sum22 = (($$sum2) + 24)|0;
        $43 = (($mem) + ($$sum22)|0);
        $44 = HEAP32[$43>>2]|0;
        $$sum23 = (($$sum2) + 12)|0;
        $45 = (($mem) + ($$sum23)|0);
        $46 = HEAP32[$45>>2]|0;
        $47 = ($46|0)==($14|0);
        do {
         if ($47) {
          $$sum25 = (($$sum2) + 20)|0;
          $57 = (($mem) + ($$sum25)|0);
          $58 = HEAP32[$57>>2]|0;
          $59 = ($58|0)==(0|0);
          if ($59) {
           $$sum24 = (($$sum2) + 16)|0;
           $60 = (($mem) + ($$sum24)|0);
           $61 = HEAP32[$60>>2]|0;
           $62 = ($61|0)==(0|0);
           if ($62) {
            $R$1 = 0;
            break;
           } else {
            $R$0 = $61;$RP$0 = $60;
           }
          } else {
           $R$0 = $58;$RP$0 = $57;
          }
          while(1) {
           $63 = ((($R$0)) + 20|0);
           $64 = HEAP32[$63>>2]|0;
           $65 = ($64|0)==(0|0);
           if (!($65)) {
            $R$0 = $64;$RP$0 = $63;
            continue;
           }
           $66 = ((($R$0)) + 16|0);
           $67 = HEAP32[$66>>2]|0;
           $68 = ($67|0)==(0|0);
           if ($68) {
            $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
            break;
           } else {
            $R$0 = $67;$RP$0 = $66;
           }
          }
          $69 = ($RP$0$lcssa>>>0)<($2>>>0);
          if ($69) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$RP$0$lcssa>>2] = 0;
           $R$1 = $R$0$lcssa;
           break;
          }
         } else {
          $$sum29 = (($$sum2) + 8)|0;
          $48 = (($mem) + ($$sum29)|0);
          $49 = HEAP32[$48>>2]|0;
          $50 = ($49>>>0)<($2>>>0);
          if (!($50)) {
           $51 = ((($49)) + 12|0);
           $52 = HEAP32[$51>>2]|0;
           $53 = ($52|0)==($14|0);
           if ($53) {
            $54 = ((($46)) + 8|0);
            $55 = HEAP32[$54>>2]|0;
            $56 = ($55|0)==($14|0);
            if ($56) {
             HEAP32[$51>>2] = $46;
             HEAP32[$54>>2] = $49;
             $R$1 = $46;
             break;
            }
           }
          }
          _abort();
          // unreachable;
         }
        } while(0);
        $70 = ($44|0)==(0|0);
        if ($70) {
         $p$0 = $14;$psize$0 = $15;
        } else {
         $$sum26 = (($$sum2) + 28)|0;
         $71 = (($mem) + ($$sum26)|0);
         $72 = HEAP32[$71>>2]|0;
         $73 = (280564 + ($72<<2)|0);
         $74 = HEAP32[$73>>2]|0;
         $75 = ($14|0)==($74|0);
         if ($75) {
          HEAP32[$73>>2] = $R$1;
          $cond = ($R$1|0)==(0|0);
          if ($cond) {
           $76 = 1 << $72;
           $77 = $76 ^ -1;
           $78 = HEAP32[(280264)>>2]|0;
           $79 = $78 & $77;
           HEAP32[(280264)>>2] = $79;
           $p$0 = $14;$psize$0 = $15;
           break;
          }
         } else {
          $80 = HEAP32[(280276)>>2]|0;
          $81 = ($44>>>0)<($80>>>0);
          if ($81) {
           _abort();
           // unreachable;
          }
          $82 = ((($44)) + 16|0);
          $83 = HEAP32[$82>>2]|0;
          $84 = ($83|0)==($14|0);
          if ($84) {
           HEAP32[$82>>2] = $R$1;
          } else {
           $85 = ((($44)) + 20|0);
           HEAP32[$85>>2] = $R$1;
          }
          $86 = ($R$1|0)==(0|0);
          if ($86) {
           $p$0 = $14;$psize$0 = $15;
           break;
          }
         }
         $87 = HEAP32[(280276)>>2]|0;
         $88 = ($R$1>>>0)<($87>>>0);
         if ($88) {
          _abort();
          // unreachable;
         }
         $89 = ((($R$1)) + 24|0);
         HEAP32[$89>>2] = $44;
         $$sum27 = (($$sum2) + 16)|0;
         $90 = (($mem) + ($$sum27)|0);
         $91 = HEAP32[$90>>2]|0;
         $92 = ($91|0)==(0|0);
         do {
          if (!($92)) {
           $93 = ($91>>>0)<($87>>>0);
           if ($93) {
            _abort();
            // unreachable;
           } else {
            $94 = ((($R$1)) + 16|0);
            HEAP32[$94>>2] = $91;
            $95 = ((($91)) + 24|0);
            HEAP32[$95>>2] = $R$1;
            break;
           }
          }
         } while(0);
         $$sum28 = (($$sum2) + 20)|0;
         $96 = (($mem) + ($$sum28)|0);
         $97 = HEAP32[$96>>2]|0;
         $98 = ($97|0)==(0|0);
         if ($98) {
          $p$0 = $14;$psize$0 = $15;
         } else {
          $99 = HEAP32[(280276)>>2]|0;
          $100 = ($97>>>0)<($99>>>0);
          if ($100) {
           _abort();
           // unreachable;
          } else {
           $101 = ((($R$1)) + 20|0);
           HEAP32[$101>>2] = $97;
           $102 = ((($97)) + 24|0);
           HEAP32[$102>>2] = $R$1;
           $p$0 = $14;$psize$0 = $15;
           break;
          }
         }
        }
       } else {
        $p$0 = $1;$psize$0 = $8;
       }
      } while(0);
      $110 = ($p$0>>>0)<($9>>>0);
      if ($110) {
       $$sum19 = (($8) + -4)|0;
       $111 = (($mem) + ($$sum19)|0);
       $112 = HEAP32[$111>>2]|0;
       $113 = $112 & 1;
       $114 = ($113|0)==(0);
       if (!($114)) {
        $115 = $112 & 2;
        $116 = ($115|0)==(0);
        if ($116) {
         $117 = HEAP32[(280284)>>2]|0;
         $118 = ($9|0)==($117|0);
         if ($118) {
          $119 = HEAP32[(280272)>>2]|0;
          $120 = (($119) + ($psize$0))|0;
          HEAP32[(280272)>>2] = $120;
          HEAP32[(280284)>>2] = $p$0;
          $121 = $120 | 1;
          $122 = ((($p$0)) + 4|0);
          HEAP32[$122>>2] = $121;
          $123 = HEAP32[(280280)>>2]|0;
          $124 = ($p$0|0)==($123|0);
          if (!($124)) {
           break L1;
          }
          HEAP32[(280280)>>2] = 0;
          HEAP32[(280268)>>2] = 0;
          break L1;
         }
         $125 = HEAP32[(280280)>>2]|0;
         $126 = ($9|0)==($125|0);
         if ($126) {
          $127 = HEAP32[(280268)>>2]|0;
          $128 = (($127) + ($psize$0))|0;
          HEAP32[(280268)>>2] = $128;
          HEAP32[(280280)>>2] = $p$0;
          $129 = $128 | 1;
          $130 = ((($p$0)) + 4|0);
          HEAP32[$130>>2] = $129;
          $131 = (($p$0) + ($128)|0);
          HEAP32[$131>>2] = $128;
          break L1;
         }
         $132 = $112 & -8;
         $133 = (($132) + ($psize$0))|0;
         $134 = $112 >>> 3;
         $135 = ($112>>>0)<(256);
         do {
          if ($135) {
           $136 = (($mem) + ($8)|0);
           $137 = HEAP32[$136>>2]|0;
           $$sum1718 = $8 | 4;
           $138 = (($mem) + ($$sum1718)|0);
           $139 = HEAP32[$138>>2]|0;
           $140 = $134 << 1;
           $141 = (280300 + ($140<<2)|0);
           $142 = ($137|0)==($141|0);
           do {
            if (!($142)) {
             $143 = HEAP32[(280276)>>2]|0;
             $144 = ($137>>>0)<($143>>>0);
             if (!($144)) {
              $145 = ((($137)) + 12|0);
              $146 = HEAP32[$145>>2]|0;
              $147 = ($146|0)==($9|0);
              if ($147) {
               break;
              }
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $148 = ($139|0)==($137|0);
           if ($148) {
            $149 = 1 << $134;
            $150 = $149 ^ -1;
            $151 = HEAP32[280260>>2]|0;
            $152 = $151 & $150;
            HEAP32[280260>>2] = $152;
            break;
           }
           $153 = ($139|0)==($141|0);
           do {
            if ($153) {
             $$pre58 = ((($139)) + 8|0);
             $$pre$phi59Z2D = $$pre58;
            } else {
             $154 = HEAP32[(280276)>>2]|0;
             $155 = ($139>>>0)<($154>>>0);
             if (!($155)) {
              $156 = ((($139)) + 8|0);
              $157 = HEAP32[$156>>2]|0;
              $158 = ($157|0)==($9|0);
              if ($158) {
               $$pre$phi59Z2D = $156;
               break;
              }
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $159 = ((($137)) + 12|0);
           HEAP32[$159>>2] = $139;
           HEAP32[$$pre$phi59Z2D>>2] = $137;
          } else {
           $$sum5 = (($8) + 16)|0;
           $160 = (($mem) + ($$sum5)|0);
           $161 = HEAP32[$160>>2]|0;
           $$sum67 = $8 | 4;
           $162 = (($mem) + ($$sum67)|0);
           $163 = HEAP32[$162>>2]|0;
           $164 = ($163|0)==($9|0);
           do {
            if ($164) {
             $$sum9 = (($8) + 12)|0;
             $175 = (($mem) + ($$sum9)|0);
             $176 = HEAP32[$175>>2]|0;
             $177 = ($176|0)==(0|0);
             if ($177) {
              $$sum8 = (($8) + 8)|0;
              $178 = (($mem) + ($$sum8)|0);
              $179 = HEAP32[$178>>2]|0;
              $180 = ($179|0)==(0|0);
              if ($180) {
               $R7$1 = 0;
               break;
              } else {
               $R7$0 = $179;$RP9$0 = $178;
              }
             } else {
              $R7$0 = $176;$RP9$0 = $175;
             }
             while(1) {
              $181 = ((($R7$0)) + 20|0);
              $182 = HEAP32[$181>>2]|0;
              $183 = ($182|0)==(0|0);
              if (!($183)) {
               $R7$0 = $182;$RP9$0 = $181;
               continue;
              }
              $184 = ((($R7$0)) + 16|0);
              $185 = HEAP32[$184>>2]|0;
              $186 = ($185|0)==(0|0);
              if ($186) {
               $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
               break;
              } else {
               $R7$0 = $185;$RP9$0 = $184;
              }
             }
             $187 = HEAP32[(280276)>>2]|0;
             $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
             if ($188) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP9$0$lcssa>>2] = 0;
              $R7$1 = $R7$0$lcssa;
              break;
             }
            } else {
             $165 = (($mem) + ($8)|0);
             $166 = HEAP32[$165>>2]|0;
             $167 = HEAP32[(280276)>>2]|0;
             $168 = ($166>>>0)<($167>>>0);
             if (!($168)) {
              $169 = ((($166)) + 12|0);
              $170 = HEAP32[$169>>2]|0;
              $171 = ($170|0)==($9|0);
              if ($171) {
               $172 = ((($163)) + 8|0);
               $173 = HEAP32[$172>>2]|0;
               $174 = ($173|0)==($9|0);
               if ($174) {
                HEAP32[$169>>2] = $163;
                HEAP32[$172>>2] = $166;
                $R7$1 = $163;
                break;
               }
              }
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $189 = ($161|0)==(0|0);
           if (!($189)) {
            $$sum12 = (($8) + 20)|0;
            $190 = (($mem) + ($$sum12)|0);
            $191 = HEAP32[$190>>2]|0;
            $192 = (280564 + ($191<<2)|0);
            $193 = HEAP32[$192>>2]|0;
            $194 = ($9|0)==($193|0);
            if ($194) {
             HEAP32[$192>>2] = $R7$1;
             $cond47 = ($R7$1|0)==(0|0);
             if ($cond47) {
              $195 = 1 << $191;
              $196 = $195 ^ -1;
              $197 = HEAP32[(280264)>>2]|0;
              $198 = $197 & $196;
              HEAP32[(280264)>>2] = $198;
              break;
             }
            } else {
             $199 = HEAP32[(280276)>>2]|0;
             $200 = ($161>>>0)<($199>>>0);
             if ($200) {
              _abort();
              // unreachable;
             }
             $201 = ((($161)) + 16|0);
             $202 = HEAP32[$201>>2]|0;
             $203 = ($202|0)==($9|0);
             if ($203) {
              HEAP32[$201>>2] = $R7$1;
             } else {
              $204 = ((($161)) + 20|0);
              HEAP32[$204>>2] = $R7$1;
             }
             $205 = ($R7$1|0)==(0|0);
             if ($205) {
              break;
             }
            }
            $206 = HEAP32[(280276)>>2]|0;
            $207 = ($R7$1>>>0)<($206>>>0);
            if ($207) {
             _abort();
             // unreachable;
            }
            $208 = ((($R7$1)) + 24|0);
            HEAP32[$208>>2] = $161;
            $$sum13 = (($8) + 8)|0;
            $209 = (($mem) + ($$sum13)|0);
            $210 = HEAP32[$209>>2]|0;
            $211 = ($210|0)==(0|0);
            do {
             if (!($211)) {
              $212 = ($210>>>0)<($206>>>0);
              if ($212) {
               _abort();
               // unreachable;
              } else {
               $213 = ((($R7$1)) + 16|0);
               HEAP32[$213>>2] = $210;
               $214 = ((($210)) + 24|0);
               HEAP32[$214>>2] = $R7$1;
               break;
              }
             }
            } while(0);
            $$sum14 = (($8) + 12)|0;
            $215 = (($mem) + ($$sum14)|0);
            $216 = HEAP32[$215>>2]|0;
            $217 = ($216|0)==(0|0);
            if (!($217)) {
             $218 = HEAP32[(280276)>>2]|0;
             $219 = ($216>>>0)<($218>>>0);
             if ($219) {
              _abort();
              // unreachable;
             } else {
              $220 = ((($R7$1)) + 20|0);
              HEAP32[$220>>2] = $216;
              $221 = ((($216)) + 24|0);
              HEAP32[$221>>2] = $R7$1;
              break;
             }
            }
           }
          }
         } while(0);
         $222 = $133 | 1;
         $223 = ((($p$0)) + 4|0);
         HEAP32[$223>>2] = $222;
         $224 = (($p$0) + ($133)|0);
         HEAP32[$224>>2] = $133;
         $225 = HEAP32[(280280)>>2]|0;
         $226 = ($p$0|0)==($225|0);
         if ($226) {
          HEAP32[(280268)>>2] = $133;
          break L1;
         } else {
          $psize$1 = $133;
         }
        } else {
         $227 = $112 & -2;
         HEAP32[$111>>2] = $227;
         $228 = $psize$0 | 1;
         $229 = ((($p$0)) + 4|0);
         HEAP32[$229>>2] = $228;
         $230 = (($p$0) + ($psize$0)|0);
         HEAP32[$230>>2] = $psize$0;
         $psize$1 = $psize$0;
        }
        $231 = $psize$1 >>> 3;
        $232 = ($psize$1>>>0)<(256);
        if ($232) {
         $233 = $231 << 1;
         $234 = (280300 + ($233<<2)|0);
         $235 = HEAP32[280260>>2]|0;
         $236 = 1 << $231;
         $237 = $235 & $236;
         $238 = ($237|0)==(0);
         if ($238) {
          $239 = $235 | $236;
          HEAP32[280260>>2] = $239;
          $$pre = (($233) + 2)|0;
          $$pre57 = (280300 + ($$pre<<2)|0);
          $$pre$phiZ2D = $$pre57;$F16$0 = $234;
         } else {
          $$sum11 = (($233) + 2)|0;
          $240 = (280300 + ($$sum11<<2)|0);
          $241 = HEAP32[$240>>2]|0;
          $242 = HEAP32[(280276)>>2]|0;
          $243 = ($241>>>0)<($242>>>0);
          if ($243) {
           _abort();
           // unreachable;
          } else {
           $$pre$phiZ2D = $240;$F16$0 = $241;
          }
         }
         HEAP32[$$pre$phiZ2D>>2] = $p$0;
         $244 = ((($F16$0)) + 12|0);
         HEAP32[$244>>2] = $p$0;
         $245 = ((($p$0)) + 8|0);
         HEAP32[$245>>2] = $F16$0;
         $246 = ((($p$0)) + 12|0);
         HEAP32[$246>>2] = $234;
         break L1;
        }
        $247 = $psize$1 >>> 8;
        $248 = ($247|0)==(0);
        if ($248) {
         $I18$0 = 0;
        } else {
         $249 = ($psize$1>>>0)>(16777215);
         if ($249) {
          $I18$0 = 31;
         } else {
          $250 = (($247) + 1048320)|0;
          $251 = $250 >>> 16;
          $252 = $251 & 8;
          $253 = $247 << $252;
          $254 = (($253) + 520192)|0;
          $255 = $254 >>> 16;
          $256 = $255 & 4;
          $257 = $256 | $252;
          $258 = $253 << $256;
          $259 = (($258) + 245760)|0;
          $260 = $259 >>> 16;
          $261 = $260 & 2;
          $262 = $257 | $261;
          $263 = (14 - ($262))|0;
          $264 = $258 << $261;
          $265 = $264 >>> 15;
          $266 = (($263) + ($265))|0;
          $267 = $266 << 1;
          $268 = (($266) + 7)|0;
          $269 = $psize$1 >>> $268;
          $270 = $269 & 1;
          $271 = $270 | $267;
          $I18$0 = $271;
         }
        }
        $272 = (280564 + ($I18$0<<2)|0);
        $273 = ((($p$0)) + 28|0);
        HEAP32[$273>>2] = $I18$0;
        $274 = ((($p$0)) + 16|0);
        $275 = ((($p$0)) + 20|0);
        HEAP32[$275>>2] = 0;
        HEAP32[$274>>2] = 0;
        $276 = HEAP32[(280264)>>2]|0;
        $277 = 1 << $I18$0;
        $278 = $276 & $277;
        $279 = ($278|0)==(0);
        L168: do {
         if ($279) {
          $280 = $276 | $277;
          HEAP32[(280264)>>2] = $280;
          HEAP32[$272>>2] = $p$0;
          $281 = ((($p$0)) + 24|0);
          HEAP32[$281>>2] = $272;
          $282 = ((($p$0)) + 12|0);
          HEAP32[$282>>2] = $p$0;
          $283 = ((($p$0)) + 8|0);
          HEAP32[$283>>2] = $p$0;
         } else {
          $284 = HEAP32[$272>>2]|0;
          $285 = ((($284)) + 4|0);
          $286 = HEAP32[$285>>2]|0;
          $287 = $286 & -8;
          $288 = ($287|0)==($psize$1|0);
          L171: do {
           if ($288) {
            $T$0$lcssa = $284;
           } else {
            $289 = ($I18$0|0)==(31);
            $290 = $I18$0 >>> 1;
            $291 = (25 - ($290))|0;
            $292 = $289 ? 0 : $291;
            $293 = $psize$1 << $292;
            $K19$052 = $293;$T$051 = $284;
            while(1) {
             $300 = $K19$052 >>> 31;
             $301 = (((($T$051)) + 16|0) + ($300<<2)|0);
             $296 = HEAP32[$301>>2]|0;
             $302 = ($296|0)==(0|0);
             if ($302) {
              $$lcssa = $301;$T$051$lcssa = $T$051;
              break;
             }
             $294 = $K19$052 << 1;
             $295 = ((($296)) + 4|0);
             $297 = HEAP32[$295>>2]|0;
             $298 = $297 & -8;
             $299 = ($298|0)==($psize$1|0);
             if ($299) {
              $T$0$lcssa = $296;
              break L171;
             } else {
              $K19$052 = $294;$T$051 = $296;
             }
            }
            $303 = HEAP32[(280276)>>2]|0;
            $304 = ($$lcssa>>>0)<($303>>>0);
            if ($304) {
             _abort();
             // unreachable;
            } else {
             HEAP32[$$lcssa>>2] = $p$0;
             $305 = ((($p$0)) + 24|0);
             HEAP32[$305>>2] = $T$051$lcssa;
             $306 = ((($p$0)) + 12|0);
             HEAP32[$306>>2] = $p$0;
             $307 = ((($p$0)) + 8|0);
             HEAP32[$307>>2] = $p$0;
             break L168;
            }
           }
          } while(0);
          $308 = ((($T$0$lcssa)) + 8|0);
          $309 = HEAP32[$308>>2]|0;
          $310 = HEAP32[(280276)>>2]|0;
          $311 = ($309>>>0)>=($310>>>0);
          $not$ = ($T$0$lcssa>>>0)>=($310>>>0);
          $312 = $311 & $not$;
          if ($312) {
           $313 = ((($309)) + 12|0);
           HEAP32[$313>>2] = $p$0;
           HEAP32[$308>>2] = $p$0;
           $314 = ((($p$0)) + 8|0);
           HEAP32[$314>>2] = $309;
           $315 = ((($p$0)) + 12|0);
           HEAP32[$315>>2] = $T$0$lcssa;
           $316 = ((($p$0)) + 24|0);
           HEAP32[$316>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        } while(0);
        $317 = HEAP32[(280292)>>2]|0;
        $318 = (($317) + -1)|0;
        HEAP32[(280292)>>2] = $318;
        $319 = ($318|0)==(0);
        if ($319) {
         $sp$0$in$i = (280716);
        } else {
         break L1;
        }
        while(1) {
         $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
         $320 = ($sp$0$i|0)==(0|0);
         $321 = ((($sp$0$i)) + 8|0);
         if ($320) {
          break;
         } else {
          $sp$0$in$i = $321;
         }
        }
        HEAP32[(280292)>>2] = -1;
        break L1;
       }
      }
     }
    }
   } while(0);
   _abort();
   // unreachable;
  }
 } while(0);
 return;
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[280212>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 280756;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 60|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r>>>0)>(4294963200);
 if ($0) {
  $1 = (0 - ($r))|0;
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = $1;
  $$0 = -1;
 } else {
  $$0 = $r;
 }
 return ($$0|0);
}
function _fmod($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa7 = 0, $$x = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0.0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0;
 var $ex$0$lcssa = 0, $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = tempRet0;
 $6 = $4 & 2047;
 $7 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $8 = tempRet0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $12 = tempRet0;
 $13 = ($11|0)==(0);
 $14 = ($12|0)==(0);
 $15 = $13 & $14;
 L1: do {
  if ($15) {
   label = 3;
  } else {
   $16 = $3 & 2147483647;
   $17 = ($16>>>0)>(2146435072);
   $18 = ($2>>>0)>(0);
   $19 = ($16|0)==(2146435072);
   $20 = $19 & $18;
   $21 = $17 | $20;
   $22 = ($6|0)==(2047);
   $or$cond = $21 | $22;
   if ($or$cond) {
    label = 3;
   } else {
    $25 = (_bitshift64Shl(($0|0),($1|0),1)|0);
    $26 = tempRet0;
    $27 = ($26>>>0)>($12>>>0);
    $28 = ($25>>>0)>($11>>>0);
    $29 = ($26|0)==($12|0);
    $30 = $29 & $28;
    $31 = $27 | $30;
    if (!($31)) {
     $32 = ($25|0)==($11|0);
     $33 = ($26|0)==($12|0);
     $34 = $32 & $33;
     $35 = $x * 0.0;
     $$x = $34 ? $35 : $x;
     return (+$$x);
    }
    $36 = ($6|0)==(0);
    if ($36) {
     $37 = (_bitshift64Shl(($0|0),($1|0),12)|0);
     $38 = tempRet0;
     $39 = ($38|0)>(-1);
     $40 = ($37>>>0)>(4294967295);
     $41 = ($38|0)==(-1);
     $42 = $41 & $40;
     $43 = $39 | $42;
     if ($43) {
      $45 = $37;$46 = $38;$ex$026 = 0;
      while(1) {
       $44 = (($ex$026) + -1)|0;
       $47 = (_bitshift64Shl(($45|0),($46|0),1)|0);
       $48 = tempRet0;
       $49 = ($48|0)>(-1);
       $50 = ($47>>>0)>(4294967295);
       $51 = ($48|0)==(-1);
       $52 = $51 & $50;
       $53 = $49 | $52;
       if ($53) {
        $45 = $47;$46 = $48;$ex$026 = $44;
       } else {
        $ex$0$lcssa = $44;
        break;
       }
      }
     } else {
      $ex$0$lcssa = 0;
     }
     $54 = (1 - ($ex$0$lcssa))|0;
     $55 = (_bitshift64Shl(($0|0),($1|0),($54|0))|0);
     $56 = tempRet0;
     $83 = $55;$84 = $56;$ex$1 = $ex$0$lcssa;
    } else {
     $57 = $1 & 1048575;
     $58 = $57 | 1048576;
     $83 = $0;$84 = $58;$ex$1 = $6;
    }
    $59 = ($9|0)==(0);
    if ($59) {
     $60 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $61 = tempRet0;
     $62 = ($61|0)>(-1);
     $63 = ($60>>>0)>(4294967295);
     $64 = ($61|0)==(-1);
     $65 = $64 & $63;
     $66 = $62 | $65;
     if ($66) {
      $68 = $60;$69 = $61;$ey$020 = 0;
      while(1) {
       $67 = (($ey$020) + -1)|0;
       $70 = (_bitshift64Shl(($68|0),($69|0),1)|0);
       $71 = tempRet0;
       $72 = ($71|0)>(-1);
       $73 = ($70>>>0)>(4294967295);
       $74 = ($71|0)==(-1);
       $75 = $74 & $73;
       $76 = $72 | $75;
       if ($76) {
        $68 = $70;$69 = $71;$ey$020 = $67;
       } else {
        $ey$0$lcssa = $67;
        break;
       }
      }
     } else {
      $ey$0$lcssa = 0;
     }
     $77 = (1 - ($ey$0$lcssa))|0;
     $78 = (_bitshift64Shl(($2|0),($3|0),($77|0))|0);
     $79 = tempRet0;
     $85 = $78;$86 = $79;$ey$1$ph = $ey$0$lcssa;
    } else {
     $80 = $3 & 1048575;
     $81 = $80 | 1048576;
     $85 = $2;$86 = $81;$ey$1$ph = $9;
    }
    $82 = ($ex$1|0)>($ey$1$ph|0);
    $87 = (_i64Subtract(($83|0),($84|0),($85|0),($86|0))|0);
    $88 = tempRet0;
    $89 = ($88|0)>(-1);
    $90 = ($87>>>0)>(4294967295);
    $91 = ($88|0)==(-1);
    $92 = $91 & $90;
    $93 = $89 | $92;
    L23: do {
     if ($82) {
      $152 = $93;$153 = $87;$154 = $88;$95 = $83;$97 = $84;$ex$212 = $ex$1;
      while(1) {
       if ($152) {
        $94 = ($95|0)==($85|0);
        $96 = ($97|0)==($86|0);
        $98 = $94 & $96;
        if ($98) {
         break;
        } else {
         $100 = $153;$101 = $154;
        }
       } else {
        $100 = $95;$101 = $97;
       }
       $102 = (_bitshift64Shl(($100|0),($101|0),1)|0);
       $103 = tempRet0;
       $104 = (($ex$212) + -1)|0;
       $105 = ($104|0)>($ey$1$ph|0);
       $106 = (_i64Subtract(($102|0),($103|0),($85|0),($86|0))|0);
       $107 = tempRet0;
       $108 = ($107|0)>(-1);
       $109 = ($106>>>0)>(4294967295);
       $110 = ($107|0)==(-1);
       $111 = $110 & $109;
       $112 = $108 | $111;
       if ($105) {
        $152 = $112;$153 = $106;$154 = $107;$95 = $102;$97 = $103;$ex$212 = $104;
       } else {
        $$lcssa7 = $112;$114 = $102;$116 = $103;$155 = $106;$156 = $107;$ex$2$lcssa = $104;
        break L23;
       }
      }
      $99 = $x * 0.0;
      $$0 = $99;
      break L1;
     } else {
      $$lcssa7 = $93;$114 = $83;$116 = $84;$155 = $87;$156 = $88;$ex$2$lcssa = $ex$1;
     }
    } while(0);
    if ($$lcssa7) {
     $113 = ($114|0)==($85|0);
     $115 = ($116|0)==($86|0);
     $117 = $113 & $115;
     if ($117) {
      $125 = $x * 0.0;
      $$0 = $125;
      break;
     } else {
      $119 = $156;$121 = $155;
     }
    } else {
     $119 = $116;$121 = $114;
    }
    $118 = ($119>>>0)<(1048576);
    $120 = ($121>>>0)<(0);
    $122 = ($119|0)==(1048576);
    $123 = $122 & $120;
    $124 = $118 | $123;
    if ($124) {
     $126 = $121;$127 = $119;$ex$39 = $ex$2$lcssa;
     while(1) {
      $128 = (_bitshift64Shl(($126|0),($127|0),1)|0);
      $129 = tempRet0;
      $130 = (($ex$39) + -1)|0;
      $131 = ($129>>>0)<(1048576);
      $132 = ($128>>>0)<(0);
      $133 = ($129|0)==(1048576);
      $134 = $133 & $132;
      $135 = $131 | $134;
      if ($135) {
       $126 = $128;$127 = $129;$ex$39 = $130;
      } else {
       $137 = $128;$138 = $129;$ex$3$lcssa = $130;
       break;
      }
     }
    } else {
     $137 = $121;$138 = $119;$ex$3$lcssa = $ex$2$lcssa;
    }
    $136 = ($ex$3$lcssa|0)>(0);
    if ($136) {
     $139 = (_i64Add(($137|0),($138|0),0,-1048576)|0);
     $140 = tempRet0;
     $141 = (_bitshift64Shl(($ex$3$lcssa|0),0,52)|0);
     $142 = tempRet0;
     $143 = $139 | $141;
     $144 = $140 | $142;
     $149 = $144;$150 = $143;
    } else {
     $145 = (1 - ($ex$3$lcssa))|0;
     $146 = (_bitshift64Lshr(($137|0),($138|0),($145|0))|0);
     $147 = tempRet0;
     $149 = $147;$150 = $146;
    }
    $148 = $149 | $10;
    HEAP32[tempDoublePtr>>2] = $150;HEAP32[tempDoublePtr+4>>2] = $148;$151 = +HEAPF64[tempDoublePtr>>3];
    $$0 = $151;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $23 = $x * $y;
  $24 = $23 / $23;
  $$0 = $24;
 }
 return (+$$0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___stdio_seek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ret = sp + 20|0;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $off;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $ret;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $2 = (___syscall140(140,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 $4 = ($3|0)<(0);
 if ($4) {
  HEAP32[$ret>>2] = -1;
  $5 = -1;
 } else {
  $$pre = HEAP32[$ret>>2]|0;
  $5 = $$pre;
 }
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0;
 var $iovcnt$0$lcssa12 = 0, $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iovs = sp + 32|0;
 $0 = ((($f)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$iovs>>2] = $1;
 $2 = ((($iovs)) + 4|0);
 $3 = ((($f)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4;
 $6 = (($5) - ($1))|0;
 HEAP32[$2>>2] = $6;
 $7 = ((($iovs)) + 8|0);
 HEAP32[$7>>2] = $buf;
 $8 = ((($iovs)) + 12|0);
 HEAP32[$8>>2] = $len;
 $9 = (($6) + ($len))|0;
 $10 = ((($f)) + 60|0);
 $11 = ((($f)) + 44|0);
 $iov$0 = $iovs;$iovcnt$0 = 2;$rem$0 = $9;
 while(1) {
  $12 = HEAP32[280212>>2]|0;
  $13 = ($12|0)==(0|0);
  if ($13) {
   $17 = HEAP32[$10>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $17;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $iov$0;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $iovcnt$0;
   $18 = (___syscall146(146,($vararg_buffer3|0))|0);
   $19 = (___syscall_ret($18)|0);
   $cnt$0 = $19;
  } else {
   _pthread_cleanup_push((4|0),($f|0));
   $14 = HEAP32[$10>>2]|0;
   HEAP32[$vararg_buffer>>2] = $14;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $iov$0;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $iovcnt$0;
   $15 = (___syscall146(146,($vararg_buffer|0))|0);
   $16 = (___syscall_ret($15)|0);
   _pthread_cleanup_pop(0);
   $cnt$0 = $16;
  }
  $20 = ($rem$0|0)==($cnt$0|0);
  if ($20) {
   label = 6;
   break;
  }
  $27 = ($cnt$0|0)<(0);
  if ($27) {
   $iov$0$lcssa11 = $iov$0;$iovcnt$0$lcssa12 = $iovcnt$0;
   label = 8;
   break;
  }
  $35 = (($rem$0) - ($cnt$0))|0;
  $36 = ((($iov$0)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($cnt$0>>>0)>($37>>>0);
  if ($38) {
   $39 = HEAP32[$11>>2]|0;
   HEAP32[$0>>2] = $39;
   HEAP32[$3>>2] = $39;
   $40 = (($cnt$0) - ($37))|0;
   $41 = ((($iov$0)) + 8|0);
   $42 = (($iovcnt$0) + -1)|0;
   $$phi$trans$insert = ((($iov$0)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $50 = $$pre;$cnt$1 = $40;$iov$1 = $41;$iovcnt$1 = $42;
  } else {
   $43 = ($iovcnt$0|0)==(2);
   if ($43) {
    $44 = HEAP32[$0>>2]|0;
    $45 = (($44) + ($cnt$0)|0);
    HEAP32[$0>>2] = $45;
    $50 = $37;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = 2;
   } else {
    $50 = $37;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = $iovcnt$0;
   }
  }
  $46 = HEAP32[$iov$1>>2]|0;
  $47 = (($46) + ($cnt$1)|0);
  HEAP32[$iov$1>>2] = $47;
  $48 = ((($iov$1)) + 4|0);
  $49 = (($50) - ($cnt$1))|0;
  HEAP32[$48>>2] = $49;
  $iov$0 = $iov$1;$iovcnt$0 = $iovcnt$1;$rem$0 = $35;
 }
 if ((label|0) == 6) {
  $21 = HEAP32[$11>>2]|0;
  $22 = ((($f)) + 48|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + ($23)|0);
  $25 = ((($f)) + 16|0);
  HEAP32[$25>>2] = $24;
  $26 = $21;
  HEAP32[$0>>2] = $26;
  HEAP32[$3>>2] = $26;
  $$0 = $len;
 }
 else if ((label|0) == 8) {
  $28 = ((($f)) + 16|0);
  HEAP32[$28>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$3>>2] = 0;
  $29 = HEAP32[$f>>2]|0;
  $30 = $29 | 32;
  HEAP32[$f>>2] = $30;
  $31 = ($iovcnt$0$lcssa12|0)==(2);
  if ($31) {
   $$0 = 0;
  } else {
   $32 = ((($iov$0$lcssa11)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($len) - ($33))|0;
   $$0 = $34;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdout_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tio = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tio = sp + 12|0;
 $0 = ((($f)) + 36|0);
 HEAP32[$0>>2] = 5;
 $1 = HEAP32[$f>>2]|0;
 $2 = $1 & 64;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($f)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $tio;
  $6 = (___syscall54(54,($vararg_buffer|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = ((($f)) + 75|0);
   HEAP8[$8>>0] = -1;
  }
 }
 $9 = (___stdio_write($f,$buf,$len)|0);
 STACKTOP = sp;return ($9|0);
}
function _fflush($f) {
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$012 = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($f|0)==(0|0);
 do {
  if ($0) {
   $7 = HEAP32[280256>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $27 = 0;
   } else {
    $9 = HEAP32[280256>>2]|0;
    $10 = (_fflush($9)|0);
    $27 = $10;
   }
   ___lock(((280240)|0));
   $$012 = HEAP32[(280236)>>2]|0;
   $11 = ($$012|0)==(0|0);
   if ($11) {
    $r$0$lcssa = $27;
   } else {
    $$014 = $$012;$r$03 = $27;
    while(1) {
     $12 = ((($$014)) + 76|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)>(-1);
     if ($14) {
      $15 = (___lockfile($$014)|0);
      $24 = $15;
     } else {
      $24 = 0;
     }
     $16 = ((($$014)) + 20|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ((($$014)) + 28|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($17>>>0)>($19>>>0);
     if ($20) {
      $21 = (___fflush_unlocked($$014)|0);
      $22 = $21 | $r$03;
      $r$1 = $22;
     } else {
      $r$1 = $r$03;
     }
     $23 = ($24|0)==(0);
     if (!($23)) {
      ___unlockfile($$014);
     }
     $25 = ((($$014)) + 56|0);
     $$01 = HEAP32[$25>>2]|0;
     $26 = ($$01|0)==(0|0);
     if ($26) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $$014 = $$01;$r$03 = $r$1;
     }
    }
   }
   ___unlock(((280240)|0));
   $$0 = $r$0$lcssa;
  } else {
   $1 = ((($f)) + 76|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)>(-1);
   if (!($3)) {
    $4 = (___fflush_unlocked($f)|0);
    $$0 = $4;
    break;
   }
   $5 = (___lockfile($f)|0);
   $phitmp = ($5|0)==(0);
   $6 = (___fflush_unlocked($f)|0);
   if ($phitmp) {
    $$0 = $6;
   } else {
    ___unlockfile($f);
    $$0 = $6;
   }
  }
 } while(0);
 return ($$0|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $3 | $2;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = ((($$014)) + 1|0);
   $5 = ((($$05)) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $9 | $8;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 return ($12|0);
}
function _init_mparams() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[280732>>2]|0;
 $1 = ($0|0)==(0);
 do {
  if ($1) {
   $2 = (_sysconf(30)|0);
   $3 = (($2) + -1)|0;
   $4 = $3 & $2;
   $5 = ($4|0)==(0);
   if ($5) {
    HEAP32[(280740)>>2] = $2;
    HEAP32[(280736)>>2] = $2;
    HEAP32[(280744)>>2] = -1;
    HEAP32[(280748)>>2] = -1;
    HEAP32[(280752)>>2] = 0;
    HEAP32[(280704)>>2] = 0;
    $6 = (_time((0|0))|0);
    $7 = $6 & -16;
    $8 = $7 ^ 1431655768;
    HEAP32[280732>>2] = $8;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 return;
}
function _cleanup397($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function ___fflush_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)>($3>>>0);
 if ($4) {
  $5 = ((($f)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  (FUNCTION_TABLE_iiii[$6 & 7]($f,0,0)|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $9 = ((($f)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($f)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($f)) + 40|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $10;
   $17 = $12;
   $18 = (($16) - ($17))|0;
   (FUNCTION_TABLE_iiii[$15 & 7]($f,$18,1)|0);
  }
  $19 = ((($f)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$2>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function runPostSets() {

}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&1](a1|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&7](a1|0,a2|0,a3|0)|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&7](a1|0);
}

function b0(p0) { p0 = p0|0; nullFunc_ii(0);return 0; }
function b1(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(1);return 0; }
function b2(p0) { p0 = p0|0; nullFunc_vi(2); }

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b0,___stdio_close];
var FUNCTION_TABLE_iiii = [b1,b1,___stdout_write,___stdio_seek,b1,___stdio_write,b1,b1];
var FUNCTION_TABLE_vi = [b2,b2,b2,b2,_cleanup397,b2,b2,b2];

  return { _eraS00b: _eraS00b, _eraS00a: _eraS00a, _eraC2i06a: _eraC2i06a, _eraTrxp: _eraTrxp, _eraPn00b: _eraPn00b, _eraFaju03: _eraFaju03, _eraPn00a: _eraPn00a, _eraApco13: _eraApco13, _eraPvdpv: _eraPvdpv, _eraFave03: _eraFave03, _bitshift64Lshr: _bitshift64Lshr, _eraP2s: _eraP2s, _eraCp: _eraCp, _eraCr: _eraCr, _eraApcg13: _eraApcg13, _eraIcrs2g: _eraIcrs2g, _eraUt1utc: _eraUt1utc, _eraPpsp: _eraPpsp, _eraPb06: _eraPb06, _eraFad03: _eraFad03, _eraGmst00: _eraGmst00, _eraC2i00b: _eraC2i00b, _eraGmst06: _eraGmst06, _eraPxp: _eraPxp, _eraHfk5z: _eraHfk5z, _eraRefco: _eraRefco, _eraPn: _eraPn, _eraC2ixys: _eraC2ixys, _eraPpp: _eraPpp, _eraEe00b: _eraEe00b, _eraTttdb: _eraTttdb, _eraEe00a: _eraEe00a, _eraApcs13: _eraApcs13, _eraS00: _eraS00, _eraFk5hip: _eraFk5hip, _eraTttai: _eraTttai, _eraS06: _eraS06, _eraC2txy: _eraC2txy, _eraPap: _eraPap, _eraPas: _eraPas, _free: _free, _eraC2tpe: _eraC2tpe, _eraP2pv: _eraP2pv, _eraPvppv: _eraPvppv, _eraDtdb: _eraDtdb, _eraNum00a: _eraNum00a, _eraNum00b: _eraNum00b, _eraTf2d: _eraTf2d, _eraTf2a: _eraTf2a, _eraPn00: _eraPn00, _eraZr: _eraZr, _eraPvup: _eraPvup, _eraCpv: _eraCpv, _eraAtoi13: _eraAtoi13, _eraFama03: _eraFama03, _eraEect00: _eraEect00, _eraTaiutc: _eraTaiutc, _eraA2af: _eraA2af, _eraFk5hz: _eraFk5hz, _eraPmat00: _eraPmat00, _eraPmat06: _eraPmat06, _eraObl80: _eraObl80, _eraLdsun: _eraLdsun, _eraNumat: _eraNumat, _eraAtioq: _eraAtioq, _eraPvtob: _eraPvtob, _eraRm2v: _eraRm2v, _eraNut06a: _eraNut06a, _eraDat: _eraDat, _eraRz: _eraRz, _eraRy: _eraRy, _eraPmsafe: _eraPmsafe, _eraPr00: _eraPr00, _eraSxpv: _eraSxpv, _eraAtciqn: _eraAtciqn, _eraFaur03: _eraFaur03, _eraObl06: _eraObl06, _eraC2i00a: _eraC2i00a, _eraS06a: _eraS06a, _eraAtciqz: _eraAtciqz, _eraEpb2jd: _eraEpb2jd, _eraZp: _eraZp, _eraAper13: _eraAper13, _eraFk52h: _eraFk52h, _eraS2c: _eraS2c, _eraFame03: _eraFame03, _eraAticqn: _eraAticqn, _eraGst06: _eraGst06, _eraXys06a: _eraXys06a, _eraStarpv: _eraStarpv, _eraPmat76: _eraPmat76, _eraPvm: _eraPvm, _eraTcgtt: _eraTcgtt, _eraCal2jd: _eraCal2jd, _eraTaiut1: _eraTaiut1, _eraAtoc13: _eraAtoc13, _eraEpj2jd: _eraEpj2jd, _i64Add: _i64Add, _eraFal03: _eraFal03, _eraS2pv: _eraS2pv, _eraPvu: _eraPvu, _eraTtut1: _eraTtut1, _malloc: _malloc, _eraTdbtcb: _eraTdbtcb, _eraAf2a: _eraAf2a, _eraEpv00: _eraEpv00, _eraGc2gde: _eraGc2gde, _eraFaf03: _eraFaf03, _eraFalp03: _eraFalp03, _eraEors: _eraEors, _eraAticq: _eraAticq, _eraPom00: _eraPom00, _eraC2t06a: _eraC2t06a, _eraNut00b: _eraNut00b, _eraNut00a: _eraNut00a, _eraFapa03: _eraFapa03, _eraApio: _eraApio, _eraZpv: _eraZpv, _eraEqeq94: _eraEqeq94, _eraUt1tt: _eraUt1tt, _eraPnm06a: _eraPnm06a, _eraC2tcio: _eraC2tcio, _eraG2icrs: _eraG2icrs, _eraTrxpv: _eraTrxpv, _eraApcs: _eraApcs, _eraPvmpv: _eraPvmpv, _eraSeps: _eraSeps, _eraBpn2xy: _eraBpn2xy, _memset: _memset, _eraPdp: _eraPdp, _eraPm: _eraPm, _eraPv2s: _eraPv2s, _eraApcg: _eraApcg, _eraGd2gc: _eraGd2gc, _eraDtf2d: _eraDtf2d, _eraUtctai: _eraUtctai, _eraApco: _eraApco, _eraApci: _eraApci, _eraC2ibpn: _eraC2ibpn, _eraS2xpv: _eraS2xpv, _eraGd2gce: _eraGd2gce, _i64Subtract: _i64Subtract, _eraD2tf: _eraD2tf, _eraNutm80: _eraNutm80, _eraGst00b: _eraGst00b, _eraGst00a: _eraGst00a, _eraBp06: _eraBp06, _eraBi00: _eraBi00, _eraBp00: _eraBp00, _eraSxp: _eraSxp, _eraUtcut1: _eraUtcut1, _eraRxp: _eraRxp, _eraPmp: _eraPmp, _eraRxr: _eraRxr, _eraS2p: _eraS2p, _eraApio13: _eraApio13, _eraC2ixy: _eraC2ixy, _eraP06e: _eraP06e, _eraAnp: _eraAnp, _eraPnm00b: _eraPnm00b, _eraSp00: _eraSp00, _eraTaitt: _eraTaitt, _eraPn06: _eraPn06, _eraXys00a: _eraXys00a, _eraXys00b: _eraXys00b, _eraPn06a: _eraPn06a, _eraNum06a: _eraNum06a, _eraTr: _eraTr, _eraC2s: _eraC2s, _eraApci13: _eraApci13, _eraAb: _eraAb, _eraAtciq: _eraAtciq, _eraPv2p: _eraPv2p, _eraA2tf: _eraA2tf, _eraLd: _eraLd, _eraJdcalf: _eraJdcalf, _eraUt1tai: _eraUt1tai, _eraEpj: _eraEpj, _eraTdbtt: _eraTdbtt, _eraPlan94: _eraPlan94, _eraXy06: _eraXy06, _eraC2t00b: _eraC2t00b, _eraEpb: _eraEpb, _eraC2t00a: _eraC2t00a, _eraGst94: _eraGst94, _eraAtic13: _eraAtic13, _eraRxpv: _eraRxpv, _fflush: _fflush, _eraStarpm: _eraStarpm, _eraFae03: _eraFae03, _eraLdn: _eraLdn, _eraPfw06: _eraPfw06, _eraEe00: _eraEe00, _eraAnpm: _eraAnpm, _eraAper: _eraAper, _eraEo06a: _eraEo06a, _eraTcbtdb: _eraTcbtdb, _eraIr: _eraIr, _eraH2fk5: _eraH2fk5, _eraAtci13: _eraAtci13, _bitshift64Shl: _bitshift64Shl, _eraNut80: _eraNut80, _eraEe06a: _eraEe06a, _eraEform: _eraEform, _eraJd2cal: _eraJd2cal, _eraTttcg: _eraTttcg, _eraPnm80: _eraPnm80, _eraFw2xy: _eraFw2xy, _eraFaom03: _eraFaom03, _eraGmst82: _eraGmst82, _eraGst06a: _eraGst06a, _eraFane03: _eraFane03, _eraRx: _eraRx, _eraD2dtf: _eraD2dtf, _eraGc2gd: _eraGc2gd, _eraPvxpv: _eraPvxpv, ___errno_location: ___errno_location, _eraSepp: _eraSepp, _eraAtco13: _eraAtco13, _eraAtoiq: _eraAtoiq, _memcpy: _memcpy, _eraPrec76: _eraPrec76, _eraPmpx: _eraPmpx, _eraAtio13: _eraAtio13, _eraPnm00a: _eraPnm00a, _eraFasa03: _eraFasa03, _eraC2teqx: _eraC2teqx, _eraFw2m: _eraFw2m, _eraRv2m: _eraRv2m, _eraEra00: _eraEra00, _eraPvstar: _eraPvstar, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_ii: dynCall_ii, dynCall_iiii: dynCall_iiii, dynCall_vi: dynCall_vi };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__eraS00b = asm["_eraS00b"]; asm["_eraS00b"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraS00b.apply(null, arguments);
};

var real__eraS00a = asm["_eraS00a"]; asm["_eraS00a"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraS00a.apply(null, arguments);
};

var real__eraC2i06a = asm["_eraC2i06a"]; asm["_eraC2i06a"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraC2i06a.apply(null, arguments);
};

var real__eraPn00b = asm["_eraPn00b"]; asm["_eraPn00b"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraPn00b.apply(null, arguments);
};

var real__eraFaju03 = asm["_eraFaju03"]; asm["_eraFaju03"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraFaju03.apply(null, arguments);
};

var real__eraPn00a = asm["_eraPn00a"]; asm["_eraPn00a"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraPn00a.apply(null, arguments);
};

var real__eraApco13 = asm["_eraApco13"]; asm["_eraApco13"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraApco13.apply(null, arguments);
};

var real__eraPvdpv = asm["_eraPvdpv"]; asm["_eraPvdpv"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraPvdpv.apply(null, arguments);
};

var real__eraFave03 = asm["_eraFave03"]; asm["_eraFave03"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraFave03.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__eraP2s = asm["_eraP2s"]; asm["_eraP2s"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraP2s.apply(null, arguments);
};

var real__eraCp = asm["_eraCp"]; asm["_eraCp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraCp.apply(null, arguments);
};

var real__eraCr = asm["_eraCr"]; asm["_eraCr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraCr.apply(null, arguments);
};

var real__eraXys00a = asm["_eraXys00a"]; asm["_eraXys00a"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraXys00a.apply(null, arguments);
};

var real__eraApcg13 = asm["_eraApcg13"]; asm["_eraApcg13"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraApcg13.apply(null, arguments);
};

var real__eraIcrs2g = asm["_eraIcrs2g"]; asm["_eraIcrs2g"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraIcrs2g.apply(null, arguments);
};

var real__eraUt1utc = asm["_eraUt1utc"]; asm["_eraUt1utc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraUt1utc.apply(null, arguments);
};

var real__eraPpsp = asm["_eraPpsp"]; asm["_eraPpsp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraPpsp.apply(null, arguments);
};

var real__eraFad03 = asm["_eraFad03"]; asm["_eraFad03"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraFad03.apply(null, arguments);
};

var real__eraGmst00 = asm["_eraGmst00"]; asm["_eraGmst00"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraGmst00.apply(null, arguments);
};

var real__eraAtciq = asm["_eraAtciq"]; asm["_eraAtciq"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraAtciq.apply(null, arguments);
};

var real__eraZp = asm["_eraZp"]; asm["_eraZp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraZp.apply(null, arguments);
};

var real__eraGmst06 = asm["_eraGmst06"]; asm["_eraGmst06"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraGmst06.apply(null, arguments);
};

var real__eraPxp = asm["_eraPxp"]; asm["_eraPxp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraPxp.apply(null, arguments);
};

var real__eraHfk5z = asm["_eraHfk5z"]; asm["_eraHfk5z"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraHfk5z.apply(null, arguments);
};

var real__eraRefco = asm["_eraRefco"]; asm["_eraRefco"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraRefco.apply(null, arguments);
};

var real__eraPn = asm["_eraPn"]; asm["_eraPn"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraPn.apply(null, arguments);
};

var real__eraC2ixys = asm["_eraC2ixys"]; asm["_eraC2ixys"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraC2ixys.apply(null, arguments);
};

var real__eraPpp = asm["_eraPpp"]; asm["_eraPpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraPpp.apply(null, arguments);
};

var real__eraEe00b = asm["_eraEe00b"]; asm["_eraEe00b"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraEe00b.apply(null, arguments);
};

var real__eraEe00a = asm["_eraEe00a"]; asm["_eraEe00a"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraEe00a.apply(null, arguments);
};

var real__eraApcs13 = asm["_eraApcs13"]; asm["_eraApcs13"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraApcs13.apply(null, arguments);
};

var real__eraS00 = asm["_eraS00"]; asm["_eraS00"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraS00.apply(null, arguments);
};

var real__eraFk5hip = asm["_eraFk5hip"]; asm["_eraFk5hip"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraFk5hip.apply(null, arguments);
};

var real__eraTttai = asm["_eraTttai"]; asm["_eraTttai"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraTttai.apply(null, arguments);
};

var real__eraS06 = asm["_eraS06"]; asm["_eraS06"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraS06.apply(null, arguments);
};

var real__eraFaom03 = asm["_eraFaom03"]; asm["_eraFaom03"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraFaom03.apply(null, arguments);
};

var real__eraC2txy = asm["_eraC2txy"]; asm["_eraC2txy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraC2txy.apply(null, arguments);
};

var real__eraPap = asm["_eraPap"]; asm["_eraPap"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraPap.apply(null, arguments);
};

var real__eraPas = asm["_eraPas"]; asm["_eraPas"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraPas.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__eraC2tpe = asm["_eraC2tpe"]; asm["_eraC2tpe"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraC2tpe.apply(null, arguments);
};

var real__eraP2pv = asm["_eraP2pv"]; asm["_eraP2pv"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraP2pv.apply(null, arguments);
};

var real__eraPvppv = asm["_eraPvppv"]; asm["_eraPvppv"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraPvppv.apply(null, arguments);
};

var real__eraNut80 = asm["_eraNut80"]; asm["_eraNut80"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraNut80.apply(null, arguments);
};

var real__eraNum00a = asm["_eraNum00a"]; asm["_eraNum00a"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraNum00a.apply(null, arguments);
};

var real__eraEra00 = asm["_eraEra00"]; asm["_eraEra00"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraEra00.apply(null, arguments);
};

var real__eraNum00b = asm["_eraNum00b"]; asm["_eraNum00b"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraNum00b.apply(null, arguments);
};

var real__eraTf2d = asm["_eraTf2d"]; asm["_eraTf2d"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraTf2d.apply(null, arguments);
};

var real__eraTf2a = asm["_eraTf2a"]; asm["_eraTf2a"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraTf2a.apply(null, arguments);
};

var real__eraAnp = asm["_eraAnp"]; asm["_eraAnp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraAnp.apply(null, arguments);
};

var real__eraZr = asm["_eraZr"]; asm["_eraZr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraZr.apply(null, arguments);
};

var real__eraPvup = asm["_eraPvup"]; asm["_eraPvup"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraPvup.apply(null, arguments);
};

var real__eraAticqn = asm["_eraAticqn"]; asm["_eraAticqn"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraAticqn.apply(null, arguments);
};

var real__eraAtoi13 = asm["_eraAtoi13"]; asm["_eraAtoi13"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraAtoi13.apply(null, arguments);
};

var real__eraFama03 = asm["_eraFama03"]; asm["_eraFama03"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraFama03.apply(null, arguments);
};

var real__eraEect00 = asm["_eraEect00"]; asm["_eraEect00"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraEect00.apply(null, arguments);
};

var real__eraTaiutc = asm["_eraTaiutc"]; asm["_eraTaiutc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraTaiutc.apply(null, arguments);
};

var real__eraA2af = asm["_eraA2af"]; asm["_eraA2af"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraA2af.apply(null, arguments);
};

var real__eraFk5hz = asm["_eraFk5hz"]; asm["_eraFk5hz"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraFk5hz.apply(null, arguments);
};

var real__eraPmat00 = asm["_eraPmat00"]; asm["_eraPmat00"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraPmat00.apply(null, arguments);
};

var real__eraPmat06 = asm["_eraPmat06"]; asm["_eraPmat06"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraPmat06.apply(null, arguments);
};

var real__eraObl80 = asm["_eraObl80"]; asm["_eraObl80"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraObl80.apply(null, arguments);
};

var real__eraLdsun = asm["_eraLdsun"]; asm["_eraLdsun"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraLdsun.apply(null, arguments);
};

var real__eraEform = asm["_eraEform"]; asm["_eraEform"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraEform.apply(null, arguments);
};

var real__eraAtioq = asm["_eraAtioq"]; asm["_eraAtioq"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraAtioq.apply(null, arguments);
};

var real__eraPvtob = asm["_eraPvtob"]; asm["_eraPvtob"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraPvtob.apply(null, arguments);
};

var real__eraRm2v = asm["_eraRm2v"]; asm["_eraRm2v"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraRm2v.apply(null, arguments);
};

var real__eraNut06a = asm["_eraNut06a"]; asm["_eraNut06a"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraNut06a.apply(null, arguments);
};

var real__eraDat = asm["_eraDat"]; asm["_eraDat"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraDat.apply(null, arguments);
};

var real__eraRz = asm["_eraRz"]; asm["_eraRz"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraRz.apply(null, arguments);
};

var real__eraRy = asm["_eraRy"]; asm["_eraRy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraRy.apply(null, arguments);
};

var real__eraPmsafe = asm["_eraPmsafe"]; asm["_eraPmsafe"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraPmsafe.apply(null, arguments);
};

var real__eraPr00 = asm["_eraPr00"]; asm["_eraPr00"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraPr00.apply(null, arguments);
};

var real__eraAtciqn = asm["_eraAtciqn"]; asm["_eraAtciqn"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraAtciqn.apply(null, arguments);
};

var real__eraFaur03 = asm["_eraFaur03"]; asm["_eraFaur03"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraFaur03.apply(null, arguments);
};

var real__eraObl06 = asm["_eraObl06"]; asm["_eraObl06"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraObl06.apply(null, arguments);
};

var real__eraC2i00a = asm["_eraC2i00a"]; asm["_eraC2i00a"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraC2i00a.apply(null, arguments);
};

var real__eraS06a = asm["_eraS06a"]; asm["_eraS06a"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraS06a.apply(null, arguments);
};

var real__eraC2i00b = asm["_eraC2i00b"]; asm["_eraC2i00b"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraC2i00b.apply(null, arguments);
};

var real__eraEpb2jd = asm["_eraEpb2jd"]; asm["_eraEpb2jd"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraEpb2jd.apply(null, arguments);
};

var real__eraAper13 = asm["_eraAper13"]; asm["_eraAper13"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraAper13.apply(null, arguments);
};

var real__eraFk52h = asm["_eraFk52h"]; asm["_eraFk52h"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraFk52h.apply(null, arguments);
};

var real__eraFame03 = asm["_eraFame03"]; asm["_eraFame03"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraFame03.apply(null, arguments);
};

var real__eraPvxpv = asm["_eraPvxpv"]; asm["_eraPvxpv"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraPvxpv.apply(null, arguments);
};

var real__eraGmst82 = asm["_eraGmst82"]; asm["_eraGmst82"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraGmst82.apply(null, arguments);
};

var real__eraCpv = asm["_eraCpv"]; asm["_eraCpv"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraCpv.apply(null, arguments);
};

var real__eraGst06 = asm["_eraGst06"]; asm["_eraGst06"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraGst06.apply(null, arguments);
};

var real__eraAtciqz = asm["_eraAtciqz"]; asm["_eraAtciqz"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraAtciqz.apply(null, arguments);
};

var real__eraXys06a = asm["_eraXys06a"]; asm["_eraXys06a"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraXys06a.apply(null, arguments);
};

var real__eraStarpv = asm["_eraStarpv"]; asm["_eraStarpv"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraStarpv.apply(null, arguments);
};

var real__eraPmat76 = asm["_eraPmat76"]; asm["_eraPmat76"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraPmat76.apply(null, arguments);
};

var real__eraPvm = asm["_eraPvm"]; asm["_eraPvm"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraPvm.apply(null, arguments);
};

var real__eraEo06a = asm["_eraEo06a"]; asm["_eraEo06a"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraEo06a.apply(null, arguments);
};

var real__eraCal2jd = asm["_eraCal2jd"]; asm["_eraCal2jd"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraCal2jd.apply(null, arguments);
};

var real__eraTaiut1 = asm["_eraTaiut1"]; asm["_eraTaiut1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraTaiut1.apply(null, arguments);
};

var real__eraAtoc13 = asm["_eraAtoc13"]; asm["_eraAtoc13"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraAtoc13.apply(null, arguments);
};

var real__eraEpj2jd = asm["_eraEpj2jd"]; asm["_eraEpj2jd"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraEpj2jd.apply(null, arguments);
};

var real__eraFw2xy = asm["_eraFw2xy"]; asm["_eraFw2xy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraFw2xy.apply(null, arguments);
};

var real__eraApcs = asm["_eraApcs"]; asm["_eraApcs"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraApcs.apply(null, arguments);
};

var real__eraS2pv = asm["_eraS2pv"]; asm["_eraS2pv"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraS2pv.apply(null, arguments);
};

var real__eraPvu = asm["_eraPvu"]; asm["_eraPvu"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraPvu.apply(null, arguments);
};

var real__eraC2s = asm["_eraC2s"]; asm["_eraC2s"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraC2s.apply(null, arguments);
};

var real__eraTdbtcb = asm["_eraTdbtcb"]; asm["_eraTdbtcb"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraTdbtcb.apply(null, arguments);
};

var real__eraAf2a = asm["_eraAf2a"]; asm["_eraAf2a"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraAf2a.apply(null, arguments);
};

var real__eraEpv00 = asm["_eraEpv00"]; asm["_eraEpv00"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraEpv00.apply(null, arguments);
};

var real__eraGc2gde = asm["_eraGc2gde"]; asm["_eraGc2gde"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraGc2gde.apply(null, arguments);
};

var real__eraFaf03 = asm["_eraFaf03"]; asm["_eraFaf03"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraFaf03.apply(null, arguments);
};

var real__eraFalp03 = asm["_eraFalp03"]; asm["_eraFalp03"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraFalp03.apply(null, arguments);
};

var real__eraEors = asm["_eraEors"]; asm["_eraEors"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraEors.apply(null, arguments);
};

var real__eraTrxp = asm["_eraTrxp"]; asm["_eraTrxp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraTrxp.apply(null, arguments);
};

var real__eraPom00 = asm["_eraPom00"]; asm["_eraPom00"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraPom00.apply(null, arguments);
};

var real__eraC2t06a = asm["_eraC2t06a"]; asm["_eraC2t06a"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraC2t06a.apply(null, arguments);
};

var real__eraNut00b = asm["_eraNut00b"]; asm["_eraNut00b"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraNut00b.apply(null, arguments);
};

var real__eraNut00a = asm["_eraNut00a"]; asm["_eraNut00a"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraNut00a.apply(null, arguments);
};

var real__eraRv2m = asm["_eraRv2m"]; asm["_eraRv2m"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraRv2m.apply(null, arguments);
};

var real__eraFapa03 = asm["_eraFapa03"]; asm["_eraFapa03"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraFapa03.apply(null, arguments);
};

var real__eraDtdb = asm["_eraDtdb"]; asm["_eraDtdb"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraDtdb.apply(null, arguments);
};

var real__eraPdp = asm["_eraPdp"]; asm["_eraPdp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraPdp.apply(null, arguments);
};

var real__eraTttdb = asm["_eraTttdb"]; asm["_eraTttdb"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraTttdb.apply(null, arguments);
};

var real__eraPnm06a = asm["_eraPnm06a"]; asm["_eraPnm06a"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraPnm06a.apply(null, arguments);
};

var real__eraC2tcio = asm["_eraC2tcio"]; asm["_eraC2tcio"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraC2tcio.apply(null, arguments);
};

var real__eraG2icrs = asm["_eraG2icrs"]; asm["_eraG2icrs"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraG2icrs.apply(null, arguments);
};

var real__eraTrxpv = asm["_eraTrxpv"]; asm["_eraTrxpv"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraTrxpv.apply(null, arguments);
};

var real__eraFal03 = asm["_eraFal03"]; asm["_eraFal03"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraFal03.apply(null, arguments);
};

var real__eraSeps = asm["_eraSeps"]; asm["_eraSeps"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraSeps.apply(null, arguments);
};

var real__eraBpn2xy = asm["_eraBpn2xy"]; asm["_eraBpn2xy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraBpn2xy.apply(null, arguments);
};

var real__eraZpv = asm["_eraZpv"]; asm["_eraZpv"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraZpv.apply(null, arguments);
};

var real__eraPm = asm["_eraPm"]; asm["_eraPm"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraPm.apply(null, arguments);
};

var real__eraPvmpv = asm["_eraPvmpv"]; asm["_eraPvmpv"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraPvmpv.apply(null, arguments);
};

var real__eraApcg = asm["_eraApcg"]; asm["_eraApcg"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraApcg.apply(null, arguments);
};

var real__eraGd2gc = asm["_eraGd2gc"]; asm["_eraGd2gc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraGd2gc.apply(null, arguments);
};

var real__eraDtf2d = asm["_eraDtf2d"]; asm["_eraDtf2d"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraDtf2d.apply(null, arguments);
};

var real__eraUtctai = asm["_eraUtctai"]; asm["_eraUtctai"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraUtctai.apply(null, arguments);
};

var real__eraApco = asm["_eraApco"]; asm["_eraApco"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraApco.apply(null, arguments);
};

var real__eraApci = asm["_eraApci"]; asm["_eraApci"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraApci.apply(null, arguments);
};

var real__eraC2ibpn = asm["_eraC2ibpn"]; asm["_eraC2ibpn"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraC2ibpn.apply(null, arguments);
};

var real__eraS2xpv = asm["_eraS2xpv"]; asm["_eraS2xpv"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraS2xpv.apply(null, arguments);
};

var real__eraGd2gce = asm["_eraGd2gce"]; asm["_eraGd2gce"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraGd2gce.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__eraD2tf = asm["_eraD2tf"]; asm["_eraD2tf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraD2tf.apply(null, arguments);
};

var real__eraNutm80 = asm["_eraNutm80"]; asm["_eraNutm80"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraNutm80.apply(null, arguments);
};

var real__eraGst00b = asm["_eraGst00b"]; asm["_eraGst00b"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraGst00b.apply(null, arguments);
};

var real__eraGst00a = asm["_eraGst00a"]; asm["_eraGst00a"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraGst00a.apply(null, arguments);
};

var real__eraBp06 = asm["_eraBp06"]; asm["_eraBp06"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraBp06.apply(null, arguments);
};

var real__eraUt1tt = asm["_eraUt1tt"]; asm["_eraUt1tt"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraUt1tt.apply(null, arguments);
};

var real__eraBp00 = asm["_eraBp00"]; asm["_eraBp00"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraBp00.apply(null, arguments);
};

var real__eraSxp = asm["_eraSxp"]; asm["_eraSxp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraSxp.apply(null, arguments);
};

var real__eraUtcut1 = asm["_eraUtcut1"]; asm["_eraUtcut1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraUtcut1.apply(null, arguments);
};

var real__eraRxp = asm["_eraRxp"]; asm["_eraRxp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraRxp.apply(null, arguments);
};

var real__eraPmp = asm["_eraPmp"]; asm["_eraPmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraPmp.apply(null, arguments);
};

var real__eraRxr = asm["_eraRxr"]; asm["_eraRxr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraRxr.apply(null, arguments);
};

var real__eraApio13 = asm["_eraApio13"]; asm["_eraApio13"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraApio13.apply(null, arguments);
};

var real__eraC2ixy = asm["_eraC2ixy"]; asm["_eraC2ixy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraC2ixy.apply(null, arguments);
};

var real__eraP06e = asm["_eraP06e"]; asm["_eraP06e"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraP06e.apply(null, arguments);
};

var real__eraPn00 = asm["_eraPn00"]; asm["_eraPn00"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraPn00.apply(null, arguments);
};

var real__eraPnm00b = asm["_eraPnm00b"]; asm["_eraPnm00b"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraPnm00b.apply(null, arguments);
};

var real__eraSp00 = asm["_eraSp00"]; asm["_eraSp00"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraSp00.apply(null, arguments);
};

var real__eraTaitt = asm["_eraTaitt"]; asm["_eraTaitt"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraTaitt.apply(null, arguments);
};

var real__eraPn06 = asm["_eraPn06"]; asm["_eraPn06"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraPn06.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__eraXys00b = asm["_eraXys00b"]; asm["_eraXys00b"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraXys00b.apply(null, arguments);
};

var real__eraTr = asm["_eraTr"]; asm["_eraTr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraTr.apply(null, arguments);
};

var real__eraTtut1 = asm["_eraTtut1"]; asm["_eraTtut1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraTtut1.apply(null, arguments);
};

var real__eraApci13 = asm["_eraApci13"]; asm["_eraApci13"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraApci13.apply(null, arguments);
};

var real__eraAticq = asm["_eraAticq"]; asm["_eraAticq"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraAticq.apply(null, arguments);
};

var real__eraPv2s = asm["_eraPv2s"]; asm["_eraPv2s"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraPv2s.apply(null, arguments);
};

var real__eraPv2p = asm["_eraPv2p"]; asm["_eraPv2p"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraPv2p.apply(null, arguments);
};

var real__eraA2tf = asm["_eraA2tf"]; asm["_eraA2tf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraA2tf.apply(null, arguments);
};

var real__eraAtoiq = asm["_eraAtoiq"]; asm["_eraAtoiq"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraAtoiq.apply(null, arguments);
};

var real__eraS2p = asm["_eraS2p"]; asm["_eraS2p"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraS2p.apply(null, arguments);
};

var real__eraJdcalf = asm["_eraJdcalf"]; asm["_eraJdcalf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraJdcalf.apply(null, arguments);
};

var real__eraUt1tai = asm["_eraUt1tai"]; asm["_eraUt1tai"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraUt1tai.apply(null, arguments);
};

var real__eraEpj = asm["_eraEpj"]; asm["_eraEpj"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraEpj.apply(null, arguments);
};

var real__eraTdbtt = asm["_eraTdbtt"]; asm["_eraTdbtt"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraTdbtt.apply(null, arguments);
};

var real__eraPlan94 = asm["_eraPlan94"]; asm["_eraPlan94"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraPlan94.apply(null, arguments);
};

var real__eraXy06 = asm["_eraXy06"]; asm["_eraXy06"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraXy06.apply(null, arguments);
};

var real__eraS2c = asm["_eraS2c"]; asm["_eraS2c"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraS2c.apply(null, arguments);
};

var real__eraPn06a = asm["_eraPn06a"]; asm["_eraPn06a"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraPn06a.apply(null, arguments);
};

var real__eraC2t00a = asm["_eraC2t00a"]; asm["_eraC2t00a"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraC2t00a.apply(null, arguments);
};

var real__eraGst94 = asm["_eraGst94"]; asm["_eraGst94"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraGst94.apply(null, arguments);
};

var real__eraAtic13 = asm["_eraAtic13"]; asm["_eraAtic13"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraAtic13.apply(null, arguments);
};

var real__eraRxpv = asm["_eraRxpv"]; asm["_eraRxpv"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraRxpv.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real__eraFae03 = asm["_eraFae03"]; asm["_eraFae03"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraFae03.apply(null, arguments);
};

var real__eraFasa03 = asm["_eraFasa03"]; asm["_eraFasa03"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraFasa03.apply(null, arguments);
};

var real__eraC2t00b = asm["_eraC2t00b"]; asm["_eraC2t00b"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraC2t00b.apply(null, arguments);
};

var real__eraPfw06 = asm["_eraPfw06"]; asm["_eraPfw06"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraPfw06.apply(null, arguments);
};

var real__eraEe00 = asm["_eraEe00"]; asm["_eraEe00"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraEe00.apply(null, arguments);
};

var real__eraEpb = asm["_eraEpb"]; asm["_eraEpb"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraEpb.apply(null, arguments);
};

var real__eraAper = asm["_eraAper"]; asm["_eraAper"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraAper.apply(null, arguments);
};

var real__eraAb = asm["_eraAb"]; asm["_eraAb"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraAb.apply(null, arguments);
};

var real__eraPb06 = asm["_eraPb06"]; asm["_eraPb06"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraPb06.apply(null, arguments);
};

var real__eraAnpm = asm["_eraAnpm"]; asm["_eraAnpm"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraAnpm.apply(null, arguments);
};

var real__eraTcbtdb = asm["_eraTcbtdb"]; asm["_eraTcbtdb"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraTcbtdb.apply(null, arguments);
};

var real__eraIr = asm["_eraIr"]; asm["_eraIr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraIr.apply(null, arguments);
};

var real__eraC2teqx = asm["_eraC2teqx"]; asm["_eraC2teqx"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraC2teqx.apply(null, arguments);
};

var real__eraAtci13 = asm["_eraAtci13"]; asm["_eraAtci13"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraAtci13.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real__eraEe06a = asm["_eraEe06a"]; asm["_eraEe06a"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraEe06a.apply(null, arguments);
};

var real__eraNumat = asm["_eraNumat"]; asm["_eraNumat"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraNumat.apply(null, arguments);
};

var real__eraJd2cal = asm["_eraJd2cal"]; asm["_eraJd2cal"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraJd2cal.apply(null, arguments);
};

var real__eraTttcg = asm["_eraTttcg"]; asm["_eraTttcg"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraTttcg.apply(null, arguments);
};

var real__eraPnm80 = asm["_eraPnm80"]; asm["_eraPnm80"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraPnm80.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__eraBi00 = asm["_eraBi00"]; asm["_eraBi00"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraBi00.apply(null, arguments);
};

var real__eraTcgtt = asm["_eraTcgtt"]; asm["_eraTcgtt"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraTcgtt.apply(null, arguments);
};

var real__eraGst06a = asm["_eraGst06a"]; asm["_eraGst06a"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraGst06a.apply(null, arguments);
};

var real__eraLd = asm["_eraLd"]; asm["_eraLd"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraLd.apply(null, arguments);
};

var real__eraFane03 = asm["_eraFane03"]; asm["_eraFane03"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraFane03.apply(null, arguments);
};

var real__eraRx = asm["_eraRx"]; asm["_eraRx"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraRx.apply(null, arguments);
};

var real__eraD2dtf = asm["_eraD2dtf"]; asm["_eraD2dtf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraD2dtf.apply(null, arguments);
};

var real__eraGc2gd = asm["_eraGc2gd"]; asm["_eraGc2gd"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraGc2gd.apply(null, arguments);
};

var real__eraApio = asm["_eraApio"]; asm["_eraApio"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraApio.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real__eraSepp = asm["_eraSepp"]; asm["_eraSepp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraSepp.apply(null, arguments);
};

var real__eraAtco13 = asm["_eraAtco13"]; asm["_eraAtco13"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraAtco13.apply(null, arguments);
};

var real__eraStarpm = asm["_eraStarpm"]; asm["_eraStarpm"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraStarpm.apply(null, arguments);
};

var real__eraPrec76 = asm["_eraPrec76"]; asm["_eraPrec76"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraPrec76.apply(null, arguments);
};

var real__eraPmpx = asm["_eraPmpx"]; asm["_eraPmpx"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraPmpx.apply(null, arguments);
};

var real__eraAtio13 = asm["_eraAtio13"]; asm["_eraAtio13"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraAtio13.apply(null, arguments);
};

var real__eraPnm00a = asm["_eraPnm00a"]; asm["_eraPnm00a"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraPnm00a.apply(null, arguments);
};

var real__eraLdn = asm["_eraLdn"]; asm["_eraLdn"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraLdn.apply(null, arguments);
};

var real__eraEqeq94 = asm["_eraEqeq94"]; asm["_eraEqeq94"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraEqeq94.apply(null, arguments);
};

var real__eraH2fk5 = asm["_eraH2fk5"]; asm["_eraH2fk5"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraH2fk5.apply(null, arguments);
};

var real__eraFw2m = asm["_eraFw2m"]; asm["_eraFw2m"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraFw2m.apply(null, arguments);
};

var real__eraSxpv = asm["_eraSxpv"]; asm["_eraSxpv"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraSxpv.apply(null, arguments);
};

var real__eraNum06a = asm["_eraNum06a"]; asm["_eraNum06a"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraNum06a.apply(null, arguments);
};

var real__eraPvstar = asm["_eraPvstar"]; asm["_eraPvstar"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__eraPvstar.apply(null, arguments);
};
var _eraS00b = Module["_eraS00b"] = asm["_eraS00b"];
var _eraS00a = Module["_eraS00a"] = asm["_eraS00a"];
var _eraC2i06a = Module["_eraC2i06a"] = asm["_eraC2i06a"];
var _eraPn00b = Module["_eraPn00b"] = asm["_eraPn00b"];
var _eraFaju03 = Module["_eraFaju03"] = asm["_eraFaju03"];
var _eraPn00a = Module["_eraPn00a"] = asm["_eraPn00a"];
var _eraApco13 = Module["_eraApco13"] = asm["_eraApco13"];
var _eraPvdpv = Module["_eraPvdpv"] = asm["_eraPvdpv"];
var _eraFave03 = Module["_eraFave03"] = asm["_eraFave03"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _eraP2s = Module["_eraP2s"] = asm["_eraP2s"];
var _eraCp = Module["_eraCp"] = asm["_eraCp"];
var _eraCr = Module["_eraCr"] = asm["_eraCr"];
var _eraXys00a = Module["_eraXys00a"] = asm["_eraXys00a"];
var _eraApcg13 = Module["_eraApcg13"] = asm["_eraApcg13"];
var _eraIcrs2g = Module["_eraIcrs2g"] = asm["_eraIcrs2g"];
var _eraUt1utc = Module["_eraUt1utc"] = asm["_eraUt1utc"];
var _eraPpsp = Module["_eraPpsp"] = asm["_eraPpsp"];
var _eraFad03 = Module["_eraFad03"] = asm["_eraFad03"];
var _eraGmst00 = Module["_eraGmst00"] = asm["_eraGmst00"];
var _eraAtciq = Module["_eraAtciq"] = asm["_eraAtciq"];
var _eraZp = Module["_eraZp"] = asm["_eraZp"];
var _eraGmst06 = Module["_eraGmst06"] = asm["_eraGmst06"];
var _eraPxp = Module["_eraPxp"] = asm["_eraPxp"];
var _eraHfk5z = Module["_eraHfk5z"] = asm["_eraHfk5z"];
var _eraRefco = Module["_eraRefco"] = asm["_eraRefco"];
var _eraPn = Module["_eraPn"] = asm["_eraPn"];
var _eraC2ixys = Module["_eraC2ixys"] = asm["_eraC2ixys"];
var _eraPpp = Module["_eraPpp"] = asm["_eraPpp"];
var _eraEe00b = Module["_eraEe00b"] = asm["_eraEe00b"];
var _eraEe00a = Module["_eraEe00a"] = asm["_eraEe00a"];
var _eraApcs13 = Module["_eraApcs13"] = asm["_eraApcs13"];
var _eraS00 = Module["_eraS00"] = asm["_eraS00"];
var _eraFk5hip = Module["_eraFk5hip"] = asm["_eraFk5hip"];
var _eraTttai = Module["_eraTttai"] = asm["_eraTttai"];
var _eraS06 = Module["_eraS06"] = asm["_eraS06"];
var _eraFaom03 = Module["_eraFaom03"] = asm["_eraFaom03"];
var _eraC2txy = Module["_eraC2txy"] = asm["_eraC2txy"];
var _eraPap = Module["_eraPap"] = asm["_eraPap"];
var _eraPas = Module["_eraPas"] = asm["_eraPas"];
var _free = Module["_free"] = asm["_free"];
var _eraC2tpe = Module["_eraC2tpe"] = asm["_eraC2tpe"];
var _eraP2pv = Module["_eraP2pv"] = asm["_eraP2pv"];
var _eraPvppv = Module["_eraPvppv"] = asm["_eraPvppv"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _eraNut80 = Module["_eraNut80"] = asm["_eraNut80"];
var _eraNum00a = Module["_eraNum00a"] = asm["_eraNum00a"];
var _eraEra00 = Module["_eraEra00"] = asm["_eraEra00"];
var _eraNum00b = Module["_eraNum00b"] = asm["_eraNum00b"];
var _eraTf2d = Module["_eraTf2d"] = asm["_eraTf2d"];
var _eraTf2a = Module["_eraTf2a"] = asm["_eraTf2a"];
var _eraAnp = Module["_eraAnp"] = asm["_eraAnp"];
var _eraZr = Module["_eraZr"] = asm["_eraZr"];
var _eraPvup = Module["_eraPvup"] = asm["_eraPvup"];
var _eraAticqn = Module["_eraAticqn"] = asm["_eraAticqn"];
var _eraAtoi13 = Module["_eraAtoi13"] = asm["_eraAtoi13"];
var _eraFama03 = Module["_eraFama03"] = asm["_eraFama03"];
var _eraEect00 = Module["_eraEect00"] = asm["_eraEect00"];
var _eraTaiutc = Module["_eraTaiutc"] = asm["_eraTaiutc"];
var _eraA2af = Module["_eraA2af"] = asm["_eraA2af"];
var _eraFk5hz = Module["_eraFk5hz"] = asm["_eraFk5hz"];
var _eraPmat00 = Module["_eraPmat00"] = asm["_eraPmat00"];
var _eraPmat06 = Module["_eraPmat06"] = asm["_eraPmat06"];
var _eraObl80 = Module["_eraObl80"] = asm["_eraObl80"];
var _eraLdsun = Module["_eraLdsun"] = asm["_eraLdsun"];
var _eraEform = Module["_eraEform"] = asm["_eraEform"];
var _eraAtioq = Module["_eraAtioq"] = asm["_eraAtioq"];
var _eraPvtob = Module["_eraPvtob"] = asm["_eraPvtob"];
var _eraRm2v = Module["_eraRm2v"] = asm["_eraRm2v"];
var _eraNut06a = Module["_eraNut06a"] = asm["_eraNut06a"];
var _eraDat = Module["_eraDat"] = asm["_eraDat"];
var _eraRz = Module["_eraRz"] = asm["_eraRz"];
var _eraRy = Module["_eraRy"] = asm["_eraRy"];
var _eraPmsafe = Module["_eraPmsafe"] = asm["_eraPmsafe"];
var _eraPr00 = Module["_eraPr00"] = asm["_eraPr00"];
var _eraAtciqn = Module["_eraAtciqn"] = asm["_eraAtciqn"];
var _eraFaur03 = Module["_eraFaur03"] = asm["_eraFaur03"];
var _eraObl06 = Module["_eraObl06"] = asm["_eraObl06"];
var _eraC2i00a = Module["_eraC2i00a"] = asm["_eraC2i00a"];
var _eraS06a = Module["_eraS06a"] = asm["_eraS06a"];
var _eraC2i00b = Module["_eraC2i00b"] = asm["_eraC2i00b"];
var _eraEpb2jd = Module["_eraEpb2jd"] = asm["_eraEpb2jd"];
var _eraAper13 = Module["_eraAper13"] = asm["_eraAper13"];
var _eraFk52h = Module["_eraFk52h"] = asm["_eraFk52h"];
var _eraFame03 = Module["_eraFame03"] = asm["_eraFame03"];
var _eraPvxpv = Module["_eraPvxpv"] = asm["_eraPvxpv"];
var _eraGmst82 = Module["_eraGmst82"] = asm["_eraGmst82"];
var _eraCpv = Module["_eraCpv"] = asm["_eraCpv"];
var _eraGst06 = Module["_eraGst06"] = asm["_eraGst06"];
var _eraAtciqz = Module["_eraAtciqz"] = asm["_eraAtciqz"];
var _eraXys06a = Module["_eraXys06a"] = asm["_eraXys06a"];
var _eraStarpv = Module["_eraStarpv"] = asm["_eraStarpv"];
var _eraPmat76 = Module["_eraPmat76"] = asm["_eraPmat76"];
var _eraPvm = Module["_eraPvm"] = asm["_eraPvm"];
var _eraEo06a = Module["_eraEo06a"] = asm["_eraEo06a"];
var _eraCal2jd = Module["_eraCal2jd"] = asm["_eraCal2jd"];
var _eraTaiut1 = Module["_eraTaiut1"] = asm["_eraTaiut1"];
var _eraAtoc13 = Module["_eraAtoc13"] = asm["_eraAtoc13"];
var _eraEpj2jd = Module["_eraEpj2jd"] = asm["_eraEpj2jd"];
var _eraFw2xy = Module["_eraFw2xy"] = asm["_eraFw2xy"];
var _eraApcs = Module["_eraApcs"] = asm["_eraApcs"];
var _eraS2pv = Module["_eraS2pv"] = asm["_eraS2pv"];
var _eraPvu = Module["_eraPvu"] = asm["_eraPvu"];
var _eraC2s = Module["_eraC2s"] = asm["_eraC2s"];
var _eraTdbtcb = Module["_eraTdbtcb"] = asm["_eraTdbtcb"];
var _eraAf2a = Module["_eraAf2a"] = asm["_eraAf2a"];
var _eraEpv00 = Module["_eraEpv00"] = asm["_eraEpv00"];
var _eraGc2gde = Module["_eraGc2gde"] = asm["_eraGc2gde"];
var _eraFaf03 = Module["_eraFaf03"] = asm["_eraFaf03"];
var _eraFalp03 = Module["_eraFalp03"] = asm["_eraFalp03"];
var _eraEors = Module["_eraEors"] = asm["_eraEors"];
var _eraTrxp = Module["_eraTrxp"] = asm["_eraTrxp"];
var _eraPom00 = Module["_eraPom00"] = asm["_eraPom00"];
var _eraC2t06a = Module["_eraC2t06a"] = asm["_eraC2t06a"];
var _eraNut00b = Module["_eraNut00b"] = asm["_eraNut00b"];
var _eraNut00a = Module["_eraNut00a"] = asm["_eraNut00a"];
var _eraRv2m = Module["_eraRv2m"] = asm["_eraRv2m"];
var _eraFapa03 = Module["_eraFapa03"] = asm["_eraFapa03"];
var _eraDtdb = Module["_eraDtdb"] = asm["_eraDtdb"];
var _eraPdp = Module["_eraPdp"] = asm["_eraPdp"];
var _eraTttdb = Module["_eraTttdb"] = asm["_eraTttdb"];
var _eraPnm06a = Module["_eraPnm06a"] = asm["_eraPnm06a"];
var _eraC2tcio = Module["_eraC2tcio"] = asm["_eraC2tcio"];
var _eraG2icrs = Module["_eraG2icrs"] = asm["_eraG2icrs"];
var _eraTrxpv = Module["_eraTrxpv"] = asm["_eraTrxpv"];
var _eraFal03 = Module["_eraFal03"] = asm["_eraFal03"];
var _eraSeps = Module["_eraSeps"] = asm["_eraSeps"];
var _eraBpn2xy = Module["_eraBpn2xy"] = asm["_eraBpn2xy"];
var _memset = Module["_memset"] = asm["_memset"];
var _eraZpv = Module["_eraZpv"] = asm["_eraZpv"];
var _eraPm = Module["_eraPm"] = asm["_eraPm"];
var _eraPvmpv = Module["_eraPvmpv"] = asm["_eraPvmpv"];
var _eraApcg = Module["_eraApcg"] = asm["_eraApcg"];
var _eraGd2gc = Module["_eraGd2gc"] = asm["_eraGd2gc"];
var _eraDtf2d = Module["_eraDtf2d"] = asm["_eraDtf2d"];
var _eraUtctai = Module["_eraUtctai"] = asm["_eraUtctai"];
var _eraApco = Module["_eraApco"] = asm["_eraApco"];
var _eraApci = Module["_eraApci"] = asm["_eraApci"];
var _eraC2ibpn = Module["_eraC2ibpn"] = asm["_eraC2ibpn"];
var _eraS2xpv = Module["_eraS2xpv"] = asm["_eraS2xpv"];
var _eraGd2gce = Module["_eraGd2gce"] = asm["_eraGd2gce"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _eraD2tf = Module["_eraD2tf"] = asm["_eraD2tf"];
var _eraNutm80 = Module["_eraNutm80"] = asm["_eraNutm80"];
var _eraGst00b = Module["_eraGst00b"] = asm["_eraGst00b"];
var _eraGst00a = Module["_eraGst00a"] = asm["_eraGst00a"];
var _eraBp06 = Module["_eraBp06"] = asm["_eraBp06"];
var _eraUt1tt = Module["_eraUt1tt"] = asm["_eraUt1tt"];
var _eraBp00 = Module["_eraBp00"] = asm["_eraBp00"];
var _eraSxp = Module["_eraSxp"] = asm["_eraSxp"];
var _eraUtcut1 = Module["_eraUtcut1"] = asm["_eraUtcut1"];
var _eraRxp = Module["_eraRxp"] = asm["_eraRxp"];
var _eraPmp = Module["_eraPmp"] = asm["_eraPmp"];
var _eraRxr = Module["_eraRxr"] = asm["_eraRxr"];
var _eraApio13 = Module["_eraApio13"] = asm["_eraApio13"];
var _eraC2ixy = Module["_eraC2ixy"] = asm["_eraC2ixy"];
var _eraP06e = Module["_eraP06e"] = asm["_eraP06e"];
var _eraPn00 = Module["_eraPn00"] = asm["_eraPn00"];
var _eraPnm00b = Module["_eraPnm00b"] = asm["_eraPnm00b"];
var _eraSp00 = Module["_eraSp00"] = asm["_eraSp00"];
var _eraTaitt = Module["_eraTaitt"] = asm["_eraTaitt"];
var _eraPn06 = Module["_eraPn06"] = asm["_eraPn06"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _eraXys00b = Module["_eraXys00b"] = asm["_eraXys00b"];
var _eraTr = Module["_eraTr"] = asm["_eraTr"];
var _eraTtut1 = Module["_eraTtut1"] = asm["_eraTtut1"];
var _eraApci13 = Module["_eraApci13"] = asm["_eraApci13"];
var _eraAticq = Module["_eraAticq"] = asm["_eraAticq"];
var _eraPv2s = Module["_eraPv2s"] = asm["_eraPv2s"];
var _eraPv2p = Module["_eraPv2p"] = asm["_eraPv2p"];
var _eraA2tf = Module["_eraA2tf"] = asm["_eraA2tf"];
var _eraAtoiq = Module["_eraAtoiq"] = asm["_eraAtoiq"];
var _eraS2p = Module["_eraS2p"] = asm["_eraS2p"];
var _eraJdcalf = Module["_eraJdcalf"] = asm["_eraJdcalf"];
var _eraUt1tai = Module["_eraUt1tai"] = asm["_eraUt1tai"];
var _eraEpj = Module["_eraEpj"] = asm["_eraEpj"];
var _eraTdbtt = Module["_eraTdbtt"] = asm["_eraTdbtt"];
var _eraPlan94 = Module["_eraPlan94"] = asm["_eraPlan94"];
var _eraXy06 = Module["_eraXy06"] = asm["_eraXy06"];
var _eraS2c = Module["_eraS2c"] = asm["_eraS2c"];
var _eraPn06a = Module["_eraPn06a"] = asm["_eraPn06a"];
var _eraC2t00a = Module["_eraC2t00a"] = asm["_eraC2t00a"];
var _eraGst94 = Module["_eraGst94"] = asm["_eraGst94"];
var _eraAtic13 = Module["_eraAtic13"] = asm["_eraAtic13"];
var _eraRxpv = Module["_eraRxpv"] = asm["_eraRxpv"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _eraFae03 = Module["_eraFae03"] = asm["_eraFae03"];
var _eraFasa03 = Module["_eraFasa03"] = asm["_eraFasa03"];
var _eraC2t00b = Module["_eraC2t00b"] = asm["_eraC2t00b"];
var _eraPfw06 = Module["_eraPfw06"] = asm["_eraPfw06"];
var _eraEe00 = Module["_eraEe00"] = asm["_eraEe00"];
var _eraEpb = Module["_eraEpb"] = asm["_eraEpb"];
var _eraAper = Module["_eraAper"] = asm["_eraAper"];
var _eraAb = Module["_eraAb"] = asm["_eraAb"];
var _eraPb06 = Module["_eraPb06"] = asm["_eraPb06"];
var _eraAnpm = Module["_eraAnpm"] = asm["_eraAnpm"];
var _eraTcbtdb = Module["_eraTcbtdb"] = asm["_eraTcbtdb"];
var _eraIr = Module["_eraIr"] = asm["_eraIr"];
var _eraC2teqx = Module["_eraC2teqx"] = asm["_eraC2teqx"];
var _eraAtci13 = Module["_eraAtci13"] = asm["_eraAtci13"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _eraEe06a = Module["_eraEe06a"] = asm["_eraEe06a"];
var _eraNumat = Module["_eraNumat"] = asm["_eraNumat"];
var _eraJd2cal = Module["_eraJd2cal"] = asm["_eraJd2cal"];
var _eraTttcg = Module["_eraTttcg"] = asm["_eraTttcg"];
var _eraPnm80 = Module["_eraPnm80"] = asm["_eraPnm80"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _eraBi00 = Module["_eraBi00"] = asm["_eraBi00"];
var _eraTcgtt = Module["_eraTcgtt"] = asm["_eraTcgtt"];
var _eraGst06a = Module["_eraGst06a"] = asm["_eraGst06a"];
var _eraLd = Module["_eraLd"] = asm["_eraLd"];
var _eraFane03 = Module["_eraFane03"] = asm["_eraFane03"];
var _eraRx = Module["_eraRx"] = asm["_eraRx"];
var _eraD2dtf = Module["_eraD2dtf"] = asm["_eraD2dtf"];
var _eraGc2gd = Module["_eraGc2gd"] = asm["_eraGc2gd"];
var _eraApio = Module["_eraApio"] = asm["_eraApio"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _eraSepp = Module["_eraSepp"] = asm["_eraSepp"];
var _eraAtco13 = Module["_eraAtco13"] = asm["_eraAtco13"];
var _eraStarpm = Module["_eraStarpm"] = asm["_eraStarpm"];
var _eraPrec76 = Module["_eraPrec76"] = asm["_eraPrec76"];
var _eraPmpx = Module["_eraPmpx"] = asm["_eraPmpx"];
var _eraAtio13 = Module["_eraAtio13"] = asm["_eraAtio13"];
var _eraPnm00a = Module["_eraPnm00a"] = asm["_eraPnm00a"];
var _eraLdn = Module["_eraLdn"] = asm["_eraLdn"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _eraEqeq94 = Module["_eraEqeq94"] = asm["_eraEqeq94"];
var _eraH2fk5 = Module["_eraH2fk5"] = asm["_eraH2fk5"];
var _eraFw2m = Module["_eraFw2m"] = asm["_eraFw2m"];
var _eraSxpv = Module["_eraSxpv"] = asm["_eraSxpv"];
var _eraNum06a = Module["_eraNum06a"] = asm["_eraNum06a"];
var _eraPvstar = Module["_eraPvstar"] = asm["_eraPvstar"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===


function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = Runtime.stackSave();

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      Runtime.stackRestore(initialStackTop);
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



